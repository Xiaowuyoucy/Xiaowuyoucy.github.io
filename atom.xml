<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-05-13T18:18:24.678Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>C语言函数指针的锦囊妙计</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/14/cpp0059-C%E8%AF%AD%E8%A8%80%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E9%94%A6%E5%9B%8A%E5%A6%99%E8%AE%A1/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/14/cpp0059-C语言函数指针的锦囊妙计/</id>
    <published>2021-05-13T18:17:04.000Z</published>
    <updated>2021-05-13T18:18:24.678Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c语言函数指针的锦囊妙计"><a class="markdownIt-Anchor" href="#c语言函数指针的锦囊妙计"></a> C语言函数指针的锦囊妙计</h1><p><img src="/images/javawz/1620929868031.png" alt="1620929868031"></p><p><img src="/images/javawz/1620929880137.png" alt="1620929880137"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 定义一个锦囊的方法 是一个函数指针，类似于c++的纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(TIPS_FUNC)</span><span class="params">(<span class="keyword">void</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个锦囊的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> from[<span class="number">64</span>]; <span class="comment">//这个锦囊是谁写的</span></span><br><span class="line"><span class="keyword">char</span> to[<span class="number">64</span>]; <span class="comment">//写给谁的</span></span><br><span class="line">TIPS_FUNC *fp; <span class="comment">//具体锦囊的内容</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//写一个供赵云调用的架构函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">open_tips</span><span class="params">(struct tips * tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"打开了锦囊"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"此锦囊是由"</span> &lt;&lt; tp-&gt;from &lt;&lt; <span class="string">", 写给"</span> &lt;&lt; tp-&gt;to &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"内容是"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">tp-&gt;fp();<span class="comment">//拆开锦囊，调用具体锦囊的方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个一个的锦囊  //类似于实现一个纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tips_1</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"一到东吴就大张旗鼓找乔国老"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tips_2</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"骗刘备 操作压境"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tips_3</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"找孙尚香求救"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">tips_4</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"你们就死在东吴把"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">struct tips* <span class="title">create_tips</span><span class="params">(<span class="keyword">char</span> *from, <span class="keyword">char</span> *to, TIPS_FUNC *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span> *<span class="title">tp</span> = (<span class="title">struct</span> <span class="title">tips</span>*)<span class="title">malloc</span>(<span class="title">sizeof</span>(<span class="title">struct</span> <span class="title">tips</span>));</span></span><br><span class="line"><span class="keyword">if</span> (tp == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">strcpy</span>(tp-&gt;from, from);</span><br><span class="line"><span class="built_in">strcpy</span>(tp-&gt;to, to);</span><br><span class="line"><span class="comment">//注册回调函数</span></span><br><span class="line">tp-&gt;fp = fp; <span class="comment">//给拥有函数指针的结构体  函数指针变量 赋值 就是 注册回调函数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> tp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">destory_tips</span><span class="params">(struct tips * tp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (tp != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="built_in">free</span>(tp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//诸葛亮去写锦囊</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span> * <span class="title">tp1</span> = <span class="title">create_tips</span>("孔明", "赵云", <span class="title">tips_1</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span> * <span class="title">tp2</span> = <span class="title">create_tips</span>("孔明", "赵云", <span class="title">tips_2</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span> * <span class="title">tp3</span> = <span class="title">create_tips</span>("孔明", "赵云", <span class="title">tips_3</span>);</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">tips</span> *<span class="title">tp4</span>= <span class="title">create_tips</span>("庞统", "赵云", <span class="title">tips_4</span>);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 赵云去拆机囊</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"刚来到 东吴境内 ，打开了第一个锦囊"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">open_tips(tp1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"刘备乐不思蜀 ，打开第二个锦囊 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">open_tips(tp2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"孙权追杀刘备, 打开第三个锦囊"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">open_tips(tp3);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"赵云发现  抵挡不住 军队，想到了庞统的最后一个锦囊 打开了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">open_tips(tp4);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">destory_tips(tp1);</span><br><span class="line">destory_tips(tp2);</span><br><span class="line">destory_tips(tp3);</span><br><span class="line">destory_tips(tp4);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;c语言函数指针的锦囊妙计&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c语言函数指针的锦囊妙计&quot;&gt;&lt;/a&gt; C语言函数指针的锦囊妙计&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620929868031.png
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数指针的语法和意义</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/14/cpp0058-%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88%E7%9A%84%E8%AF%AD%E6%B3%95%E5%92%8C%E6%84%8F%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/14/cpp0058-函数指针的语法和意义/</id>
    <published>2021-05-13T17:50:06.000Z</published>
    <updated>2021-05-13T17:52:36.849Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/1620928259433.png" alt="1620928259433"></p><p><img src="/images/javawz/1620928267520.png" alt="1620928267520"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func 111 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个函数指针</span></span><br><span class="line"><span class="comment">// C语言中 决定一个函数类型</span></span><br><span class="line"><span class="comment">// 返回值 参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(FUNC)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义一个函数类型</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*FUNC_POINTER)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义一个函数指针类型</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如何将一个函数指针当成一个函数参数呢？</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_function</span><span class="params">(FUNC *fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fp(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_function2</span><span class="params">(FUNC_POINTER fp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">fp(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//他是一个架构函数。 </span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">my_function3</span><span class="params">(<span class="keyword">int</span>(*fp)(<span class="keyword">int</span>, <span class="keyword">int</span>))</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"1999 年写的架构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"固定业务1"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">fp(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"固定业务2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//2015 实现一个子函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_new_function</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"2015年实现的新业务"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">FUNC * p = func;</span><br><span class="line">FUNC_POINTER p2 = func;</span><br><span class="line"><span class="keyword">int</span>(*fp)(<span class="keyword">int</span>, <span class="keyword">int</span>) = func;</span><br><span class="line"></span><br><span class="line">p(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">(*p)(<span class="number">10</span>, <span class="number">20</span>); <span class="comment">//以上两种写法等价</span></span><br><span class="line"></span><br><span class="line">p2(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">(*p2)(<span class="number">20</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">fp(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" --------  "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2015   实现一个子函数，再调用1999的架构</span></span><br><span class="line">my_function3(my_new_function);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/1620928259433.png&quot; alt=&quot;1620928259433&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620928267520.png&quot; alt=&quot;1620928267520&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>利用抽象类实现电脑组装案例</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0057-%E5%88%A9%E7%94%A8%E6%8A%BD%E8%B1%A1%E7%B1%BB%E5%AE%9E%E7%8E%B0%E7%94%B5%E8%84%91%E7%BB%84%E8%A3%85%E6%A1%88%E4%BE%8B/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0057-利用抽象类实现电脑组装案例/</id>
    <published>2021-05-13T15:44:59.000Z</published>
    <updated>2021-05-13T15:54:19.815Z</updated>
    
    <content type="html"><![CDATA[<h1 id="利用抽象类实现电脑组装案例"><a class="markdownIt-Anchor" href="#利用抽象类实现电脑组装案例"></a> 利用抽象类实现电脑组装案例</h1><p><img src="/images/javawz/1620921234240.png" alt="1620921234240"></p><h3 id="面向抽象类编程"><a class="markdownIt-Anchor" href="#面向抽象类编程"></a> 面向抽象类编程</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===========start抽象层============*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CPU抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CPU</span>  &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//显卡抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Card</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//内存条抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Memory</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Computer(CPU *tcpu1, Card * tcard, Memory * tmemory) :cpu1(tcpu1), card(tcard), memory(tmemory) &#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">cpu1-&gt;caculate();</span><br><span class="line">card-&gt;display();</span><br><span class="line">memory-&gt;storage();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">CPU *cpu1;</span><br><span class="line">Card * card;</span><br><span class="line">Memory * memory;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*===========end抽象层============*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*===========start实现层============*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//Intel</span></span><br><span class="line"><span class="comment">//IntelCPU</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCpu</span> :</span><span class="keyword">public</span> CPU &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">caculate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IntelCPU"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Intel显卡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelCard</span> :</span> <span class="keyword">public</span> Card &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IntelCard"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Intel内存条</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">IntelMemory</span> :</span><span class="keyword">public</span> Memory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"IntelMemory"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//NIVDE显卡</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NVIDIACard</span> :</span> <span class="keyword">public</span> Card &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NVIDIACard"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//Kingston内存条</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">KingstonMemory</span> :</span><span class="keyword">public</span> Memory &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">storage</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"KingstonMemory"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*===========end实现层============*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*===========业务逻辑层============*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//组装一台纯Intel的电脑</span></span><br><span class="line"><span class="function">Computer <span class="title">p1</span><span class="params">(<span class="keyword">new</span> IntelCpu,<span class="keyword">new</span> IntelCard,<span class="keyword">new</span> IntelMemory)</span></span>;</span><br><span class="line">p1.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//组装一台IntelCpu,NVIDIACard,KingstonMemory的电脑</span></span><br><span class="line"><span class="function">Computer <span class="title">p2</span><span class="params">(<span class="keyword">new</span> IntelCpu, <span class="keyword">new</span> NVIDIACard, <span class="keyword">new</span> KingstonMemory)</span></span>;</span><br><span class="line">p2.print();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;利用抽象类实现电脑组装案例&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#利用抽象类实现电脑组装案例&quot;&gt;&lt;/a&gt; 利用抽象类实现电脑组装案例&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620921234240.
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>纯虚函数和抽象类</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0056-%E7%BA%AF%E8%99%9A%E5%87%BD%E6%95%B0%E5%92%8C%E6%8A%BD%E8%B1%A1%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0056-纯虚函数和抽象类/</id>
    <published>2021-05-12T23:33:38.000Z</published>
    <updated>2021-05-12T23:50:18.483Z</updated>
    
    <content type="html"><![CDATA[<h1 id="纯虚函数和抽象类"><a class="markdownIt-Anchor" href="#纯虚函数和抽象类"></a> 纯虚函数和抽象类</h1><p><img src="/images/javawz/1620863272021.png" alt="1620863272021"></p><p><img src="/images/javawz/1620863367789.png" alt="1620863367789"></p><p><img src="/images/javawz/1620863228601.png" alt="1620863228601"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//图形类</span></span><br><span class="line"><span class="comment">//拥有纯虚函数的类， 就叫抽象类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Shape</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//是一个抽象的接口，说明图形是有一个得到面积方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span>= <span class="number">0</span>;<span class="comment">//代表一个接口，一个求图形面积的接口</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个个打印面积的接口</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//圆类</span></span><br><span class="line"><span class="comment">//如果 一个子类继承了抽象类， 那么一定要重写这个纯虚函数。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Circle(<span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;r = r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写父类抽象类的纯虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span> </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">3.14</span> *  r * r;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"圆的面积是"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> r;<span class="comment">//半径</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//实现一个正方形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Rect</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Rect(<span class="keyword">double</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//是一个抽象的接口，说明图形是有一个得到面积方法</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a*a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//顶一个打印面积的接口</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"正方形的面积是"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> a;<span class="comment">//边长</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三角形</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Tri</span> :</span><span class="keyword">public</span> Shape</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Tri(<span class="keyword">double</span> a, <span class="keyword">double</span> h)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;h = h;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span>  <span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0.5</span> * h * a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span>  </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"三角形的面积是"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> a;<span class="comment">//底</span></span><br><span class="line"><span class="keyword">double</span> h;<span class="comment">//高</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//一个传递抽象类 指针的架构函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printArea</span><span class="params">(Shape *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务层</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//Shape p;//抽象类不能够实例化</span></span><br><span class="line"></span><br><span class="line">Shape *sp = <span class="keyword">new</span> Circle(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//抽象类的指针就可以调用纯虚函数， 接口</span></span><br><span class="line"><span class="comment">//sp-&gt;getArea();//在此处就发生了多态</span></span><br><span class="line"><span class="comment">//cout &lt;&lt; sp-&gt;getArea() &lt;&lt; endl;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">//delete sp;</span></span><br><span class="line"></span><br><span class="line">printArea(sp);</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> sp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个正方形的对象。用抽象类指针（父类指针）指向子类对象</span></span><br><span class="line">sp = <span class="keyword">new</span> Rect(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line">printArea(sp);</span><br><span class="line"><span class="keyword">delete</span> sp;</span><br><span class="line"></span><br><span class="line"><span class="comment">//业务层 根本就不关心 具体对象怎么实现的， 只用抽象类的指针就可以。</span></span><br><span class="line">Shape *sp2 = <span class="keyword">new</span> Tri(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">sp2-&gt;print();</span><br><span class="line"><span class="keyword">delete</span> sp2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" ------   "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;纯虚函数和抽象类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#纯虚函数和抽象类&quot;&gt;&lt;/a&gt; 纯虚函数和抽象类&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620863272021.png&quot; alt=&quot;16208
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>父类指针和子类指针的步长</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0055-%E7%88%B6%E7%B1%BB%E6%8C%87%E9%92%88%E5%92%8C%E5%AD%90%E7%B1%BB%E6%8C%87%E9%92%88%E7%9A%84%E6%AD%A5%E9%95%BF/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0055-父类指针和子类指针的步长/</id>
    <published>2021-05-12T22:31:49.000Z</published>
    <updated>2021-05-12T22:59:07.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="父类指针和子类指针的步长"><a class="markdownIt-Anchor" href="#父类指针和子类指针的步长"></a> 父类指针和子类指针的步长</h1><p><img src="/images/javawz/1620858785306.png" alt="1620858785306"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Parent(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent::print() "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Child(<span class="keyword">int</span> a) :Parent(a)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Child :: Print() "</span> &lt;&lt; a &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Child <span class="built_in">array</span>[] = &#123;Child(<span class="number">0</span>), Child(<span class="number">1</span>), Child(<span class="number">2</span>) &#125;;</span><br><span class="line"><span class="comment">//array[0]   array[1] array[2]</span></span><br><span class="line"></span><br><span class="line">Child *cp = &amp;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line">Parent *pp = &amp;<span class="built_in">array</span>[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cp-&gt;print(); <span class="comment">//Child::</span></span><br><span class="line">pp-&gt;print(); <span class="comment">//Child::发生多态</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">cp++; <span class="comment">//Child::12</span></span><br><span class="line"><span class="comment">//pp++;//8</span></span><br><span class="line">pp = cp;</span><br><span class="line"></span><br><span class="line">cp-&gt;print();</span><br><span class="line">pp-&gt;print();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" -----  "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>, cp = &amp;<span class="built_in">array</span>[<span class="number">0</span>], pp = cp; i &lt; <span class="number">3</span>; i++, cp++, pp =cp) &#123;</span><br><span class="line">pp-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fu</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Fu();</span><br><span class="line">Fu(<span class="keyword">int</span> ta): a(ta) &#123;&#125;;</span><br><span class="line">~Fu();</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Fu a = "</span>&lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Zi</span> :</span> <span class="keyword">public</span> Fu</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Zi();</span><br><span class="line">Zi(<span class="keyword">int</span> a, <span class="keyword">int</span> tb) :Fu(a) ,b(tb)&#123;&#125;;</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; <span class="string">"Zi b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>; &#125;</span><br><span class="line">~Zi();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Zi::Zi()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Zi::~Zi()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fu::Fu()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Fu::~Fu()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Zi zi[] = &#123; Zi(<span class="number">100</span>,<span class="number">200</span>),Zi(<span class="number">300</span>,<span class="number">400</span>),Zi(<span class="number">500</span>,<span class="number">600</span>) &#125;;</span><br><span class="line"></span><br><span class="line">Fu * pFu = zi;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">会崩溃,因为(pFu + i) == (pFu + sizeof Fu) 而不是(pFu + sizeof Zi)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">for (int i = 0; i &lt; 3; i++)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">(pFu + i)-&gt;print();</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//解决方法</span></span><br><span class="line">Zi * zi1[] = &#123; <span class="keyword">new</span> Zi(<span class="number">1</span>,<span class="number">2</span>),<span class="keyword">new</span> Zi(<span class="number">3</span>,<span class="number">4</span>), <span class="keyword">new</span> Zi(<span class="number">5</span>,<span class="number">6</span>), <span class="keyword">new</span> Zi(<span class="number">7</span>,<span class="number">8</span>) &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="keyword">sizeof</span>(zi1) / <span class="keyword">sizeof</span>(Zi *); i++)</span><br><span class="line">&#123;</span><br><span class="line">pFu = zi1[i];</span><br><span class="line">pFu-&gt;print();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;父类指针和子类指针的步长&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#父类指针和子类指针的步长&quot;&gt;&lt;/a&gt; 父类指针和子类指针的步长&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620858785306.png
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>vptr指针的分布初始化</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0054-vptr%E6%8C%87%E9%92%88%E7%9A%84%E5%88%86%E5%B8%83%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0054-vptr指针的分布初始化/</id>
    <published>2021-05-12T22:27:20.000Z</published>
    <updated>2021-05-12T22:31:03.955Z</updated>
    
    <content type="html"><![CDATA[<h1 id="vptr指针的分布初始化"><a class="markdownIt-Anchor" href="#vptr指针的分布初始化"></a> vptr指针的分布初始化</h1><p><img src="/images/javawz/1620858549708.png" alt="1620858549708"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不要在构造函数中去调用成员函数。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Parent(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent(int a)...."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">print(); <span class="comment">//这个print打印的是 Parent 还是 Child的？</span></span><br><span class="line">        <span class="comment">//调用的是父类的</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent::print():  "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span> <span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Child(<span class="keyword">int</span> a, <span class="keyword">int</span> b) :Parent(a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//vptr指针就执行的子类的虚函数表</span></span><br><span class="line">print(); <span class="comment">//执行的child ？ 还是 parent?</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//再此处之前， 是构造父类的内存空间  此时child还有没构造完毕，vptr指针此时指向的是父类的虚函数表</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Child() ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写了父类的虚函数</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Child::print()  "</span>&lt;&lt; <span class="string">" , "</span> &lt;&lt;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Parent *p = <span class="keyword">new</span> Child(<span class="number">10</span>, <span class="number">20</span>);<span class="comment">//在此调用Child 的构造函数</span></span><br><span class="line">p-&gt;print(); <span class="comment">//此时发生了多态</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> p;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;vptr指针的分布初始化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#vptr指针的分布初始化&quot;&gt;&lt;/a&gt; vptr指针的分布初始化&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620858549708.png
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>验证vptr指针的存在</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0053-%E9%AA%8C%E8%AF%81vptr%E6%8C%87%E9%92%88%E7%9A%84%E5%AD%98%E5%9C%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0053-验证vptr指针的存在/</id>
    <published>2021-05-12T22:24:38.000Z</published>
    <updated>2021-05-12T22:27:46.227Z</updated>
    
    <content type="html"><![CDATA[<h1 id="验证vptr指针的存在"><a class="markdownIt-Anchor" href="#验证vptr指针的存在"></a> 验证vptr指针的存在</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent func "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent2</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent2 func "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Parent p1;</span><br><span class="line">Parent2 p2;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(p1)"</span> &lt;&lt; <span class="keyword">sizeof</span>(p1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(p2)"</span> &lt;&lt; <span class="keyword">sizeof</span>(p2) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//p2多出来的4个字节就是存放vptr指针的空间大小</span></span><br><span class="line"><span class="comment">//vptr指针我们访问不了，vptr指针指向的是Parent2类的虚函数表</span></span><br><span class="line"><span class="comment">//此表中目前有一个 虚函数 func(inta, intb)的入口地址。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;验证vptr指针的存在&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#验证vptr指针的存在&quot;&gt;&lt;/a&gt; 验证vptr指针的存在&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>多态的原理</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0052-%E5%A4%9A%E6%80%81%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0052-多态的原理/</id>
    <published>2021-05-12T22:15:59.000Z</published>
    <updated>2021-05-12T22:21:59.804Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多态的原理"><a class="markdownIt-Anchor" href="#多态的原理"></a> 多态的原理</h1><p><img src="/images/javawz/1620857806688.png" alt="1620857806688"></p><p><img src="/images/javawz/1620857813598.png" alt="1620857813598"></p><p><img src="/images/javawz/1620857825265.png" alt="1620857825265"></p><p><img src="/images/javawz/1620857858870.png" alt="1620857858870"></p><p><img src="/images/javawz/1620857876671.png" alt="1620857876671"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多态的原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多态的原理&quot;&gt;&lt;/a&gt; 多态的原理&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620857806688.png&quot; alt=&quot;1620857806688&quot;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>重载重写重定义</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0051-%E9%87%8D%E8%BD%BD%E9%87%8D%E5%86%99%E9%87%8D%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0051-重载重写重定义/</id>
    <published>2021-05-12T19:05:42.000Z</published>
    <updated>2021-05-12T19:06:32.029Z</updated>
    
    <content type="html"><![CDATA[<h1 id="重载重写重定义"><a class="markdownIt-Anchor" href="#重载重写重定义"></a> 重载重写重定义</h1><p><img src="/images/javawz/1620846366366.png" alt="1620846366366"></p><p><img src="/images/javawz/1620846376910.png" alt="1620846376910"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;重载重写重定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重载重写重定义&quot;&gt;&lt;/a&gt; 重载重写重定义&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620846366366.png&quot; alt=&quot;16208463
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>虚析构函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0050-%E8%99%9A%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0050-虚析构函数/</id>
    <published>2021-05-12T18:49:15.000Z</published>
    <updated>2021-05-12T18:59:02.776Z</updated>
    
    <content type="html"><![CDATA[<h1 id="虚析构函数"><a class="markdownIt-Anchor" href="#虚析构函数"></a> 虚析构函数</h1><p><img src="/images/javawz/1620845408803.png" alt="1620845408803"></p><h3 id="通过父类指针将所有子类对象析构掉需要用到虚析构函数"><a class="markdownIt-Anchor" href="#通过父类指针将所有子类对象析构掉需要用到虚析构函数"></a> 通过父类指针将所有子类对象析构掉,需要用到虚析构函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A() ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>]; <span class="comment">//给p开辟了一个空间</span></span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">"A string "</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span> ~A()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~A()...."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p; </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"B()..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">"B string"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//重写</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span>  ~B()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~B()...."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span> :</span> <span class="keyword">public</span> B</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"C()..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;p = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="number">64</span>];</span><br><span class="line"><span class="built_in">memset</span>(p, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(p, <span class="string">"C string"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">virtual</span>  ~C()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~C()...."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (p != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] p;</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(A *p)</span><span class="comment">//p = cp;  p = &amp;c //用父类指针指向子类对象。</span></span></span><br><span class="line"><span class="function"></span>&#123; </span><br><span class="line">p-&gt;print(); <span class="comment">//在此处发生多态。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//delete p; //delete 一个父类指针   如何让delete p不是将p看做父类指针来delete 而是当子类呢</span></span><br><span class="line"><span class="comment">//如果类的析构函数加上了 virtual delete 就会发生多态。 delelte p 会调用C类的析构函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">myDelete</span><span class="params">(A*p)</span> <span class="comment">//p-&gt;cp   父类指针指向子类对象</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">delete</span> p; <span class="comment">//p-&gt;~()  //如果~（） 不加virtual关键 不会发生多态。</span></span><br><span class="line"><span class="comment">//希望delete p， p-&gt;~() 调用C类的~（）</span></span><br><span class="line"><span class="comment">// 如果给 所有的类的析构函数加上virtual关键字  就会发生多态。</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C c;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">C *cp = new C;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">cp-&gt;print();//cp的函数</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">delete cp;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" -----  "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">C * cp1 = <span class="keyword">new</span> C; <span class="comment">//发生3此构造 A() B（） C()</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//test();</span></span><br><span class="line">func(cp1);</span><br><span class="line">myDelete(cp1); </span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;虚析构函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#虚析构函数&quot;&gt;&lt;/a&gt; 虚析构函数&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620845408803.png&quot; alt=&quot;1620845408803&quot;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>动态联编和静态联编</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0049-%E5%8A%A8%E6%80%81%E8%81%94%E7%BC%96%E5%92%8C%E9%9D%99%E6%80%81%E8%81%94%E7%BC%96/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0049-动态联编和静态联编/</id>
    <published>2021-05-12T18:27:48.000Z</published>
    <updated>2021-05-12T18:29:58.841Z</updated>
    
    <content type="html"><![CDATA[<h1 id="动态联编和静态联编"><a class="markdownIt-Anchor" href="#动态联编和静态联编"></a> 动态联编和静态联编</h1><p><img src="/images/javawz/1620844095321.png" alt="1620844095321"></p><p><img src="/images/javawz/1620844190008.png" alt="1620844190008"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;动态联编和静态联编&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#动态联编和静态联编&quot;&gt;&lt;/a&gt; 动态联编和静态联编&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620844095321.png&quot; alt=&quot;16
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>多态的定义和多态的三个必要条件</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0048-%E5%A4%9A%E6%80%81%E7%9A%84%E5%AE%9A%E4%B9%89%E5%92%8C%E5%A4%9A%E6%80%81%E7%9A%84%E4%B8%89%E4%B8%AA%E5%BF%85%E8%A6%81%E6%9D%A1%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0048-多态的定义和多态的三个必要条件/</id>
    <published>2021-05-12T18:11:02.000Z</published>
    <updated>2021-05-12T18:28:32.249Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多态的定义和多态的三个必要条件"><a class="markdownIt-Anchor" href="#多态的定义和多态的三个必要条件"></a> 多态的定义和多态的三个必要条件</h1><p><img src="/images/javawz/1620843121025.png" alt="1620843121025"></p><p><img src="/images/javawz/1620843156924.png" alt="1620843156924"></p><p><img src="/images/javawz/1620843238613.png" alt="1620843238613"></p><p><img src="/images/javawz/1620843246344.png" alt="1620843246344"></p><p><img src="/images/javawz/1620843281030.png" alt="1620843281030"></p><h3 id="多态发生的三个必要条件"><a class="markdownIt-Anchor" href="#多态发生的三个必要条件"></a> 多态发生的三个必要条件</h3><p>要有继承。<br>要有子类重写父类的虚函数<br>父类指针(或者引用) 指向子类对象。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Hero</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//当前Hero的战斗力是10</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//超级英雄</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SuperHero</span> :</span><span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BugHero</span> :</span> <span class="keyword">public</span> Hero</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">virtual</span> <span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">10000</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//怪兽</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Monster</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getAd</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//战斗的函数</span></span><br><span class="line"><span class="comment">//先写的 战斗函数， 通过用父类的指针作为参数</span></span><br><span class="line"><span class="comment">//多态具有调用未来的 意义。</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">PlayerFight</span><span class="params">(Hero *hero, Monster *m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//多态这种现象较 动态联编 是迟绑定 或是 晚绑定</span></span><br><span class="line"><span class="keyword">if</span> (hero-&gt;getAd() &gt; m-&gt;getAd()) &#123; <span class="comment">//在此hero-&gt;getAd()就发生了多态</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"英雄战胜了 叫兽"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"英雄挂了。"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Hero hero1;</span><br><span class="line">Monster mon1;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后写的超级英雄</span></span><br><span class="line">SuperHero hero2;</span><br><span class="line"></span><br><span class="line">BugHero hero3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//开始战斗</span></span><br><span class="line">PlayerFight(&amp;hero1, &amp;mon1);</span><br><span class="line"></span><br><span class="line">PlayerFight(&amp;hero2, &amp;mon1); <span class="comment">//Hero *hero = &amp;hero2;</span></span><br><span class="line"></span><br><span class="line">PlayerFight(&amp;hero3, &amp;mon1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针的三个必要条件</span></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span>*p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">p = &amp;a;</span><br><span class="line"></span><br><span class="line">*p;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//多态发生的三个必要条件</span></span><br><span class="line"><span class="comment">//1 要有继承。</span></span><br><span class="line"><span class="comment">//2 要有子类重写父类的虚函数</span></span><br><span class="line"><span class="comment">//3  父类指针(或者引用) 指向子类对象。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = 10;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//func(a); //</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (a &gt; <span class="number">10</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a 不大于10"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">void func(int a);</span></span><br><span class="line"><span class="comment">void func(int a, int b);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多态的定义和多态的三个必要条件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多态的定义和多态的三个必要条件&quot;&gt;&lt;/a&gt; 多态的定义和多态的三个必要条件&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/16208431
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>多继承与虚继承</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0047-%E5%A4%9A%E7%BB%A7%E6%89%BF%E4%B8%8E%E8%99%9A%E7%BB%A7%E6%89%BF/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0047-多继承与虚继承/</id>
    <published>2021-05-12T17:40:38.000Z</published>
    <updated>2021-05-12T17:47:19.273Z</updated>
    
    <content type="html"><![CDATA[<h1 id="多继承与虚继承"><a class="markdownIt-Anchor" href="#多继承与虚继承"></a> 多继承与虚继承</h1><h3 id="多继承"><a class="markdownIt-Anchor" href="#多继承"></a> 多继承</h3><p>俗话讲的,鱼与熊掌不可兼得,而在计算机就可以实现,生成一种新的对象,<br>叫熊掌鱼,多继承自鱼和熊掌即可。还比如生活中,“兼”。</p><p><img src="/images/javawz/1620841315510.png" alt="1620841315510"></p><h4 id="一个类有多个直接基类的继承关系称为多继承"><a class="markdownIt-Anchor" href="#一个类有多个直接基类的继承关系称为多继承"></a> 一个类有多个直接基类的继承关系称为多继承</h4><p><img src="/images/javawz/1620841334608.png" alt="1620841334608"></p><h4 id="沙发床实现"><a class="markdownIt-Anchor" href="#沙发床实现"></a> 沙发床实现</h4><p><img src="/images/javawz/1620841356908.png" alt="1620841356908"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//家具类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Furniture</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">int</span> m; <span class="comment">//材质  </span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//如果子类虚继承本来， 编译器会将父类中的成员， 只拷贝一份。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//床类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bed</span>:</span> <span class="keyword">virtual</span>  <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在床上睡觉"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//沙发类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Sofa</span> :</span><span class="keyword">virtual</span> <span class="keyword">public</span> Furniture</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sit</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"在沙发上睡觉"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//沙发床</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SofaBed</span> :</span><span class="keyword">public</span> Bed, <span class="keyword">public</span> Sofa</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sitAndSleep</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">sit();<span class="comment">//sofa</span></span><br><span class="line">sleep();<span class="comment">//bed</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Bed b;</span><br><span class="line">b.sleep();</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"  ---- "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Sofa s; <span class="comment">//m </span></span><br><span class="line">s.m = <span class="number">100</span>;</span><br><span class="line">s.sit();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"------- "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">SofaBed sb;</span><br><span class="line">sb.sitAndSleep();</span><br><span class="line"></span><br><span class="line">sb.m; <span class="comment">//多继承如果 </span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="虚继承"><a class="markdownIt-Anchor" href="#虚继承"></a> 虚继承</h3><p>如果一个派生类从多个基类派生，而这些基类又有一个共同的基类，则<br>在对该基类中声明的名字进行访问时，可能产生二义性</p><p><img src="/images/javawz/1620841441584.png" alt="1620841441584"></p><p><img src="/images/javawz/1620841525168.png" alt="1620841525168"></p><p><img src="/images/javawz/1620841541994.png" alt="1620841541994"></p><p><img src="/images/javawz/1620841576400.png" alt="1620841576400"></p><p><img src="/images/javawz/1620841589330.png" alt="1620841589330"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;多继承与虚继承&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多继承与虚继承&quot;&gt;&lt;/a&gt; 多继承与虚继承&lt;/h1&gt;
&lt;h3 id=&quot;多继承&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多继承&quot;&gt;&lt;/a&gt; 多
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>继承中的static</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0047-%E7%BB%A7%E6%89%BF%E4%B8%AD%E7%9A%84static/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0047-继承中的static/</id>
    <published>2021-05-12T17:15:14.000Z</published>
    <updated>2021-05-12T18:28:44.204Z</updated>
    
    <content type="html"><![CDATA[<h1 id="继承中的static"><a class="markdownIt-Anchor" href="#继承中的static"></a> 继承中的static</h1><p><img src="/images/javawz/1620839824421.png" alt="1620839824421"></p><p><img src="/images/javawz/1620839885212.png" alt="1620839885212"></p><p><img src="/images/javawz/1620839891459.png" alt="1620839891459"></p><p><img src="/images/javawz/1620840002589.png" alt="1620840002589"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> s;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> A::s = <span class="number">0</span>;<span class="comment">//静态成员变量要在类的外部初始化</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span><span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">B b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">b.s = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A::s &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;继承中的static&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#继承中的static&quot;&gt;&lt;/a&gt; 继承中的static&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620839824421.png&quot; alt=
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>父类和子类出现重名变量</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0046-%E7%88%B6%E7%B1%BB%E5%92%8C%E5%AD%90%E7%B1%BB%E5%87%BA%E7%8E%B0%E9%87%8D%E5%90%8D%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0046-父类和子类出现重名变量/</id>
    <published>2021-05-12T17:04:05.000Z</published>
    <updated>2021-05-12T17:08:32.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="父类和子类出现重名变量"><a class="markdownIt-Anchor" href="#父类和子类出现重名变量"></a> 父类和子类出现重名变量</h1><p><img src="/images/javawz/1620839080609.png" alt="1620839080609"></p><p><img src="/images/javawz/1620839161158.png" alt="1620839161158"></p><p><img src="/images/javawz/1620839167367.png" alt="1620839167367"></p><p><img src="/images/javawz/1620839206345.png" alt="1620839206345"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Parent(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span> :</span><br><span class="line">Child(<span class="keyword">int</span> a, <span class="keyword">int</span> aa) : Parent(aa)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a; <span class="comment">//让Child 的a  = a， 让父亲的a = aa</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//默认是使用 当前类的重名的变量</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent::a = "</span> &lt;&lt; Parent::a &lt;&lt; <span class="built_in">endl</span>;  <span class="comment">//如果想访问父类中的重名变量 需要加上父类的作用域</span></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  a ---&gt; Paretn::a</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Child <span class="title">c</span><span class="params">(<span class="number">10</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">c.print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;父类和子类出现重名变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#父类和子类出现重名变量&quot;&gt;&lt;/a&gt; 父类和子类出现重名变量&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620839080609.png&quot; a
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>子类中的构造和析构</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0045-%E5%AD%90%E7%B1%BB%E4%B8%AD%E7%9A%84%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0045-子类中的构造和析构/</id>
    <published>2021-05-12T16:56:24.000Z</published>
    <updated>2021-05-12T16:58:58.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="子类中的构造和析构"><a class="markdownIt-Anchor" href="#子类中的构造和析构"></a> 子类中的构造和析构</h1><p><img src="/images/javawz/1620838602286.png" alt="1620838602286"></p><p><img src="/images/javawz/1620838656750.png" alt="1620838656750"></p><p><img src="/images/javawz/1620838667523.png" alt="1620838667523"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//子类在进行初始化成员变量的时候， 如果此成员变量是继承过来的， 那么需要调用父类的构造器来初始化。</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Parent(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent(int a) ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Parent()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Parent()..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//子类继承于父类， 父类中的成员变量 应该用 父类的构造函数来初始化</span></span><br><span class="line">Son(<span class="keyword">int</span> a, <span class="keyword">int</span> b) : Parent(a)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Son(int a, int b) ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">~Son()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//Parent p = Parent(b);//是一个新的parent对象。</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Son() ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">pirntAB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Parent::printA();</span><br><span class="line"><span class="keyword">this</span>-&gt;printB();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">char</span> *name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Parent <span class="title">p</span><span class="params">(<span class="number">30</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Son <span class="title">s</span><span class="params">(<span class="number">20</span>, <span class="number">20</span>)</span></span>; <span class="comment">// p + s独有</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s.pirntAB();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;子类中的构造和析构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#子类中的构造和析构&quot;&gt;&lt;/a&gt; 子类中的构造和析构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620838602286.png&quot; alt=&quot;16
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>类的赋值兼容原则</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0044-%E7%B1%BB%E7%9A%84%E8%B5%8B%E5%80%BC%E5%85%BC%E5%AE%B9%E5%8E%9F%E5%88%99/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0044-类的赋值兼容原则/</id>
    <published>2021-05-12T16:44:09.000Z</published>
    <updated>2021-05-13T21:07:58.319Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的赋值兼容原则"><a class="markdownIt-Anchor" href="#类的赋值兼容原则"></a> 类的赋值兼容原则</h1><h3 id="类型兼容性原则"><a class="markdownIt-Anchor" href="#类型兼容性原则"></a> 类型兼容性原则</h3><p>类型兼容规则是指在需要基类对象的任何地方，都可以使用公有派生类<br>的对象来替代。通过公有继承，派生类得到了基类中除构造函数、析构函数之<br>外的所有成员。这样，公有派生类实际就具备了基类的所有功能，凡是基类能<br>解决的问题，公有派生类都可以解决。</p><h4 id="类型兼容规则中所指的替代包括以下情况"><a class="markdownIt-Anchor" href="#类型兼容规则中所指的替代包括以下情况"></a> 类型兼容规则中所指的替代包括以下情况：</h4><p><img src="/images/javawz/1620837955527.png" alt="1620837955527"></p><p><img src="/images/javawz/1620837966956.png" alt="1620837966956"></p><p>在替代之后，派生类对象就可以作为基类的对象使用，但是只能使用从基类继<br>承的成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">子类对象可以当作父类对象使用</span></span><br><span class="line"><span class="comment">子类对象可以直接赋值给父类对象</span></span><br><span class="line"><span class="comment">子类对象可以直接初始化父类对象</span></span><br><span class="line"><span class="comment">父类指针可以直接指向子类对象</span></span><br><span class="line"><span class="comment">父类引用可以直接引用子类对象</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printP</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Parent::printP()..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printC</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Child:: printC()...."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Parent *p)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">p-&gt;printP();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Child c;<span class="comment">//子类对象</span></span><br><span class="line">c.printP(); <span class="comment">//子类对象可以当作父类对象使用</span></span><br><span class="line"></span><br><span class="line">Parent p = c; <span class="comment">// 由于子类拥有全部父类的内存空间，子类能够保障父类初始化完整。</span></span><br><span class="line"> <span class="comment">//子类对象可以直接初始化父类对象 因为子类内存空间包容的父类的，能够保证</span></span><br><span class="line"><span class="comment">// 完全赋值。</span></span><br><span class="line"><span class="comment">//Child c2 = p;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类指针可以直接指向子类对象</span></span><br><span class="line"><span class="comment">//子类对象能够完全满足父类指针的需求，所以可以  父类指针可以直接指向子类对象</span></span><br><span class="line">Parent *pp = &amp;c;  <span class="comment">//pp-&gt;printP   (x ) pp-&gt;printC</span></span><br><span class="line"><span class="comment">//pp-&gt;printC();</span></span><br><span class="line">pp-&gt;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能用子类指针指向父类对象。</span></span><br><span class="line"><span class="comment">//父类对象满足不了子类指针的所有需求， 所以不能够 子类指针指向父类对象。</span></span><br><span class="line"><span class="comment">//Child *cp = &amp;p; // cp-&gt; printP,  cp-&gt;printC</span></span><br><span class="line"><span class="comment">//cp-&gt;b; //p中没有b的内存。 //此时访问b就越界了。</span></span><br><span class="line"><span class="comment">//cp-&gt;printP();</span></span><br><span class="line"><span class="comment">//cp-&gt;printC();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类引用可以引用子类对象</span></span><br><span class="line">Parent &amp;pr = c;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子类引用不可以引用父类的对象。</span></span><br><span class="line"><span class="comment">//Child &amp;cr = p;</span></span><br><span class="line"></span><br><span class="line">print(&amp;p); <span class="comment">//Parent* p = &amp;p;</span></span><br><span class="line"></span><br><span class="line">print(&amp;c); <span class="comment">//Parent *p = &amp;c;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//父类指针可以指向子类对象。 </span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的赋值兼容原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的赋值兼容原则&quot;&gt;&lt;/a&gt; 类的赋值兼容原则&lt;/h1&gt;
&lt;h3 id=&quot;类型兼容性原则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类型兼容
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类的继承方式</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0043-%E7%B1%BB%E7%9A%84%E7%BB%A7%E6%89%BF%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0043-类的继承方式/</id>
    <published>2021-05-12T16:25:34.000Z</published>
    <updated>2021-05-13T21:08:04.164Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的继承方式"><a class="markdownIt-Anchor" href="#类的继承方式"></a> 类的继承方式</h1><p><img src="/images/javawz/1620836765828.png" alt="1620836765828"></p><p>一个派生类可以同时有多个基类,这种情况称为多重继承,派生类只有一个<br>基类, 称为单继承。下面从单继承讲起。</p><h3 id="继承方式"><a class="markdownIt-Anchor" href="#继承方式"></a> 继承方式</h3><p><img src="/images/javawz/1620836810687.png" alt="1620836810687"></p><p><img src="/images/javawz/1620836826648.png" alt="1620836826648"></p><p><img src="/images/javawz/1620836847063.png" alt="1620836847063"></p><p><img src="/images/javawz/1620836865525.png" alt="1620836865525"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//基类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>: <span class="comment">//访问控制权限</span></span><br><span class="line"><span class="keyword">int</span> pub; <span class="comment">//对内部外部均可以</span></span><br><span class="line"><span class="keyword">protected</span>:</span><br><span class="line"><span class="keyword">int</span> pro;<span class="comment">//对内，外均不可以  //protected 访问控制权限下的成员 儿子可见</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> pri;<span class="comment">//对内外 均不可以  //父亲的情人  //private 访问控制权限下的成员 儿子不可见</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child</span> :</span><span class="keyword">public</span> Parent <span class="comment">//Child 公有继承 Parent</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pro; <span class="comment">//ok//可能是私有的和保护的。</span></span><br><span class="line"><span class="comment">//pri; //访问不了父亲的私有成员</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//三看原则:</span></span><br><span class="line"><span class="comment">//1  看当前的成员调用是在类的外部 还是在类的内部</span></span><br><span class="line"><span class="comment">//2 看儿子的继承方式， 是公有继承还是 私有继承</span></span><br><span class="line"><span class="comment">//3 看当前的成员变量在父亲中的访问控制权限</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child2</span> :</span> <span class="keyword">protected</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pub; <span class="comment">//内部  //此时pub 函数 在此类中是 protected权限</span></span><br><span class="line"><span class="comment">//pri;</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Child3</span> :</span> <span class="keyword">private</span> Parent</span><br><span class="line">&#123;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pub; <span class="comment">//父亲中的public 变成 本来的私有</span></span><br><span class="line">pro;<span class="comment">//父亲中的pro  变成本类的私有</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SubChild3</span> :</span> <span class="keyword">public</span> Child3</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">pub;</span><br><span class="line">pro;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 基类中的私有成员 不管子类如何继承， 子类都访问不了。</span></span><br><span class="line"><span class="comment">//2 如果是公有(public)继承， 那么基类中的访问控制权限 出了私有成员 ，在子类中保持不变</span></span><br><span class="line"><span class="comment">//3 如果是保护继承protected ， 那么子类中出了基类的私有成员，全部是protected权限</span></span><br><span class="line"><span class="comment">//4 如果是私有继承 private  ， 父类中除了私有成员， 在子类都是 私有成员。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Parent p;</span><br><span class="line">p.pub;</span><br><span class="line"></span><br><span class="line">Child c;</span><br><span class="line">c.pub; <span class="comment">// </span></span><br><span class="line">Child c;</span><br><span class="line"><span class="comment">//c.pro; //</span></span><br><span class="line"><span class="comment">//c.pro; //此时pro 可能是私有的 也可能是保护的。</span></span><br><span class="line"></span><br><span class="line">Child2 c2;</span><br><span class="line"><span class="comment">//c2.pub;</span></span><br><span class="line"><span class="comment">//c2.pro; //此时pro 在Child2中是一个保护权限， 在类的外部访问不了。</span></span><br><span class="line">Child3 c3;</span><br><span class="line">c3.pub;</span><br><span class="line">c3.pro;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的继承方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的继承方式&quot;&gt;&lt;/a&gt; 类的继承方式&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620836765828.png&quot; alt=&quot;16208367658
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>有关继承的名词定义</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/13/cpp0042-%E6%9C%89%E5%85%B3%E7%BB%A7%E6%89%BF%E7%9A%84%E5%90%8D%E8%AF%8D%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/13/cpp0042-有关继承的名词定义/</id>
    <published>2021-05-12T16:22:59.000Z</published>
    <updated>2021-05-12T16:24:58.025Z</updated>
    
    <content type="html"><![CDATA[<h1 id="有关继承的名词定义"><a class="markdownIt-Anchor" href="#有关继承的名词定义"></a> 有关继承的名词定义</h1><p>类的继承,是新的类从已有类那里得到已有的特性。或从已有类产生新类<br>的过程就是类的派生。原有的类称为基类或父类,产生的新类称为派生类或子类。</p><p>派生与继承,是同一种意义两种称谓。 isA 的关系。</p><p><img src="/images/javawz/1620836606234.png" alt="1620836606234"></p><h3 id="派生类的组成"><a class="markdownIt-Anchor" href="#派生类的组成"></a> 派生类的组成</h3><p>派生类中的成员,包含两大部分,一类是从基类继承过来的,一类是自己增加<br>的成员。从基类继承过过来的表现其共性,而新增的成员体现了其个性。</p><p><img src="/images/javawz/1620836642191.png" alt="1620836642191"></p><p><img src="/images/javawz/1620836664563.png" alt="1620836664563"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;有关继承的名词定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#有关继承的名词定义&quot;&gt;&lt;/a&gt; 有关继承的名词定义&lt;/h1&gt;
&lt;p&gt;类的继承,是新的类从已有类那里得到已有的特性。或从已有类产生新类&lt;br&gt;
的过程就是类的派生。原有的类
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类与类之间的关系</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/12/cpp0041-%E7%B1%BB%E4%B8%8E%E7%B1%BB%E4%B9%8B%E9%97%B4%E7%9A%84%E5%85%B3%E7%B3%BB/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/12/cpp0041-类与类之间的关系/</id>
    <published>2021-05-11T17:26:35.000Z</published>
    <updated>2021-05-11T17:29:39.099Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类与类之间的关系"><a class="markdownIt-Anchor" href="#类与类之间的关系"></a> 类与类之间的关系</h1><p><code>B has A</code>   代表 B依赖A</p><p><code>C use A</code>  代表C使用A</p><p><code>D is A</code>  代表D包含了A</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcA</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func A ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//A对于B类 是充当一个成员变量， B has A   包含关系 A 属于B</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcB</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a.funcA();</span><br><span class="line">&#125;</span><br><span class="line">A a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果C中某一个成员函数 是依赖于A类形参， 将A类当一个形参传递进来</span></span><br><span class="line"><span class="comment">//C use A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcC</span><span class="params">(A *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a-&gt;funcA();</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//类D  继承于 类A</span></span><br><span class="line"><span class="comment">//类D  继承于A  就说明  D is A</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> :</span> <span class="keyword">public</span> A</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">funcD</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">funcA(); <span class="comment">//直接使用A类的方法。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">D d;</span><br><span class="line">d.funcA();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类与类之间的关系&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类与类之间的关系&quot;&gt;&lt;/a&gt; 类与类之间的关系&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;B has A&lt;/code&gt;   代表 B依赖A&lt;/p&gt;
&lt;p&gt;&lt;code&gt;C use A&lt;/c
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
</feed>
