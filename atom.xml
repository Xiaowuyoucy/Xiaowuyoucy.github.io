<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2022-07-10T14:10:41.250Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>逆向工程基础</title>
    <link href="https://xiaowuyoucy.github.io/2022/07/10/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://xiaowuyoucy.github.io/2022/07/10/逆向工程基础/</id>
    <published>2022-07-10T09:21:30.000Z</published>
    <updated>2022-07-10T14:10:41.250Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于逆向工程"><a class="markdownIt-Anchor" href="#关于逆向工程"></a> 关于逆向工程</h1><h3 id="逆向工程reverse-engineering简称re"><a class="markdownIt-Anchor" href="#逆向工程reverse-engineering简称re"></a> 逆向工程（Reverse Engineering，简称RE)</h3><h3 id="代码逆向工程reverse-code-engineering简称rce"><a class="markdownIt-Anchor" href="#代码逆向工程reverse-code-engineering简称rce"></a> 代码逆向工程（Reverse Code Engineering，简称RCE）</h3><h4 id="逆向分析法"><a class="markdownIt-Anchor" href="#逆向分析法"></a> 逆向分析法</h4><ul><li>静态分析法<ul><li>在不执行代码文件的情形下，对代码进行静态分析的一种方法。</li></ul></li><li>动态分析法<ul><li>在程序文件的执行过程中对代码进行动态分析</li></ul></li></ul><p>Hex Editor是一个简单易用的工具，使用它可以轻松地把二进制文件转换为十六进制文件。</p><p><img src="/images/javawz/image-20220710181629406.png" alt="image-20220710181629406"></p><h4 id="打补丁与破解"><a class="markdownIt-Anchor" href="#打补丁与破解"></a> “打补丁”与“破解”</h4><p>对应用程序文件或进程内存内容的更改被称为“打补丁”（Patch），“破解”（Crack）与其含义类似</p><h1 id="逆向分析hello-world程序"><a class="markdownIt-Anchor" href="#逆向分析hello-world程序"></a> 逆向分析Hello World！程序</h1><p>OllyDbg: <a href="http://www.ollydbg.de" target="_blank" rel="noopener">http://www.ollydbg.de</a></p><p>OllyDbg是一种强大的Win32调试工具</p><p><img src="/images/javawz/image-20220710182151607.png" alt="image-20220710182151607"></p><h3 id="入口点"><a class="markdownIt-Anchor" href="#入口点"></a> 入口点</h3><p>EP是Windows可执行文件（EXE、DLL、SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。</p><p>调试器停止的地点即为HelloWorld.exe执行的起始地址，它是一段EP （EntryPoint，入口点）代码。</p><p>地址：进程的虚拟内存地址（Virtual Address， VA）<br>指令：IA32 （或x86） CPU指令<br>反汇编代码：将OP code转换为便于查看的汇编指令<br>注释：调试器添加的注释（根据选项不同，显示的注释略有不同）</p><h3 id="ollydbg基本指令"><a class="markdownIt-Anchor" href="#ollydbg基本指令"></a> OllyDbg基本指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">F2：设置断点/取消断点</span><br><span class="line"></span><br><span class="line">F7：单步步入</span><br><span class="line"></span><br><span class="line">F8：单步执行</span><br><span class="line"></span><br><span class="line">Ctrl + F2：重新调试</span><br><span class="line"></span><br><span class="line">Ctrl+G：跳转到指定地址（查看代码时使用，非运行时命令）</span><br><span class="line"></span><br><span class="line">F9：运行（遇到断点时暂停）</span><br><span class="line"></span><br><span class="line">Ctrl+F9：执行函数代码内的命令，直到遇到RETN命令，用于跳出函数体</span><br><span class="line"></span><br><span class="line">F4：执行到光标所在位置（直接转到要调试的位置）</span><br><span class="line"></span><br><span class="line">;    添加注释</span><br><span class="line"></span><br><span class="line">:  添加标签</span><br><span class="line"></span><br><span class="line">*     显示当前EIP(命令指针)位置</span><br><span class="line"></span><br><span class="line">-     显示上一个光标位置</span><br><span class="line"></span><br><span class="line">Enter：若光标处有CALL/JMP等指令，则跟踪并显示相关地址（运行时不可用，简单查看函数内容时非常有用）</span><br><span class="line"></span><br><span class="line">空格键：编辑汇编代码</span><br></pre></td></tr></table></figure><h3 id="设置大本营的四种方法"><a class="markdownIt-Anchor" href="#设置大本营的四种方法"></a> 设置“大本营”的四种方法</h3><h4 id="1goto命令"><a class="markdownIt-Anchor" href="#1goto命令"></a> 1.Goto命令</h4><p>执行Go to（Ctrl+G）命令</p><p><img src="/images/javawz/image-20220710195834481.png" alt="image-20220710195834481"></p><h4 id="2设置断点"><a class="markdownIt-Anchor" href="#2设置断点"></a> 2.设置断点</h4><p>在OllyDbg菜单栏中依次选择View-Breakpoints选项（快捷键（ALT+B）），打开Breakpoints对话框，列出代码中设置的断点</p><p><img src="/images/javawz/image-20220710200136557.png" alt="image-20220710200136557"></p><p>在断点列表中双击某个断点会直接跳转到相应位置。</p><h4 id="3注释"><a class="markdownIt-Anchor" href="#3注释"></a> 3.注释</h4><p>按键盘上的“；”键可以在指定地址处添加注释，还可以通过查找命令找到它。</p><p>在鼠标右键菜单中依次选择Search for-User defined comment，这样就能看到用户输入的所有注释</p><p><img src="/images/javawz/image-20220710200340518.png" alt="image-20220710200340518"></p><p>双击相应注释，光标将自动定位到相应位置。</p><h4 id="4标签"><a class="markdownIt-Anchor" href="#4标签"></a> 4.标签</h4><p>单击鼠标右键，依次选择Search forlUser defined labels菜单即可打开User defined labels窗口，该窗口列出了用户设置的标签</p><p>在User defined labels窗口中双击某个标签，光标即移动到相应位置。</p><p><img src="/images/javawz/image-20220710200640747.png" alt="image-20220710200640747"></p><p><img src="/images/javawz/image-20220710200714534.png" alt="image-20220710200714534"></p><h3 id="快速查找指定代码的四种方法"><a class="markdownIt-Anchor" href="#快速查找指定代码的四种方法"></a> 快速查找指定代码的四种方法</h3><p>1.代码执行法</p><p>2.字符串检索法</p><p>鼠标右键菜单-Search for-All referenced text strings</p><p><img src="/images/javawz/image-20220710201316743.png" alt="image-20220710201316743"></p><p>双击字符串，光标定位到使用该字符串的指令处</p><p>VC++中， static字符串会被默认保存为Unicode码形式， static字符串是指在程序内部被硬编码（Hard Coding）的字符串。</p><h4 id="api检索法1在调用代码中设置断点"><a class="markdownIt-Anchor" href="#api检索法1在调用代码中设置断点"></a> API检索法（1）：在调用代码中设置断点</h4><p>鼠标右键菜单-Search for-All intermodular calls</p><p><img src="/images/javawz/image-20220710201618956.png" alt="image-20220710201618956"></p><p>双击它，光标即定位到调用它的地址处</p><h4 id="api检索法2在api代码中设置断点"><a class="markdownIt-Anchor" href="#api检索法2在api代码中设置断点"></a> API检索法（2）：在API代码中设置断点</h4><p>鼠标右键菜单-Search for-Name in all calls</p><p>在OllyDbg菜单栏中依次选择View-Memory菜单（快捷键Alt+M），打开内存映射窗口。内存映射窗口中显示了一部分HelloWorld.exe进程内存。在图底部的方框中可以看到，USER32库被加载到了内存。</p><p><img src="/images/javawz/image-20220710202412666.png" alt="image-20220710202412666"></p><p>使用OllyDbg中的Name in all modules命令可以列出被加载的DLL文件中提供的所有API。使用Name in all modules命令打开All names窗口，单击Name栏目按名称排序，通过键盘敲出MessageBoxW后，光标会自动定位到MessageBoxW上</p><p><img src="/images/javawz/image-20220710203219441.png" alt="image-20220710203219441"></p><p>双击MessageBoxW函数后就会显示其代码，它实现于USER32.dl1库中</p><p><img src="/images/javawz/image-20220710203502389.png" alt="image-20220710203502389"></p><p>模块中的地址和本程序的地址是完全不同的。</p><h3 id="修改字符串的两种方法"><a class="markdownIt-Anchor" href="#修改字符串的两种方法"></a> 修改字符串的两种方法</h3><h4 id="1直接修改字符串缓冲区"><a class="markdownIt-Anchor" href="#1直接修改字符串缓冲区"></a> 1.直接修改字符串缓冲区</h4><p>在Dump窗口中按Ctrl+G快捷键执行Go to命令，在弹出窗口中输入地址进入字符串缓冲区。然后使用鼠标选中地址处的字符串，按Ctrl+E快捷键打开编辑窗口</p><p><img src="/images/javawz/image-20220710220035154.png" alt="image-20220710220035154"></p><p>注意:<br>若新字符串长度大于原有字符串，执行覆盖操作时可能损坏字符串后面的数据，所以一定要小心。特别是字符串后面有非常重要的数据时，覆盖操作导致数据损坏就会引发程序内存引用错误。</p><p>新字符串的长度不应比原字符串长。</p><h4 id="保存更改到可执行文件"><a class="markdownIt-Anchor" href="#保存更改到可执行文件"></a> 保存更改到可执行文件</h4><p>选中更改后的“Hello Reversing”字符串，单击鼠标右键，在弹出的菜单中选择Copy to executable file菜单</p><p><img src="/images/javawz/image-20220710220428077.png" alt="image-20220710220428077"></p><p>在弹出的Hex窗口中单击鼠标右键，选择Save file菜单，在Save file as对话框中输人文件名“Hello Reversing.exe”后保存为.exe可执行文件。</p><p>2.在其他内存区域新建字符串并传递给消息函数</p><p><img src="/images/javawz/image-20220710220905979.png" alt="image-20220710220905979"></p><p><img src="/images/javawz/image-20220710220921112.png" alt="image-20220710220921112"></p><p><img src="/images/javawz/image-20220710220933154.png" alt="image-20220710220933154"></p><p><img src="/images/javawz/image-20220710220950573.png" alt="image-20220710220950573"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于逆向工程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于逆向工程&quot;&gt;&lt;/a&gt; 关于逆向工程&lt;/h1&gt;
&lt;h3 id=&quot;逆向工程reverse-engineering简称re&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="逆向工程" scheme="https://xiaowuyoucy.github.io/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt操作Json</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/26/Qt%E6%93%8D%E4%BD%9CJson/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/26/Qt操作Json/</id>
    <published>2022-06-25T16:30:11.000Z</published>
    <updated>2022-06-27T08:07:00.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="json介绍"><a class="markdownIt-Anchor" href="#json介绍"></a> json介绍:</h3><p>json分为:</p><ul><li>json对象</li><li>json数组</li></ul><h4 id="json对象"><a class="markdownIt-Anchor" href="#json对象"></a> json对象:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;class&quot;:31,</span><br><span class="line">&quot;count&quot;:51,</span><br><span class="line">&quot;master&quot;:&quot;yalong&quot;,</span><br><span class="line">&quot;banzhuren&quot;:&quot;chenlaoshi&quot;,</span><br><span class="line">&quot;like&quot;:[&quot;dancing&quot;, &quot;sing&quot;, &quot;drinking&quot;], </span><br><span class="line">&quot;hometown&quot;:&#123;&quot;hebei&quot;:&quot;baoding&quot;, &quot;henan&quot;:&quot;xinyang&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="json数组"><a class="markdownIt-Anchor" href="#json数组"></a> json数组:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10, 10.5, [&quot;xiaohu&quot;, &quot;liming&quot;, 10], &#123;&quot;name&quot;:&quot;xiaohu&quot;, &quot;age&quot;:32, &quot;sex&quot;:&quot;man&quot;&#125;]</span><br></pre></td></tr></table></figure><p>1 json对象格式的数据都是以key:value的形式存在的, 其中key值是字符串形式的.<br>2 在json对象中, value值可以是子对象, 也可以是数组<br>3 在json格式的文件中, 只能是json对象或者是json数组<br>4 在json数组中, 数据的类型不定, 可以是double int string 子对象, 子数组.</p><br><br><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QJsonDocument&gt;</span><br><span class="line">#include &lt;QJsonArray&gt;</span><br><span class="line">#include &lt;QJsonObject&gt;</span><br><span class="line">#include &lt;QByteArray&gt;</span><br><span class="line">#include &lt;QJsonValue&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br></pre></td></tr></table></figure><br><br><h3 id="json对象操作"><a class="markdownIt-Anchor" href="#json对象操作"></a> json对象操作</h3><h4 id="创建json对象"><a class="markdownIt-Anchor" href="#创建json对象"></a> 创建json对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonObject json;</span><br></pre></td></tr></table></figure><br><h4 id="给json对象插入值"><a class="markdownIt-Anchor" href="#给json对象插入值"></a> 给json对象插入值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator QJsonObject::insert(const QString &amp;key, const QJsonValue &amp;value)</span><br></pre></td></tr></table></figure><br><h3 id="json数组操作"><a class="markdownIt-Anchor" href="#json数组操作"></a> json数组操作</h3><h4 id="创建json数组"><a class="markdownIt-Anchor" href="#创建json数组"></a> 创建json数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray jsonArr;</span><br></pre></td></tr></table></figure><br><p>给json数组插入值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void QJsonArray::append(const QJsonValue &amp;value)</span><br></pre></td></tr></table></figure><br><h4 id="将qjsonobject-或qjsonarray转换为-qjsondocument"><a class="markdownIt-Anchor" href="#将qjsonobject-或qjsonarray转换为-qjsondocument"></a> 将QJsonObject 或QJsonArray转换为 QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonDocument::QJsonDocument(const QJsonObject &amp;object) //将json对象转换为QJsonDocument</span><br><span class="line"></span><br><span class="line">JsonDocument::QJsonDocument(const QJsonArray &amp;array)//将json数组转换为QJsonDocument</span><br></pre></td></tr></table></figure><br><h4 id="将qjsondocument对象转换为qbytearray对象"><a class="markdownIt-Anchor" href="#将qjsondocument对象转换为qbytearray对象"></a> 将QJsonDocument对象转换为QByteArray对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QByteArray QJsonDocument::toJson(JsonFormat format = Indented) const</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="操作文件"><a class="markdownIt-Anchor" href="#操作文件"></a> 操作文件</h3><h4 id="创建文件对象"><a class="markdownIt-Anchor" href="#创建文件对象"></a> 创建文件对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QFile::QFile(const QString &amp;name)</span><br><span class="line"></span><br><span class="line">QFile file(fileName);</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="打开文件"><a class="markdownIt-Anchor" href="#打开文件"></a> 打开文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">virtual bool open(OpenMode mode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QIODevice::NotOpen0x0000The device is not open.</span><br><span class="line">QIODevice::ReadOnly0x0001The device is open for reading.</span><br><span class="line">QIODevice::WriteOnly0x0002The device is open for writing. Note that this mode implies Truncate.</span><br><span class="line">QIODevice::ReadWriteReadOnly | WriteOnlyThe device is open for reading and writing.</span><br><span class="line">QIODevice::Append0x0004The device is opened in append mode so that all data is written to the end of the file.</span><br><span class="line"></span><br><span class="line">QIODevice::Truncate0x0008If possible, the device is truncated before it is opened. All earlier contents of the device are lost.</span><br><span class="line"></span><br><span class="line">QIODevice::Text0x0010When reading, the end-of-line terminators are translated to &apos;\n&apos;. When writing, the end-of-line terminators are translated to the local encoding, for example &apos;\r\n&apos; for Win32.</span><br><span class="line"></span><br><span class="line">QIODevice::Unbuffered0x0020Any buffer in the device is bypassed.</span><br></pre></td></tr></table></figure><br><br><h4 id="读文件"><a class="markdownIt-Anchor" href="#读文件"></a> 读文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QByteArray QIODevice::readAll()//一次性读完</span><br><span class="line"></span><br><span class="line">QByteArray byteArray = file.readAll();</span><br></pre></td></tr></table></figure><br><h4 id="将qbytearray类对象转换为qjsondocument"><a class="markdownIt-Anchor" href="#将qbytearray类对象转换为qjsondocument"></a> 将QByteArray类对象转换为QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QJsonDocument fromJson(const QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span><br><span class="line"></span><br><span class="line">QJsonDocument jsonDoc = QJsonDocument::fromJson(byteArray);</span><br></pre></td></tr></table></figure><br><h4 id="判断是不是对象"><a class="markdownIt-Anchor" href="#判断是不是对象"></a> 判断是不是对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool QJsonDocument::isObject() const</span><br></pre></td></tr></table></figure><br><h4 id="将qjsondocument转换为qjsonobject"><a class="markdownIt-Anchor" href="#将qjsondocument转换为qjsonobject"></a> 将QJsonDocument转换为QJsonObject</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonObject QJsonDocument::object() const</span><br></pre></td></tr></table></figure><h4 id="将qjsondocument转换为qjsonarray"><a class="markdownIt-Anchor" href="#将qjsondocument转换为qjsonarray"></a> 将QJsonDocument转换为QJsonArray</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray QJsonDocument::array() const</span><br></pre></td></tr></table></figure><h4 id="获取对象中所有的key值"><a class="markdownIt-Anchor" href="#获取对象中所有的key值"></a> 获取对象中所有的key值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStringList QJsonObject::keys() const</span><br></pre></td></tr></table></figure><h4 id="返回key的数量"><a class="markdownIt-Anchor" href="#返回key的数量"></a> 返回key的数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int QJsonObject::size() const</span><br></pre></td></tr></table></figure><h4 id="根据key值获取value值"><a class="markdownIt-Anchor" href="#根据key值获取value值"></a> 根据key值获取value值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QJsonValue QJsonObject::value(const QString &amp;key) const</span><br><span class="line">QJsonValue QJsonObject::value(QLatin1String key) const</span><br></pre></td></tr></table></figure><h4 id="判断value值的类型"><a class="markdownIt-Anchor" href="#判断value值的类型"></a> 判断value值的类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool isArray() const</span><br><span class="line">bool isBool() const</span><br><span class="line">bool isDouble() const</span><br><span class="line">bool isNull() const</span><br><span class="line">bool isObject() const</span><br><span class="line">bool isString() const</span><br><span class="line">bool isUndefined() const</span><br></pre></td></tr></table></figure><h4 id="将value转换到对应类型的值"><a class="markdownIt-Anchor" href="#将value转换到对应类型的值"></a> 将value转换到对应类型的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray toArray(const QJsonArray &amp;defaultValue) const//转换到数组</span><br><span class="line">QJsonArray toArray() const//转换到数组</span><br><span class="line"></span><br><span class="line">bool toBool(bool defaultValue = false) const//转换到布尔</span><br><span class="line"></span><br><span class="line">double toDouble(double defaultValue = 0) const//转换到到double</span><br><span class="line"></span><br><span class="line">int toInt(int defaultValue = 0) const//转换到整型</span><br><span class="line"></span><br><span class="line">QJsonObject toObject(const QJsonObject &amp;defaultValue) const//转换到对象</span><br><span class="line">QJsonObject toObject() const//转换到对象</span><br><span class="line"></span><br><span class="line">QString toString() const//转换到字符串</span><br><span class="line">QString toString(const QString &amp;defaultValue) const//转换到字符串</span><br><span class="line"></span><br><span class="line">QVariant toVariant() const</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="将qjsondocument转换为const-char"><a class="markdownIt-Anchor" href="#将qjsondocument转换为const-char"></a> 将QJsonDocument转换为const char *</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char *QJsonDocument::rawData(int *size) const</span><br></pre></td></tr></table></figure><h4 id="将const-char-转换为qjsondocument"><a class="markdownIt-Anchor" href="#将const-char-转换为qjsondocument"></a> 将const char * 转换为QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fromRawData(const char *data, int size, DataValidation validation = Validate)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonDocument&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonArray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QByteArray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonValue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeJsonToFile</span><span class="params">(<span class="keyword">char</span> *fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一种: 将json对象写入磁盘文件</span></span><br><span class="line">    <span class="comment">//创建一个json对象</span></span><br><span class="line">    <span class="comment">/*QJsonObject json;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //给json对象插入值</span></span><br><span class="line"><span class="comment">    // iterator insert(const QString &amp;key, const QJsonValue &amp;value)</span></span><br><span class="line"><span class="comment">    json.insert("name", "xiaowu");</span></span><br><span class="line"><span class="comment">    json.insert("age", 21);</span></span><br><span class="line"><span class="comment">    json.insert("sex", "female");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //插入子对象</span></span><br><span class="line"><span class="comment">    QJsonObject subJson;</span></span><br><span class="line"><span class="comment">    subJson.insert("father", "longji");</span></span><br><span class="line"><span class="comment">    subJson.insert("mather", "liwei");</span></span><br><span class="line"><span class="comment">    subJson.insert("sister", "wangjin");</span></span><br><span class="line"><span class="comment">    json.insert("family", subJson);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //插入json数组</span></span><br><span class="line"><span class="comment">    QJsonArray jsonArr;</span></span><br><span class="line"><span class="comment">    jsonArr.append("english"); </span></span><br><span class="line"><span class="comment">    jsonArr.append("chinese");</span></span><br><span class="line"><span class="comment">    jsonArr.append("math");</span></span><br><span class="line"><span class="comment">    jsonArr.append("history");</span></span><br><span class="line"><span class="comment">    json.insert("course", jsonArr);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种: 将json数组写入磁盘文件</span></span><br><span class="line">    <span class="comment">//构造一个QJsonArray对象</span></span><br><span class="line">    QJsonArray <span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void append(const QJsonValue &amp;value)</span></span><br><span class="line">    <span class="comment">//给array对象添加值</span></span><br><span class="line">    <span class="built_in">array</span>.append(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(<span class="string">"jinyanlong"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子数组到array中</span></span><br><span class="line">    QJsonArray subArray;</span><br><span class="line">    subArray.append(<span class="string">"english"</span>);</span><br><span class="line">    subArray.append(<span class="string">"chinese"</span>);</span><br><span class="line">    subArray.append(<span class="string">"history"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(subArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加对象到array中</span></span><br><span class="line">    QJsonObject subObj;</span><br><span class="line">    subObj.insert(<span class="string">"mother"</span>, <span class="string">"xiaoling"</span>);</span><br><span class="line">    subObj.insert(<span class="string">"father"</span>, <span class="string">"xiaotong"</span>);</span><br><span class="line">    subObj.insert(<span class="string">"sister"</span>, <span class="string">"damiao"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(subObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QJsonObject 转换为 QJsonDocument</span></span><br><span class="line">    <span class="comment">//JsonDocument::QJsonDocument(const QJsonObject &amp;object)</span></span><br><span class="line">    <span class="comment">//QJsonDocument jsonDoc(json);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//QJsonDocument(const QJsonArray &amp;array)</span></span><br><span class="line">    <span class="function">QJsonDocument <span class="title">jsonDoc</span><span class="params">(<span class="built_in">array</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QJsonDocument对象转换为QByteArray对象</span></span><br><span class="line">    <span class="comment">//QByteArray toJson(JsonFormat format = Indented) const</span></span><br><span class="line">    QByteArray byteArray = jsonDoc.toJson();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件操作--将byteArray写入文件</span></span><br><span class="line">    <span class="comment">//QFile(const QString &amp;name)</span></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    <span class="comment">//virtual bool open(OpenMode mode)</span></span><br><span class="line">    file.open(QIODevice::WriteOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写文件</span></span><br><span class="line">    <span class="comment">//qint64 write(const QByteArray &amp;byteArray)</span></span><br><span class="line">    file.write(byteArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="comment">//virtual void close()</span></span><br><span class="line">    file.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readJsonFromFile</span><span class="params">(<span class="keyword">char</span> *fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//构造QFile类对象</span></span><br><span class="line">    QFile file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置要读的文件</span></span><br><span class="line">    <span class="comment">//void setFileName(const QString &amp;name)</span></span><br><span class="line">    file.setFileName(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    <span class="comment">//virtual bool open(OpenMode mode)</span></span><br><span class="line">    file.open(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    <span class="comment">//QByteArray readAll()</span></span><br><span class="line">    QByteArray byteArray = file.readAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="comment">//virtual void close()</span></span><br><span class="line">    file.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QByteArray类对象转换为QJsonDocument</span></span><br><span class="line">    <span class="comment">//QJsonDocument fromJson(const QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span></span><br><span class="line">    QJsonDocument jsonDoc = QJsonDocument::fromJson(byteArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是数组还是对象</span></span><br><span class="line">    <span class="keyword">if</span>(jsonDoc.isObject())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//QJsonObject object() const</span></span><br><span class="line">        QJsonObject jsonObj = jsonDoc.object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取对象中所有的key值</span></span><br><span class="line">        <span class="comment">//QStringList keys() const</span></span><br><span class="line">        QStringList keys = jsonObj.keys();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;keys.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取每一个key值</span></span><br><span class="line">            <span class="comment">//QString key = keys[i];</span></span><br><span class="line">            QString key = keys.at(i);</span><br><span class="line">            <span class="comment">//qDebug() &lt;&lt; key &lt;&lt; ":";</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据key值获取value值</span></span><br><span class="line">            <span class="comment">//QJsonValue value(const QString &amp;key) const</span></span><br><span class="line">            <span class="comment">//QJsonValue operator[](const QString &amp;key) const</span></span><br><span class="line">            QJsonValue jsonValue = jsonObj.value(key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断value值的类型</span></span><br><span class="line">            <span class="comment">//bool isString() const</span></span><br><span class="line">            <span class="keyword">if</span>(jsonValue.isString())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isDouble())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isBool())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toBool();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isObject())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//QJsonObject toObject() const</span></span><br><span class="line">                 QJsonObject obj = jsonValue.toObject();</span><br><span class="line">                 QStringList subKeys = obj.keys();</span><br><span class="line"></span><br><span class="line">                 qDebug() &lt;&lt; key &lt;&lt; <span class="string">":&#123;"</span>;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;subKeys.size(); k++)</span><br><span class="line">                 &#123;</span><br><span class="line">                     QString subkey = subKeys[k];</span><br><span class="line">                     QJsonValue subJsonValue = obj.value(subkey);</span><br><span class="line">                     qDebug() &lt;&lt; <span class="string">"  "</span> &lt;&lt; subJsonValue.toString();</span><br><span class="line">                 &#125;</span><br><span class="line">                 qDebug() &lt;&lt; <span class="string">"&#125;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isArray())</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//QJsonArray toArray() const</span></span><br><span class="line">               qDebug() &lt;&lt; key &lt;&lt; <span class="string">":["</span>;</span><br><span class="line">               QJsonArray arr =  jsonValue.toArray();</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.size(); j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   QJsonValue va = arr[j];</span><br><span class="line">                   <span class="keyword">if</span>(va.isString())</span><br><span class="line">                   &#123;</span><br><span class="line">                       qDebug() &lt;&lt; <span class="string">"    "</span> &lt;&lt; va.toString();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               qDebug() &lt;&lt;<span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(jsonDoc.isArray())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//QJsonArray array() const</span></span><br><span class="line">        QJsonArray <span class="built_in">array</span> = jsonDoc.<span class="built_in">array</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QJsonValue value = <span class="built_in">array</span>[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断值的类型</span></span><br><span class="line">            <span class="keyword">if</span>(value.isString())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isDouble())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isBool())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toBool();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isArray())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"["</span>;</span><br><span class="line">                QJsonArray subArray = value.toArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;subArray.size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    qDebug() &lt;&lt; <span class="string">"   "</span> &lt;&lt; subArray[j].toString();</span><br><span class="line">                &#125;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isObject())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"&#123;"</span>;</span><br><span class="line">                QJsonObject subObj = value.toObject();</span><br><span class="line">                QStringList subKeys = subObj.keys();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;subKeys.size(); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    QString subkey = subKeys[k];</span><br><span class="line">                    QJsonValue value = subObj[subkey];</span><br><span class="line">                    <span class="keyword">if</span>(value.isString())</span><br><span class="line">                    &#123;</span><br><span class="line">                        qDebug() &lt;&lt; <span class="string">"   "</span> &lt;&lt; value.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写json数据到文件</span></span><br><span class="line">    writeJsonToFile(<span class="string">"test.json"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读json文件</span></span><br><span class="line">    readJsonFromFile(<span class="string">"test.json"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;json介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#json介绍&quot;&gt;&lt;/a&gt; json介绍:&lt;/h3&gt;
&lt;p&gt;json分为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;json对象&lt;/li&gt;
&lt;li&gt;json数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>occi连接数据库getString函数报错</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/17/occi%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93rs/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/17/occi连接数据库rs/</id>
    <published>2022-06-17T13:40:16.000Z</published>
    <updated>2022-06-19T04:52:27.425Z</updated>
    
    <content type="html"><![CDATA[<p>1、报错代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (rs-&gt;next())</span><br><span class="line">&#123;</span><br><span class="line">int nID = rs-&gt;getInt(1);</span><br><span class="line">int nDVDID = rs-&gt;getInt(2);</span><br><span class="line">string strName = rs-&gt;getString(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、报错信息：</p><p>OcciToOracle.exe 中的 0x5c99336f (msvcp100d.dll) 处有未经处理的异常: 0xC0000005: 读取位置 0xffffffffffffffff 时发生访问冲突</p><p>错误定位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">inline void _Container_base12::_Orphan_all()</span><br><span class="line"> &#123; // orphan all iterators</span><br><span class="line"> #if _ITERATOR_DEBUG_LEVEL == 2</span><br><span class="line"> if (_Myproxy != 0)</span><br><span class="line"> &#123; // proxy allocated, drain it</span><br><span class="line"> _Lockit _Lock(_LOCK_DEBUG);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> for (_Iterator_base12 **_Pnext = &amp;_Myproxy-&gt;_Myfirstiter;</span><br><span class="line"> *_Pnext != 0; *_Pnext = (*_Pnext)-&gt;_Mynextiter)</span><br><span class="line"> (*_Pnext)-&gt;_Myproxy = 0;</span><br><span class="line"> _Myproxy-&gt;_Myfirstiter = 0;</span><br><span class="line"> &#125;</span><br><span class="line"> #endif /* _ITERATOR_DEBUG_LEVEL == 2 */</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3、解决方法：</p><p>将</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string strName = rs-&gt;getString(3);</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static string strName = rs-&gt;getString(3);</span><br></pre></td></tr></table></figure><p>前面加上static。</p><p>问题解决了，但是不清楚问题原因！</p><p>重点：这也造成了多条记录循环取值时只能得到第一次的值。</p><p>可能是oracle客户端occi库版本和编译器版本不一致导致的,linux降低了g++版本之后就编译通过了,并且没有出现问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、报错代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>如何查看VS编译器版本号</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/17/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8BVS%E7%BC%96%E8%AF%91%E5%99%A8%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/17/如何查看VS编译器版本号/</id>
    <published>2022-06-17T13:31:55.000Z</published>
    <updated>2022-06-17T13:34:20.530Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int ver = _MSC_VER; // get the version</span><br><span class="line">    cout &lt;&lt; &quot;MSVC Version: &quot; &lt;&lt; ver &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MSC 1.0 _MSC_VER == 100<br>MSC 2.0 _MSC_VER == 200<br>MSC 3.0 _MSC_VER == 300<br>MSC 4.0 _MSC_VER == 400<br>MSC 5.0 _MSC_VER == 500<br>MSC 6.0 _MSC_VER == 600<br>MSC 7.0 _MSC_VER == 700<br>MSVC++ 1.0 _MSC_VER == 800<br>MSVC++ 2.0 _MSC_VER == 900<br>MSVC++ 4.0 _MSC_VER == 1000 (Developer Studio 4.0)<br>MSVC++ 4.2 _MSC_VER == 1020 (Developer Studio 4.2)<br>MSVC++ 5.0 _MSC_VER == 1100 (Visual Studio 97 version 5.0)<br>MSVC++ 6.0 _MSC_VER == 1200 (Visual Studio 6.0 version 6.0)<br>MSVC++ 7.0 _MSC_VER == 1300 (Visual Studio .NET 2002 version 7.0)<br>MSVC++ 7.1 _MSC_VER == 1310 (Visual Studio .NET 2003 version 7.1)<br>MSVC++ 8.0 _MSC_VER == 1400 (Visual Studio 2005 version 8.0)<br>MSVC++ 9.0 _MSC_VER == 1500 (Visual Studio 2008 version 9.0)<br>MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010 version 10.0)<br>MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012 version 11.0)<br>MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013 version 12.0)<br>MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015 version 14.0)<br>MSVC++ 14.1 _MSC_VER == 1910 (Visual Studio 2017 version 15.0)<br>MSVC++ 14.11 _MSC_VER == 1911 (Visual Studio 2017 version 15.3)<br>MSVC++ 14.12 _MSC_VER == 1912 (Visual Studio 2017 version 15.5)<br>MSVC++ 14.13 _MSC_VER == 1913 (Visual Studio 2017 version 15.6)<br>MSVC++ 14.14 _MSC_VER == 1914 (Visual Studio 2017 version 15.7)<br>MSVC++ 14.15 _MSC_VER == 1915 (Visual Studio 2017 version 15.8)<br>MSVC++ 14.16 _MSC_VER == 1916 (Visual Studio 2017 version 15.9)<br>MSVC++ 14.2 _MSC_VER == 1920 (Visual Studio 2019 Version 16.0)<br>MSVC++ 14.21 _MSC_VER == 1921 (Visual Studio 2019 Version 16.1)<br>MSVC++ 14.22 _MSC_VER == 1922 (Visual Studio 2019 Version 16.2)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt配置使用MSVC编译器</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/16/Qt%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8MSVC%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/16/Qt配置使用MSVC编译器/</id>
    <published>2022-06-15T16:08:20.000Z</published>
    <updated>2022-06-15T16:17:15.314Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意:Qt支持的MSVC就是2017和2015，所以vs也要下载2017，不要直接用最新的，安装路径都用默认的。程序运行失败时可以尝试windeployqt拷贝库文件到本地，然后有可能就能运行了</strong></p><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">VS官网下载</a>Visual Studio Community 2017，在线安装Visual Studio Community2017版本。vs2017如何配置见附文一</p><p><img src="/images/javawz/c75aa6beb6a0fbcc0cdb756a5c963b56.png" alt="在这里插入图片描述"></p><p><a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/" target="_blank" rel="noopener">下载并安装Windows10 SDK</a>,</p><p><img src="/images/javawz/abe739fb9bb25bc7581af57e39983b6d.png" alt="在这里插入图片描述"></p><p>直接下载.exe版本，然后安装。安装中，切记选择Debugging Toolsfor Windows组件，因为在后面需要用这个。</p><p>下载并安装Qt Creator，由于最新的版本好像没有集成mysql的驱动，所以我使用的是较先的5.12.2版本。安装Qt Creator的过程中，记得在安装组件过程中，安装MSVC2017 32位和MSVC2017 32位。注意：建议32位和64位都安装，32位可以在64位系统使用，但是返过来不行</p><p><img src="/images/javawz/45292b5514941d8d03ff3e3693e71dd8.png" alt="img"></p><p>配置Debuggers，具体位置在菜单栏-工具-选项-Kits-Debuggers中。当你Windows 10 SDK安装成功后，他会自动出现这两个exe。</p><p><img src="/images/javawz/78ad27fd2b2e331033695046123fc873.png" alt="在这里插入图片描述"></p><p>当然你也可以自己配置一个，具体如下：</p><p><img src="/images/javawz/98a40306a1bc7e3f2972f0c30bc4a007.png" alt="在这里插入图片描述"></p><p>我配置的就是这样：</p><p><img src="/images/javawz/713987ea46b5f34ddc93f68c46cb4023.png" alt="在这里插入图片描述"></p><p>配置构建套件（Kit），具体位置在菜单栏-工具-选项-Kits-构建套件（Kit）中。之前没有SDK或者其他原因，你的套件前面就会有一个黄色的感叹号。这种你就可以自己更改他的设置：</p><p><img src="/images/javawz/b5e4633ca4da9dcf35c1c0dce2a874e6.png" alt="在这里插入图片描述"></p><p>或者你可以自己新建一个，具体配置如下：</p><p><img src="/images/javawz/f37ceb0f6a279408a04134683423c2c3.png" alt="在这里插入图片描述"></p><h3 id="注意这里msvc的kit需要你自己配置不配是不会自动识别的"><a class="markdownIt-Anchor" href="#注意这里msvc的kit需要你自己配置不配是不会自动识别的"></a> 注意：这里MSVC的kit需要你自己配置，不配是不会自动识别的</h3><p><strong>附文一：安装VS2017并配置QT</strong></p><ol><li>打开VS2017，菜单栏 工具-&gt; 扩展和更新，点击 联机 然后搜索qt，下载</li></ol><p><img src="/images/javawz/fda53c8963e6fa4437387e3147c0d9a3.png" alt="img"></p><ol start="2"><li>下载完成后，关闭VS2017，出现以下安装画面，在其初始化完成后点击“修改”，等待配置完成即可</li></ol><p><img src="/images/javawz/4df9703ba669dcfc0817b999079ae264.png" alt="img"></p><ol start="3"><li>再次打开VS 2017，菜单栏出现 Qt VS tools，新建项目也出现QT项目选项</li></ol><p><img src="/images/javawz/4359d919b09e09cb7a0794c887855c06.png" alt="img"></p><p><img src="/images/javawz/bc1a2a8ea8d130616bee43c22eed8928.png" alt="img"></p><p>底部输出框出现：</p><p><img src="/images/javawz/c034a2679bc0525ce416c9a74dbe4b92.png" alt="img"></p><ol start="4"><li>菜单栏 -&gt; Qt Vs tools -&gt; Qt options -&gt; Add，添加如下路径</li></ol><p><img src="/images/javawz/c8f3a93e1ee0045be9f5ca7603693e5f.png" alt="img"></p><ol start="5"><li>环境变量配置： 这台电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 ，添加Path变量：</li></ol><p><img src="/images/javawz/ef4711f4bd73c576c1df9170f475f819.png" alt="img"></p><p>注意：将C:\Program Files(x86)\Windows Kits\10\bin\10.0.17134.0\x64添加到系统环境变量的Path中去。</p><p>​     Win10 系统环境变量修改方法：此电脑——属性——高级系统设置——高级——环境变量——系统变量——Path——编辑。将路径复制进去后，点击保存便可。</p><ol start="6"><li>安装配置完成</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注意:Qt支持的MSVC就是2017和2015，所以vs也要下载2017，不要直接用最新的，安装路径都用默认的。程序运行失败时可以尝试windeployqt拷贝库文件到本地，然后有可能就能运行了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt操作数据库</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/12/Qt%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/12/Qt操作数据库/</id>
    <published>2022-06-12T15:53:03.000Z</published>
    <updated>2022-06-15T16:17:20.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qt-编译oracle的oci驱动"><a class="markdownIt-Anchor" href="#qt-编译oracle的oci驱动"></a> Qt 编译oracle的OCI驱动</h3><p>源码安装的时候必须选择Sources选项, 里边有数据库驱动的源码</p><p><img src="/images/javawz/image-20220614222417323.png" alt="image-20220614222417323"></p><ol><li>版本和路径说明:<ul><li>Qt版本是Qt5.9.0，安装路径是默认的 C:\Qt\Qt5.9.0</li><li>Oracle客户端版本oracle 11g 安装路径是C:\Oracle\product\11.2.0\client_1</li><li>打开C:\Qt\Qt5.9.0\5.9\Src\qtbase\src\plugins\sqldrivers\oci\ <a href="http://xn--oci-y28dj40fqz5aevae82r.pro" target="_blank" rel="noopener">目录下面的oci.pro</a>。</li></ul></li><li><a href="http://xn--QtCreatoroci-ov8sx05oyokvn7e.pro" target="_blank" rel="noopener">使用QtCreator打开oci.pro</a><ul><li>未进行修改的直接编译结果： Library ‘oci’ is not defined.</li><li>修改oci.pro文件</li><li><img src="/images/javawz/image-20220614222805400.png" alt="image-20220614222805400"></li></ul></li><li>之后再重新编译，就会发现编译通过了，这时候我们在Qt安装的 根目录下面去找 “:\plugins”会发现里面有一个“ sqldrivers ” 文件夹，将其复制到Qt的c:\Qt\Qt5.9.0\5.9\mingw53_32\plugins下 面即可。<ul><li>如果Qt安装根目录在C盘, 那么plugins就在C盘根目录</li><li>编译的时候建议编译两个版本<ul><li>debug</li><li>release</li></ul></li></ul></li></ol><p>以上方法对Qt5.8以后的版本都适用.</p><h2 id="qt操作mysql数据库"><a class="markdownIt-Anchor" href="#qt操作mysql数据库"></a> QT操作mysql数据库</h2><p>Header: include</p><p>qmake: QT += sql</p><p>首先需要在QT项目文件的*.pro文件中添加: QT += core gui sql</p><p>所用到的头文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;qDebug&gt;</span><br><span class="line">#include &lt;QSqlDatabase&gt;</span><br><span class="line">#include &lt;QSqlQuery&gt;</span><br><span class="line">#include &lt;QSqlRecord&gt;</span><br><span class="line">#include &lt;QSqlError&gt;</span><br></pre></td></tr></table></figure><h3 id="1加载数据库驱动"><a class="markdownIt-Anchor" href="#1加载数据库驱动"></a> 1.加载数据库驱动</h3><p><strong>将libmysql.dll库放到下面的目录下: D:\QT\Qt5.10.1\5.10.1\mingw53_32\bin</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看QT支持的驱动</span></span><br><span class="line">qDebug() &lt;&lt; QSqlDatabase::drivers();</span><br><span class="line">输出结果为:</span><br><span class="line"><span class="comment">//("QSQLITE", "QMYSQL", "QMYSQL3", "QOCI", "QOCI8", "QODBC", "QODBC3", "QPSQL", "QPSQL7")</span></span><br><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QMYSQL"</span>);</span><br></pre></td></tr></table></figure><h3 id="2设置账号密码"><a class="markdownIt-Anchor" href="#2设置账号密码"></a> 2.设置账号密码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置账号和密码信息使用QSqlDatabase类的成员函数:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHostName</span><span class="params">(<span class="keyword">const</span> QString &amp;host)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">const</span> QString &amp;password)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDatabaseName</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span></span><br><span class="line">使用方法, 如下所示</span><br><span class="line">db.setHostName(<span class="string">"192.168.10.145"</span>); <span class="comment">//设置mysql主机的IP地址</span></span><br><span class="line">db.setDatabaseName(<span class="string">"scott"</span>); <span class="comment">//设置数据库名</span></span><br><span class="line">db.setUserName(<span class="string">"root"</span>); <span class="comment">//设置用户名</span></span><br><span class="line">db.setPassword(<span class="string">"123456"</span>); <span class="comment">//设置密码</span></span><br><span class="line">其实上面这几步就类似于登录mysql数据库需要的关键信息:</span><br><span class="line">mysql -h192<span class="number">.168</span><span class="number">.10</span><span class="number">.145</span> -uroot -p123456 scott</span><br></pre></td></tr></table></figure><h3 id="3打开数据库"><a class="markdownIt-Anchor" href="#3打开数据库"></a> 3.打开数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> QSqlDatabase::open()</span><br><span class="line">详情查看QT帮助手册</span><br><span class="line">使用方法, 如下所示:</span><br><span class="line"><span class="keyword">if</span>(!db.open())</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"数据库操作失败"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4执行select查询操作"><a class="markdownIt-Anchor" href="#4执行select查询操作"></a> 4.执行select查询操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 需要使用QSqlQuery类的相关函数:</span><br><span class="line">Header: <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> QSqlQuery类的构造函数:</span><br><span class="line">QSqlQuery(<span class="keyword">const</span> QString &amp;query = QString(), QSqlDatabase db = QSqlDatabase())</span><br><span class="line">该构造函数都有默认值, 构造的时候可以不指定:</span><br><span class="line">用法: QSqlQuery query;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 执行select查询语句</span><br><span class="line"><span class="number">3.1</span> 第一种方法, 直接调用exec执行sql语句</span><br><span class="line">例如: query.exec(<span class="string">"select * from dept"</span>);</span><br><span class="line"><span class="number">3.2</span> 第二种方法,先调用prepare准备一个sql语句, 然后再执行exec执行sql语句</span><br><span class="line">例如:</span><br><span class="line">            <span class="keyword">bool</span> success;</span><br><span class="line">            query.prepare(<span class="string">"select * from dept"</span>);</span><br><span class="line">            success = query.exec();</span><br><span class="line">            <span class="keyword">if</span>(!success)</span><br><span class="line">            &#123;</span><br><span class="line">            qDebug() &lt;&lt; <span class="string">"查询失败"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 获取查询表的总字段数</span><br><span class="line">先调用QSqlQuery类的record方法:</span><br><span class="line"><span class="function">QSqlRecord <span class="title">record</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">然后在调用QSqlRecord类的count方法</span><br><span class="line"><span class="keyword">int</span> QSqlRecord::count() <span class="keyword">const</span></span><br><span class="line">例如:</span><br><span class="line">        QSqlRecord rec = query.record();</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"查询结果字段总数为："</span> &lt;&lt; rec.count();</span><br><span class="line">        <span class="comment">//注意: 有的函数有代码示例, 可以直接参考</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 获取查询结果总记录数</span><br><span class="line">调用QSqlQuery类的size方法:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line">例如:</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"查询结果记录总数为"</span> &lt;&lt; query.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> 遍历查询的结果集</span><br><span class="line">获取每一条记录:</span><br><span class="line"><span class="keyword">bool</span> QSqlQuery::next()</span><br><span class="line">通过列的索引位置获取列的值---列的索引从<span class="number">0</span>开始</span><br><span class="line">QVariant QSqlQuery::value(<span class="keyword">int</span> index) <span class="keyword">const</span></span><br><span class="line">通过列名获取列的值:</span><br><span class="line"><span class="function">QVariant <span class="title">value</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span> <span class="keyword">const</span></span></span><br><span class="line">代码示例:</span><br><span class="line">        <span class="keyword">while</span>(query.next())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//qDebug() &lt;&lt; query.value(0).toInt() &lt;&lt; query.value(1).toString() &lt;&lt; query.value(2).toString();</span></span><br><span class="line">        qDebug() &lt;&lt; query.value(<span class="string">"deptno"</span>).toInt() &lt;&lt; query.value(<span class="string">"dname"</span>).toString() &lt;&lt;</span><br><span class="line">        query.value(<span class="string">"loc"</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 移动指向结果集的位置指针:</span><br><span class="line"><span class="keyword">bool</span> QSqlQuery::seek(<span class="keyword">int</span> index, <span class="keyword">bool</span> relative = <span class="literal">false</span>)</span><br><span class="line">例如:</span><br><span class="line">query.seek(<span class="number">-1</span>); <span class="comment">//每次next都会使记录指针移动一次, 可以使用seek函数重置指针位置,类似于文件指针</span></span><br></pre></td></tr></table></figure><h3 id="5执行insert操作"><a class="markdownIt-Anchor" href="#5执行insert操作"></a> 5.执行insert操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:</span><br><span class="line">    query.prepare(<span class="string">"insert into dept values(77, 'sports', 'xiuzheng')"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">2</span>: 使用带有占位符的sql语句, 该语句不是一个完整的sql语句,需要调用bindValue函数给占位符设置值.</span><br><span class="line">    query.prepare(<span class="string">"insert into dept values(?, ?, ?)"</span>);</span><br><span class="line">    <span class="comment">//给字段设置值,字段位置索引从0开始</span></span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="number">99</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="string">"SPORTS"</span>);</span><br><span class="line">    query.bindValue(<span class="number">2</span>, <span class="string">"BEIJING"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">3</span>:直接调用exec并将sql语句作为参数也可以直接插入</span><br><span class="line">    success = query.exec(<span class="string">"insert into dept values(66, 'SALES', 'SHANGHAI')"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6执行update操作"><a class="markdownIt-Anchor" href="#6执行update操作"></a> 6.执行update操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:直接调用execl并将sql语句作为参数执行</span><br><span class="line">    success = query.exec(<span class="string">"update dept set loc='MEIGUO' where deptno=99"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">2</span>:使用带有占位符占位符的sql语句</span><br><span class="line">    query.prepare(<span class="string">"update dept set loc=? where deptno=?"</span>);</span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="string">"JAPAN"</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="number">77</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7执行delete操作"><a class="markdownIt-Anchor" href="#7执行delete操作"></a> 7.执行delete操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:直接调用execl并将sql语句作为参数执行</span><br><span class="line">query.exec(<span class="string">"delete from dept where deptno=99"</span>);</span><br><span class="line">方法<span class="number">2</span>:使用带有占位符的sql语句</span><br><span class="line">    query.prepare(<span class="string">"delete from dept where deptno=? or loc=?"</span>);</span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="number">77</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="string">"SHANGHAI"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8事务处理"><a class="markdownIt-Anchor" href="#8事务处理"></a> 8.事务处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 开启事务</span><br><span class="line">query.exec(<span class="string">"START TRANSACTION"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 设置自动提交和手动提交----&gt;默认情况下mysql是自动提交的</span><br><span class="line">query.exec(<span class="string">"SET AUTOCOMMIT=0"</span>); <span class="comment">//手动提交</span></span><br><span class="line">query.exec(<span class="string">"SET AUTOCOMMIT=1"</span>); <span class="comment">//自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 事务的提交和回滚操作</span><br><span class="line">    query.exec(<span class="string">"COMMIT"</span>);</span><br><span class="line">    query.exec(<span class="string">"ROLLBACK"</span>);</span><br><span class="line">测试方法: 先开启一个新的事务, 并设置为手动提交, 然后插入数据, 最后回滚, 看数据是否已经插入到数据库中;然</span><br><span class="line">后在修改为提交, 查看数据是否已经插入到数据库中.</span><br><span class="line">测试代码如下:</span><br><span class="line">    query.exec(<span class="string">"START TRANSACTION"</span>);</span><br><span class="line">    query.exec(<span class="string">"SET AUTOCOMMIT=0"</span>); <span class="comment">//手动提交</span></span><br><span class="line">    success = query.exec(<span class="string">"insert into dept values(99, 'SALES', 'SHANGHAI')"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        QSqlError lastError = query.lastError();</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">        <span class="comment">//回滚事务</span></span><br><span class="line">        query.exec(<span class="string">"ROLLBACK"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    query.exec(<span class="string">"COMMIT"</span>);</span><br></pre></td></tr></table></figure><h3 id="9关闭数据库"><a class="markdownIt-Anchor" href="#9关闭数据库"></a> 9.关闭数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭数据库</span></span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><p>参考网站: <a href="https://blog.csdn.net/wyansai/" target="_blank" rel="noopener">https://blog.csdn.net/wyansai/</a></p><h2 id="创建sqlite数据库的过程同mysql"><a class="markdownIt-Anchor" href="#创建sqlite数据库的过程同mysql"></a> 创建sqlite数据库的过程—同mysql</h2><p><img src="/images/javawz/image-20220615120258914.png" alt="image-20220615120258914"></p><p><img src="/images/javawz/image-20220615120310264.png" alt="image-20220615120310264"></p><p><img src="/images/javawz/image-20220615120320100.png" alt="image-20220615120320100"></p><p>建好sqlite数据库之后, 可以看到如下图所示:</p><p><img src="/images/javawz/image-20220615120339740.png" alt="image-20220615120339740"></p><p><img src="/images/javawz/image-20220615120350206.png" alt="image-20220615120350206"></p><p>参考网站: <a href="https://www.cnblogs.com/xia-weiwen/archive/2017/05/04/6806709.html" target="_blank" rel="noopener">https://www.cnblogs.com/xia-weiwen/archive/2017/05/04/6806709.html</a></p><p>参考代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">在QT上建立一个控制台应用程序, 然后将代码直接复制上就可以编译测试.</span><br><span class="line">还有就是需要在*.pro文件中添加: QT += sql</span><br><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &lt;QSqlDatabase&gt;</span><br><span class="line">#include &lt;QSqlError&gt;</span><br><span class="line">#include &lt;QSqlQuery&gt;</span><br><span class="line">#include &lt;qDebug&gt;</span><br><span class="line">#include &lt;QString&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QCoreApplication a(argc, argv);</span><br><span class="line">    bool success;</span><br><span class="line">    //建立数据库--加载数据库驱动</span><br><span class="line">    QSqlDatabase database;</span><br><span class="line">    if (QSqlDatabase::contains(&quot;qt_sql_default_connection&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">    database = QSqlDatabase::database(&quot;qt_sql_default_connection&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        database = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);</span><br><span class="line">        database.setDatabaseName(&quot;C:\\Users\\Administrator\\Desktop\\sqlite.db&quot;);</span><br><span class="line">        //db.setDatabaseName(&quot;main&quot;);//有这个会报错</span><br><span class="line">        //database.setUserName(&quot;&quot;);//可以省略</span><br><span class="line">        //database.setPassword(&quot;&quot;);//可以省略</span><br><span class="line">    &#125;</span><br><span class="line">    //打开数据库</span><br><span class="line">    </span><br><span class="line">    if (!database.open())</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Failed to connect database.&quot; &lt;&lt; database.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--新建一个表student作为测试表</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //执行sql语句---新建一个表</span><br><span class="line">    QSqlQuery sql_query;</span><br><span class="line">    /*QString create_sql = &quot;create table student (id int, name varchar(30), age int)&quot;;</span><br><span class="line">    sql_query.prepare(create_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;Table created!&quot;;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--插入数据操作</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //向student表中插入数据</span><br><span class="line">    //第一种方法:</span><br><span class="line">    /*success = sql_query.exec(&quot;insert into student values(1, &apos;xiaowen&apos;, 10)&quot;);</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //第二种方法:</span><br><span class="line">    QString sql = &quot;insert into student values(3, &apos;xiaozi&apos;, 25)&quot;;</span><br><span class="line">    success = sql_query.exec(sql);</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //第三种方法:执行带有占位符的sql语句</span><br><span class="line">    QString insert_sql = &quot;insert into student values (?, ?, ?)&quot;;</span><br><span class="line">    sql_query.prepare(insert_sql);</span><br><span class="line">    /*sql_query.addBindValue(2);</span><br><span class="line">    sql_query.addBindValue(&quot;xiaohu&quot;);</span><br><span class="line">    sql_query.addBindValue(22);*/</span><br><span class="line">    sql_query.bindValue(0, 5);</span><br><span class="line">    sql_query.bindValue(1, &quot;小马&quot;);</span><br><span class="line">sql_query.bindValue(2, 30);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;inserted success!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //批量插入</span><br><span class="line">    insert_sql = &quot;insert into student values(?,?,?)&quot;;</span><br><span class="line">    sql_query.prepare(insert_sql);</span><br><span class="line">    QVariantList GroupIDs;</span><br><span class="line">    GroupIDs.append(0);</span><br><span class="line">    GroupIDs.append(1);</span><br><span class="line">    GroupIDs.append(2);</span><br><span class="line">    QVariantList GroupNames;</span><br><span class="line">    GroupNames.append(&quot;xiaoma&quot;);</span><br><span class="line">    GroupNames.append(&quot;xiaowei&quot;);</span><br><span class="line">    GroupNames.append(&quot;xiaolian&quot;);</span><br><span class="line">    QVariantList GroupAddress;</span><br><span class="line">    GroupAddress.append(10);</span><br><span class="line">    GroupAddress.append(15);</span><br><span class="line">    GroupAddress.append(18);</span><br><span class="line">    sql_query.addBindValue(GroupIDs);</span><br><span class="line">    sql_query.addBindValue(GroupNames);</span><br><span class="line">    sql_query.addBindValue(GroupAddress);</span><br><span class="line">    success = sql_query.execBatch();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;&quot;insert batch data succ&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--更新数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //QString update_sql = &quot;update student set name = :name where id = :id&quot;;</span><br><span class="line">    QString update_sql = &quot;update student set name = ? where id = ?&quot;;</span><br><span class="line">    sql_query.prepare(update_sql);</span><br><span class="line">    //sql_query.bindValue(&quot;:name&quot;, &quot;Qt&quot;);</span><br><span class="line">    </span><br><span class="line">    //sql_query.bindValue(&quot;:id&quot;, 1);</span><br><span class="line">    sql_query.bindValue(0, &quot;Qt&quot;);</span><br><span class="line">    sql_query.bindValue(1, 2);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;updated!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--查询数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    QString select_sql = &quot;select id, name from student&quot;;</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        while(sql_query.next())</span><br><span class="line">        &#123;</span><br><span class="line">            int id = sql_query.value(0).toInt();</span><br><span class="line">            QString name = sql_query.value(1).toString();</span><br><span class="line">            qDebug()&lt;&lt;QString(&quot;id:%1 name:%2&quot;).arg(id).arg(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //查询最大的ID</span><br><span class="line">    QString select_max_sql = &quot;select max(id) from student&quot;;</span><br><span class="line">    int max_id = 0;</span><br><span class="line">    sql_query.prepare(select_max_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        while(sql_query.next())</span><br><span class="line">        &#123;</span><br><span class="line">            max_id = sql_query.value(0).toInt();</span><br><span class="line">            qDebug() &lt;&lt; QString(&quot;max id:%1&quot;).arg(max_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line"></span><br><span class="line">    /--删除数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    QString delete_sql = &quot;delete from student where id = ?&quot;;</span><br><span class="line">    sql_query.prepare(delete_sql);</span><br><span class="line">    sql_query.addBindValue(3);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug()&lt;&lt;&quot;deleted!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //清空表</span><br><span class="line">    /*QString clear_sql = &quot;delete from student&quot;;</span><br><span class="line">    sql_query.prepare(clear_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;table cleared&quot;;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //关闭数据库</span><br><span class="line">    database.close();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;qt-编译oracle的oci驱动&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#qt-编译oracle的oci驱动&quot;&gt;&lt;/a&gt; Qt 编译oracle的OCI驱动&lt;/h3&gt;
&lt;p&gt;源码安装的时候必须选择Sources选项, 里边有数据
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>ORA-24960错误</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/10/ORA-24960%E9%94%99%E8%AF%AF/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/10/ORA-24960错误/</id>
    <published>2022-06-10T14:55:45.000Z</published>
    <updated>2022-06-12T15:43:29.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-ora-24960属性oci_attr_username大于最大允许长度255"><a class="markdownIt-Anchor" href="#ubuntu-ora-24960属性oci_attr_username大于最大允许长度255"></a> Ubuntu ORA-24960:属性OCI_ATTR_USERNAME大于最大允许长度255</h1><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3><p>我正在尝试在Ubuntu上运行以下测试程序，以使用即时客户端OCCI库连接到oracle数据库.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;occi.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace oracle::occi;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    Environment *env = Environment::createEnvironment(Environment::DEFAULT);</span><br><span class="line">    Connection *conn = env-&gt;createConnection( &quot;user&quot;, &quot;1234&quot; ); </span><br><span class="line">    env-&gt;terminateConnection(conn);</span><br><span class="line">    Environment::terminateEnvironment(env);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时没有错误</p><p>但是运行时我会得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">terminate called after throwing an instance of &apos;oracle::occi::SQLException&apos;</span><br><span class="line">  what():  ORA-24960: the attribute  OCI_ATTR_USERNAME is greater than the maximum allowable length of 255</span><br><span class="line">Aborted</span><br></pre></td></tr></table></figure><h3 id="推荐答案"><a class="markdownIt-Anchor" href="#推荐答案"></a> 推荐答案</h3><p>通过还原到较早的编译器解决了该问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install g++-4.8</span><br><span class="line">$ g++-4.8 main.cpp -L ~/instantclient_12_2 -locci -lclntsh -I ~/instantclient_12_2/sdk/include</span><br></pre></td></tr></table></figure><p>也许最新的编译器和库与用于构建OCCI库的编译器和库不兼容.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu-ora-24960属性oci_attr_username大于最大允许长度255&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ubuntu-ora-24960属性oci_attr_username大于最大允许长度255&quot;&gt;
      
    
    </summary>
    
      <category term="编程错误总结" scheme="https://xiaowuyoucy.github.io/categories/%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>oracle_win和linux编程</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/08/oracle-win%E5%92%8Clinux%E7%BC%96%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/08/oracle-win和linux编程/</id>
    <published>2022-06-08T14:40:24.000Z</published>
    <updated>2022-06-17T13:54:38.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于信号处理函数的经验"><a class="markdownIt-Anchor" href="#关于信号处理函数的经验"></a> 关于信号处理函数的经验:</h3><p>1 在信号处理函数中尽可能的要简单<br>2 在信号处理函数中不要打印日志.</p><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h3><p>需要安装oracle服务端对应版本的oracle客户端才行</p><p>比如服务端版本是10.0.1  客户端也必须是10.0.1版本,否则库加载失败或编译不通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;occi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> oracle::occi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化环境</span></span><br><span class="line">Environment *ev = Environment::createEnvironment();</span><br><span class="line"><span class="keyword">if</span> (ev == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"createEnvironment failed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接oracle数据库</span></span><br><span class="line"><span class="built_in">string</span> user = <span class="string">"scott"</span>;</span><br><span class="line"><span class="built_in">string</span> passwd = <span class="string">"tiger"</span>;</span><br><span class="line"><span class="built_in">string</span> connstr = <span class="string">"192.168.10.145:1521/orcl"</span>;</span><br><span class="line">Connection *conn = ev-&gt;createConnection(user, passwd, connstr);</span><br><span class="line"><span class="keyword">if</span> (conn == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database failed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sql语句中不要有分号</span></span><br><span class="line"><span class="comment">/*string sql = "insert into dept values(109, 'lajiao', 'JYL_SC')";</span></span><br><span class="line"><span class="comment">Statement *stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">"delete from dept where deptno=99"</span>;</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">ev-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放环境资源</span></span><br><span class="line">Environment::terminateEnvironment(ev);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><p>初始化环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Environment *env = Environment::createEnvironment();</span><br><span class="line"></span><br><span class="line">成功:返回指针对象</span><br><span class="line">失败:返回NULL</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Connection *Environment::createConnection(const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br><span class="line">userName: 用户名</span><br><span class="line">password: 用户密码</span><br><span class="line">connectString: ip地址:端口/实例名</span><br><span class="line"></span><br><span class="line">成功: 返回指针对象</span><br><span class="line">失败: 返回NULL</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;occi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> oracle::occi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化环境</span></span><br><span class="line">Environment *env = Environment::createEnvironment();</span><br><span class="line"><span class="keyword">if</span>(env==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"create Environment error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//Connection *Environment::createConnection( </span></span><br><span class="line">    <span class="comment">//const string &amp;userName,const string &amp;password, const string &amp;connectString );</span></span><br><span class="line"><span class="built_in">string</span> user=<span class="string">"scott"</span>;</span><br><span class="line"><span class="built_in">string</span> passwd=<span class="string">"tiger"</span>;</span><br><span class="line"><span class="built_in">string</span> connstr=<span class="string">"192.168.10.145:1521/orcl"</span>;</span><br><span class="line">Connection *conn = env-&gt;createConnection(user, passwd, connstr);</span><br><span class="line"><span class="keyword">if</span>(conn==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"connect database error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database OK!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Statement *stmt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">"insert into dept values(11, 'training', 'changping')"</span>;</span><br><span class="line"><span class="comment">//创建Statement对象</span></span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">/*stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(21, 'sport', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">stmt-&gt;setSQL(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(31, 'SALES', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">stmt-&gt;execute(sql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(41, 'XIANGLIAO', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">int num = stmt-&gt;executeUpdate(sql);</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "num==" &lt;&lt; num &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第五种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(51, 'huoguo', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">int num = stmt-&gt;executeUpdate();</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "num==" &lt;&lt; num &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第六种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(:1, :2, :3)";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 61);</span></span><br><span class="line"><span class="comment">stmt-&gt;setString(2, "huajiao");</span></span><br><span class="line"><span class="comment">stmt-&gt;setString(3, "JYL_SC");</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行delete操作</span></span><br><span class="line"><span class="comment">/*sql = "delete from dept where deptno=11";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用占位符的删除操作</span></span><br><span class="line"><span class="comment">/*sql = "delete from dept where deptno=:1";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 21);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行update操作</span></span><br><span class="line"><span class="comment">/*sql = "update dept set dname='xxxxx' where deptno=31";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用占位符的update操作</span></span><br><span class="line"><span class="comment">/*sql = "update dept set dname='yyyy' where deptno=:1";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 41);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行select查询</span></span><br><span class="line"><span class="comment">/*sql = "select * from dept";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);*/</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from dept where deptno&gt;:1"</span>;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环获取结果集的每一行记录的值</span></span><br><span class="line"><span class="keyword">while</span>(rs-&gt;next())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; rs-&gt;getInt(<span class="number">1</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; rs-&gt;getString(<span class="number">2</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; rs-&gt;getString(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭结果集</span></span><br><span class="line">stmt-&gt;closeResultSet(rs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//端口数据库连接</span></span><br><span class="line">env-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭环境</span></span><br><span class="line">Environment::terminateEnvironment(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于信号处理函数的经验&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于信号处理函数的经验&quot;&gt;&lt;/a&gt; 关于信号处理函数的经验:&lt;/h3&gt;
&lt;p&gt;1 在信号处理函数中尽可能的要简单&lt;br&gt;
2 在信号处理函数中不要打印日志.&lt;/p&gt;

      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>保存配置信息的几种方式</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/%E4%BF%9D%E5%AD%98%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/保存配置信息的几种方式/</id>
    <published>2022-06-05T11:23:18.000Z</published>
    <updated>2022-06-05T11:25:10.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="保存配置信息的几种方式"><a class="markdownIt-Anchor" href="#保存配置信息的几种方式"></a> 保存配置信息的几种方式:</h2><h3 id="1-配置文件"><a class="markdownIt-Anchor" href="#1-配置文件"></a> 1 配置文件:</h3><p>​1.1 用户自定义的格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user:scott</span><br><span class="line">passwd:tiger</span><br><span class="line">SID:orcl</span><br><span class="line">socott|tiger|orcl</span><br></pre></td></tr></table></figure><p>​1.2 xml格式的配置文件<br>​1.3 json格式的配置文件</p><h3 id="2-将配置信息设置成环境变量"><a class="markdownIt-Anchor" href="#2-将配置信息设置成环境变量"></a> 2 将配置信息设置成环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *p = getenv(&quot;HOME&quot;);//获取环境变量的值</span><br></pre></td></tr></table></figure><h3 id="3-存到数据库表中"><a class="markdownIt-Anchor" href="#3-存到数据库表中"></a> 3 存到数据库表中</h3><p>将配置信息写入配置文件有什么好处?<br> 省去编译源代码的麻烦,只要修改配置文件之后重启服务即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;保存配置信息的几种方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#保存配置信息的几种方式&quot;&gt;&lt;/a&gt; 保存配置信息的几种方式:&lt;/h2&gt;
&lt;h3 id=&quot;1-配置文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>OCCI</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/OCCI/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/OCCI/</id>
    <published>2022-06-05T00:38:09.000Z</published>
    <updated>2022-06-05T11:22:19.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写服务端程序"><a class="markdownIt-Anchor" href="#编写服务端程序"></a> 编写服务端程序</h3><p>服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,<br>可以使用map完成线程ID和TcpSocket的映射关系, map&lt;pthread_t, TcpSocket *&gt;m_listSocket;</p><p>线程的回调函数需要访问到服务端操作类的成员变量, 所以应该将回调函数设置为类的友元函数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto it = m_socketList.find(threadId);----&gt;自动类型推导</span><br><span class="line">但是如果it是先定义后赋值不行:</span><br><span class="line">auto it;</span><br><span class="line">it = m_socketList.find(threadId);</span><br></pre></td></tr></table></figure><p>在使用SHA1进行加密的时候, 函数参数是什么类型, 就提供什么类型的数据, 否则可能会有问题.</p><h3 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h3><ol><li>守护进程特点</li></ol><blockquote><ul><li>后台服务进程</li><li>独立于控制终端</li><li>周期性执行某任务</li><li>不受用户登录注销影响</li><li>一般采用以d结尾的名字(服务)</li></ul></blockquote><ol start="2"><li><p>创建守护进程的流程</p><ul><li>创建子进程, 杀死父进程 - 必须的<ul><li>创建子进程: fork();</li><li>守护进程是怎么来的?<ul><li>有一个没有任何职务的进程才可以被加官进爵, 守护进程是一个会话<ul><li>范围: 进程 -&gt; 进程组 -&gt; 会话<ul><li>进程组中的组长: 默认是进程组中的第一个进程</li></ul></li></ul></li></ul></li><li>如何杀死父进程<ul><li>exit(0)</li><li>kill()</li><li>raise() -&gt; 自己给自己发信号</li><li>abort() -&gt; 给自己发送SIGABRT信号</li></ul></li></ul></li><li>子进程提升为会话 - 必须的<ul><li>setsid()</li><li>提升成功之后, 进程就脱离了终端</li></ul></li><li>修改工作目录 - 可选<ul><li>chdir();</li><li>/mnt/U盘1/app<ul><li>在当前目录/mnt/U盘1/下 执行 ./app, 进程的工作路径: /mnt/U盘1/</li></ul></li><li>将工作目录切换到一个不能被卸载的路径下就可以了<ul><li>chdir(&quot;/home&quot;);</li></ul></li></ul></li><li>修改掩码 - 可选<ul><li>umask();</li></ul></li><li>关闭/重定向文件描述法 - 可选<ul><li>标准输入 -&gt; 0</li><li>标准输出 -&gt; 1</li><li>标准错误 -&gt; 2</li><li>如果的重定向, 对应的位置: /dev/null<ul><li>/dev/null是一个黑洞文件,不管放什么数据进去,文件大小都是0</li><li>重定向的目的: 排除干扰</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int devFd = open(&quot;/dev/null&quot;, O_RDWR);</span><br><span class="line">int dup2(int oldfd, int newfd);</span><br><span class="line">dup2(devFd, 0);</span><br><span class="line">newfd 不管之前指向哪一个文件, 现在指向oldfd</span><br></pre></td></tr></table></figure><ul><li>核心处理动作 -&gt; 周期性的执行某些操作 - 必须</li><li>关闭守护进程 -&gt; 使用shell脚本管理 - 可选</li></ul></li></ol><h2 id="occi"><a class="markdownIt-Anchor" href="#occi"></a> OCCI</h2><blockquote><p>Oracle C<ins>调用接口 – OCCI 即 Oracle C</ins> Call Interface<br>OCCI 是Oracle 的C++ API, 允许你使用面向对象的特性、本地类、C++语言的方法来访问Oracle数据库</p></blockquote><h3 id="occi-介绍"><a class="markdownIt-Anchor" href="#occi-介绍"></a> OCCI 介绍</h3><ol><li><p>优势</p><blockquote><ol><li>基于标准C++和面向对象的设计；</li><li>效率较高；</li><li>适合开发C/S模式的程序，软件中间层；</li></ol></blockquote></li><li><p>特性</p><blockquote><ol><li>完整支持SQL/PLSQL</li><li>为不断增长的用户和请求提供了弹性选项</li><li>为使用用户自定义类型，如C中的类，提供了无缝接口</li><li>支持所有的Oracle数据类型以及LOB types（大对象）</li><li>可以访问数据库元数据</li></ol></blockquote></li></ol><p>OCCI 头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;occi.h&gt; -- 程序中只需要包含这一个头文件</span><br><span class="line">#include &lt;occiCommon.h&gt;</span><br><span class="line">#include &lt;occiControl.h&gt;</span><br><span class="line">#include &lt;occiData.h&gt;</span><br><span class="line">#include &lt;occiObjects.h&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>OCCI 库</li></ol><ul><li><p>Windows</p><ul><li>oraocci11.lib/ oraocci11d.lib</li><li>oraocci11.dll/ oraocci11d.dll</li></ul></li><li><p>Linux</p><ul><li><a href="http://libnnz11.so" target="_blank" rel="noopener">libnnz11.so</a></li><li><a href="http://libocci.so" target="_blank" rel="noopener">libocci.so</a></li><li><a href="http://libclntsh.so" target="_blank" rel="noopener">libclntsh.so</a></li></ul></li></ul><p>linux下的环境配置-----root用户下进行配置</p><ul><li>将oracle_client_11gR2.tar.gz文件上传值linux操作系统的/opt目录下</li><li>执行tar -zxvf oracle_client_11gR2.tar.gz解压至当前目录下</li><li>进入到刚刚解压的目录, 打开&lt;&lt;Hi-看我,<a href="http://xn--wnuv08b.sh" target="_blank" rel="noopener">看我.sh</a>&gt;&gt;</li><li>将文件中的export导出的环境变量拷贝到root用户的.bashrc文件中<ul><li>注意: 若解压的目录不是/opt, 环境变量中的路径需要修改</li></ul></li><li>执行. .bashrc或者source .bashrc 或者退出再次登录使配置的环境变量生效<ul><li>可以执行echo $OCCI_HOME进行查看, 若看到内容则设置成功</li></ul></li><li>切换到/opt/instantclient_11_2/network/admin目录下<ul><li>打开tnsnames.ora文件, 修改其中的HOST部分, 将IP修改成实际的oracle服务的IP地址</li></ul></li><li>occi.cpp测试代码上传到root用户下<ul><li>然后执行: g++ -o a.out occi.cpp -locci -lclntsh, 编译通过表明设置的没有问题.</li><li>若执行报错, 查看一下代码中的oracle的用户名和密码是否正确.</li></ul></li></ul><p>常见的几个环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PATH:命令或者可执行程序搜索的路径</span><br><span class="line"></span><br><span class="line">C_INCLUDE_PATH:gcc编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">CPLUS_INCLUDE_PATH: g++编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH:查找动态链接库的路径</span><br><span class="line"></span><br><span class="line">LIBRARY_PATH: 查找静态库的路径</span><br><span class="line"></span><br><span class="line">若编译的时候使用静态库文件:</span><br><span class="line">则: gcc foo.c -L /home/itcast/lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oracle用户安装了oracle服务系统, 本身就有oracle编程需要的库文件和头文件:</span><br><span class="line">&gt; export OCCI_HOME=/u01/app/oracle/product/11.2.0/db_1</span><br><span class="line">&gt; export OCCI_INCLUDE_DIR=$OCCI_HOME/rdbms/public</span><br><span class="line">&gt; export OCCI_LIBRARY_PATH=$OCCI_HOME/lib</span><br><span class="line">&gt; export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的库目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export LIBRARY_PATH=$$LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的头文件目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export CPLUS_INCLUDE_PATH=$$CPLUS_INCLUDE_PATH:$OCCI_INCLUDE_DIR</span><br><span class="line">&gt;</span><br><span class="line">&gt; 上面的环境变量中OCCI_HOME和OCCI_INCLUDE_DIR与在root中的配置不同, 其余相同</span><br></pre></td></tr></table></figure><h2 id="occi使用"><a class="markdownIt-Anchor" href="#occi使用"></a> OCCI使用</h2><h3 id="初始化-environment-类"><a class="markdownIt-Anchor" href="#初始化-environment-类"></a> 初始化 - Environment 类</h3><blockquote><p>OCCI通过创建一个Environment的对象完成初始化工作。<br>可以通过Environment创建数据库连接，从而进行其它的操作<br>要创建Environment，应该调用Environment类的静态方法createEnvironment()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 环境初始化</span><br><span class="line">Environment* env = Environment::createEnvironment();</span><br><span class="line">// 关闭, 释放资源</span><br><span class="line">Environment::terminateEnvironment(env);</span><br></pre></td></tr></table></figure><h3 id="连接数据库-connection-类"><a class="markdownIt-Anchor" href="#连接数据库-connection-类"></a> 连接数据库 - Connection 类</h3><blockquote><p>连接数据库通过Connection类的对象实例实现</p><p>调用Environment类的createConnection()方法可以创建一个Connection对象；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 函数原型:</span><br><span class="line">Connection *Environment::createConnection(</span><br><span class="line">const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数调用</span><br><span class="line">const string userName = &quot;scott&quot;; // 用户名</span><br><span class="line">const string passwd = &quot;tiger&quot;; // 密码</span><br><span class="line">const string connstr = &quot;192.168.247.129:1521/orcl&quot;; // 数据库连接串</span><br><span class="line">Connection* conn = env-&gt;createConnection(userName, passwd, connstr);</span><br></pre></td></tr></table></figure><blockquote><p>使用Environment::terminateConnection()断开连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 断开连接</span><br><span class="line">env-&gt;terminateConnection(conn);</span><br></pre></td></tr></table></figure><h3 id="执行sql"><a class="markdownIt-Anchor" href="#执行sql"></a> 执行SQL</h3><blockquote><p>Statement 类用于执行SQL语句,并获取返回结果。<br>ResultSet 类用于处理SELECT 查询的结果。<br>对于所有类型的数据的绑定或者获取，OCCI都提供了统一的方法<br>setXXX 方法用于Statement<br>getXXX 方法用于Statement &amp; ResultSet<br>OCCI会自动处理类型之间的转换。<br>使用方法：<br>使用Connection::createStatement()创建Statement对象, 指定 SQL 命令(DDL/DML/query)作为参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 操作函数</span><br><span class="line">Connection::createStatement(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::setSQL(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::execute(string &amp;sql); // can be used for any SQL, returns status</span><br><span class="line"></span><br><span class="line">Statement::executeUpdate(string &amp;sql); // returns Insert/Update/Delete count</span><br><span class="line"></span><br><span class="line">Statement::executeQuery(string &amp;sql); // returns ResultSet（结果集）</span><br></pre></td></tr></table></figure><blockquote><p>使用 setXXX 方法传递要绑定用于输入的值<br>使用合适的execute方法执行SQL<br>对于SELECT 查询, 使用ResultSet 对象处理返回结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 插入操作</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Dept(Deptno,Dname, Loc) values (1,</span><br><span class="line">‘ACCOUNTS’, ‘ZONE1’ ”);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line">conn-&gt;terminateStatement(stmt); // 关闭查询, 释放资源</span><br></pre></td></tr></table></figure><blockquote><p>使用绑定参数的DML（数据操作语句）示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Emp(EmpNo,Ename) values(:1, :2) ”);</span><br><span class="line">//1 and 2 are bind placeholders</span><br><span class="line">int empno = 2;</span><br><span class="line">string empname = “JOHN W”;</span><br><span class="line">//first parameter is bind position, second is value</span><br><span class="line">stmt-&gt;setInt(1, empno);</span><br><span class="line">stmt-&gt;setString(2, empname);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br></pre></td></tr></table></figure><blockquote><p>执行SELECT查询并处理结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(</span><br><span class="line">“select Empno, Ename, Sal from Emp where Hiredate &gt;= :1”);</span><br><span class="line">//automatically converted to Date</span><br><span class="line">stmt-&gt;setString(1, “01-JAN-1987”);</span><br><span class="line">//executeQuery returns a ResultSet</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line">//ResultSet::next fetches rows and returns FALSE</span><br><span class="line">//when no more rows</span><br><span class="line">while (rs-&gt;next() == true)</span><br><span class="line">&#123;</span><br><span class="line">    //get values using the getXXX methods of ResultSet</span><br><span class="line">    empno = rs-&gt;getInt(1);</span><br><span class="line">    empname = rs-&gt;getString(2);</span><br><span class="line">    empsalary = rs-&gt;getFloat(3);</span><br><span class="line">&#125;</span><br><span class="line">stmt-&gt;closeResultSet(rs);//to free resources</span><br></pre></td></tr></table></figure><h2 id="window配置occi环境"><a class="markdownIt-Anchor" href="#window配置occi环境"></a> window配置occi环境</h2><p>包含头文件和库路径还有库名字</p><p><img src="/images/javawz/image-20220605190706609.png" alt="image-20220605190706609"></p><h3 id="1-linux如何查找动态库编译-运行"><a class="markdownIt-Anchor" href="#1-linux如何查找动态库编译-运行"></a> 1. Linux如何查找动态库(编译、运行) ?</h3><ol><li>编译和链接时，动态库的搜索路径顺序如下（注意不会递归性地在其子目录下搜索）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) gcc编译、链接命令中的-L选项；</span><br><span class="line">(2) gcc的环境变量的 LIBRARY_PATH（多个路径用冒号分割）；</span><br><span class="line">(3) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib。</span><br></pre></td></tr></table></figure><ol start="2"><li>运行时，动态库的搜索路径顺序如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(1) 编译目标代码时指定的动态库搜索路径：用选项-Wl,rpath和include指定的动态库的搜索路径，</span><br><span class="line">比如gcc -Wl,-rpath,include -L. -ldltest hello.c，在执行文件时会搜索路径`./include`;</span><br><span class="line"></span><br><span class="line">(2) 环境变量LD_LIBRARY_PATH（多个路径用冒号分割）;</span><br><span class="line"></span><br><span class="line">(3) 修改 /etc/ld.so.conf 配置文件指定的动态库绝对路径, /etc/ld.so.cache</span><br><span class="line">（通过sudo ldconfig生效，一般是非root用户时使用）;</span><br><span class="line"></span><br><span class="line">(4) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib 等。</span><br></pre></td></tr></table></figure><h3 id="2-oracle解锁用户"><a class="markdownIt-Anchor" href="#2-oracle解锁用户"></a> 2. oracle解锁用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解锁用户</span><br><span class="line">ALTER USER scott ACCOUNT UNLOCK;</span><br><span class="line">// 重写设置密码</span><br><span class="line">ALTER USER scott IDENTIFIED BY tiger;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写服务端程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编写服务端程序&quot;&gt;&lt;/a&gt; 编写服务端程序&lt;/h3&gt;
&lt;p&gt;服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell脚本</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/04/Shell%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/04/Shell脚本/</id>
    <published>2022-06-04T11:01:14.000Z</published>
    <updated>2022-06-05T00:37:49.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shlle脚本介绍"><a class="markdownIt-Anchor" href="#shlle脚本介绍"></a> shlle脚本介绍</h2><ul><li><p>什么是shell脚本?</p><ul><li>一系列的shell命令的集合, 可以有函数, 条件判断/循环语句, 这样的一个文件叫做shell脚本</li></ul></li><li><p>基本格式?</p><ul><li>命名格式<ul><li>一般使用.sh为后缀命名文件 (这是一个约定, 不是必须的)</li></ul></li><li>书写格式</li></ul><p>cat /etc/shells  //查看解析器<br>echo $SHELL //查看当前默认的解析器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># - 注释</span><br><span class="line"></span><br><span class="line"># 第一行的内容</span><br><span class="line">#! /bin/bash - 解析当前脚本文件使用的命令解析器</span><br><span class="line">#! /bin/sh</span><br><span class="line">bourne shell -&gt;sh -&gt; unix</span><br><span class="line">bourne again shell -&gt; bash</span><br><span class="line"></span><br><span class="line"># 第二行开始</span><br><span class="line">shell命令 1</span><br><span class="line">shell命令 2</span><br><span class="line">shell命令 3</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="执行脚本"><a class="markdownIt-Anchor" href="#执行脚本"></a> 执行脚本</h3><p>脚本创建出来之后是一个普通文件 -&gt; 没有执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x xxx.sh</span><br><span class="line">./xxx.sh -&gt; 最常用的方式</span><br><span class="line">sh xxx.sh</span><br></pre></td></tr></table></figure><h3 id="shell中的变量"><a class="markdownIt-Anchor" href="#shell中的变量"></a> shell中的变量</h3><ol><li>如何定义变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># c</span><br><span class="line">int a;</span><br><span class="line">int number = 9;</span><br><span class="line"># shell - 变量没有数据类型, 新变量定义必须初始化</span><br><span class="line">value=123</span><br><span class="line">value1=&quot;123&quot;</span><br><span class="line">value1=&quot;hello,world&quot;</span><br><span class="line">赋值的时候=前后不能有空格</span><br></pre></td></tr></table></figure><ol start="2"><li>位置变量 - 执行shell脚本时候, 传递到内部的参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$0 - 脚本文件的名字</span><br><span class="line">$1 - 第一个参数</span><br><span class="line">$2 - 第二个参数</span><br><span class="line">$3 - 第三参数</span><br><span class="line">...</span><br><span class="line">$n - 第n个参数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $3</span><br><span class="line">echo $4</span><br><span class="line">echo $5</span><br><span class="line">echo $6</span><br><span class="line"># 执行脚本</span><br><span class="line">./test.sh 1 2 3 4 a b c d e f</span><br><span class="line"># 输出结果</span><br><span class="line">./test.sh</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><ol start="3"><li>特殊变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$#: 表示参数的个数</span><br><span class="line">$@: 表示全部的参数</span><br><span class="line"></span><br><span class="line">$$ : 当前进程的PID</span><br><span class="line">$?: 程序执行完成之后的返回值</span><br><span class="line"></span><br><span class="line">4. 取普通变量的值</span><br><span class="line"></span><br><span class="line">第一种方式: $变量名</span><br><span class="line">$PATH</span><br><span class="line">$value</span><br><span class="line"></span><br><span class="line">第二种方式: $&#123;变量名&#125;</span><br><span class="line">$&#123;PATH&#125;</span><br><span class="line">$&#123;value&#125;</span><br><span class="line"></span><br><span class="line">5. 取命令执行之后的得到的值</span><br><span class="line">第一种方式</span><br><span class="line">value=$(shell命令)</span><br><span class="line"></span><br><span class="line">第二种方式:</span><br><span class="line">value=`shell命令`</span><br></pre></td></tr></table></figure><h5 id="使用和的区别对于中的变量会直接展开-而对于当做普通字符串对待"><a class="markdownIt-Anchor" href="#使用和的区别对于中的变量会直接展开-而对于当做普通字符串对待"></a> <code>使用&quot;&quot;和''的区别:对于&quot;&quot;中的变量会直接展开, 而对于''当做普通字符串对待</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如: echo &quot;$HOME&quot;  和echo &apos;$HOME&apos;</span><br></pre></td></tr></table></figure><h3 id="条件判断语法-if"><a class="markdownIt-Anchor" href="#条件判断语法-if"></a> 条件判断语法 - if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 条件判断语句和[ 判断语句 ]左右必须要有空格间隔</span><br><span class="line">if[ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br><span class="line"># 或者</span><br><span class="line">if[ 判断语句 ]</span><br><span class="line">then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">elif [ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">else</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol><li>文件状态测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-b filename 当filename 存在并且是块文件时返回真(返回0)</span><br><span class="line">-c filename 当filename 存在并且是字符文件时返回真</span><br><span class="line">-d pathname 当pathname 存在并且是一个目录时返回真</span><br><span class="line">-e pathname 当由pathname 指定的文件或目录存在时返回真</span><br><span class="line">-f filename 当filename 存在并且是正规(普通)文件时返回真</span><br><span class="line">-g pathname 当由pathname 指定的文件或目录存在并且设置了SGID 位时返回真</span><br><span class="line">-h/-L filename当filename 存在并且是符号链接文件时返回真 (或 filename)</span><br><span class="line">-k pathname 当由pathname 指定的文件或目录存在并且设置了&quot;粘滞&quot;位时返回真</span><br><span class="line">-p filename 当filename 存在并且是命名管道时返回真</span><br><span class="line">-r pathname 当由pathname 指定的文件或目录存在并且可读时返回真</span><br><span class="line">-s filename 当filename 存在并且文件大小大于0 时返回真</span><br><span class="line">-S filename 当filename 存在并且是socket 时返回真</span><br><span class="line">-t fd 当fd 是与终端设备相关联的文件描述符时返回真</span><br><span class="line">-u pathname 当由pathname 指定的文件或目录存在并且设置了SUID 位时返回真</span><br><span class="line">-w pathname 当由pathname 指定的文件或目录存在并且可写时返回真</span><br><span class="line">-x pathname 当由pathname 指定的文件或目录存在并且可执行时返回真</span><br><span class="line">-O pathname</span><br><span class="line">当由pathname 存在并且被当前进程的有效用户id 的用户拥有时返回真(字母O 大写)</span><br><span class="line">-G pathname 当由pathname 存在并且属于当前进程的有效用户id 的用户的用户组时返回真</span><br><span class="line">file1 -nt file2 file1 比file2 新时返回真</span><br><span class="line">file1 -ot file2 file1 比file2 旧时返回真</span><br><span class="line">f1 -ef f2 files f1 and f2 are hard links to the same file</span><br></pre></td></tr></table></figure><ol start="2"><li>常见字符串测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-z string 字符串string 为空串(长度为0)时返回真</span><br><span class="line">-n string 字符串string 为非空串时返回真</span><br><span class="line">str1 = str2 字符串str1 和字符串str2 相等时返回真</span><br><span class="line">str1 == str2 同 =</span><br><span class="line">str1 != str2 字符串str1 和字符串str2 不相等时返回真</span><br><span class="line">str1 &lt; str2 按字典顺序排序，字符串str1 在字符串str2 之前</span><br><span class="line">str1 &gt; str2 按字典顺序排序，字符串str1 在字符串str2 之后</span><br></pre></td></tr></table></figure><ol start="3"><li>常见数值测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nt1 -eq int2 如果int1 等于int2，则返回真</span><br><span class="line">int1 -ne int2 如果int1 不等于int2，则返回真</span><br><span class="line">int1 -lt int2 如果int1 小于int2，则返回真</span><br><span class="line">int1 -le int2 如果int1 小于等于int2，则返回真</span><br><span class="line">int1 -gt int2 如果int1 大于int2，则返回真</span><br><span class="line">int1 -ge int2 如果int1 大于等于int2，则返回真</span><br></pre></td></tr></table></figure><ol start="4"><li>测试时使用的逻辑操作符</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a 逻辑与，操作符两边均为真，结果为真，否则为假。</span><br><span class="line">-o 逻辑或，操作符两边一边为真，结果为真，否则为假。</span><br><span class="line">! 逻辑否，条件为假，结果为真。</span><br></pre></td></tr></table></figure><h3 id="循环控制"><a class="markdownIt-Anchor" href="#循环控制"></a> 循环控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">循环:</span><br><span class="line">    for语句和while</span><br><span class="line">    例1:</span><br><span class="line">    for var in apple pear banana</span><br><span class="line">    do</span><br><span class="line">    echo $var</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    例2:打印当前所有的文件</span><br><span class="line">    for file in `ls`</span><br><span class="line">    do</span><br><span class="line">    echo $file</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    例3:求1-100的和</span><br><span class="line">    sum=0</span><br><span class="line">    for i in &#123;1..100&#125;</span><br><span class="line">    do</span><br><span class="line">    sum=$[$sum+$i]</span><br><span class="line">    done</span><br><span class="line">    echo &quot;sum==[$sum]&quot;</span><br><span class="line">    如果一个文件名字为: file.xxx, 想去掉~~得到file可以: basename file.xxx &quot;.xxx&quot;</span><br><span class="line">    </span><br><span class="line">    使用这种方法可以获得文件名字去掉扩展名后的名字: 如: basename test.sh .sh</span><br><span class="line">    案例: 某个目录下有a.bak b.bak c.bak d.bak, 要求把扩展名去掉, 变成a b c d</span><br><span class="line">    mv a.bak $(basename a.bak .bak)</span><br><span class="line">    </span><br><span class="line">    while的用法:</span><br><span class="line">    案例: 求1-10的和</span><br><span class="line">    sum=0</span><br><span class="line">    i=0</span><br><span class="line">    while [ $i -le 10 ]</span><br><span class="line">    do</span><br><span class="line">    sum=$[$sum+$i]</span><br><span class="line">    i=$[$i+1]</span><br><span class="line">    done</span><br><span class="line">    echo &quot;sum==[$sum]&quot;</span><br></pre></td></tr></table></figure><p>整数的运算要用$[]括起来</p><h3 id="awk介绍"><a class="markdownIt-Anchor" href="#awk介绍"></a> awk介绍</h3><p>awk 可以将文件拆分成功若干行, 根据指定的分隔符, 再将每一行拆分成若干列, 默认按照空格或tab进行拆分</p><ol><li>基本语法格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk 参数 &apos;条件&#123;处理动作&#125;&apos; 操作的文件或数据</span><br><span class="line">awk 参数 &apos;/正则表达式&#123;处理动作&#125;&apos; 操作的文件或数据</span><br></pre></td></tr></table></figure><ol start="2"><li>指定分隔符的参数: -F<ul><li>-F分隔符</li><li>如果不指定分隔符, 默认是按照空格或者tab进行拆分</li></ul></li><li>如何使用变量取出某一列?<ul><li>$0 - 当前行</li><li>$1 - 拆分的第一列</li><li>$2 - 拆分的第二列</li><li>$3 - 拆分的第三列</li><li>…</li><li>打印某一列的值<ul><li>print $n</li></ul></li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F &apos;:&apos; &apos;&#123;print $0&#125;&apos; /etc/passwd</span><br><span class="line">代表/etc/passwd文件中的内容以:分割,然后打印当前行数据</span><br></pre></td></tr></table></figure><h3 id="使用shell脚本结束某个进程"><a class="markdownIt-Anchor" href="#使用shell脚本结束某个进程"></a> 使用shell脚本结束某个进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">PID=`ps -ef|grep xxx|grep -v grep|awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">#grep -v grep 代表去除最后的grep</span><br><span class="line"></span><br><span class="line">#如果PID不为空 则结束进程</span><br><span class="line">if [-n $PID]</span><br><span class="line">then</span><br><span class="line">kill -9 $PID</span><br><span class="line">else</span><br><span class="line">echo &quot;没有可结束的进程&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shlle脚本介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#shlle脚本介绍&quot;&gt;&lt;/a&gt; shlle脚本介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是shell脚本?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一系列的shell命令的集合, 
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>服务端类实现</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/服务端类实现/</id>
    <published>2022-05-31T00:20:21.000Z</published>
    <updated>2022-05-31T00:31:55.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="serveroperationh"><a class="markdownIt-Anchor" href="#serveroperationh"></a> ServerOperation.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SecKeyShm.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpServer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"OCCIOP.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>serverID[<span class="number">12</span>];<span class="comment">// 服务器端编号</span></span><br><span class="line"><span class="keyword">char</span>dbUse[<span class="number">24</span>]; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="keyword">char</span>dbPasswd[<span class="number">24</span>]; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="keyword">char</span>dbSID[<span class="number">24</span>]; <span class="comment">// 数据库sid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sPort;<span class="comment">// 服务器绑定的端口</span></span><br><span class="line"><span class="keyword">int</span>maxnode;<span class="comment">// 共享内存最大网点树 客户端默认1个</span></span><br><span class="line"><span class="keyword">int</span> shmkey;<span class="comment">// 共享内存keyid 创建共享内存时使用 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerOperation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ServerOperation(ServerInfo *info);</span><br><span class="line">~ServerOperation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器开始工作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startWork</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥协商</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyAgree</span><span class="params">(RequestMsg* reqmsg, <span class="keyword">char</span>** outData, <span class="keyword">int</span>&amp; outLen)</span></span>;</span><br><span class="line"><span class="comment">// 秘钥校验</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyCheck</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥注销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyRevoke</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥查看</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span>* <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span>;</span><br><span class="line"><span class="comment">// 线程回调也可使用静态成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">wrokingHard</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">catchSignal</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span>* randBuf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ServerInfo m_info;</span><br><span class="line">SecKeyShm* m_shm;</span><br><span class="line">TcpServer m_server;</span><br><span class="line">TcpSocket* m_client;</span><br><span class="line">OCCIOP m_occi;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">pthread_t</span>, TcpSocket*&gt; m_listSocket;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> m_stop;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="serveroperationcpp"><a class="markdownIt-Anchor" href="#serveroperationcpp"></a> ServerOperation.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ServerOperation.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RespondFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/hmac.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sha.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ServerOperation::m_stop = <span class="literal">false</span>;<span class="comment">// 静态变量初始化</span></span><br><span class="line"></span><br><span class="line">ServerOperation::ServerOperation(ServerInfo * info)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_info, info, <span class="keyword">sizeof</span>(ServerInfo));</span><br><span class="line">m_shm = <span class="keyword">new</span> SecKeyShm(m_info.shmkey, m_info.maxnode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerOperation::~ServerOperation()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ServerOperation::startWork()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//socket-setsockopt-bind-listen</span></span><br><span class="line">m_server.setListen(m_info.sPort);</span><br><span class="line"><span class="keyword">pthread_t</span> threadID;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//accept新的客户端连接</span></span><br><span class="line">m_client = m_server.acceptConn();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个子线程</span></span><br><span class="line">pthread_create(&amp;threadID, <span class="literal">NULL</span>, working, <span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//设置子线程为分离属性</span></span><br><span class="line">pthread_detach(threadID);</span><br><span class="line">m_listSocket.insert(make_pair(threadID, m_client));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ServerOperation::secKeyAgree(RequestMsg * reqMsg, <span class="keyword">char</span> ** outData, <span class="keyword">int</span> &amp; outLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//验证消息认证码</span></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md[SHA256_DIGEST_LENGTH];</span><br><span class="line"><span class="keyword">char</span> authCode[SHA256_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(key, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line"><span class="built_in">sprintf</span>(key, <span class="string">"@%s+%s@"</span>, reqMsg-&gt;serverId, reqMsg-&gt;clientId);</span><br><span class="line">HMAC(EVP_sha256(), key, <span class="built_in">strlen</span>(key), (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)reqMsg-&gt;r1, <span class="built_in">strlen</span>(reqMsg-&gt;r1), md, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHA256_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;authCode[<span class="number">2</span> * i], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将生成的消息认证码和客户端的r1的消息认证做比对</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(authCode, reqMsg-&gt;authCode) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"消息认证码错误"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机字符串r2</span></span><br><span class="line">RespondMsg rspMsg;</span><br><span class="line"><span class="built_in">memset</span>(&amp;rspMsg, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(rspMsg));</span><br><span class="line">getRandString(<span class="keyword">sizeof</span>(rspMsg.r2), rspMsg.r2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将随机字符串r2和r1进行拼接, 然后生成秘钥</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> md[SHA_DIGEST_LENGTH];</span><br><span class="line"><span class="keyword">char</span> seckey[SHA_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(seckey, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(seckey));</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"%s%s"</span>, reqMsg-&gt;r1, rspMsg.r2);</span><br><span class="line">SHA1((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)buf), md);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;SHA_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;seckey[i * <span class="number">2</span>], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给应答结构体赋值</span></span><br><span class="line">rspMsg.seckeyid = <span class="number">1</span>;  <span class="comment">//获取秘钥ID</span></span><br><span class="line">rspMsg.rv = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(rspMsg.serverId, m_info.serverID);</span><br><span class="line"><span class="built_in">strcpy</span>(rspMsg.clientId, reqMsg-&gt;clientId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将要发送给客户端的应答结构体进行编码</span></span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line"><span class="keyword">char</span> *sendData = <span class="literal">NULL</span>;</span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RespondFactory(&amp;rspMsg);</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">pCodec-&gt;msgEncode(&amp;sendData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据给客户端</span></span><br><span class="line"><span class="keyword">pthread_t</span> thread = pthread_self();</span><br><span class="line">TcpSocket* socket = m_listSocket[thread];</span><br><span class="line">socket-&gt;sendMsg(sendData, dataLen);</span><br><span class="line"><span class="built_in">free</span>(sendData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写秘钥信息到共享内存</span></span><br><span class="line">NodeSHMInfo node;</span><br><span class="line"><span class="built_in">memset</span>(&amp;node, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(NodeSHMInfo));</span><br><span class="line">node.status = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(node.seckey, seckey);</span><br><span class="line"><span class="built_in">strcpy</span>(node.clientID, rspMsg.clientId);</span><br><span class="line"><span class="built_in">strcpy</span>(node.serverID, m_info.serverID);</span><br><span class="line">node.seckeyID = rspMsg.seckeyid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将秘钥信息写入共享内存</span></span><br><span class="line">m_shm-&gt;shmWrite(&amp;node);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">socket-&gt;disConnect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ServerOperation::getRandString(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = <span class="string">'Z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = <span class="string">'z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元函数, 可以在该友元函数中通过对应的类对象调用期私有成员函数或者私有变量</span></span><br><span class="line"><span class="comment">// 子线程 - 进行业务流程处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">pthread_t</span> thread = pthread_self();</span><br><span class="line">ServerOperation *op = (ServerOperation *)arg;</span><br><span class="line">TcpSocket* socket = op-&gt;m_listSocket[thread];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *inData;</span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line">socket-&gt;recvMsg(&amp;inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RequestFactory();</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">RequestMsg *pMsg = (RequestMsg *)pCodec-&gt;msgDecode(inData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="comment">//delete pCodec;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断clientID是否合法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断客户端要请求什么服务</span></span><br><span class="line"><span class="keyword">char</span> *outData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(pMsg-&gt;cmdType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::NewOrUpdate:</span><br><span class="line">op-&gt;secKeyAgree(pMsg, &amp;outData, dataLen);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> RequestCodec::Check:</span><br><span class="line">op-&gt;secKeyCheck();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::Revoke:</span><br><span class="line">op-&gt;secKeyRevoke();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::View:</span><br><span class="line">op-&gt;secKeyView();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;serveroperationh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#serveroperationh&quot;&gt;&lt;/a&gt; ServerOperation.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端类实现</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/客户端类实现/</id>
    <published>2022-05-31T00:16:28.000Z</published>
    <updated>2022-05-31T00:19:16.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="clientoperationh"><a class="markdownIt-Anchor" href="#clientoperationh"></a> ClientOperation.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SecKeyShm.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> clinetID[<span class="number">12</span>];<span class="comment">// 客户端ID</span></span><br><span class="line"><span class="keyword">char</span> serverID[<span class="number">12</span>];<span class="comment">// 服务器ID</span></span><br><span class="line"><span class="comment">//char authCode[65];// 消息认证码</span></span><br><span class="line"><span class="keyword">char</span> serverIP[<span class="number">32</span>];<span class="comment">// 服务器IP</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> serverPort;<span class="comment">// 服务器端口</span></span><br><span class="line"><span class="keyword">int</span> maxNode;<span class="comment">// 共享内存节点个数</span></span><br><span class="line"><span class="keyword">int</span> shmKey;<span class="comment">// 共享内存的Key</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientOperation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ClientOperation(ClientInfo *info);</span><br><span class="line">~ClientOperation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秘钥协商</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyAgree</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥校验</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyCheck</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 秘钥注销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyRevoke</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 秘钥查看</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyView</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span>* randBuf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ClientInfo m_info;</span><br><span class="line">TcpSocket m_socket;</span><br><span class="line">SecKeyShm* m_shm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="clientoperationcpp"><a class="markdownIt-Anchor" href="#clientoperationcpp"></a> ClientOperation.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ClientOperation.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/hmac.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sha.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CodecFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RespondFactory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ClientOperation::ClientOperation(ClientInfo * info)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_info, info, <span class="keyword">sizeof</span>(ClientInfo));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建共享内存</span></span><br><span class="line">m_shm = <span class="keyword">new</span> SecKeyShm(m_info.shmKey, m_info.maxNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClientOperation::~ClientOperation()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ClientOperation::secKeyAgree()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//准备请求数据 </span></span><br><span class="line">RequestMsg req;</span><br><span class="line"><span class="built_in">memset</span>(&amp;req, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(RequestMsg));</span><br><span class="line">req.cmdType = RequestCodec::NewOrUpdate;</span><br><span class="line"><span class="built_in">strcpy</span>(req.clientId, m_info.clinetID);</span><br><span class="line"><span class="built_in">strcpy</span>(req.serverId, m_info.serverID);</span><br><span class="line">getRandString(<span class="keyword">sizeof</span>(req.r1), req.r1);</span><br><span class="line"><span class="comment">//使用hmac函数生成哈希值----消息认证码</span></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md[SHA256_DIGEST_LENGTH];</span><br><span class="line"><span class="built_in">memset</span>(key, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line"><span class="built_in">sprintf</span>(key, <span class="string">"@%s+%s@"</span>, req.serverId, req.clientId);</span><br><span class="line">HMAC(EVP_sha256(), key, <span class="built_in">strlen</span>(key), (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)req.r1, <span class="built_in">strlen</span>(req.r1), md, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHA256_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;req.authCode[<span class="number">2</span> * i], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"key:"</span> &lt;&lt; key &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1:"</span> &lt;&lt; req.r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"authCode:"</span> &lt;&lt; req.authCode &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将要发送的数据进行编码</span></span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line"><span class="keyword">char</span> *outData = <span class="literal">NULL</span>;</span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RequestFactory(&amp;req);</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">pCodec-&gt;msgEncode(&amp;outData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务端</span></span><br><span class="line">m_socket.connectToHost(m_info.serverIP, m_info.serverPort);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求数据给服务端</span></span><br><span class="line">m_socket.sendMsg(outData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待接收服务端的应答</span></span><br><span class="line"><span class="keyword">char</span> *inData;</span><br><span class="line">m_socket.recvMsg(&amp;inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">factory = <span class="keyword">new</span> RespondFactory();</span><br><span class="line">pCodec = factory-&gt;createCodec();</span><br><span class="line">RespondMsg *pMsg = (RespondMsg *)pCodec-&gt;msgDecode(inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断服务端是否成功</span></span><br><span class="line"><span class="keyword">if</span> (pMsg-&gt;rv == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥协商失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥协商成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将服务端的r2和客户端的r1拼接生成秘钥</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md1[SHA_DIGEST_LENGTH];</span><br><span class="line"><span class="built_in">memset</span>(md1, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(md1));</span><br><span class="line"><span class="keyword">char</span> seckey[SHA_DIGEST_LENGTH*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(seckey, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(seckey));</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"%s%s"</span>, req.r1, pMsg-&gt;r2);</span><br><span class="line">SHA1((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)buf), md1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SHA_DIGEST_LENGTH; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">sprintf</span>(&amp;seckey[i*<span class="number">2</span>], <span class="string">"%02x"</span>, md1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥: "</span> &lt;&lt; seckey &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给秘钥结构体赋值</span></span><br><span class="line">NodeSHMInfo node;</span><br><span class="line"><span class="built_in">memset</span>(&amp;node, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(NodeSHMInfo));</span><br><span class="line">node.status = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(node.seckey, seckey);</span><br><span class="line"><span class="built_in">strcpy</span>(node.clientID, m_info.clinetID);</span><br><span class="line"><span class="built_in">strcpy</span>(node.serverID, m_info.serverID);</span><br><span class="line">node.seckeyID = pMsg-&gt;seckeyid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将秘钥信息写入共享内存</span></span><br><span class="line">m_shm-&gt;shmWrite(&amp;node);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭网络连接</span></span><br><span class="line">m_socket.disConnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// char randBuf[64]; , 参数 64, randBuf</span></span><br><span class="line"><span class="keyword">void</span> ClientOperation::getRandString(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">26</span> + <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">26</span> + <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;clientoperationh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#clientoperationh&quot;&gt;&lt;/a&gt; ClientOperation.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希算法hmac的使用方法</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95hmac%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/哈希算法hmac的使用方法/</id>
    <published>2022-05-30T23:58:39.000Z</published>
    <updated>2022-05-31T00:08:23.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成<br>一个消息摘要作为输出。<br>Hash-based Message Authentication Code - HMAC</p></blockquote><h3 id="需要包含头文件"><a class="markdownIt-Anchor" href="#需要包含头文件"></a> 需要包含头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmac.h</span><br></pre></td></tr></table></figure><ul><li>第一种方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 适合处理少量数据</span><br><span class="line">unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,</span><br><span class="line">const unsigned char *d, size_t n, unsigned char *md,</span><br><span class="line">unsigned int *md_len);</span><br><span class="line">- 参数evp_md:</span><br><span class="line">- EVP_md5()</span><br><span class="line">- EVP_sha1()</span><br><span class="line">- EVP_sha224()</span><br><span class="line">- EVP_sha256()</span><br><span class="line">........</span><br><span class="line">- 参数key: 传入, 秘钥, 需要将其和原始数据组合进行哈希运算</span><br><span class="line">- 参数key_len: 秘钥的长度</span><br><span class="line">- 参数d: 原始数据</span><br><span class="line">- 参数n: 原始数据d的长度</span><br><span class="line">- 参数md: 传出, 保存的是生成的散列值</span><br><span class="line">- 参数md_len: 传出, md的长度</span><br></pre></td></tr></table></figure><p>evp_md 参数在evp.h头文件中记录着,使用什么加密方式可以去查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;openssl/evp.h&gt;</span><br></pre></td></tr></table></figure><ul><li>第二种方式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 适合处理数据量比较大的情况</span><br><span class="line">HMAC_CTX *HMAC_CTX_new(void);</span><br><span class="line">int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,</span><br><span class="line">const EVP_MD *md, ENGINE *impl)</span><br><span class="line">int HMAC_Init(HMAC_CTX *ctx, const void *key, int len,</span><br><span class="line">const EVP_MD *md))</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- key: 秘钥</span><br><span class="line">- len: 秘钥长度</span><br><span class="line">- md:</span><br><span class="line">- EVP_md5();</span><br><span class="line">- EVP_sha1();</span><br><span class="line">- EVP_sha256();</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加数据</span><br><span class="line">int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data,</span><br><span class="line">size_t len);</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- data: 原始数据</span><br><span class="line">- len: 原始数据长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 计算结果</span><br><span class="line">int HMAC_Final(HMAC_CTX *ctx, unsigned char *md,</span><br><span class="line">unsigned int *len);</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- md: 传出参数, 存储得到的散列值</span><br><span class="line">- len: 传出, md散列值的长度</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;HMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成&lt;br&gt;
一个消息摘要作为输出。&lt;br&gt;
Hash-based Message Authentication Code - HMAC&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>生成随机字符串</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/生成随机字符串/</id>
    <published>2022-05-30T23:56:43.000Z</published>
    <updated>2022-05-30T23:57:19.485Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = <span class="string">'Z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = <span class="string">'z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>VS2017编译linux程序时出错的解决办法</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/VS2017%E7%BC%96%E8%AF%91linux%E7%A8%8B%E5%BA%8F%E6%97%B6%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/VS2017编译linux程序时出错的解决办法/</id>
    <published>2022-05-30T23:53:34.000Z</published>
    <updated>2022-05-30T23:55:01.661Z</updated>
    
    <content type="html"><![CDATA[<p>VS2017编译linux程序时，如果出错，一般会出现下面的错误提示信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g++ exited with code 1, please see the Output Window - Build output for more details (NOTE:</span><br><span class="line">the build output verbosity might need to be changed in Tools Options to see more information in</span><br><span class="line">the Output Window).</span><br></pre></td></tr></table></figure><p>解决办法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VS2017 -&gt; 工具 -&gt; 选项 -&gt; 项目和解决方案 -&gt; 生成并运行，将“MSBuild项目生成输出详细级别”和“MSBuild项目</span><br><span class="line">生成日志文件详细级别”调整为“普通”，这样在编译linux程序时如果编译出错，可以看到详细的错误信息。</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220531075434776.png" alt="image-20220531075434776"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;VS2017编译linux程序时，如果出错，一般会出现下面的错误提示信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>秘钥协商服务整体流程描述</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E7%A7%98%E9%92%A5%E5%8D%8F%E5%95%86%E6%9C%8D%E5%8A%A1%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E6%8F%8F%E8%BF%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/秘钥协商服务整体流程描述/</id>
    <published>2022-05-30T23:32:56.000Z</published>
    <updated>2022-05-30T23:49:39.869Z</updated>
    
    <content type="html"><![CDATA[<p>关于共享内存:<br>使用共享内存的时候, 如果想记录共享内存的相关信息, 可以<br>在共享内存的头部来记录信息, 比如设计一个结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Head</span><br><span class="line">&#123;</span><br><span class="line">int total;//最多可以存放多少个</span><br><span class="line">int useNum;//当前可用的个数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220531073654443.png" alt="image-20220531073654443"></p><h3 id="1秘钥协商的流程"><a class="markdownIt-Anchor" href="#1秘钥协商的流程"></a> 1.秘钥协商的流程</h3><ul><li>在秘钥协商客户端生成一随机字符串 - rand1</li><li>客户端将rand1发送给秘钥协商服务器</li><li>服务器接收客户端发送的rand1, 在服务器端生成一另外一个随机字符串rand2</li><li>服务器将rand1和rand2进行混合运算生成一个新的字符串 - seckey1<ul><li>通过哈希函数</li></ul></li><li>服务器将生成的rand2发送给客户端</li><li>客户端接收数据, 客户端有rand1和rand2<ul><li>通过哈希函数进行运算 - seckey2</li></ul></li><li>可以将seckey1和seckey2作为秘钥</li></ul><h3 id="2秘钥校验"><a class="markdownIt-Anchor" href="#2秘钥校验"></a> 2.秘钥校验</h3><ul><li>当秘钥协商成功之后, 需要再次校验客户端和服务器生成的秘钥是否相同<ul><li>如何校验:<ul><li>将秘钥进行哈希运算, 比较散列值</li></ul></li></ul></li></ul><h3 id="3秘钥注销"><a class="markdownIt-Anchor" href="#3秘钥注销"></a> 3.秘钥注销</h3><ul><li>不再继续使用的秘钥需要注销<ul><li>需要标记秘钥的状态:<ul><li>bool status<ul><li>status == 1: 可用</li><li>status == 0: 不可用</li></ul></li></ul></li></ul></li></ul><h3 id="4秘钥查看"><a class="markdownIt-Anchor" href="#4秘钥查看"></a> 4.秘钥查看</h3><ul><li>查看不是当前秘钥的信息</li><li>查看的是历史秘钥<ul><li>根据网点查看</li><li>根据日期查看</li></ul></li></ul><h3 id="5使用的数据结构"><a class="markdownIt-Anchor" href="#5使用的数据结构"></a> 5.使用的数据结构</h3><ul><li>秘钥协商客户端</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 客户端给服务器发送数据的时候用到的数据结构</span><br><span class="line">struct RequestMsg</span><br><span class="line">&#123;</span><br><span class="line">//1 密钥协商 //2 密钥校验; // 3 密钥注销</span><br><span class="line">int cmdType; // 报文类型</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char authCode[65]; // 认证码 - openssl hmac</span><br><span class="line">char serverId[12]; // 服务器端编号</span><br><span class="line">char r1[64]; // 客户端随机数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- cmdType: 客户端请求的类型, 服务器根据这个变量做不同的处理</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- authCode: 消息认证码, 判定消息是否被篡改过</span><br><span class="line">- (原始数据 + 秘钥) * 哈希运算 = 散列值</span><br><span class="line">- r1: 客户端生成的随机字符串, 生成秘钥其中的一部分原材料</span><br></pre></td></tr></table></figure><ul><li>秘钥协商服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 服务器给客户端回复的时候用的到结构</span><br><span class="line">struct RespondMsg</span><br><span class="line">&#123;</span><br><span class="line">int rv; // 返回值</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char serverId[12]; // 服务器编号</span><br><span class="line">char r2[64]; // 服务器端随机数</span><br><span class="line">int seckeyid; // 对称密钥编号 keysn</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- rv: return value - &gt; 服务器对客户端请求的处理结果</span><br><span class="line">- 0: 正确</span><br><span class="line">- -1: 错误</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- r2: 服务器生成的随机字符串, 生成秘钥其中的一部分原材料</span><br><span class="line">- seckeyid: 生成的新的秘钥之后, 需要编号, 该动作是有秘钥协商服务器完成的</span><br></pre></td></tr></table></figure><ol><li>写一个人机交互程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">printf(&quot;0-退出, 1-协商, 2-校验, 3-注销\n&quot;);</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">// 键盘捕捉</span><br><span class="line">cin &gt;&gt; sel;</span><br><span class="line">switch(sel)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">// 秘钥协商</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>用户输入1, 进入秘钥协商</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">创建一个 RequestMsg对象, 并初始化</span><br><span class="line">将要发送的数据序列化 - 得到一个字符串</span><br><span class="line">创建通信的套接字, 并且连接到秘钥协商服务器</span><br><span class="line">发送序列化之后的字符串</span><br><span class="line">阻塞等待接收服务器回发的数据 - &gt; 字符串</span><br><span class="line">服务器序列化之后得到的字符串</span><br><span class="line">需要接接收的字符串解码, 数据还原得到RespondMsg对象</span><br><span class="line">查看服务器处理结果 - &gt; rv的值</span><br><span class="line">// 服务器给客户端回复的时候用的到结构</span><br><span class="line">struct RespondMsg</span><br><span class="line">&#123;</span><br><span class="line">int rv; // 返回值</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char serverId[12]; // 服务器编号</span><br><span class="line">char r2[64]; // 服务器端随机数</span><br><span class="line">int seckeyid; // 对称密钥编号 keysn</span><br><span class="line">&#125;;</span><br><span class="line">- rv: return value - &gt; 服务器对客户端请求的处理结果</span><br><span class="line">- 0: 正确</span><br><span class="line">- -1: 错误</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- r2: 服务器生成的随机字符串, 生成秘钥其中的一部分原材料</span><br><span class="line">- seckeyid: 生成的新的秘钥之后, 需要编号, 该动作是有秘钥协商服务器完成的</span><br><span class="line">失败 - &gt; 直接退出, 通过用户</span><br><span class="line">成功 -&gt; 继续</span><br><span class="line">通过服务器发送过来的r2和自己 的r1组合</span><br><span class="line">进行哈希运算 -&gt; 散列值 -&gt; 秘钥</span><br><span class="line">将生成的秘钥写入共享内存</span><br><span class="line">class NodeSHMInfo &#123; </span><br><span class="line">public: </span><br><span class="line">int status;</span><br><span class="line">int seckeyID;</span><br><span class="line">char clientID[12];</span><br><span class="line">char serverID[12];</span><br><span class="line">char seckey[128]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>NodeSHMInfo 类型的变量可以从配置文件或者是环境变量中获取;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于共享内存:&lt;br&gt;
使用共享内存的时候, 如果想记录共享内存的相关信息, 可以&lt;br&gt;
在共享内存的头部来记录信息, 比如设计一个结构体&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存类的测试</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%B1%BB%E7%9A%84%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/共享内存类的测试/</id>
    <published>2022-05-30T16:26:10.000Z</published>
    <updated>2022-05-30T16:26:39.889Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;SecKeyShm.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">char clientID[16] = &#123;0&#125;;</span><br><span class="line">char serverID[16] = &#123;0&#125;;</span><br><span class="line">strcpy(clientID, argv[1]);</span><br><span class="line">strcpy(serverID, argv[2]);</span><br><span class="line"></span><br><span class="line">//SecKeyShm shm(0x1234, 10);</span><br><span class="line">SecKeyShm shm(0x1234);</span><br><span class="line"></span><br><span class="line">NodeSHMInfo info;</span><br><span class="line">memset(&amp;info, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">info.status = 199;</span><br><span class="line">info.seckeyID = 11;</span><br><span class="line">strcpy(info.clientID, clientID);</span><br><span class="line">strcpy(info.serverID, serverID);</span><br><span class="line">strcpy(info.seckey, &quot;0001&quot;);</span><br><span class="line">shm.shmWrite(&amp;info);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;----------------&quot; &lt;&lt; endl;</span><br><span class="line">SecKeyShm shm1(0x1234);</span><br><span class="line">memset(&amp;info, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">shm1.shmRead(clientID, serverID, &amp;info);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;status:&quot; &lt;&lt; info.status &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckeyID:&quot; &lt;&lt; info.seckeyID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;clientID:&quot; &lt;&lt; info.clientID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;serverID:&quot; &lt;&lt; info.serverID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckey:&quot; &lt;&lt; info.seckey &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">shm1.printShm();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存业务类代码编写</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%9A%E5%8A%A1%E7%B1%BB%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/共享内存业务类代码编写/</id>
    <published>2022-05-30T16:21:24.000Z</published>
    <updated>2022-05-30T16:22:55.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="seckeyshmh"><a class="markdownIt-Anchor" href="#seckeyshmh"></a> SecKeyShm.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;ShareMemory.h&quot;</span><br><span class="line"></span><br><span class="line">class NodeSHMInfo</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int status;</span><br><span class="line">int seckeyID;</span><br><span class="line">char clientID[12];</span><br><span class="line">char serverID[12];</span><br><span class="line">char seckey[128];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class SecKeyShm : public ShareMemory</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">SecKeyShm(int key);</span><br><span class="line">SecKeyShm(int key, int maxNode);</span><br><span class="line">SecKeyShm(const char* pathName);</span><br><span class="line">SecKeyShm(const char* pathName, int maxNode);</span><br><span class="line">~SecKeyShm();</span><br><span class="line"></span><br><span class="line">int shmWrite(NodeSHMInfo* pNodeInfo);</span><br><span class="line">int shmRead(const char* clientID, const char* serverID, NodeSHMInfo* pNodeInfo);</span><br><span class="line"></span><br><span class="line">//for test</span><br><span class="line">void printShm();</span><br><span class="line">private:</span><br><span class="line">int m_maxNode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="seckeyshmcpp"><a class="markdownIt-Anchor" href="#seckeyshmcpp"></a> SecKeyShm.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;SecKeyShm.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(int key):ShareMemory(key)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(int key, int maxNode):</span><br><span class="line">ShareMemory(key, sizeof(int) + maxNode*sizeof(NodeSHMInfo)), m_maxNode(maxNode)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//初始化共享内存</span><br><span class="line">memset(p, 0x00, sizeof(int) + maxNode*sizeof(NodeSHMInfo));</span><br><span class="line"></span><br><span class="line">//将maxNode写入共享内存的头4个字节</span><br><span class="line">memcpy(p, &amp;m_maxNode, sizeof(int));</span><br><span class="line"></span><br><span class="line">//断开与共享内存的连接</span><br><span class="line">unmapShm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(const char* pathName): ShareMemory(pathName)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(const char* pathName, int maxNode):</span><br><span class="line">ShareMemory(pathName, sizeof(int) + maxNode*sizeof(NodeSHMInfo)), m_maxNode(maxNode)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//初始化共享内存</span><br><span class="line">memset(p, 0x00, sizeof(int) + maxNode*sizeof(NodeSHMInfo));</span><br><span class="line"></span><br><span class="line">//将maxNode写入共享内存的头4个字节</span><br><span class="line">memcpy(p, &amp;m_maxNode, sizeof(int));</span><br><span class="line"></span><br><span class="line">//断开与共享内存的连接</span><br><span class="line">unmapShm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::~SecKeyShm()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SecKeyShm::shmWrite(NodeSHMInfo* pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">//先查找原有的</span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strcmp(pNodeInfo-&gt;clientID, pNode[i].clientID)==0 &amp;&amp;</span><br><span class="line">   strcmp(pNodeInfo-&gt;serverID, pNode[i].serverID)==0)</span><br><span class="line">&#123;</span><br><span class="line">memcpy(&amp;pNode[i], pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//没找到原有的, 找一个空闲可用的</span><br><span class="line">NodeSHMInfo tmp;</span><br><span class="line">memset(&amp;tmp, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">if(memcmp(&amp;pNode[i], &amp;tmp, sizeof(NodeSHMInfo))==0) </span><br><span class="line">&#123;</span><br><span class="line">memcpy(&amp;pNode[i], pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//断开与共享内存的关联</span><br><span class="line">unmapShm();</span><br><span class="line"></span><br><span class="line">//没有空闲位置可用</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;no space to use&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SecKeyShm::shmRead(const char* clientID, const char* serverID, NodeSHMInfo* pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strcmp(clientID, pNode[i].clientID)==0 &amp;&amp;</span><br><span class="line">   strcmp(serverID, pNode[i].serverID)==0)</span><br><span class="line">&#123;</span><br><span class="line">memcpy(pNodeInfo, &amp;pNode[i], sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//断开与共享内存的关联</span><br><span class="line">unmapShm();</span><br><span class="line"></span><br><span class="line">//没有找到节点</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;not found&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SecKeyShm::printShm()</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;-------&quot; &lt;&lt; i &lt;&lt; &quot;-------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;status:&quot; &lt;&lt; pNode[i].status &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckeyID:&quot; &lt;&lt; pNode[i].seckeyID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;clientID:&quot; &lt;&lt; pNode[i].clientID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;serverID:&quot; &lt;&lt; pNode[i].serverID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckey:&quot; &lt;&lt; pNode[i].seckey &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;seckeyshmh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#seckeyshmh&quot;&gt;&lt;/a&gt; SecKeyShm.h&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存基础类的代码编写</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/30/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%B1%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/30/共享内存基础类的代码编写/</id>
    <published>2022-05-30T15:22:19.000Z</published>
    <updated>2022-05-30T16:20:02.955Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/image-20220530233334564.png" alt="image-20220530233334564"></p><h3 id="sharememoryh"><a class="markdownIt-Anchor" href="#sharememoryh"></a> ShareMemory.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> RandX = <span class="string">'x'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareMemory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ShareMemory(<span class="keyword">int</span> key);</span><br><span class="line">ShareMemory(<span class="keyword">int</span> key, <span class="keyword">int</span> size);</span><br><span class="line">ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name);</span><br><span class="line">ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> size);</span><br><span class="line"><span class="keyword">virtual</span> ~ShareMemory();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">mapShm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unmapShm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delShm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getShmID</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> shmSize, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_shmID;</span><br><span class="line"><span class="keyword">void</span>* m_shmAddr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sharememorycpp"><a class="markdownIt-Anchor" href="#sharememorycpp"></a> ShareMemory.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ShareMemory.h"</span></span></span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">int</span> key)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = getShmID(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">int</span> key, <span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = getShmID(key, size, IPC_CREAT | <span class="number">0755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">key_t</span> key = ftok(name, RandX);</span><br><span class="line">m_shmID = getShmID(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">key_t</span> key = ftok(name, RandX);</span><br><span class="line">m_shmID = getShmID(key, size, IPC_CREAT | <span class="number">0755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::getShmID(<span class="keyword">key_t</span> key, <span class="keyword">int</span> shmSize, <span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = shmget(key, shmSize, flag);</span><br><span class="line"><span class="keyword">if</span>(m_shmID&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印日志</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_shmID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::~ShareMemory()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *ShareMemory::mapShm()</span><br><span class="line">&#123;</span><br><span class="line">m_shmAddr = shmat(m_shmID, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(m_shmAddr==(<span class="keyword">void</span> *)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//日志</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_shmAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::unmapShm()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = shmdt(m_shmAddr);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::delShm()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = shmctl(m_shmID, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/image-20220530233334564.png&quot; alt=&quot;image-20220530233334564&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;sharememoryh&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
</feed>
