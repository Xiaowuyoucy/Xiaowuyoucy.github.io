<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2020-03-13T16:16:30.850Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java毫秒值的概念和作用</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/14/java00134%E6%AF%AB%E7%A7%92%E5%80%BC%E7%9A%84%E6%A6%82%E5%BF%B5%E5%92%8C%E4%BD%9C%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/14/java00134毫秒值的概念和作用/</id>
    <published>2020-03-13T16:12:30.000Z</published>
    <updated>2020-03-13T16:16:30.850Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java毫秒值的概念和作用"><a class="markdownIt-Anchor" href="#java毫秒值的概念和作用"></a> java毫秒值的概念和作用</h1><h3 id="javautildate"><a class="markdownIt-Anchor" href="#javautildate"></a> java.util.Date:</h3><p>表示日期和时间的类<br>类 Date 表示特定的瞬间，精确到毫秒。<br>毫秒:千分之一秒 1000毫秒=1秒<br>特定的瞬间:一个时间点,一刹那时间<br>2088-08-08 09:55:33:333 瞬间<br>2088-08-08 09:55:33:334 瞬间<br>2088-08-08 09:55:33:334 瞬间<br>…</p><h3 id="毫秒值的作用"><a class="markdownIt-Anchor" href="#毫秒值的作用"></a> 毫秒值的作用:</h3><p>可以对时间和日期进行计算<br>2099-01-03 到 2088-01-01 中间一共有多少天<br>可以日期转换为毫秒进行计算,计算完毕,在把毫秒转换为日期</p><h3 id="把日期转换为毫秒"><a class="markdownIt-Anchor" href="#把日期转换为毫秒"></a> 把日期转换为毫秒:</h3><h3 id="当前的日期"><a class="markdownIt-Anchor" href="#当前的日期"></a> 当前的日期:</h3><p>2088-01-01</p><h3 id="时间原点0毫秒"><a class="markdownIt-Anchor" href="#时间原点0毫秒"></a> 时间原点(0毫秒):</h3><p>1970 年 1 月 1 日 00:00:00(英国格林威治)<br>就是计算当前日期到时间原点之间一共经历了多少毫秒 (3742767540068L)</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意:</h3><p>中国属于东八区,会把时间增加8个小时<br>1970 年 1 月 1 日 08:00:00</p><h3 id="把毫秒转换为日期"><a class="markdownIt-Anchor" href="#把毫秒转换为日期"></a> 把毫秒转换为日期:</h3><p>1 天 = 24 × 60 × 60 = 86400 秒  = 86400 x 1000 = 86400000毫秒</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Date;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Date</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        System.out.println(System.currentTimeMillis());<span class="comment">//获取当前系统时间到1970 年 1 月 1 日 00:00:00经历了多少毫秒</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java毫秒值的概念和作用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java毫秒值的概念和作用&quot;&gt;&lt;/a&gt; java毫秒值的概念和作用&lt;/h1&gt;
&lt;h3 id=&quot;javautildate&quot;&gt;&lt;a class=&quot;markdownIt
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java Object类的toString方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/14/java00133Object%E7%B1%BB%E7%9A%84toString%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/14/java00133Object类的toString方法/</id>
    <published>2020-03-13T16:07:55.000Z</published>
    <updated>2020-03-13T16:10:15.376Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-object类的tostring方法"><a class="markdownIt-Anchor" href="#java-object类的tostring方法"></a> java Object类的toString方法</h1><p>​    java.lang.Object<br>​    类 Object 是类层次结构的根(父)类。<br>​    每个类(Person,Student…)都使用 Object 作为超(父)类。<br>​    所有对象（包括数组）都实现这个类的方法。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01ToString</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Person类默认继承了Object类,所以可以使用Object类中的toString方法</span></span><br><span class="line"><span class="comment">            String toString() 返回该对象的字符串表示。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p = <span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>);</span><br><span class="line">        String s = p.toString();</span><br><span class="line">        System.out.println(s);<span class="comment">//com.itheima.demo01.Object.Person@75412c2f | abc | Person&#123;name=张三 ,age=18&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接打印对象的名字,其实就是调用对象的toString  p=p.toString();</span></span><br><span class="line">        System.out.println(p);<span class="comment">//com.itheima.demo01.Object.Person@5f150435 | abc | Person&#123;name=张三 ,age=18&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//看一个类是否重写了toString,直接打印这个类的对象即可,如果没有重写toString方法那么打印的是对象的地址值</span></span><br><span class="line">        Random r = <span class="keyword">new</span> Random();</span><br><span class="line">        System.out.println(r);<span class="comment">//java.util.Random@3f3afe78  没有重写toString方法</span></span><br><span class="line"></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(sc);<span class="comment">//java.util.Scanner[delimiters=\p&#123;javaWhitespace&#125;+..  重写toString方法</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line">        list.add(<span class="number">2</span>);</span><br><span class="line">        list.add(<span class="number">3</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[1, 2, 3]  重写toString方法</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-object类的tostring方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-object类的tostring方法&quot;&gt;&lt;/a&gt; java Object类的toString方法&lt;/h1&gt;
&lt;p&gt;​    java
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>javaObject类的equals方法2</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00132Object%E7%B1%BB%E7%9A%84equals%E6%96%B9%E6%B3%952/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00132Object类的equals方法2/</id>
    <published>2020-03-13T15:59:19.000Z</published>
    <updated>2020-03-13T16:05:16.979Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-object类的equals方法2"><a class="markdownIt-Anchor" href="#java-object类的equals方法2"></a> java Object类的equals方法2</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">boolean</span> b = s1.equals(s2); <span class="comment">// NullPointerException null是不能调用方法的,会抛出空指针异常</span></span><br><span class="line">System.out.println(b);</span><br><span class="line"></span><br><span class="line"><span class="comment">//Objects类的equals方法:对两个对象进行比较,防止空指针异常</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object a, Object b)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (a == b) || (a != <span class="keyword">null</span> &amp;&amp; a.equals(b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Objects</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        String s1 = <span class="string">"abc"</span>;</span><br><span class="line">        <span class="comment">//String s1 = null;</span></span><br><span class="line">        String s2 = <span class="string">"abc"</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = Objects.equals(s1, s2);</span><br><span class="line">        System.out.println(b2);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        直接打印对象的地址值没有意义,需要重写Object类中的toString方法</span></span><br><span class="line"><span class="comment">        打印对象的属性(name,age)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">       //return "abc";</span></span><br><span class="line"><span class="comment">       return "Person&#123;name="+name+" ,age="+age+"&#125;";</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public String toString() &#123;</span></span><br><span class="line"><span class="comment">        return "Person&#123;" +</span></span><br><span class="line"><span class="comment">                "name='" + name + '\'' +</span></span><br><span class="line"><span class="comment">                ", age=" + age +</span></span><br><span class="line"><span class="comment">                '&#125;';</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        Object类的equals方法,默认比较的是两个对象的地址值,没有意义</span></span><br><span class="line"><span class="comment">        所以我们要重写equals方法,比较两个对象的属性(name,age)</span></span><br><span class="line"><span class="comment">        问题:</span></span><br><span class="line"><span class="comment">            隐含着一个多态</span></span><br><span class="line"><span class="comment">            多态的弊端:无法使用子类特有的内容(属性和方法)</span></span><br><span class="line"><span class="comment">            Object obj = p2 = new Person("古力娜扎",19);</span></span><br><span class="line"><span class="comment">            解决:可以使用向下转型(强转)把obj类型转换为Person</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*@Override</span></span><br><span class="line"><span class="comment">    public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">        //增加一个判断,传递的参数obj如果是this本身,直接返回true,提高程序的效率</span></span><br><span class="line"><span class="comment">        if(obj==this)&#123;</span></span><br><span class="line"><span class="comment">            return true;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //增加一个判断,传递的参数obj如果是null,直接返回false,提高程序的效率</span></span><br><span class="line"><span class="comment">        if(obj==null)&#123;</span></span><br><span class="line"><span class="comment">            return false;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        //增加一个判断,防止类型转换一次ClassCastException</span></span><br><span class="line"><span class="comment">        if(obj instanceof Person)&#123;</span></span><br><span class="line"><span class="comment">            //使用向下转型,把obj转换为Person类型</span></span><br><span class="line"><span class="comment">            Person p = (Person)obj;</span></span><br><span class="line"><span class="comment">            //比较两个对象的属性,一个对象是this(p1),一个对象是p(obj-&gt;p2)</span></span><br><span class="line"><span class="comment">            boolean b = this.name.equals(p.name) &amp;&amp; this.age==p.age;</span></span><br><span class="line"><span class="comment">            return b;</span></span><br><span class="line"><span class="comment">        &#125;</span></span><br><span class="line"><span class="comment">        //不是Person类型直接返回false</span></span><br><span class="line"><span class="comment">        return false;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//getClass() != o.getClass() 使用反射技术,判断o是否是Person类型  等效于 obj instanceof Person</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-object类的equals方法2&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-object类的equals方法2&quot;&gt;&lt;/a&gt; java Object类的equals方法2&lt;/h1&gt;
&lt;figure class=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java重写Object类的equals方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00131%E9%87%8D%E5%86%99Object%E7%B1%BB%E7%9A%84equals%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00131重写Object类的equals方法/</id>
    <published>2020-03-13T15:50:46.000Z</published>
    <updated>2020-03-13T15:56:47.356Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-重写object类的equals方法"><a class="markdownIt-Anchor" href="#java-重写object类的equals方法"></a> java 重写Object类的equals方法</h1><p>直接打印对象的地址值没有意义,需要重写Object类中的toString方法<br>打印对象的属性(name,age)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">       <span class="comment">//return "abc";</span></span><br><span class="line">       <span class="keyword">return</span> <span class="string">"Person&#123;name="</span>+name+<span class="string">" ,age="</span>+age+<span class="string">"&#125;"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>Object类的equals方法,默认比较的是两个对象的地址值,没有意义<br>所以我们要重写equals方法,比较两个对象的属性(name,age)<br>问题:<br>隐含着一个多态<br>多态的弊端:无法使用子类特有的内容(属性和方法)<br><code>Object obj = p2 = new Person(&quot;古力娜扎&quot;,19);</code><br>解决:可以使用向下转型(强转)把obj类型转换为Person</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//增加一个判断,传递的参数obj如果是this本身,直接返回true,提高程序的效率</span></span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="keyword">this</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加一个判断,传递的参数obj如果是null,直接返回false,提高程序的效率</span></span><br><span class="line">        <span class="keyword">if</span>(obj==<span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//增加一个判断,防止类型转换一次ClassCastException</span></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> Person)&#123;</span><br><span class="line">            <span class="comment">//使用向下转型,把obj转换为Person类型</span></span><br><span class="line">            Person p = (Person)obj;</span><br><span class="line">            <span class="comment">//比较两个对象的属性,一个对象是this(p1),一个对象是p(obj-&gt;p2)</span></span><br><span class="line">            <span class="keyword">boolean</span> b = <span class="keyword">this</span>.name.equals(p.name) &amp;&amp; <span class="keyword">this</span>.age==p.age;</span><br><span class="line">            <span class="keyword">return</span> b;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//不是Person类型直接返回false</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Equals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            Person类默认继承了Object类,所以可以使用Object类的equals方法</span></span><br><span class="line"><span class="comment">            boolean equals(Object obj) 指示其他某个对象是否与此对象“相等”。</span></span><br><span class="line"><span class="comment">            equals方法源码:</span></span><br><span class="line"><span class="comment">                public boolean equals(Object obj) &#123;</span></span><br><span class="line"><span class="comment">                    return (this == obj);</span></span><br><span class="line"><span class="comment">                &#125;</span></span><br><span class="line"><span class="comment">                参数:</span></span><br><span class="line"><span class="comment">                    Object obj:可以传递任意的对象</span></span><br><span class="line"><span class="comment">                    == 比较运算符,返回的是一个布尔值 true false</span></span><br><span class="line"><span class="comment">                    基本数据类型:比较的是值</span></span><br><span class="line"><span class="comment">                    引用数据类型:比价的是两个对象的地址值</span></span><br><span class="line"><span class="comment">               this是谁?那个对象调用的方法,方法中的this就是那个对象;p1调用的equals方法所以this就是p1</span></span><br><span class="line"><span class="comment">               obj是谁?传递过来的参数p2</span></span><br><span class="line"><span class="comment">               this==obj --&gt;p1==p2</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//Person p2 = new Person("古力娜扎",19);</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"p1:"</span>+p1);<span class="comment">//p1:com.itheima.demo01.Object.Person@58ceff1</span></span><br><span class="line">        System.out.println(<span class="string">"p2:"</span>+p2);<span class="comment">//p2:com.itheima.demo01.Object.Person@7c30a502</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//p1=p2;//把p2的地址值赋值给p1</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b = p1.equals(p1);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="comment">//getClass() != o.getClass() 使用反射技术,判断o是否是Person类型  等效于 obj instanceof Person</span></span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-重写object类的equals方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-重写object类的equals方法&quot;&gt;&lt;/a&gt; java 重写Object类的equals方法&lt;/h1&gt;
&lt;p&gt;直接打印对象的地址
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>javaObject类的equals方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00130Object%E7%B1%BB%E7%9A%84equals%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00130Object类的equals方法/</id>
    <published>2020-03-13T15:44:22.000Z</published>
    <updated>2020-03-13T15:49:42.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-object类的equals方法"><a class="markdownIt-Anchor" href="#java-object类的equals方法"></a> java Object类的equals方法</h1><p>Person类默认继承了Object类,所以可以使用Object类的equals方法<br>boolean equals(Object obj) 指示其他某个对象是否与此对象“相等”。</p><h3 id="equals方法源码"><a class="markdownIt-Anchor" href="#equals方法源码"></a> equals方法源码:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object obj)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (<span class="keyword">this</span> == obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数:</h3><p>Object obj:可以传递任意的对象<br><code>==</code>比较运算符,返回的是一个布尔值<code>true false</code><br>基本数据类型:<code>比较的是值</code><br>引用数据类型:<code>比价的是两个对象的地址值</code><br>this是谁?那个对象调用的方法,方法中的this就是那个对象;p1调用的equals方法所以this就是p1<br>obj是谁?传递过来的参数p2<br><code>this==obj --&gt;p1==p2</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Object;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Equals</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        <span class="comment">//Person p2 = new Person("古力娜扎",19);</span></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"迪丽热巴"</span>,<span class="number">18</span>);</span><br><span class="line">        System.out.println(<span class="string">"p1:"</span>+p1);<span class="comment">//p1:com.itheima.demo01.Object.Person@58ceff1</span></span><br><span class="line">        System.out.println(<span class="string">"p2:"</span>+p2);<span class="comment">//p2:com.itheima.demo01.Object.Person@7c30a502</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//p1=p2;//把p2的地址值赋值给p1</span></span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b = p1.equals(p1);</span><br><span class="line">        System.out.println(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-object类的equals方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-object类的equals方法&quot;&gt;&lt;/a&gt; java Object类的equals方法&lt;/h1&gt;
&lt;p&gt;Person类默认继承了Obj
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java接口作为成员变量类型</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00128%E6%8E%A5%E5%8F%A3%E4%BD%9C%E4%B8%BA%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00128接口作为成员变量类型/</id>
    <published>2020-03-13T13:34:28.000Z</published>
    <updated>2020-03-13T13:38:28.209Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java接口作为成员变量类型"><a class="markdownIt-Anchor" href="#java接口作为成员变量类型"></a> java接口作为成员变量类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoGame</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">        hero.setName(<span class="string">"艾希"</span>); <span class="comment">// 设置英雄的名称</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 设置英雄技能</span></span><br><span class="line"><span class="comment">//        hero.setSkill(new SkillImpl()); // 使用单独定义的实现类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 还可以改成使用匿名内部类</span></span><br><span class="line"><span class="comment">//        Skill skill = new Skill() &#123;</span></span><br><span class="line"><span class="comment">//            @Override</span></span><br><span class="line"><span class="comment">//            public void use() &#123;</span></span><br><span class="line"><span class="comment">//                System.out.println("Pia~pia~pia~");</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//        &#125;;</span></span><br><span class="line"><span class="comment">//        hero.setSkill(skill);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 进一步简化，同时使用匿名内部类和匿名对象</span></span><br><span class="line">        hero.setSkill(<span class="keyword">new</span> Skill() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"Biu~Pia~Biu~Pia~"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        hero.attack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 英雄的名称</span></span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//使用接口作为成员变量类型</span></span><br><span class="line">    <span class="keyword">private</span> Skill skill; <span class="comment">// 英雄的技能</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"我叫"</span> + name + <span class="string">"，开始施放技能："</span>);</span><br><span class="line">        skill.use(); <span class="comment">// 调用接口中的抽象方法</span></span><br><span class="line">        System.out.println(<span class="string">"施放技能完成。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Skill <span class="title">getSkill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> skill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setSkill</span><span class="params">(Skill skill)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.skill = skill;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>; <span class="comment">// 释放技能的抽象方法</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SkillImpl</span> <span class="keyword">implements</span> <span class="title">Skill</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"Biu~biu~biu~"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java接口作为成员变量类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java接口作为成员变量类型&quot;&gt;&lt;/a&gt; java接口作为成员变量类型&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java接口作为方法的参数和或返回值</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00129%E6%8E%A5%E5%8F%A3%E4%BD%9C%E4%B8%BA%E6%96%B9%E6%B3%95%E7%9A%84%E5%8F%82%E6%95%B0%E5%92%8C%E6%88%96%E8%BF%94%E5%9B%9E%E5%80%BC/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00129接口作为方法的参数和或返回值/</id>
    <published>2020-03-13T13:34:28.000Z</published>
    <updated>2020-03-13T13:44:50.090Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java接口作为方法的参数和或返回值"><a class="markdownIt-Anchor" href="#java接口作为方法的参数和或返回值"></a> java接口作为方法的参数和或返回值</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo07;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">java.util.List正是ArrayList所实现的接口。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 左边是接口名称，右边是实现类名称，这就是多态写法</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; result = addNames(list);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; result.size(); i++) &#123;</span><br><span class="line">            System.out.println(result.get(i));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> List&lt;String&gt; <span class="title">addNames</span><span class="params">(List&lt;String&gt; list)</span> </span>&#123;</span><br><span class="line">        list.add(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        list.add(<span class="string">"古力娜扎"</span>);</span><br><span class="line">        list.add(<span class="string">"玛尔扎哈"</span>);</span><br><span class="line">        list.add(<span class="string">"沙扬娜拉"</span>);</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java接口作为方法的参数和或返回值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java接口作为方法的参数和或返回值&quot;&gt;&lt;/a&gt; java接口作为方法的参数和或返回值&lt;/h1&gt;
&lt;figure class=&quot;highlight ja
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java类作为成员变量类型</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00127%E7%B1%BB%E4%BD%9C%E4%B8%BA%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00127类作为成员变量类型/</id>
    <published>2020-03-13T13:31:16.000Z</published>
    <updated>2020-03-13T13:33:24.331Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java类作为成员变量类型"><a class="markdownIt-Anchor" href="#java类作为成员变量类型"></a> java类作为成员变量类型</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 创建一个英雄角色</span></span><br><span class="line">        Hero hero = <span class="keyword">new</span> Hero();</span><br><span class="line">        <span class="comment">// 为英雄起一个名字，并且设置年龄</span></span><br><span class="line">        hero.setName(<span class="string">"盖伦"</span>);</span><br><span class="line">        hero.setAge(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建一个武器对象</span></span><br><span class="line">        Weapon weapon = <span class="keyword">new</span> Weapon(<span class="string">"AK-47"</span>);</span><br><span class="line">        <span class="comment">// 为英雄配备武器</span></span><br><span class="line">        hero.setWeapon(weapon);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 年龄为20的盖伦用多兰剑攻击敌方。</span></span><br><span class="line">        hero.attack();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo06;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 游戏当中的英雄角色类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Hero</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name; <span class="comment">// 英雄的名字</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age; <span class="comment">// 英雄的年龄</span></span><br><span class="line">    <span class="keyword">private</span> Weapon weapon; <span class="comment">// 英雄的武器</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Hero</span><span class="params">(String name, <span class="keyword">int</span> age, Weapon weapon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">attack</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"年龄为"</span> + age + <span class="string">"的"</span> + name + <span class="string">"用"</span> + weapon.getCode() + <span class="string">"攻击敌方。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Weapon <span class="title">getWeapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> weapon;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setWeapon</span><span class="params">(Weapon weapon)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.weapon = weapon;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Weapon</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String code; <span class="comment">// 武器的代号</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Weapon</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> code;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setCode</span><span class="params">(String code)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.code = code;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java类作为成员变量类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java类作为成员变量类型&quot;&gt;&lt;/a&gt; java类作为成员变量类型&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java匿名内部类的注意事项</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00126%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00126匿名内部类的注意事项/</id>
    <published>2020-03-13T13:27:51.000Z</published>
    <updated>2020-03-13T13:31:48.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java匿名内部类的注意事项"><a class="markdownIt-Anchor" href="#java匿名内部类的注意事项"></a> java匿名内部类的注意事项</h1><h3 id="对格式new-接口名称-进行解析"><a class="markdownIt-Anchor" href="#对格式new-接口名称-进行解析"></a> 对格式“new 接口名称() {…}”进行解析：</h3><p>new代表创建对象的动作</p><p>接口名称就是匿名内部类需要实现哪个接口</p><p>{…}这才是匿名内部类的内容</p><h3 id="另外还要注意几点问题"><a class="markdownIt-Anchor" href="#另外还要注意几点问题"></a> 另外还要注意几点问题：</h3><p>匿名内部类，在【创建对象】的时候，只能使用唯一一次。<br>如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。</p><p>匿名对象，在【调用方法】的时候，只能调用唯一一次。<br>如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</p><p>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】<br>强调：匿名内部类和匿名对象不是一回事！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyInterface obj = new MyInterfaceImpl();</span></span><br><span class="line"><span class="comment">//        obj.method();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        MyInterface some = new MyInterface(); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用匿名内部类，但不是匿名对象，对象名称就叫objA</span></span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        objA.method1();</span><br><span class="line">        objA.method2();</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用了匿名内部类，而且省略了对象名称，也是匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method1();</span><br><span class="line">        <span class="comment">// 因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java匿名内部类的注意事项&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java匿名内部类的注意事项&quot;&gt;&lt;/a&gt; java匿名内部类的注意事项&lt;/h1&gt;
&lt;h3 id=&quot;对格式new-接口名称-进行解析&quot;&gt;&lt;a class=&quot;mar
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java匿名内部类</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00125%E5%8C%BF%E5%90%8D%E5%86%85%E9%83%A8%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00125匿名内部类/</id>
    <published>2020-03-13T13:23:16.000Z</published>
    <updated>2020-03-13T13:27:21.360Z</updated>
    
    <content type="html"><![CDATA[<p>如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，<br>那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】。</p><h3 id="匿名内部类的定义格式"><a class="markdownIt-Anchor" href="#匿名内部类的定义格式"></a> 匿名内部类的定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">接口名称 对象名 = <span class="keyword">new</span> 接口名称() &#123;</span><br><span class="line">    <span class="comment">// 覆盖重写所有抽象方法</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="对格式new-接口名称-进行解析"><a class="markdownIt-Anchor" href="#对格式new-接口名称-进行解析"></a> 对格式“new 接口名称() {…}”进行解析：</h3><p>new代表创建对象的动作</p><p>接口名称就是匿名内部类需要实现哪个接口</p><p>{…}这才是匿名内部类的内容</p><h3 id="另外还要注意几点问题"><a class="markdownIt-Anchor" href="#另外还要注意几点问题"></a> 另外还要注意几点问题：</h3><p>匿名内部类，在【创建对象】的时候，只能使用唯一一次。<br>如果希望多次创建对象，而且类的内容一样的话，那么就需要使用单独定义的实现类了。</p><p>匿名对象，在【调用方法】的时候，只能调用唯一一次。<br>如果希望同一个对象，调用多次方法，那么必须给对象起个名字。</p><p>匿名内部类是省略了【实现类/子类名称】，但是匿名对象是省略了【对象名称】<br>强调：匿名内部类和匿名对象不是一回事！！！</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="comment">//        MyInterface obj = new MyInterfaceImpl();</span></span><br><span class="line"><span class="comment">//        obj.method();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        MyInterface some = new MyInterface(); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用匿名内部类，但不是匿名对象，对象名称就叫objA</span></span><br><span class="line">        MyInterface objA = <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-A"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        objA.method1();</span><br><span class="line">        objA.method2();</span><br><span class="line">        System.out.println(<span class="string">"================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用了匿名内部类，而且省略了对象名称，也是匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method1();</span><br><span class="line">        <span class="comment">// 因为匿名对象无法调用第二次方法，所以需要再创建一个匿名内部类的匿名对象</span></span><br><span class="line">        <span class="keyword">new</span> MyInterface() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！111-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"匿名内部类实现了方法！222-B"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;.method2();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span></span>; <span class="comment">// 抽象方法</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInterfaceImpl</span> <span class="keyword">implements</span> <span class="title">MyInterface</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现类覆盖重写了方法！111"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"实现类覆盖重写了方法！222"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;如果接口的实现类（或者是父类的子类）只需要使用唯一的一次，&lt;br&gt;
那么这种情况下就可以省略掉该类的定义，而改为使用【匿名内部类】。&lt;/p&gt;
&lt;h3 id=&quot;匿名内部类的定义格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#匿名内部类的定义格式
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java局部内部类的final问题</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/13/java00124%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84final%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/13/java00124局部内部类的final问题/</id>
    <published>2020-03-13T13:12:18.000Z</published>
    <updated>2020-03-13T13:21:39.387Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java局部内部类的final问题"><a class="markdownIt-Anchor" href="#java局部内部类的final问题"></a> java局部内部类的final问题</h1><p>局部内部类，如果希望访问所在方法的局部变量，那么这个局部变量必须是【有效final的】。</p><h3 id="备注"><a class="markdownIt-Anchor" href="#备注"></a> 备注：</h3><p>从Java 8+开始，只要局部变量事实不变，那么final关键字可以省略。</p><h3 id="原因"><a class="markdownIt-Anchor" href="#原因"></a> 原因：</h3><p>new出来的对象在堆内存当中。</p><p>局部变量是跟着方法走的，在栈内存当中。</p><p>方法运行结束之后，立刻出栈，局部变量就会立刻消失。</p><p>但是new出来的对象会在堆当中持续存在，直到垃圾回收消失。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyOuter</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 所在方法的局部变量</span></span><br><span class="line"></span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">MyInner</span> </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java局部内部类的final问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java局部内部类的final问题&quot;&gt;&lt;/a&gt; java局部内部类的final问题&lt;/h1&gt;
&lt;p&gt;局部内部类，如果希望访问所在方法的局部变量，那么这个局
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java局部内部类定义</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00123%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00123局部内部类定义/</id>
    <published>2020-03-12T14:58:22.000Z</published>
    <updated>2020-03-12T15:01:34.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java局部内部类定义"><a class="markdownIt-Anchor" href="#java局部内部类定义"></a> java局部内部类定义</h1><p>如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。<br>“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。</p><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称 </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小节一下类的权限修饰符"><a class="markdownIt-Anchor" href="#小节一下类的权限修饰符"></a> 小节一下类的权限修饰符：</h3><p><code>public &gt; protected &gt; (default) &gt; private</code></p><h4 id="定义一个类的时候权限修饰符规则"><a class="markdownIt-Anchor" href="#定义一个类的时候权限修饰符规则"></a> 定义一个类的时候，权限修饰符规则：</h4><p>外部类：public / (default)</p><p>成员内部类：public / protected / (default) / private</p><p>局部内部类：什么都不能写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer obj = <span class="keyword">new</span> Outer();</span><br><span class="line">        obj.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java局部内部类定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java局部内部类定义&quot;&gt;&lt;/a&gt; java局部内部类定义&lt;/h1&gt;
&lt;p&gt;如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。&lt;br&gt;
“局部”：只有当前所
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java内部类的同名变量访问</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00122%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F%E8%AE%BF%E9%97%AE/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00122内部类的同名变量访问/</id>
    <published>2020-03-12T09:44:02.000Z</published>
    <updated>2020-03-12T14:57:39.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java内部类的同名变量访问"><a class="markdownIt-Anchor" href="#java内部类的同名变量访问"></a> java内部类的同名变量访问</h1><h3 id="格式是"><a class="markdownIt-Anchor" href="#格式是"></a> 格式是：</h3><p><code>外部类名称.this.外部类成员变量名</code></p><h3 id="声明内部类对象"><a class="markdownIt-Anchor" href="#声明内部类对象"></a> 声明内部类对象:</h3><p><code>外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 外部类的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>; <span class="comment">// 内部类的成员变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>; <span class="comment">// 内部类方法的局部变量</span></span><br><span class="line">            System.out.println(num); <span class="comment">// 局部变量，就近原则</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num); <span class="comment">// 内部类的成员变量</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">// 外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();</span></span><br><span class="line">        Outer.Inner obj = <span class="keyword">new</span> Outer().new Inner();</span><br><span class="line">        obj.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java内部类的同名变量访问&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java内部类的同名变量访问&quot;&gt;&lt;/a&gt; java内部类的同名变量访问&lt;/h1&gt;
&lt;h3 id=&quot;格式是&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java成员内部类的使用</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00121%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00121成员内部类的使用/</id>
    <published>2020-03-12T09:36:26.000Z</published>
    <updated>2020-03-12T09:42:58.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java成员内部类的使用"><a class="markdownIt-Anchor" href="#java成员内部类的使用"></a> java成员内部类的使用</h1><h3 id="如何使用成员内部类"><a class="markdownIt-Anchor" href="#如何使用成员内部类"></a> 如何使用成员内部类？</h3><h5 id="有两种方式"><a class="markdownIt-Anchor" href="#有两种方式"></a> 有两种方式：</h5><h5 id="间接方式"><a class="markdownIt-Anchor" href="#间接方式"></a> 间接方式：</h5><p>在外部类的方法当中，使用内部类；然后main只是调用外部类的方法。</p><h5 id="直接方式公式"><a class="markdownIt-Anchor" href="#直接方式公式"></a> 直接方式，公式：</h5><p><code>类名称 对象名 = new 类名称();</code><br><code>【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body(); <span class="comment">// 外部类的对象</span></span><br><span class="line">        <span class="comment">// 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照公式写：</span></span><br><span class="line">        Body.Hearts heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">// 成员内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏跳动：蹦蹦蹦！"</span>);</span><br><span class="line">            System.out.println(<span class="string">"我叫："</span> + name); <span class="comment">// 正确写法！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法"</span>);</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java成员内部类的使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java成员内部类的使用&quot;&gt;&lt;/a&gt; java成员内部类的使用&lt;/h1&gt;
&lt;h3 id=&quot;如何使用成员内部类&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java成员内部类的定义</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00120%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00120成员内部类的定义/</id>
    <published>2020-03-12T09:33:33.000Z</published>
    <updated>2020-03-12T09:35:48.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java成员内部类的定义"><a class="markdownIt-Anchor" href="#java成员内部类的定义"></a> java成员内部类的定义</h1><h3 id="成员内部类的定义格式"><a class="markdownIt-Anchor" href="#成员内部类的定义格式"></a> 成员内部类的定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    </span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称 </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h3><p>内用外，随意访问；外用内，需要内部类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body(); <span class="comment">// 外部类的对象</span></span><br><span class="line">        <span class="comment">// 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照公式写：</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">// 成员内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏跳动：蹦蹦蹦！"</span>);</span><br><span class="line">            System.out.println(<span class="string">"我叫："</span> + name); <span class="comment">// 正确写法！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法"</span>);</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java成员内部类的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java成员内部类的定义&quot;&gt;&lt;/a&gt; java成员内部类的定义&lt;/h1&gt;
&lt;h3 id=&quot;成员内部类的定义格式&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java内部类的概念与分类</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00119%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00119内部类的概念与分类/</id>
    <published>2020-03-12T09:30:07.000Z</published>
    <updated>2020-03-12T09:32:54.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java内部类的概念与分类"><a class="markdownIt-Anchor" href="#java内部类的概念与分类"></a> java内部类的概念与分类</h1><p>如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。<br>例如：身体和心脏的关系。又如：汽车和发动机的关系。</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类：</h3><ol><li>成员内部类</li><li>局部内部类（包含匿名内部类）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java内部类的概念与分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java内部类的概念与分类&quot;&gt;&lt;/a&gt; java内部类的概念与分类&lt;/h1&gt;
&lt;p&gt;如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。&lt;br&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java四种权限修饰符</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00118%E5%9B%9B%E7%A7%8D%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00118四种权限修饰符/</id>
    <published>2020-03-12T07:59:46.000Z</published>
    <updated>2020-03-12T09:29:42.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java四种权限修饰符"><a class="markdownIt-Anchor" href="#java四种权限修饰符"></a> java四种权限修饰符</h1><h3 id="java中有四种权限修饰符"><a class="markdownIt-Anchor" href="#java中有四种权限修饰符"></a> Java中有四种权限修饰符：</h3><table><thead><tr><th></th><th>public  &gt;</th><th>protected   &gt;</th><th>(default)   &gt;</th><th>private</th></tr></thead><tbody><tr><td>同一个类（我自己）</td><td>YES</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>同一个包（我邻居）</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>不同包子类（我儿子）</td><td>YES</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>不同包非子类（陌生人）</td><td>YES</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项：</h3><p>(default)并不是关键字“default”，而是根本不写。</p><h3 id="sub包中的类"><a class="markdownIt-Anchor" href="#sub包中的类"></a> sub包中的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02.sub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.day11.demo02.MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stranger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodStrange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> MyClass().num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02.sub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.day11.demo02.MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySon</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodSon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(super.num);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo02包中的类"><a class="markdownIt-Anchor" href="#demo02包中的类"></a> demo02包中的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Main</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnother</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anotherMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(new MyClass().num);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java四种权限修饰符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java四种权限修饰符&quot;&gt;&lt;/a&gt; java四种权限修饰符&lt;/h1&gt;
&lt;h3 id=&quot;java中有四种权限修饰符&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰成员变量</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00117final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00117final关键字用于修饰成员变量/</id>
    <published>2020-03-12T07:54:37.000Z</published>
    <updated>2020-03-12T07:57:43.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰成员变量"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰成员变量"></a> java final关键字用于修饰成员变量</h1><p>对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。</p><p>由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</p><p>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</p><p>必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name<span class="comment">/* = "鹿晗"*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"关晓彤"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰成员变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰成员变量&quot;&gt;&lt;/a&gt; java final关键字用于修饰成员变量&lt;/h1&gt;
&lt;p&gt;对于成员变量来说，如果使用fi
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰局部变量</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00116final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00116final关键字用于修饰局部变量/</id>
    <published>2020-03-12T07:50:56.000Z</published>
    <updated>2020-03-12T07:54:01.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰局部变量"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰局部变量"></a> java final关键字用于修饰局部变量</h1><p>对于基本类型来说，不可变说的是变量当中的数据不可改变<br>对于引用类型来说，不可变说的是变量当中的地址值不可改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">final关键字代表最终、不可改变的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">常见四种用法：</span></span><br><span class="line"><span class="comment">1. 可以用来修饰一个类</span></span><br><span class="line"><span class="comment">2. 可以用来修饰一个方法</span></span><br><span class="line"><span class="comment">3. 还可以用来修饰一个局部变量</span></span><br><span class="line"><span class="comment">4. 还可以用来修饰一个成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Final</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 10</span></span><br><span class="line">        num1 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line">        <span class="comment">// “一次赋值，终生不变”</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line">        System.out.println(num2); <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        num2 = 250; // 错误写法！不能改变！</span></span><br><span class="line"><span class="comment">//        num2 = 200; // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正确写法！只要保证有唯一一次赋值即可</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num3;</span><br><span class="line">        num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于基本类型来说，不可变说的是变量当中的数据不可改变</span></span><br><span class="line">        <span class="comment">// 对于引用类型来说，不可变说的是变量当中的地址值不可改变</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu1.getName()); <span class="comment">// 赵丽颖</span></span><br><span class="line">        stu1 = <span class="keyword">new</span> Student(<span class="string">"霍建华"</span>);</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu1.getName()); <span class="comment">// 霍建华</span></span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student stu2 = <span class="keyword">new</span> Student(<span class="string">"高圆圆"</span>);</span><br><span class="line">        <span class="comment">// 错误写法！final的引用类型变量，其中的地址不可改变</span></span><br><span class="line"><span class="comment">//        stu2 = new Student("赵又廷");</span></span><br><span class="line">        System.out.println(stu2.getName()); <span class="comment">// 高圆圆</span></span><br><span class="line">        stu2.setName(<span class="string">"高圆圆圆圆圆圆"</span>);</span><br><span class="line">        System.out.println(stu2.getName()); <span class="comment">// 高圆圆圆圆圆圆</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰局部变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰局部变量&quot;&gt;&lt;/a&gt; java final关键字用于修饰局部变量&lt;/h1&gt;
&lt;p&gt;对于基本类型来说，不可变说的是
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰成员方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00115final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00115final关键字用于修饰成员方法/</id>
    <published>2020-03-12T07:38:55.000Z</published>
    <updated>2020-03-12T07:42:07.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰成员方法"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰成员方法"></a> java final关键字用于修饰成员方法</h1><p>当final关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项：</h3><p>对于类、方法来说，<code>abstract</code>关键字和<code>final</code>关键字不能同时使用，因为矛盾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="comment">/*final*/</span> <span class="function"><span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误写法！不能覆盖重写父类当中final的方法</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void method() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("子类覆盖重写父类的方法！");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰成员方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰成员方法&quot;&gt;&lt;/a&gt; java final关键字用于修饰成员方法&lt;/h1&gt;
&lt;p&gt;当final关键字用来修饰一个
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
