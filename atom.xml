<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2023-12-04T15:16:48.817Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>使用钩子注入DLL</title>
    <link href="https://xiaowuyoucy.github.io/2023/12/04/%E4%BD%BF%E7%94%A8%E9%92%A9%E5%AD%90%E6%B3%A8%E5%85%A5DLL/"/>
    <id>https://xiaowuyoucy.github.io/2023/12/04/使用钩子注入DLL/</id>
    <published>2023-12-04T14:47:56.000Z</published>
    <updated>2023-12-04T15:16:48.817Z</updated>
    
    <content type="html"><![CDATA[<p>原理：通过SetWindowsHookEx函数将DLL注入到进程的地址空间中，最后一个参数dwThreadId指向的是被注入进程内的某个线程ID。<br>(1)    进程A对线程dwThread挂键盘钩子<br>(2)    线程dwThreadId获取到的键盘消息会实现被钩子拦截<br>(3)    系统检查hMod指向的DLL是否已被载入到线程dwThreadId所在的进程地址空间中，若否，则载入。这时，假设DLL被载入到进程B<br>(4)    系统在进程B的地址空间中调用lpfn函数</p><p>钩子的回调函数格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LRESULT CALLBACK FunProc(</span><br><span class="line">int code,       // hook code</span><br><span class="line">WPARAM wParam,  // virtual-key code</span><br><span class="line">LPARAM lParam   // keystroke-message information</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>消息框</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"> * @brief 显示一个消息框，并等待用户的响应。</span><br><span class="line"> * </span><br><span class="line"> * @param hwndParent 父窗口的句柄，如果为nullptr，则消息框将居中显示在屏幕上。</span><br><span class="line"> * @param lpText 要显示的消息文本。</span><br><span class="line"> * @param lpCaption 消息框标题。</span><br><span class="line"> * @param uType 消息框的类型，可以是以下值的组合：</span><br><span class="line"> *   - MB_ABORTRETRYIGNORE</span><br><span class="line"> *   - MB_CANCELTRYCONTINUE</span><br><span class="line"> *   - MB_HELP</span><br><span class="line"> *   - MB_OK</span><br><span class="line"> *   - MB_OKCANCEL</span><br><span class="line"> *   - MB_RETRYCANCEL</span><br><span class="line"> *   - MB_YESNO</span><br><span class="line"> *   - MB_YESNOCANCEL</span><br><span class="line"> * @return 用户的响应。可能的值包括：</span><br><span class="line"> *   - IDABORT</span><br><span class="line"> *   - IDCANCEL</span><br><span class="line"> *   - IDCONTINUE</span><br><span class="line"> *   - IDIGNORE</span><br><span class="line"> *   - IDNO</span><br><span class="line"> *   - IDOK</span><br><span class="line"> *   - IDRETRY</span><br><span class="line"> *   - IDTRYAGAIN</span><br><span class="line"> *   - IDYES</span><br><span class="line"> */</span><br><span class="line">int MessageBox(</span><br><span class="line">    HWND hwndParent,</span><br><span class="line">    LPCTSTR lpText,</span><br><span class="line">    LPCTSTR lpCaption,</span><br><span class="line">    UINT uType</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h4 id="callnexthookex"><a class="markdownIt-Anchor" href="#callnexthookex"></a> CallNextHookEx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 调用下一个钩子程序在钩子链中。</span><br><span class="line"> * </span><br><span class="line"> * @param hhk 钩子句柄，由SetWindowsHookEx函数返回。</span><br><span class="line"> * @param nCode 钩子代码，表示事件类型。具体取值取决于使用的钩子类型。</span><br><span class="line"> * @param wParam 与事件相关的附加信息，具体含义取决于使用的钩子类型。</span><br><span class="line"> * @param lParam 与事件相关的附加信息，具体含义取决于使用的钩子类型。</span><br><span class="line"> * @return 下一个钩子程序的返回值，具体含义取决于使用的钩子类型。</span><br><span class="line"> */</span><br><span class="line">LRESULT CallNextHookEx(</span><br><span class="line">    HHOOK hhk,</span><br><span class="line">    int nCode,</span><br><span class="line">    WPARAM wParam,</span><br><span class="line">    LPARAM lParam</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">CallNextHookEx是Windows API中用于调用下一个钩子程序的函数。在使用钩子函数时，它允许当前的钩子程序调用下一个钩子程序，以确保整个钩子链能够正常运行。</span><br><span class="line"></span><br><span class="line">参数说明：</span><br><span class="line"></span><br><span class="line">hhk：钩子句柄，由 SetWindowsHookEx 函数返回。</span><br><span class="line">nCode：钩子代码，表示事件类型。具体取值取决于使用的钩子类型。</span><br><span class="line">wParam：与事件相关的附加信息，具体含义取决于使用的钩子类型。</span><br><span class="line">lParam：与事件相关的附加信息，具体含义取决于使用的钩子类型。</span><br><span class="line">返回值：</span><br><span class="line">CallNextHookEx 的返回值取决于使用的钩子类型，通常是下一个钩子程序的返回值。</span><br></pre></td></tr></table></figure><h4 id="findwindow"><a class="markdownIt-Anchor" href="#findwindow"></a> FindWindow</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 根据窗口类名和窗口标题查找顶层窗口的句柄。</span><br><span class="line"> * </span><br><span class="line"> * @param lpClassName 窗口类名，如果为NULL，则匹配所有类名。</span><br><span class="line"> * @param lpWindowName 窗口标题，如果为NULL，则匹配所有标题。</span><br><span class="line"> * @return 找到的窗口的句柄，如果未找到则为NULL。</span><br><span class="line"> */</span><br><span class="line">HWND FindWindow(</span><br><span class="line">    LPCSTR lpClassName,</span><br><span class="line">    LPCSTR lpWindowName</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">lpClassName：窗口类名，如果为NULL，则匹配所有类名。</span><br><span class="line">lpWindowName：窗口标题，如果为NULL，则匹配所有标题。</span><br><span class="line">返回值：找到的窗口的句柄，如果未找到则为NULL。</span><br></pre></td></tr></table></figure><h4 id="getwindowthreadprocessid"><a class="markdownIt-Anchor" href="#getwindowthreadprocessid"></a> GetWindowThreadProcessId</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 获取指定窗口的线程标识符和进程标识符。</span><br><span class="line"> * </span><br><span class="line"> * @param hWnd 目标窗口的句柄。</span><br><span class="line"> * @param lpdwProcessId 接收进程标识符的指针，如果为NULL则不检索。</span><br><span class="line"> * @return 返回目标窗口所在的线程标识符。</span><br><span class="line"> */</span><br><span class="line">DWORD GetWindowThreadProcessId(</span><br><span class="line">    HWND hWnd,</span><br><span class="line">    LPDWORD lpdwProcessId</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">hWnd：目标窗口的句柄。</span><br><span class="line">lpdwProcessId：接收进程标识符的指针。如果为NULL，则不检索进程标识符。</span><br><span class="line">返回值：返回目标窗口所在的线程标识符。</span><br><span class="line">该函数允许您获取与指定窗口相关联的线程标识符和进程标识符。可以使用这些标识符来进行诸如线程注入和进程间通信等操作。</span><br></pre></td></tr></table></figure><h4 id="setwindowshookex"><a class="markdownIt-Anchor" href="#setwindowshookex"></a> SetWindowsHookEx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 安装一个钩子函数来监视指定类型的事件。</span><br><span class="line"> * </span><br><span class="line"> * @param idHook 要安装的钩子类型。</span><br><span class="line"> * @param lpfn 钩子过程的地址。</span><br><span class="line"> * @param hMod 包含钩子过程的 DLL 的句柄。如果为NULL，则将使用当前进程的句柄。</span><br><span class="line"> * @param dwThreadId 与要监视的事件相关联的线程的标识符。如果为0，则表示安装全局钩子。</span><br><span class="line"> * @return 成功时返回钩子的句柄，失败时返回NULL。</span><br><span class="line"> */</span><br><span class="line">HHOOK SetWindowsHookEx(</span><br><span class="line">    int idHook,</span><br><span class="line">    HOOKPROC lpfn,</span><br><span class="line">    HINSTANCE hMod,</span><br><span class="line">    DWORD dwThreadId</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">其中idHook参数可以取如下常量：</span><br><span class="line">WH_CALLWNDPROC     //窗口钩子，当系统向目标窗口发送消息时将触发此钩子</span><br><span class="line">WH_CALLWNDPROCRET     //窗口钩子，当窗口处理完消息后将触发此钩子</span><br><span class="line">WH_CBT   //当Windows激活、产生、释放（关闭）、最小化、最大化或改变窗口时都将触发此事件</span><br><span class="line">WH_DEBUG    //调试钩子</span><br><span class="line">WH_GETMESSAGE    //当往消息队列中增加一个消息时将触发此钩子</span><br><span class="line">WH_JOURNALPLAYBACK     //回放钩子，可以用于播放已记录的鼠标和键盘的操作</span><br><span class="line">WH_JOURNALRECORD     //记录钩子，可以用于记录鼠标和键盘的操作，木马程序可以使用此钩子窃取受控方在屏幕中敲入的密码</span><br><span class="line">WH_KEYBOARD     //当敲击键盘时将触发此钩子</span><br><span class="line">WH_MOUSE    //当有鼠标操作时将触发此钩子</span><br><span class="line">WH_MSGFILTER   //消息过滤钩子</span><br><span class="line">WH_SHELL   //Shell钩子</span><br><span class="line">WH_SYSMSGFILTER    //系统消息过滤钩子</span><br><span class="line">其他特定类型的钩子，具体取决于您的需求。</span><br><span class="line"></span><br><span class="line">lpfn：指向钩子过程的函数指针。此函数在发生事件时被调用。</span><br><span class="line">hMod：包含钩子过程的 DLL 的句柄。如果为NULL，则将使用当前进程的句柄。</span><br><span class="line">dwThreadId：与要监视的事件相关联的线程的标识符。如果为0，则表示安装全局钩子，针对所有线程的事件。</span><br><span class="line">返回值：成功时返回钩子的句柄，失败时返回NULL。</span><br><span class="line">SetWindowsHookEx函数用于安装一个钩子，允许您监视并拦截指定类型的事件。成功安装后，钩子过程将在事件发生时被调用。通常，钩子过程是在DLL中实现的，以便可以在不同进程间共享。</span><br></pre></td></tr></table></figure><h4 id="unhookwindowshookex"><a class="markdownIt-Anchor" href="#unhookwindowshookex"></a> UnhookWindowsHookEx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @brief 卸载之前安装的钩子。</span><br><span class="line"> * </span><br><span class="line"> * @param hhk 先前安装的钩子的句柄。</span><br><span class="line"> * @return 如果成功，返回非零值；如果失败，返回零。</span><br><span class="line"> */</span><br><span class="line">BOOL UnhookWindowsHookEx(</span><br><span class="line">    HHOOK hhk</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">hhk：先前安装的钩子的句柄，由 SetWindowsHookEx 返回。</span><br><span class="line">返回值：如果成功，返回非零值；如果失败，返回零。</span><br><span class="line">UnhookWindowsHookEx函数用于卸载之前通过 SetWindowsHookEx 安装的钩子。在不再需要钩子时，调用此函数以确保释放相关资源，并停止钩子过程的调用。成功卸载后，钩子句柄将不再有效。</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line"></span><br><span class="line">LRESULT CALLBACK FunProc(</span><br><span class="line">int code,       // hook code</span><br><span class="line">WPARAM wParam,  // virtual-key code</span><br><span class="line">LPARAM lParam   // keystroke-message information</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">MessageBox(NULL,&quot;KEY PRESS&quot;,&quot;hook inject&quot;,MB_OK);</span><br><span class="line">return CallNextHookEx(0,code,wParam,lParam);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">HHOOK g_HookHandle;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) void SetHook()</span><br><span class="line">&#123;</span><br><span class="line">DWORD tid = 0;</span><br><span class="line">// 获取窗口句柄</span><br><span class="line">HWND gameh = FindWindow(NULL,&quot;test.txt - 记事本&quot;);</span><br><span class="line">if (gameh == 0)</span><br><span class="line">&#123;</span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line">// 获取创建这个窗口的线程</span><br><span class="line">tid = GetWindowThreadProcessId(gameh,NULL);</span><br><span class="line">// 安装钩子到指定线程 WH_KEYBOARD 键盘钩子</span><br><span class="line">g_HookHandle = SetWindowsHookEx(WH_KEYBOARD, FunProc, GetModuleHandle(&quot;HOOKInject.dll&quot;),tid);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__declspec(dllexport) void UnHook()  </span><br><span class="line">&#123;  </span><br><span class="line">UnhookWindowsHookEx(g_HookHandle);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line"></span><br><span class="line">typedef void (*lpFun)();</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">HINSTANCE hDll; //DLL句柄 </span><br><span class="line">lpFun SetHook;  //函数指针</span><br><span class="line">lpFun UnHook;   //函数指针</span><br><span class="line">hDll = LoadLibrary(&quot;..\\Debug\\HOOKInject.dll&quot;);</span><br><span class="line">if (hDll != NULL)</span><br><span class="line">&#123;</span><br><span class="line">SetHook = (lpFun)GetProcAddress(hDll, &quot;SetHook&quot;);</span><br><span class="line">UnHook = (lpFun)GetProcAddress(hDll, &quot;UnHook&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (SetHook != NULL)</span><br><span class="line">&#123;</span><br><span class="line">SetHook();</span><br><span class="line">&#125;</span><br><span class="line">getchar();</span><br><span class="line">UnHook();</span><br><span class="line">if (hDll != NULL)</span><br><span class="line">&#123;</span><br><span class="line">FreeLibrary(hDll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;原理：通过SetWindowsHookEx函数将DLL注入到进程的地址空间中，最后一个参数dwThreadId指向的是被注入进程内的某个线程ID。&lt;br&gt;
(1)    进程A对线程dwThread挂键盘钩子&lt;br&gt;
(2)    线程dwThreadId获取到的键盘消息会
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>动态库与静态库</title>
    <link href="https://xiaowuyoucy.github.io/2023/12/02/%E5%8A%A8%E6%80%81%E5%BA%93%E4%B8%8E%E9%9D%99%E6%80%81%E5%BA%93/"/>
    <id>https://xiaowuyoucy.github.io/2023/12/02/动态库与静态库/</id>
    <published>2023-12-02T14:02:14.000Z</published>
    <updated>2023-12-04T14:42:57.709Z</updated>
    
    <content type="html"><![CDATA[<p>静态库 :链接时候被链接到可执行文件，文件体积较大</p><p>使用静态库需要有头文件和 *.lib文件</p><p>动态库：不被链接进入，动态加载，生成文件体积小</p><p>使用动态库需要有头文件 lib dll或者dll文件</p><p>库的用途：调用不同的库实现不同的功能，实现代码复用</p><h3 id="静态库编写"><a class="markdownIt-Anchor" href="#静态库编写"></a> 静态库编写</h3><p>加上<code>extern &quot;C&quot;</code>代表用C语言实现的函数</p><p>通常C语言写出来的库都比较通用</p><h4 id="头文件xxxh"><a class="markdownIt-Anchor" href="#头文件xxxh"></a> 头文件xxx.h</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ifndef LIB_H</span><br><span class="line">#define LIB_H</span><br><span class="line">/*extern &quot;C&quot; */int add(int x,int y);</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h4 id="源文件xxxc"><a class="markdownIt-Anchor" href="#源文件xxxc"></a> 源文件xxx.c</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;staticlib.h&quot;</span><br><span class="line"></span><br><span class="line">int add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">return x + y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="动态库编写"><a class="markdownIt-Anchor" href="#动态库编写"></a> 动态库编写</h3><p>加上<code>__stdcall</code>后库中函数的名字会改变</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _DLL_H_</span><br><span class="line">#define _DLL_H_</span><br><span class="line"></span><br><span class="line">#ifdef _EXPORT</span><br><span class="line">#define DECLSPEC  __declspec(dllexport) // 导出 </span><br><span class="line">#else</span><br><span class="line">#define DECLSPEC  __declspec(dllimport) // 导入</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">DECLSPEC  int  add(int x,int y);</span><br><span class="line">DECLSPEC  int __stdcall add2(int x,int y);</span><br><span class="line">#endif // _DLL_H_</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;dll.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;Windows.h&gt;</span><br><span class="line">int  add(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">return x + y;</span><br><span class="line">&#125;</span><br><span class="line">int  __stdcall add2(int x,int y)</span><br><span class="line">&#123;</span><br><span class="line">return x + y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">BOOL APIENTRY DllMain( HANDLE hModule, </span><br><span class="line">DWORD ul_reason_for_call, </span><br><span class="line">LPVOID lpReserved</span><br><span class="line">)</span><br><span class="line">&#123;</span><br><span class="line">switch (ul_reason_for_call)</span><br><span class="line">&#123;</span><br><span class="line">case DLL_PROCESS_ATTACH:</span><br><span class="line">printf(&quot;process attach of dll\r\n&quot;);</span><br><span class="line">break;</span><br><span class="line">case DLL_THREAD_ATTACH:</span><br><span class="line">printf(&quot;thread attach of dll\r\n&quot;);</span><br><span class="line">break;</span><br><span class="line">case DLL_THREAD_DETACH:</span><br><span class="line">printf(&quot;thread detach of dll\r\n&quot;);</span><br><span class="line">break;</span><br><span class="line">case DLL_PROCESS_DETACH:</span><br><span class="line">printf(&quot;process detach of dll\r\n&quot;);</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return TRUE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="调用静态库和动态库"><a class="markdownIt-Anchor" href="#调用静态库和动态库"></a> 调用静态库和动态库</h3><h4 id="调用静态库"><a class="markdownIt-Anchor" href="#调用静态库"></a> 调用静态库</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &quot;..\staticlib\staticlib.h&quot;</span><br><span class="line"></span><br><span class="line">#pragma comment(lib, &quot;..\\Debug\\staticlib.lib&quot; ) </span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">// 静态库调用</span><br><span class="line">int c = add(1,2);</span><br><span class="line">printf(&quot;%d\r\n&quot;, c);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//告诉编译器将staticlib.lib链接到本程序中</span><br><span class="line">#pragma comment(lib, &quot;..\\Debug\\staticlib.lib&quot; )</span><br></pre></td></tr></table></figure><p>或者可以在VS中添加</p><p><img src="./images/javawz/image-20231203232614373.png" alt="image-20231203232614373"></p><h4 id="调用动态库"><a class="markdownIt-Anchor" href="#调用动态库"></a> 调用动态库</h4><p>第一种方法隐式调用需要有头文件,lib文件,dll文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &quot;..\dll\dll.h&quot;</span><br><span class="line">#pragma comment(lib, &quot;..\\Debug\\dll.lib&quot; )</span><br><span class="line"></span><br><span class="line">typedef int (*lpAddFun)(int, int);</span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">// 隐式调用</span><br><span class="line"> int c = add(1,2);</span><br><span class="line"> printf(&quot;%d\r\n&quot;, c);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第二种方法只需要有dll文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;windows.h&gt;</span><br><span class="line">#include &quot;..\dll\dll.h&quot;</span><br><span class="line">#pragma comment(lib, &quot;..\\Debug\\dll.lib&quot; )</span><br><span class="line"></span><br><span class="line">typedef int (__stdcall *lpAddFun)(int, int);</span><br><span class="line">typedef int (*lpAddFun2)(int, int);</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 显示调用DLL</span><br><span class="line">HINSTANCE hDll; //DLL句柄 </span><br><span class="line">lpAddFun addFun; //函数指针</span><br><span class="line">hDll = LoadLibrary(&quot;..\\Debug\\dll.dll&quot;);</span><br><span class="line">if (hDll != NULL)</span><br><span class="line">&#123;</span><br><span class="line">addFun = (lpAddFun)GetProcAddress(hDll, &quot;_add@8&quot;);</span><br><span class="line">//addFun = (lpAddFun)GetProcAddress(hDll, MAKEINTRESOURCE(1));</span><br><span class="line">if (addFun != NULL)</span><br><span class="line">&#123;</span><br><span class="line">int result = addFun(1, 2);</span><br><span class="line">printf(&quot;%d\r\n&quot;, result);</span><br><span class="line">&#125;</span><br><span class="line">FreeLibrary(hDll);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果在函数调用约定使用的是<code>__stdcall</code> ,函数名字就会发生改变</p><p>def文件可以告诉编译器那个函数要作为输出函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY dll文件名</span><br><span class="line">EXPORTS// 代表导出</span><br><span class="line">函数名 @ 序号</span><br></pre></td></tr></table></figure><p>例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">LIBRARY my.dll</span><br><span class="line">EXPORTS</span><br><span class="line">add @ 1</span><br><span class="line">push @ 3</span><br><span class="line">sub @ 2</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;静态库 :链接时候被链接到可执行文件，文件体积较大&lt;/p&gt;
&lt;p&gt;使用静态库需要有头文件和 *.lib文件&lt;/p&gt;
&lt;p&gt;动态库：不被链接进入，动态加载，生成文件体积小&lt;/p&gt;
&lt;p&gt;使用动态库需要有头文件 lib dll或者dll文件&lt;/p&gt;
&lt;p&gt;库的用途：调用不同的库
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>重逢悦儿</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/31/%E9%87%8D%E9%80%A2%E6%82%A6%E5%84%BF/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/31/重逢悦儿/</id>
    <published>2023-10-30T21:35:56.000Z</published>
    <updated>2023-10-30T23:45:22.807Z</updated>
    
    <content type="html"><![CDATA[<p>欧阳村，一名丫鬟从小悦儿府上走出。只见她魂不守舍的走着，像是去慌忙的向某个目的地走着。</p><p>就在这时，叶辰使用五行遁出现在那丫鬟身前，只听</p><p>“砰” 一声</p><p>“哎呀，那个不长眼睛的家伙！”</p><p>只见那躺在地上的丫鬟说道</p><p>“姑娘，你没事吧！”</p><p>叶辰搀扶着那丫鬟说道</p><p>“能没事吗？你这家伙怎么神出鬼没的，突然就出现在我跟前！要不是我还得快点去找大夫去救我家小姐，我跟你没完！”</p><p>此时叶辰心想</p><p>“救小姐？莫非这位小姐就是师傅述说的等我救的人？”</p><p>随后叶辰问道</p><p>“敢问这位姑娘，你家小姐出来什么事了？”</p><p>那名丫鬟缓缓的站起身子，随后答道</p><p>“我家小姐突然卧床不起——哎，我家小姐怎么了，关你什么事！不行不行，我还得赶紧去找大夫，要是耽搁了，唯你是问。”</p><p>“卧床不起？那我得去看看，这十年来在茅山也学了不少治病的道术，正好可以施展一下！”</p><p>叶辰心里沉思了一会儿，又说道</p><p>“那姑娘可遇对人了！这世上要是我都治不好的病，那你也某找别人了！我乃当今世上叶神医，世人称之在世华佗”</p><p>话音刚毕，叶辰心里笑道</p><p>“哈哈哈，反正出门在外，身份都是自己给的！”</p><p>那丫鬟愣了愣，随后目光扫向叶辰，打量了一下，想道</p><p>“这二十出头的毛头小子也敢自称在世华佗！怕不是大头菜吃多了吧？算了，反正夫人让我找大夫，既然他会的话，那就让他试试”</p><p>“那你还愣在这干嘛！还不赶紧和我回去救我家小姐！要是我家小姐有什么差池，本小姐唯你是问！”</p><p>只见那丫鬟话音刚毕，便匆忙的拉着叶辰往小悦儿府上赶去……</p><p>此时小悦儿躺在床上,双目无神，身体颤抖，那口中还发出轻微的声音</p><p>“叶哥哥，你怎么还不来找悦儿，悦———悦儿我好想你啊!”</p><p>“悦儿！悦儿！你到底怎么了！怎么前几天还好好的，今天就突然这样了？”</p><p>只见小悦儿母亲那颤抖的手抚摸着小悦儿额头，忐忑不安的说道。</p><p>“夫人莫急，小翠不是已经出去找大夫了吗？你在这干着急也没用啊！”</p><p>一位中年男子，在小悦儿房间，焦急的对着那妇人说道。</p><p>此人正是小悦儿的父亲，欧阳明岳</p><p>这时，门外传来一阵吵闹声……</p><p>“这位姑娘，要不要这么着急啊！快放手，衣裳都要被你扯破了”</p><p>叶辰挣脱了那丫鬟的手，说道</p><p>“老爷——老爷，大夫请来了。”</p><p>那丫鬟慌忙的边跑向悦儿房间边喊道。</p><p>此时叶辰眉心一颤，突然一种不祥的预感由心而生。</p><p>随后便紧紧的跟在身后，当踏进悦儿房间时，扫视了一遍房间，然后皱起眉头目视着躺在床上的姑娘。</p><p>悦儿母亲听到小翠声音的时候，脸上漏出些许期待的表情，说道</p><p>“太好了——太好了！我们家悦儿有救了！”</p><p>欧阳明岳望了望叶辰，随后邹起眉头，口中疑惑的问道</p><p>“这位兄弟，看起来面生！不像是本村大夫啊！”</p><p>叶辰没有理会那名中年男子，大步的走向悦儿床前，只因那名妇人刚刚口中提及悦儿两字。</p><p>只见叶辰撑开悦儿眼睛望了望，随后又拿起她的手腕，摸着脉象。</p><p>此刻叶辰心里嘀咕着</p><p>“眼睛显露红丝，可脉象平稳，不像是得病啊！难不成——？”</p><p>待叶辰嘀咕完后，目光望向那悦儿父亲，然后问道</p><p>“这几天，府上可发生过什么事？又或者她是否和什么人接触过？”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;欧阳村，一名丫鬟从小悦儿府上走出。只见她魂不守舍的走着，像是去慌忙的向某个目的地走着。&lt;/p&gt;
&lt;p&gt;就在这时，叶辰使用五行遁出现在那丫鬟身前，只听&lt;/p&gt;
&lt;p&gt;“砰” 一声&lt;/p&gt;
&lt;p&gt;“哎呀，那个不长眼睛的家伙！”&lt;/p&gt;
&lt;p&gt;只见那躺在地上的丫鬟说道&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="小说" scheme="https://xiaowuyoucy.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>第三篇走出茅山</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/27/%E7%AC%AC%E4%B8%89%E7%AB%A0%E8%B5%B0%E5%87%BA%E8%8C%85%E5%B1%B1/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/27/第三章走出茅山/</id>
    <published>2023-10-26T16:11:53.000Z</published>
    <updated>2023-10-30T22:56:09.505Z</updated>
    
    <content type="html"><![CDATA[<p>张广正望了望叶辰，又继续说道</p><p>“十八年前，救下那名婴儿的人正是为师，那婴儿是徒儿你！”</p><p>叶辰愣了一下，心里想道</p><p>“这么多年来一直疑惑为什么从小就无父无母，而自己的养父养母却从来不提及”</p><p>随后叶辰掀开腹中的衣裳继续想道</p><p>“原来这腹中的阴阳八卦的图案，原来是师傅施的阴阳八卦封印。”</p><p>“不知师傅是否能告知，为什么会有那么强大的怨气在我体内呢？”</p><p>叶辰满脸疑惑的问道</p><p>此时只见张广正对着那后山长长的叹了口气，然后继续望着叶辰回答道</p><p>“根据记载，若是出生婴儿体内带有怨气，前世一定有着极大的冤屈，死后怨气封入魂体，待投胎转世获得新的肉身时，这股怨气就会慢慢苏醒过来。”</p><p>“好徒儿，为师自知无涯，未能以道化解你体内的怨气，至于怨气的缘由，待你今日下山后自行参透。”</p><p>叶辰心里暗想</p><p>“师傅这是要赶我下山了？就算赶我下山，也得让我找个落脚出先把。”</p><p>随后说道</p><p>“不知师傅让弟子去哪？”</p><p>此时张广正身影一闪，来到叶辰背后，一手抓着他肩膀，另一只竖起食中指，一道微弱的红光浮现在两指上，随后慢慢显现出一把模糊的剑影，最后由双指改为掌心，打入叶辰手臂。</p><p>“徒儿莫怕，在你下山前，为师赐你一把五行剑，此剑可斩断世间任何的五行之物，望徒儿往后得以善用！”</p><p>叶辰眉心一颤，震惊的望着张广正那手心中的红光慢慢融入到自己手臂。</p><p>随后双手抱拳，单膝下跪，说道</p><p>“感谢师傅！”</p><p>“起来吧，此次下山，你就先去欧阳村吧，那里有个人在等着你施救呢！”</p><p>张广正对着叶辰说道</p><p>叶辰缓慢的站起身子，心里沉思着</p><p>“欧阳村？莫非——是小悦儿的村子？不会的不会的，世界那么大，不可能那么巧的。”</p><p>然而，叶辰越是怕什么就来什么。当然这是后话</p><p>待叶辰从沉思中醒悟过来时，张广正的身影早已从原地消失，这时只听空中慢慢回响他的声音</p><p>“人道渺渺，仙道茫茫，鬼道乐兮，当人生门，仙道贵生，鬼道贵终。望徒儿早日参透！”</p><p>那话音刚落，叶辰面朝张广正府中，双膝下跪，磕了三个头后，慢慢的走下茅山。</p><p>“人道渺渺，仙道茫茫……，不知师傅说的这话有何含义？算了算了，不想了，还是先去欧阳村看看吧！”</p><p>此时欧阳村中，小悦儿正躺在床上，身旁还有个妇人心神不宁，着急的等待着什么……</p><p>此人便是小悦儿母亲，上官雨萍</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;张广正望了望叶辰，又继续说道&lt;/p&gt;
&lt;p&gt;“十八年前，救下那名婴儿的人正是为师，那婴儿是徒儿你！”&lt;/p&gt;
&lt;p&gt;叶辰愣了一下，心里想道&lt;/p&gt;
&lt;p&gt;“这么多年来一直疑惑为什么从小就无父无母，而自己的养父养母却从来不提及”&lt;/p&gt;
&lt;p&gt;随后叶辰掀开腹中的衣裳继续想道&lt;
      
    
    </summary>
    
      <category term="小说" scheme="https://xiaowuyoucy.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt编程第二天</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/24/Qt%E7%AC%AC%E4%BA%8C%E5%A4%A9/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/24/Qt第二天/</id>
    <published>2023-10-24T14:04:42.000Z</published>
    <updated>2023-11-28T16:30:53.211Z</updated>
    
    <content type="html"><![CDATA[<h3 id="菜单栏"><a class="markdownIt-Anchor" href="#菜单栏"></a> 菜单栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">//1、菜单栏 只能有一个</span><br><span class="line"> QMenuBar * bar = menuBar();//创建菜单栏</span><br><span class="line"> setMenuBar(bar);//将菜单栏添加到窗口</span><br><span class="line"></span><br><span class="line">    //创建菜单</span><br><span class="line">QMenu * fileMenu = bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">QMenu * editMenu = bar-&gt;addMenu(&quot;编辑&quot;);</span><br><span class="line"></span><br><span class="line">    //创建菜单项</span><br><span class="line">QAction * newAction = fileMenu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line"></span><br><span class="line">    //添加分割线</span><br><span class="line">fileMenu-&gt;addSeparator();</span><br><span class="line"></span><br><span class="line">QAction * openAction = fileMenu-&gt;addAction(&quot;打开&quot;);</span><br></pre></td></tr></table></figure><h3 id="工具栏"><a class="markdownIt-Anchor" href="#工具栏"></a> 工具栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">//2、工具栏 可以有多个</span><br><span class="line">    QToolBar * toolBar = new QToolBar(this);</span><br><span class="line">    addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line"></span><br><span class="line">    //设置只允许左右停靠</span><br><span class="line">    toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    //设置浮动</span><br><span class="line">    toolBar-&gt;setFloatable(false);</span><br><span class="line"></span><br><span class="line">    //设置移动 （总开关）</span><br><span class="line">    toolBar-&gt;setMovable(false);</span><br><span class="line"></span><br><span class="line">    //工具栏中放入小部件</span><br><span class="line">    toolBar-&gt;addAction(newAction);</span><br><span class="line">    //添加分割线</span><br><span class="line">    toolBar-&gt;addSeparator();</span><br><span class="line">    toolBar-&gt;addAction(openAction);</span><br></pre></td></tr></table></figure><h3 id="状态栏"><a class="markdownIt-Anchor" href="#状态栏"></a> 状态栏</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//状态栏  只能有一个</span><br><span class="line">QStatusBar * stBar = statusBar();</span><br><span class="line">setStatusBar(stBar);</span><br><span class="line"></span><br><span class="line">QLabel * label1 = new QLabel(&quot;左侧提示信息&quot;,this);</span><br><span class="line">stBar-&gt;addWidget(label1);</span><br><span class="line"></span><br><span class="line">QLabel * label2 = new QLabel(&quot;右侧提示信息&quot;,this);</span><br><span class="line">stBar-&gt;addPermanentWidget(label2);</span><br></pre></td></tr></table></figure><h3 id="铆接部件-浮动窗口"><a class="markdownIt-Anchor" href="#铆接部件-浮动窗口"></a> 铆接部件 （浮动窗口）</h3><pre><code>//铆接部件 （浮动窗口）  可以有多个QDockWidget * dock = new QDockWidget(&quot;aaa&quot; ,this);addDockWidget(Qt::BottomDockWidgetArea,dock); //只允许左右停靠dock-&gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);</code></pre><h3 id="核心部件-只能有一个"><a class="markdownIt-Anchor" href="#核心部件-只能有一个"></a> 核心部件  只能有一个</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">//核心部件  只能有一个</span><br><span class="line">   QTextEdit * edit = new QTextEdit(this); </span><br><span class="line">   setCentralWidget(edit); //将记事本设置成核心部件</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &lt;QMenuBar&gt;</span><br><span class="line">#include &lt;QToolBar&gt;</span><br><span class="line">#include &lt;QLabel&gt;</span><br><span class="line">#include &lt;QStatusBar&gt;</span><br><span class="line">#include &lt;QDockWidget&gt;</span><br><span class="line">#include &lt;QTextEdit&gt;</span><br><span class="line">MainWindow::MainWindow(QWidget *parent)</span><br><span class="line">    : QMainWindow(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">    resize(600,400);</span><br><span class="line"></span><br><span class="line">    //1、菜单栏 只能有一个</span><br><span class="line">    QMenuBar * bar = menuBar();</span><br><span class="line">    setMenuBar(bar);</span><br><span class="line"></span><br><span class="line">    //创建菜单</span><br><span class="line">    QMenu * fileMenu = bar-&gt;addMenu(&quot;文件&quot;);</span><br><span class="line">    QMenu * editMenu = bar-&gt;addMenu(&quot;编辑&quot;);</span><br><span class="line"></span><br><span class="line">    //创建菜单项</span><br><span class="line">    QAction * newAction = fileMenu-&gt;addAction(&quot;新建&quot;);</span><br><span class="line"></span><br><span class="line">    //添加分割线</span><br><span class="line">    fileMenu-&gt;addSeparator();</span><br><span class="line"></span><br><span class="line">    QAction * openAction = fileMenu-&gt;addAction(&quot;打开&quot;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //2、工具栏 可以有多个</span><br><span class="line">    QToolBar * toolBar = new QToolBar(this);</span><br><span class="line">    addToolBar(Qt::LeftToolBarArea,toolBar);</span><br><span class="line"></span><br><span class="line">    //设置只允许左右停靠</span><br><span class="line">    toolBar-&gt;setAllowedAreas(Qt::LeftToolBarArea | Qt::RightToolBarArea);</span><br><span class="line"></span><br><span class="line">    //设置浮动</span><br><span class="line">    toolBar-&gt;setFloatable(false);</span><br><span class="line"></span><br><span class="line">    //设置移动 （总开关）</span><br><span class="line">    toolBar-&gt;setMovable(false);</span><br><span class="line"></span><br><span class="line">    //工具栏中放入小部件</span><br><span class="line">    toolBar-&gt;addAction(newAction);</span><br><span class="line">    //添加分割线</span><br><span class="line">    toolBar-&gt;addSeparator();</span><br><span class="line">    toolBar-&gt;addAction(openAction);</span><br><span class="line"></span><br><span class="line">    //状态栏  只能有一个</span><br><span class="line">    QStatusBar * stBar = statusBar();</span><br><span class="line">    setStatusBar(stBar);</span><br><span class="line"></span><br><span class="line">    QLabel * label1 = new QLabel(&quot;左侧提示信息&quot;,this);</span><br><span class="line">    stBar-&gt;addWidget(label1);</span><br><span class="line"></span><br><span class="line">    QLabel * label2 = new QLabel(&quot;右侧提示信息&quot;,this);</span><br><span class="line">    stBar-&gt;addPermanentWidget(label2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //铆接部件 （浮动窗口）  可以有多个</span><br><span class="line">    QDockWidget * dock = new QDockWidget(&quot;aaa&quot; ,this);</span><br><span class="line">    addDockWidget(Qt::BottomDockWidgetArea,dock);</span><br><span class="line"></span><br><span class="line">    //只允许左右停靠</span><br><span class="line">    dock-&gt;setAllowedAreas(Qt::LeftDockWidgetArea | Qt::RightDockWidgetArea);</span><br><span class="line"></span><br><span class="line">    //核心部件  只能有一个</span><br><span class="line">    QTextEdit * edit = new QTextEdit(this);</span><br><span class="line">    setCentralWidget(edit);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="ui界面设计"><a class="markdownIt-Anchor" href="#ui界面设计"></a> UI界面设计</h3><p>这里面不能输入中文</p><p><img src="/images/javawz/image-20231025222114426.png" alt="image-20231025222114426"></p><p>输入英文后再这里可以修改为中文</p><p><img src="/images/javawz/image-20231025222220405.png" alt="image-20231025222220405"></p><p><br><br></p><h3 id="资源文件"><a class="markdownIt-Anchor" href="#资源文件"></a> 资源文件</h3><p>添加资源文件</p><p><img src="/images/javawz/wps1.jpg" alt="img"></p><p><img src="/images/javawz/wps2.jpg" alt="img"></p><p>打开资源文件需要鼠标右键选择 Open in Editor</p><p><img src="/images/javawz/image-20231025011538366.png" alt="image-20231025011538366"></p><p><img src="/images/javawz/wps3-1698167691853.jpg" alt="img"></p><p>添加前缀用以区分资源文件,相当于文件夹</p><p><img src="/images/javawz/image-20231025011639424.png" alt="image-20231025011639424"></p><p><img src="/images/javawz/image-20231025011612121.png" alt="image-20231025011612121"></p><p>添加文件</p><p><img src="/images/javawz/image-20231025011704071.png" alt="image-20231025011704071">.</p><p>如果上面添加不了,可以用鼠标右键选择对应的选项来添加</p><p><img src="/images/javawz/image-20231025011853479.png" alt="image-20231025011853479"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">资源文件添加   语法：   &quot;: + 前缀名  + 文件名称&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mainwindow.h&quot;</span><br><span class="line">#include &quot;ui_mainwindow.h&quot;</span><br><span class="line"></span><br><span class="line">MainWindow::MainWindow(QWidget *parent) :</span><br><span class="line">    QMainWindow(parent),</span><br><span class="line">    ui(new Ui::MainWindow)</span><br><span class="line">&#123;</span><br><span class="line">    ui-&gt;setupUi(this);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //给新建添加小图标</span><br><span class="line">    //ui-&gt;actionNew-&gt;setIcon(QIcon(&quot;E:/Image/Luffy.png&quot;));</span><br><span class="line"></span><br><span class="line">    //资源文件添加   语法：   &quot;: + 前缀名  + 文件名称&quot;</span><br><span class="line">    ui-&gt;actionNew-&gt;setIcon(QIcon(&quot;:/Image/Luffy.png&quot;));</span><br><span class="line"></span><br><span class="line">    ui-&gt;actionOpen-&gt;setIcon(QIcon(&quot;:/Image/LuffyQ.png&quot;));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MainWindow::~MainWindow()</span><br><span class="line">&#123;</span><br><span class="line">    delete ui;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="对话框"><a class="markdownIt-Anchor" href="#对话框"></a> 对话框</h3><h4 id="模态对话框创建"><a class="markdownIt-Anchor" href="#模态对话框创建"></a> 模态对话框创建</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//模态对话框创建</span><br><span class="line">//        QDialog dlg(this);</span><br><span class="line">//        dlg.resize(120,30);</span><br><span class="line">//        dlg.exec();</span><br></pre></td></tr></table></figure><h4 id="非模态对话框"><a class="markdownIt-Anchor" href="#非模态对话框"></a> 非模态对话框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">//非模态对话框创建</span><br><span class="line">//          QDialog *dlg2 = new QDialog(this);</span><br><span class="line">//          dlg2-&gt;resize(120,30);</span><br><span class="line">//          dlg2-&gt;show();</span><br><span class="line">//          //设置 55号属性</span><br><span class="line">//          dlg2-&gt;setAttribute(Qt::WA_DeleteOnClose);</span><br></pre></td></tr></table></figure><h4 id="qmessagebox对话框"><a class="markdownIt-Anchor" href="#qmessagebox对话框"></a> QMessageBox对话框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">//错误提示对话框</span><br><span class="line">//QMessageBox::critical(this,&quot;错误&quot;,&quot;critical&quot;);</span><br><span class="line"></span><br><span class="line">//信息提示对话框</span><br><span class="line">//QMessageBox::information(this,&quot;信息&quot;,&quot;info&quot;);</span><br><span class="line"></span><br><span class="line">//询问提示对话框</span><br><span class="line"> // 参数1   父窗口  参数2  标题  参数3  提示信息  参数4  按键类型  参数5  默认关联回车按键</span><br><span class="line">//        if( QMessageBox::Save ==  QMessageBox::question(this,&quot;询问&quot;,&quot;question&quot; , QMessageBox::Save | QMessageBox::Cancel ,QMessageBox::Cancel))</span><br><span class="line">//        &#123;</span><br><span class="line">//             qDebug()&lt;&lt;&quot;点击的是保存&quot;;</span><br><span class="line">//        &#125;</span><br><span class="line">//        else</span><br><span class="line">//        &#123;</span><br><span class="line">//             qDebug()&lt;&lt;&quot;点击的是取消&quot;;</span><br><span class="line">//        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//警告提示对话框</span><br><span class="line">//QMessageBox::warning(this,&quot;警告&quot;,&quot;warning&quot;);</span><br></pre></td></tr></table></figure><h4 id="标准常用的对话框"><a class="markdownIt-Anchor" href="#标准常用的对话框"></a> 标准常用的对话框</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">QColorDialog：选择颜色；</span><br><span class="line">QFileDialog：选择文件或者目录；</span><br><span class="line">QFontDialog：选择字体；</span><br><span class="line">QInputDialog：允许用户输入一个值，并将其值返回；</span><br><span class="line">QMessageBox：模态对话框，用于显示信息、询问问题等；</span><br><span class="line">QPageSetupDialog：为打印机提供纸张相关的选项；</span><br><span class="line">QPrintDialog：打印机配置；</span><br><span class="line">QPrintPreviewDialog：打印预览；</span><br><span class="line">QProgressDialog：显示操作过程。</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//颜色对话框</span><br><span class="line">//         QColor color = QColorDialog::getColor(Qt::red);</span><br><span class="line">//         qDebug() &lt;&lt; color.red() &lt;&lt; color.green() &lt;&lt; color.blue() ;</span><br><span class="line"></span><br><span class="line">//文件对话框</span><br><span class="line">//          QString fileName = QFileDialog::getOpenFileName(this,&quot;打开文件&quot;,&quot;C:\\Users\\zhangtao\\Desktop&quot;,&quot;(*.doc)&quot;);</span><br><span class="line">//          qDebug () &lt;&lt;fileName;</span><br><span class="line"></span><br><span class="line">//字体对话框</span><br><span class="line">        bool flag;</span><br><span class="line">        QFont font = QFontDialog::getFont(&amp;flag,QFont(&quot;华文彩云&quot;,36));</span><br><span class="line">        qDebug() &lt;&lt; &quot;字体&quot; &lt;&lt; font.family().toUtf8().data() &lt;&lt; &quot;字号&quot;&lt;&lt; font.pointSize()</span><br><span class="line">                 &lt;&lt; &quot;是否加粗&quot;&lt;&lt;font.bold() &lt;&lt; &quot;是否倾斜&quot; &lt;&lt; font.italic();</span><br></pre></td></tr></table></figure><h3 id="界面布局"><a class="markdownIt-Anchor" href="#界面布局"></a> 界面布局</h3><h4 id="标签"><a class="markdownIt-Anchor" href="#标签"></a> 标签</h4><p><img src="/images/javawz/image-20231107221304796.png" alt="image-20231107221304796"></p><p><br><br></p><h4 id="单行编辑框"><a class="markdownIt-Anchor" href="#单行编辑框"></a> 单行编辑框</h4><p><img src="/images/javawz/image-20231107221411172.png" alt="image-20231107221411172"></p><p>echoMode属性</p><p><img src="/images/javawz/image-20231107224230784.png" alt="image-20231107224230784"></p><ol><li><strong>Normal（正常模式）</strong>：这是默认模式，用户输入的文本以明文形式显示在编辑框中。这是最常见的使用方式，适用于大多数文本输入场景。</li><li><strong>NoEcho（无回显模式）</strong>：在这个模式下，用户输入的文本不会显示在编辑框内，用于隐藏用户输入的文本，例如用于密码输入，以保护敏感信息。</li><li><strong>Password（密码模式）</strong>：在这个模式下，用户输入的文本以密码掩码字符（通常是圆点或星号）显示在编辑框内。这是用于密码输入框的常见设置，以保护密码的机密性。</li><li><strong>PasswordEchoOnEdit（编辑时密码模式）</strong>：用户在输入时，文本以明文形式显示在编辑框内，但当编辑框失去焦点后，文本会以密码掩码字符显示。这是一种用户友好的密码输入方式，让用户能够确认他们输入的内容。</li></ol><p><br><br></p><h4 id="容器"><a class="markdownIt-Anchor" href="#容器"></a> 容器</h4><p><img src="/images/javawz/image-20231107221630854.png" alt="image-20231107221630854"></p><p>容器属性:</p><p>​固定容器大小</p><p><br><br></p><p><img src="/images/javawz/image-20231107223351226.png" alt="image-20231107223351226"></p><h4 id="水平布局"><a class="markdownIt-Anchor" href="#水平布局"></a> 水平布局</h4><p><img src="/images/javawz/image-20231107222105903.png" alt="image-20231107222105903"></p><p><br><br></p><h4 id="垂直布局"><a class="markdownIt-Anchor" href="#垂直布局"></a> 垂直布局</h4><p><img src="/images/javawz/image-20231107222141029.png" alt="image-20231107222141029"></p><p><br><br></p><h4 id="栅格布局"><a class="markdownIt-Anchor" href="#栅格布局"></a> 栅格布局</h4><p>几行几列的选栅格布局,然后再选垂直布局</p><p><img src="/images/javawz/image-20231107222937304.png" alt="image-20231107222937304"></p><p>没有布局会有红圈</p><p><img src="/images/javawz/image-20231107222017658.png" alt="image-20231107222017658"></p><p><br><br></p><h4 id="弹簧"><a class="markdownIt-Anchor" href="#弹簧"></a> 弹簧</h4><p>固定布局的</p><p><img src="/images/javawz/image-20231107222349302.png" alt="image-20231107222349302"></p><h5 id="弹簧属性"><a class="markdownIt-Anchor" href="#弹簧属性"></a> 弹簧属性</h5><p><img src="/images/javawz/image-20231107222510511.png" alt="image-20231107222510511"></p><p>Fixed是固定弹簧大小</p><p>Expanding是可伸缩的</p><p><br><br></p><h4 id="打破布局"><a class="markdownIt-Anchor" href="#打破布局"></a> 打破布局</h4><p><img src="/images/javawz/image-20231107222718372.png" alt="image-20231107222718372"></p><p><img src="/images/javawz/image-20231107222802528.png" alt="image-20231107222802528"></p><p><br><br></p><h4 id="修改窗口标题"><a class="markdownIt-Anchor" href="#修改窗口标题"></a> 修改窗口标题</h4><p><img src="/images/javawz/image-20231107223711556.png" alt="image-20231107223711556"></p><p><br><br></p><h4 id="修改容器内边距"><a class="markdownIt-Anchor" href="#修改容器内边距"></a> 修改容器内边距</h4><p><img src="/images/javawz/image-20231107223909831.png" alt="image-20231107223909831"></p><p><img src="/images/javawz/image-20231107223938922.png" alt="image-20231107223938922"></p><p><br><br></p><h4 id="固定窗口大小"><a class="markdownIt-Anchor" href="#固定窗口大小"></a> 固定窗口大小</h4><p><img src="/images/javawz/image-20231107224614856.png" alt="image-20231107224614856"></p><p>把minimumSize和maximumSize值都设置一样</p><h3 id="常用控件按钮组"><a class="markdownIt-Anchor" href="#常用控件按钮组"></a> 常用控件–按钮组</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;菜单栏&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#菜单栏&quot;&gt;&lt;/a&gt; 菜单栏&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>第二篇 揭晓身世</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/21/%E7%AC%AC%E4%BA%8C%E7%AB%A0%E4%B8%8B%E5%B1%B1/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/21/第二章下山/</id>
    <published>2023-10-20T16:22:54.000Z</published>
    <updated>2023-10-25T17:40:12.833Z</updated>
    
    <content type="html"><![CDATA[<p>茅山又名句曲山，在茅山大堂缓缓走出一名老者，只见老者手握拳头，伸出食指中指运气灵气说道</p><p>​“净儿，你过来一下，为师今日有特别的话要和你说！”</p><p>原来此乃茅山中的传音术，而灵气乃又是每个修行道人所需，修行人需要每天刻苦修炼，最后吸灵入体，最后才能驱使万千道法。</p><p>此时茅山后院的森林内，一人正在打坐，然后缓缓睁开双眼</p><p>​“师傅有特别的事要对我说？会是什么事儿呢！”</p><p>此人正是十年前救下小悦儿的叶辰，原来十年前叶辰把悦儿送到二婶婶家后，就来到了茅山修行，做起了茅山的俗家弟子，故而道号为玄净。</p><p>只见叶辰站起身,食指中指夹着一道黄符，口中念道</p><p>​“日遁千里，夜遁八百，五行土遁，敕令”</p><p>突然，叶辰从原地瞬间消失不见</p><p>茅山院内骤然出现了一道身影，此人正是刚刚从森林中消失不见的叶辰，只见叶辰大步走向茅山大堂，然后双手抱拳，单膝下跪地说道</p><p>“弟子，拜见师傅，不知师傅找弟子有何事”</p><p>老者单手一挥，口中说道</p><p>“净儿，起来吧”</p><p>此时只见叶辰被一股无形的力量托起，可见那老者的道行深不可测啊。</p><p>老者说道</p><p>”净儿啊，为师找你来是想告诉你，你已经随为师修行有十余载了吧“</p><p>当叶辰回忆起自救下小悦儿之后，已经过去了整整十年了，便赶忙说道</p><p>“是的，不知师傅为何提起此事儿？”</p><p>“就让为师给你讲一个故事吧” 只见那老者口中缓缓说道</p><p>十八年前，叶家村中一名丫鬟急匆匆在大街人群中边跑边呼喊着</p><p>“叶老爷，叶老爷！”</p><p>人群中一名男子，手里拿着一把扇子，缓缓地回过头，望着那匆匆赶来的丫鬟说道</p><p>“什么事儿，大街上大喊大叫，成何体统！”</p><p>只见那丫鬟来到叶老爷身旁，边喘气边来回的抚摸着胸口，咽了咽嗓子说道：</p><p>“老~老爷，夫人要生了，您——您赶紧回去一趟吧！ ”</p><p>“什么？” ，男子手中扇子一合，立马拍打在另一只手心上目视着那丫鬟</p><p>“老爷，你还是先赶紧回去一趟吧！”  只见那丫鬟面露着慌张的神色，似乎有不好的事情即将到来。</p><p>此时只见那男子迈起腿大步的朝叶家方向走去。</p><p>这时叶家家中卧室里传来一阵阵人群中慌乱的嘈杂声</p><p>”啊——啊————我要不行了~“</p><p>只见一名即将临盆的妇人额头布满汗珠，双手紧抓床褥，面带痛苦表情地喊道。</p><p>“妇人，坚持住啊，已经可以看到孩子的脑袋了，用力~再用点力气”</p><p>一位身穿古老的绸袍，头戴一顶古朴帽子的产婆在旁安抚着那妇人。</p><p>就在这时那妇人突然发出</p><p>“啊————！”</p><p>长长的一声随即瘫软在床上一动也不动便失去了气息。紧接着，一连串的婴儿哭声，打破了这卧室里先前的嘈杂慌乱声。</p><p>门外传来匆忙的加不上,没一会过分,叶老爷便出现在门口。</p><p>“夫人！ 夫人怎么了？，这到底发生什么事儿了？”，叶老爷瞪大了双眼，目视着那床上一动不动的妇人，随后慌忙的对着屋内的几人问道。</p><p>“老爷，夫人难产死了——，刚刚你~你出去的时候，夫人突然感觉到肚子疼，于是我们便赶忙叫来产婆……”</p><p>此时几位丫鬟，踉跄的走到他身旁随后带着哭腔地将刚刚所发生的事情，，都一五一十的告诉叶老爷。</p><p>几位丫鬟刚说完，只见叶老爷的双手微微一颤，哐当一声，那把手中拿着的扇子早已掉落在地上。</p><p>只见叶老爷来到那妇人身边，单手抚摸着那妇人额头</p><p>“夫人，你怎么忍心丢下我和…”</p><p>叶老爷话还没来得及说完，那产婆手里抱着的孩子突然散发着一股强大的怨气，在这个强大的怨气影响下，众人便纷纷倒下，再无声息。</p><p>此时门外渐渐的出现了一个老者的身影。</p><p>“好强大的怨气！想不到一个婴儿身上竟带着这么强劲的怨气！”</p><p>只见那老者竖起食中指，嘴里念着奇怪的咒语，随后由食中指改向无名指、食指、拇指往那婴儿点去， 一股无形强大的灵气瞬间出现，正在慢慢的压制住那股婴儿身上散发出来的怨气，直到那股怨气被完全压制住，消失不见。</p><p>此刻那名婴儿腹中慢慢出现了一个阴阳八卦的图案。</p><p>那老者抱起婴儿走向门外，经过多方询问，最后此婴儿才被一户膝下无儿无女的人家收留。</p><p>那老者临走前嘱咐到</p><p>“待这孩子八岁时，让他来茅山来找本道。”</p><p>那户人家上前询问     “不知这位道长怎么称呼？ ”</p><p>“贫道乃张广正”</p><p>话刚说完，那张广正的身影慢慢从原地散去。</p><p>“啊—原来是茅山张真人啊！这孩子有救了！”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;茅山又名句曲山，在茅山大堂缓缓走出一名老者，只见老者手握拳头，伸出食指中指运气灵气说道&lt;/p&gt;
&lt;p&gt;​				“净儿，你过来一下，为师今日有特别的话要和你说！”&lt;/p&gt;
&lt;p&gt;原来此乃茅山中的传音术，而灵气乃又是每个修行道人所需，修行人需要每天刻苦修炼，最后吸灵入体，最后
      
    
    </summary>
    
      <category term="小说" scheme="https://xiaowuyoucy.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>第一篇  初遇悦儿</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/19/%E7%AC%AC%E4%B8%80%E7%AB%A0%E7%BC%98%E7%9A%84%E7%94%B1%E6%9D%A5/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/19/第一章缘的由来/</id>
    <published>2023-10-19T15:04:51.000Z</published>
    <updated>2023-10-20T17:11:01.422Z</updated>
    
    <content type="html"><![CDATA[<p>​故事还得从孤云镇秋风村说起，一位少年在树林小道里悠哉悠哉的赶着路，</p><p>​ ”呜呜呜呜~“</p><p>少年喊道：</p><p>​”是谁在哭啊！快给本少爷出来！“</p><p>只听树林里传来的女孩的哭声却不见有任何人回答，</p><p>少年心想：</p><p>​”不会这么倒霉吧！大白天遇到鬼了？不对呀，常听村里人说起，这条路经常有野兽出没，该不会是前方有人遇到危险了吧？“  ，</p><br><p>少年急急忙忙从路旁抄起一根坚硬的木棍，毅然地朝着哭声的来源地跑去。，此时只见前方有个小女孩坐在地上哭泣着，旁边还有一只老虎凶猛地注视着她。</p><p>突然，老虎走到小女孩跟前，张开巨大的嘴巴准备扑向她。</p><p>​“小妹妹别怕！畜生东西快滚开”，</p><p>少年挥舞着木棍，狠狠地敲击了老虎的腹部。老虎发出痛苦的嗷叫声，后退了几步，然后再次扑向了少年。</p><p>““砰””</p><p>只见那少年被扑倒在地，那猛虎张开血盆大口就要往少年脑袋咬去。</p><br><p>“混账东西，刚刚打得还不够疼是吧！”</p><p>少年用木棍顶住老虎的嘴巴，一手从口袋里抽出小刀，直取老虎的眼睛。老虎吃痛，大吼一声</p><p>“嗷~”，</p><p>用力地将少年甩开，然后迅速消失在树林深处。</p><p>​“畜生东西，再慢两步，爷爷皮都给你剥下来”</p><p>少年起身，拍打身上的泥尘，检查了一下自己的伤势。除了手臂上被老虎甩伤外，其他部位都没有受伤。然后，他走向小女孩。</p><p>​“小妹妹，不要哭啦，老虎已经被哥哥赶跑了！”</p><p>小女孩边哭泣边说道</p><p>​“真的吗？”</p><p>少年摸着小女孩的脑袋回答</p><p>​“嗯，小妹妹你怎么一个人跑到这啊，这里很危险的！“</p><p>小女孩：</p><p>​“呜呜呜~     娘亲叫我拿点蘑菇到二婶婶家，我走着走着就不知道怎么着就走到这了。”</p><br><p>​“好啦好啦，小妹妹你叫什么名字呢！不许哭了哦，哥哥给你吃冰糖葫芦”</p><p>说完少年就从包袱里拿出用纸张包着的冰糖葫芦递到小女孩面前。</p><p>​“谢谢大哥哥，我叫欧阳子悦，家里人都叫我悦儿，大哥哥你又叫什么名字呢？”</p><p>小女孩带着抽泣的声音回答少年。</p><p>​“我呀，我叫叶辰，你叫我叶哥哥吧~，你二婶婶家在哪儿？我送你过去吧！”</p><p>叶辰扶起悦儿说道。</p><br><p>​“二婶婶在一里外的柳岚村，啊~,叶哥哥，我脚疼，应该是刚刚遇到大老虎，慌忙跑的时候摔到了，扭伤了。”</p><p>这时悦儿用手捂住脚踝。</p><p>​“哥哥背你过去吧， 恰好我也顺路”</p><p>叶辰背起小悦儿就往柳岚村走去。</p><p>​“叶哥哥谢谢你刚刚救了我，幸好叶哥哥及时出现帮我赶走了大老虎，要不然我都不知道怎么办呢，叶哥哥真勇敢!”</p><p>此时小悦儿心里悄悄的埋下了对叶哥哥喜爱和崇拜的种子。</p><p>小悦儿脑袋靠着叶辰的肩膀上说道</p><br><p>​“傻丫头，以后一个人就不要走这条……。”</p><p>话还没说完，叶辰就听到身后传来了细小的呼呼声。只见那小悦儿面带笑容的睡着了。估计被刚刚那只大老虎吓到，然后哭累了吧。</p><br><p>不知过了多久，叶辰走到了一处村口，只见村口牌匾上写着柳岚村。</p><p>​“呦，这不是小悦儿吗！怎么和一个陌生人过来了~”</p><p>在不远处一位妇人对着村口的叶辰叫道。</p><p>​“想必你就是悦儿的二婶婶吧！”</p><p>叶辰对着那不远处的妇人说道。</p><br><p>​“是是是，敢问这位小兄弟是悦儿的什么人呢？”</p><p>妇人疑惑的望着那小伙子问道。</p><br><p>这时小悦儿估计是听到了二婶婶的叫喊，醒了过来。叶辰轻轻的将悦儿放下来后，便将刚刚发生的前因后果给二婶婶道来。</p><br><p>二婶婶听完后，先是吃惊，然后欣慰的说道</p><p>​“这悦儿的母亲也真是的，小悦儿还这么小，就让她一个人过来，幸好遇到小兄弟你及时出手相救，要不然咱们家小悦儿就……，小兄弟要是不嫌弃的话就留下来吃个饭，住一晚上在做打算呀，就当是我们家报答你今天对小悦儿的救命之恩，不知小兄弟意下如何？&quot;</p><br><p>叶辰连忙摇手道</p><p>​“不了不了，我还得着急赶路去大孤镇呢。把小悦儿安全的送到你这里来我就放心了。”</p><p>叶辰对二婶说完后便准备起身出发。</p><p>​“叶哥哥，我们什么时候才能再见面啊！”</p><p>小悦儿对着叶辰温柔的说道</p><br><p>叶辰轻轻地摸了摸悦儿的脑袋回答道</p><p>​“等小悦儿长大的时候，我们还会再见面哒。小悦儿要乖乖听话哦。要不然叶哥哥就不见你了哦。”</p><br><p>叶辰说完便往大孤镇的方向走去。</p><p>只见悦儿恋恋不舍的望着叶辰的身影大声喊到</p><p>​“叶哥哥，不要忘记了咱们的约定呀，等我长大后，一定要来看小悦儿~”</p><p>叶辰慢慢的远去，直到身影完全消失不见。</p><br><p>十年后……</p><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;​	故事还得从孤云镇秋风村说起，一位少年在树林小道里悠哉悠哉的赶着路，&lt;/p&gt;
&lt;p&gt;​					 ”呜呜呜呜~“&lt;/p&gt;
&lt;p&gt;少年喊道：&lt;/p&gt;
&lt;p&gt;​					”是谁在哭啊！快给本少爷出来！“&lt;/p&gt;
&lt;p&gt;只听树林里传来的女孩的哭声却不见有任何人回答，&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="小说" scheme="https://xiaowuyoucy.github.io/categories/%E5%B0%8F%E8%AF%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>yydc0001</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/11/yydc0001/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/11/yydc0001/</id>
    <published>2023-10-11T15:58:48.000Z</published>
    <updated>2023-10-11T16:19:02.473Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../themes/pure/source/images/javawz/image-20231011235857309.png" alt="image-20231011235857309"></p><p><img src="../../themes/pure/source/images/javawz/image-20231012000014948.png" alt="image-20231012000014948"></p><p><img src="../../themes/pure/source/images/javawz/image-20231012001900471.png" alt="image-20231012001900471"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../themes/pure/source/images/javawz/image-20231011235857309.png&quot; alt=&quot;image-20231011235857309&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;../../theme
      
    
    </summary>
    
      <category term="英语单词" scheme="https://xiaowuyoucy.github.io/categories/%E8%8B%B1%E8%AF%AD%E5%8D%95%E8%AF%8D/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt编程第一天</title>
    <link href="https://xiaowuyoucy.github.io/2023/10/11/Qt%E7%BC%96%E7%A8%8B%E7%AC%AC%E4%B8%80%E5%A4%A9/"/>
    <id>https://xiaowuyoucy.github.io/2023/10/11/Qt编程第一天/</id>
    <published>2023-10-11T15:09:49.000Z</published>
    <updated>2023-10-25T15:44:05.373Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pro文件"><a class="markdownIt-Anchor" href="#pro文件"></a> .pro文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">QT       += core gui  //包含的模块</span><br><span class="line">greaterThan(QT_MAJOR_VERSION, 4): QT += widgets //大于Qt4版本 才包含widget模块</span><br><span class="line">TARGET = QtFirst  //应用程序名  生成的.exe程序名称</span><br><span class="line">TEMPLATE = app    //模板类型    应用程序模板</span><br><span class="line">SOURCES += main.cpp\   //源文件</span><br><span class="line">        mywidget.cpp</span><br><span class="line">HEADERS  += mywidget.h   //头文件</span><br></pre></td></tr></table></figure><p><strong>.pro就是工程文件(project)，它是qmake自动生成的用于生产makefile的配置文件</strong>。.pro文件的写法如下：</p><h4 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h4><p>从“#”开始，到这一行结束。</p><h4 id="模板变量"><a class="markdownIt-Anchor" href="#模板变量"></a> 模板变量</h4><p>告诉qmake为这个应用程序生成哪种makefile。下面是可供使用的选择：<strong>TEMPLATE</strong> = app</p><p>app -建立一个应用程序的makefile。这是默认值，所以如果模板没有被指定，这个将被使用。</p><p>lib - 建立一个库的makefile。</p><p>vcapp - 建立一个应用程序的VisualStudio项目文件。</p><p>vclib - 建立一个库的VisualStudio项目文件。</p><p>subdirs -这是一个特殊的模板，它可以创建一个能够进入特定目录并且为一个项目文件生成makefile并且为它调用make的makefile。</p><h4 id="配置信息"><a class="markdownIt-Anchor" href="#配置信息"></a> 配置信息</h4><p>CONFIG用来告诉qmake关于应用程序的配置信息。</p><p>CONFIG +=  c<ins>11 //使用c</ins>11的特性</p><p>在这里使用“+=”，是因为我们添加我们的配置选项到任何一个已经存在中。这样做比使用“=”那样替换已经指定的所有选项更安全。</p><hr><h3 id="命名规范"><a class="markdownIt-Anchor" href="#命名规范"></a> 命名规范</h3><p>类名：首字母 大小  单词和单词之间 首字母 大写<br>变量、函数名： 首字母小写 单词和单词之间 首字母 大写</p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">运行 ctrl + R</span><br><span class="line">编译 ctrl + B</span><br><span class="line">查询 ctrl + F</span><br><span class="line">注释 ctrl + /</span><br><span class="line">帮助 F1</span><br><span class="line">字体缩放  ctrl + 鼠标滚轮</span><br><span class="line">整行代码移动  ctrl + shift + ↑ ↓</span><br><span class="line">自动对齐  ctrl + i</span><br><span class="line">同名之间的.h .cpp切换  F4</span><br><span class="line"></span><br><span class="line">帮助文档 F1    左侧列表中按钮    C:\Qt\Qt5.6.0\5.6\mingw49_32\bin</span><br></pre></td></tr></table></figure><h3 id="qpushbutton基本创建"><a class="markdownIt-Anchor" href="#qpushbutton基本创建"></a> QPushButton基本创建</h3><p>mywidget.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#ifndef MYWIDGET_H</span><br><span class="line">#define MYWIDGET_H</span><br><span class="line"></span><br><span class="line">#include &lt;QWidget&gt;</span><br><span class="line"></span><br><span class="line">class MyWidget : public QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT  //Q_OBJECT宏  支持信号和槽</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    MyWidget(QWidget *parent = 0);</span><br><span class="line">    ~MyWidget();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // MYWIDGET_H</span><br></pre></td></tr></table></figure><p>mywidget.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mywidget.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mypushbutton.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"><span class="comment">//命名规范</span></span><br><span class="line"><span class="comment">// 类名 首字母 大小  单词和单词之间 首字母 大写</span></span><br><span class="line"><span class="comment">// 变量、函数名 首字母小写 单词和单词之间 首字母 大写</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//快捷键</span></span><br><span class="line"><span class="comment">// 运行 ctrl + R</span></span><br><span class="line"><span class="comment">// 编译 ctrl + B</span></span><br><span class="line"><span class="comment">// 查询 ctrl + F</span></span><br><span class="line"><span class="comment">// 注释 ctrl + /</span></span><br><span class="line"><span class="comment">// 帮助 F1</span></span><br><span class="line"><span class="comment">// 字体缩放  ctrl + 鼠标滚轮</span></span><br><span class="line"><span class="comment">// 整行代码移动  ctrl + shift + ↑ ↓</span></span><br><span class="line"><span class="comment">// 自动对齐  ctrl + i</span></span><br><span class="line"><span class="comment">// 同名之间的.h .cpp切换  F4</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 帮助文档 F1    左侧列表中按钮    C:\Qt\Qt5.6.0\5.6\mingw49_32\bin</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyWidget::MyWidget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//按钮</span></span><br><span class="line">    QPushButton * btn = <span class="keyword">new</span> QPushButton;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//btn-&gt;show(); //show用顶层方式弹出</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//如果想显示到当前窗口中 ，需要做依赖,设置父亲</span></span><br><span class="line">    btn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//显示文本</span></span><br><span class="line">    btn-&gt;setText(<span class="string">"德玛西亚"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按钮2</span></span><br><span class="line">    QPushButton * btn2 = <span class="keyword">new</span> QPushButton(<span class="string">"第二个"</span>,<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//移动btn2</span></span><br><span class="line">    btn2-&gt;move(<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重置窗口大小</span></span><br><span class="line">    resize(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//按钮 可以重置大小吗？ 可以</span></span><br><span class="line">    <span class="comment">//btn-&gt;resize(300,200);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//指定窗口标题</span></span><br><span class="line">    setWindowTitle(<span class="string">"第一个窗口"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置窗口固定大小</span></span><br><span class="line">    setFixedSize(<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建自定义的按钮</span></span><br><span class="line">    MyPushButton * myBtn  = <span class="keyword">new</span> MyPushButton;</span><br><span class="line">    myBtn-&gt;setParent(<span class="keyword">this</span>);</span><br><span class="line">    myBtn-&gt;setText(<span class="string">"我的按钮"</span>);</span><br><span class="line">    myBtn-&gt;move( <span class="number">300</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//点击按钮  关闭窗口</span></span><br><span class="line">    <span class="comment">//connect(  信号发送者，发送的信号，信号的接受者，处理的槽函数）</span></span><br><span class="line">    <span class="comment">//信号和槽 优点： 松散耦合</span></span><br><span class="line">   <span class="comment">// connect(myBtn, &amp;QPushButton::clicked , this, &amp;QWidget::close );</span></span><br><span class="line">    connect( myBtn , &amp;MyPushButton::clicked ,<span class="keyword">this</span>, &amp;MyWidget::close);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~MyWidget()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"MyWidget析构调用"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>mypushbutton.h</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> MYPUSHBUTTON_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MYPUSHBUTTON_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QPushButton&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//这个类作用于什么,就继承什么</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPushButton</span> :</span> <span class="keyword">public</span> QPushButton</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="keyword">explicit</span> <span class="title">MyPushButton</span><span class="params">(QWidget *parent = <span class="number">0</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    ~MyPushButton();</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> slots:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// MYPUSHBUTTON_H</span></span></span><br></pre></td></tr></table></figure><p>mypushbutton.cpp</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mypushbutton.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line">MyPushButton::MyPushButton(QWidget *parent) : QPushButton(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyPushButton::~MyPushButton()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"MyPushButton的析构函数调用"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="对象模型对象树"><a class="markdownIt-Anchor" href="#对象模型对象树"></a> 对象模型（对象树）</h3><p>一定程度上简化了内存回收机制</p><p>当创建的对象 指定的父亲是由QObject或者Object派生的类时候，这个对象被加载到对象树上，当窗口关闭掉时候，树上的对象也都会被释放掉</p><h3 id="qt中的坐标系"><a class="markdownIt-Anchor" href="#qt中的坐标系"></a> Qt中的坐标系</h3><p>x以右侧为正</p><p>y以下侧为正</p><p>左上角是 0,0点</p><h3 id="qt中信号和槽基本使用"><a class="markdownIt-Anchor" href="#qt中信号和槽基本使用"></a> Qt中信号和槽基本使用</h3><p>![Qt信号和槽 ](/images/javawz/Qt信号和槽 .png)</p><p><img src="/images/javawz/image-20231017231902044.png" alt="image-20231017231902044"></p><p>需求：点击按钮关闭窗口</p><p>连接  connect ( 信号的发送者，发送的信号，信号的接受者，处理的槽函数)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">connect( myBtn , &amp;MyPushButton::clicked ,this, &amp;MyWidget::close);</span><br></pre></td></tr></table></figure><p>当自定义插槽类有多个信号时,要使用函数指针来传递给connect函数,否则会出现歧义性,导致出错。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;mywidget.h&quot;</span><br><span class="line">#include &lt;QPushButton&gt;</span><br><span class="line">#include &quot;mypushbutton.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">//命名规范</span><br><span class="line">// 类名 首字母 大小  单词和单词之间 首字母 大写</span><br><span class="line">// 变量、函数名 首字母小写 单词和单词之间 首字母 大写</span><br><span class="line"></span><br><span class="line">//快捷键</span><br><span class="line">// 运行 ctrl + R</span><br><span class="line">// 编译 ctrl + B</span><br><span class="line">// 查询 ctrl + F</span><br><span class="line">// 注释 ctrl + /</span><br><span class="line">// 帮助 F1</span><br><span class="line">// 字体缩放  ctrl + 鼠标滚轮</span><br><span class="line">// 整行代码移动  ctrl + shift + ↑ ↓</span><br><span class="line">// 自动对齐  ctrl + i</span><br><span class="line">// 同名之间的.h .cpp切换  F4</span><br><span class="line"></span><br><span class="line">// 帮助文档 F1    左侧列表中按钮    C:\Qt\Qt5.6.0\5.6\mingw49_32\bin</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MyWidget::MyWidget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">    //按钮</span><br><span class="line">    QPushButton * btn = new QPushButton;</span><br><span class="line"></span><br><span class="line">    //btn-&gt;show(); //show用顶层方式弹出</span><br><span class="line"></span><br><span class="line">    //如果想显示到当前窗口中 ，需要做依赖</span><br><span class="line">    btn-&gt;setParent(this);</span><br><span class="line"></span><br><span class="line">    //显示文本</span><br><span class="line">    btn-&gt;setText(&quot;德玛西亚&quot;);</span><br><span class="line"></span><br><span class="line">    //按钮2</span><br><span class="line">    QPushButton * btn2 = new QPushButton(&quot;第二个&quot;,this);</span><br><span class="line"></span><br><span class="line">    //移动btn2</span><br><span class="line">    btn2-&gt;move(100,100);</span><br><span class="line"></span><br><span class="line">    //重置窗口大小</span><br><span class="line">    resize(600,400);</span><br><span class="line"></span><br><span class="line">    //按钮 可以重置大小吗？ 可以</span><br><span class="line">    //btn-&gt;resize(300,200);</span><br><span class="line"></span><br><span class="line">    //指定窗口标题</span><br><span class="line">    setWindowTitle(&quot;第一个窗口&quot;);</span><br><span class="line"></span><br><span class="line">    //设置窗口固定大小</span><br><span class="line">    setFixedSize(600,400);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //创建自定义的按钮</span><br><span class="line">    MyPushButton * myBtn  = new MyPushButton;</span><br><span class="line">    myBtn-&gt;setParent(this);</span><br><span class="line">    myBtn-&gt;setText(&quot;我的按钮&quot;);</span><br><span class="line">    myBtn-&gt;move( 300,200);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //点击按钮  关闭窗口</span><br><span class="line">    //connect(  信号发送者，发送的信号，信号的接受者，处理的槽函数）</span><br><span class="line">    //信号和槽 优点： 松散耦合</span><br><span class="line">   // connect(myBtn, &amp;QPushButton::clicked , this, &amp;QWidget::close );</span><br><span class="line">    connect( myBtn , &amp;MyPushButton::clicked ,this, &amp;MyWidget::close);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">MyWidget::~MyWidget()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;MyWidget析构调用&quot;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>如果一个类找不到继承,可以选择QObject类</p><p>student.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#ifndef STUDENT_H</span><br><span class="line">#define STUDENT_H</span><br><span class="line"></span><br><span class="line">#include &lt;QObject&gt;</span><br><span class="line"></span><br><span class="line">class Student : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">public:</span><br><span class="line">    explicit Student(QObject *parent = 0);</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //自定义槽函数 写到public slots  Qt 5.0版本以上 可以写成全局函数或者public作用域下 或者 lambda表达式</span><br><span class="line">public slots:</span><br><span class="line"></span><br><span class="line">    //返回值是void</span><br><span class="line">    //需要声明 也需要有实现</span><br><span class="line">    //可以有参数  可以发生重载</span><br><span class="line">    void treat();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void treat(QString foodName);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // STUDENT_H</span><br></pre></td></tr></table></figure><p>student.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;student.h&quot;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">Student::Student(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Student::treat()</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;请老师吃饭&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">void Student::treat(QString foodName)</span><br><span class="line">&#123;</span><br><span class="line">//如果打印QString类型的字符串会自带双引号,除非转换为chat * 类型</span><br><span class="line">    //QString 转 char *    通过.toUtf8转为 QByteArray 类型  通过 .data()转为 char *</span><br><span class="line"></span><br><span class="line">     qDebug() &lt;&lt; &quot;请老师吃饭 , 老师要吃： &quot; &lt;&lt; foodName.toUtf8().data();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>teacher.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#ifndef TEACHER_H</span><br><span class="line">#define TEACHER_H</span><br><span class="line"></span><br><span class="line">#include &lt;QObject&gt;</span><br><span class="line"></span><br><span class="line">class Teacher : public QObject</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line">public:</span><br><span class="line">    explicit Teacher(QObject *parent = 0);</span><br><span class="line"></span><br><span class="line">//自定义信号  写到signals下</span><br><span class="line"></span><br><span class="line">signals:</span><br><span class="line">    //返回值是void</span><br><span class="line">    //只需要声明 不需要实现</span><br><span class="line">    //可以有参数  可以发生重载</span><br><span class="line">    void hungry();</span><br><span class="line"></span><br><span class="line">    void hungry( QString foodName);</span><br><span class="line"></span><br><span class="line">public slots:</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // TEACHER_H</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line"></span><br><span class="line">Teacher::Teacher(QObject *parent) : QObject(parent)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>widget.h</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">#ifndef WIDGET_H</span><br><span class="line">#define WIDGET_H</span><br><span class="line"></span><br><span class="line">#include &lt;QWidget&gt;</span><br><span class="line">#include &quot;student.h&quot;</span><br><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line"></span><br><span class="line">class Widget : public QWidget</span><br><span class="line">&#123;</span><br><span class="line">    Q_OBJECT</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">    Widget(QWidget *parent = 0);</span><br><span class="line">    ~Widget();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    Teacher * zt;</span><br><span class="line">    Student * st;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //下课</span><br><span class="line">    void classIsOver();</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // WIDGET_H</span><br></pre></td></tr></table></figure><p>widget.cpp</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;widget.h&quot;</span><br><span class="line">#include &lt;QPushButton&gt;</span><br><span class="line">#include &lt;QDebug&gt;</span><br><span class="line">// Teacher老师类</span><br><span class="line">// Student学生类</span><br><span class="line">// 下课后  老师会触发一个 饿了 的信号</span><br><span class="line">// 学生响应这个信号 并且 请老师吃饭</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Widget::Widget(QWidget *parent)</span><br><span class="line">    : QWidget(parent)</span><br><span class="line">&#123;</span><br><span class="line">//参数带this代表窗口关闭会执行析构函数</span><br><span class="line">    this-&gt;zt = new Teacher(this);</span><br><span class="line">    this-&gt;st = new Student(this);</span><br><span class="line"></span><br><span class="line">    //连接信号和槽</span><br><span class="line">    //connect(zt,&amp;Teacher::hungry,st,&amp;Student::treat);</span><br><span class="line"></span><br><span class="line">    //classIsOver();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //连接有参信号和槽</span><br><span class="line">    // 函数指针 可以指向 函数地址</span><br><span class="line">//    void(Teacher:: *teacherSignal)(QString) = &amp;Teacher::hungry;</span><br><span class="line"></span><br><span class="line">//    void(Student:: *studentSlot)(QString ) = &amp;Student::treat;</span><br><span class="line"></span><br><span class="line">//    connect(zt,teacherSignal, st,studentSlot);</span><br><span class="line"></span><br><span class="line">   // classIsOver();</span><br><span class="line"></span><br><span class="line">    //创建按钮</span><br><span class="line">    QPushButton * btn = new QPushButton(&quot;下课&quot; , this);</span><br><span class="line"></span><br><span class="line">    resize(600,400);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    void(Teacher:: *teacherSignal2)() = &amp;Teacher::hungry;</span><br><span class="line"></span><br><span class="line">    void(Student:: *studentSlot2)() = &amp;Student::treat;</span><br><span class="line"></span><br><span class="line">    connect(zt,teacherSignal2, st,studentSlot2);</span><br><span class="line"></span><br><span class="line">    //1、信号是可以连接信号</span><br><span class="line">    connect(btn,&amp;QPushButton::clicked,zt,teacherSignal2);</span><br><span class="line">    //2、可以断开信号和槽</span><br><span class="line">    disconnect(zt,teacherSignal2, st,studentSlot2);</span><br><span class="line"></span><br><span class="line">    //3、一个信号可以响应多个槽函数</span><br><span class="line"></span><br><span class="line">    //4、多个信号可以连接同一个槽函数</span><br><span class="line"></span><br><span class="line">    //5、信号和槽函数的参数类型 必须一一对应</span><br><span class="line">    //   信号的参数个数 可以多余槽函数的参数个数，反之不可以 , 参数类型要一一对应</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //Qt4版本信号和槽写法</span><br><span class="line">    //利用Qt4版本连接有参信号和槽</span><br><span class="line">    //优势 ：参数直观</span><br><span class="line">    //劣势 ：参数类型不做匹配检测</span><br><span class="line">    // Qt4本质   SIGNAL(&quot;hungry(int)&quot;)SLOT(&quot;treat(QString)&quot;)</span><br><span class="line">//    connect(zt, SIGNAL(hungry(QString)) , st , SLOT(treat(QString)));</span><br><span class="line"></span><br><span class="line">//    classIsOver();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    //[=] 函数体内可以使用Lambda所在作用范围内所有可见的局部变量</span><br><span class="line">    QPushButton * btn2 = new QPushButton(&quot;aaa&quot;,this);</span><br><span class="line">    QPushButton * btn3 = new QPushButton(&quot;aaa&quot;,this);</span><br><span class="line">    [=]()&#123;</span><br><span class="line">        btn2-&gt;setText(&quot;bbb&quot;);</span><br><span class="line">        btn3-&gt;setText(&quot;bbb&quot;);</span><br><span class="line">    &#125;();</span><br><span class="line"></span><br><span class="line">    //最常用lambda使用 [=]()&#123;&#125;</span><br><span class="line">    QPushButton * btn4 = new QPushButton(&quot;aaa&quot;,this);</span><br><span class="line">    btn4-&gt;move( 100, 0);</span><br><span class="line"></span><br><span class="line">    //当进行信号和槽连接时候，控件内会进入一个锁的状态</span><br><span class="line">    connect(btn4,&amp;QPushButton::clicked,this,[=]()&#123;</span><br><span class="line">        btn4-&gt;setText(&quot;bbb&quot;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //加上mutable修饰符后，可以修改按值传递进来的拷贝</span><br><span class="line">   QPushButton * myBtn = new QPushButton (this);</span><br><span class="line">   QPushButton * myBtn2 = new QPushButton (this);</span><br><span class="line">   myBtn2-&gt;move(100,100);</span><br><span class="line">   int m = 10;</span><br><span class="line"></span><br><span class="line">   connect(myBtn,&amp;QPushButton::clicked,this,[m] () mutable &#123; m = 20; qDebug() &lt;&lt; m; &#125;);</span><br><span class="line"></span><br><span class="line">   connect(myBtn2,&amp;QPushButton::clicked,this,[=] ()  &#123; qDebug() &lt;&lt; m; &#125;);</span><br><span class="line"></span><br><span class="line">   qDebug() &lt;&lt; m;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //-&gt; 返回值类型</span><br><span class="line">   int num = [=]()-&gt;int&#123;</span><br><span class="line">        return 1000;</span><br><span class="line">   &#125;();</span><br><span class="line">   qDebug() &lt;&lt; &quot;num = &quot; &lt;&lt; num ;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   //点击按钮 关闭窗口</span><br><span class="line">   connect(btn4,&amp;QPushButton::clicked,[=]()&#123;</span><br><span class="line">        //this-&gt;close();</span><br><span class="line">        st-&gt;treat(&quot;宫保鸡丁&quot;);</span><br><span class="line">   &#125;);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void Widget::classIsOver()</span><br><span class="line">&#123;</span><br><span class="line">    //触发自定义信号</span><br><span class="line">//    emit this-&gt;zt-&gt;hungry();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">   emit this-&gt;zt-&gt;hungry(&quot;宫保鸡丁&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Widget::~Widget()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="lambda表达式"><a class="markdownIt-Anchor" href="#lambda表达式"></a> Lambda表达式</h3><p>C++11中的Lambda表达式<strong>用于定义并创建匿名的函数对象</strong>，以简化编程工作。首先看一下Lambda表达式的基本构成：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">[capture](parameters) mutable -&gt;return-type</span><br><span class="line">&#123;</span><br><span class="line">statement</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">[函数对象参数](操作符重载函数参数)mutable -&gt;返回值&#123;函数体&#125;</span><br></pre></td></tr></table></figure><p>函数对象参数有以下形式：<br>空。没有使用任何函数对象参数。</p><br><p>= ：函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是值传递方式（相当于编译器自动为我们按值传递了所有局部变量）。</p><br><p>&amp; ：函数体内可以使用Lambda所在作用范围内所有可见的局部变量（包括Lambda所在类的this），并且是引用传递方式（相当于编译器自动为我们按引用传递了所有局部变量）。this。函数体内可以使用Lambda所在类中的成员变量。</p><br><p>a ：将a按值进行传递。按值进行传递时，函数体内不能修改传递进来的a的拷贝，因为默认情况下函数是const的。要修改传递进来的a的拷贝，可以添加mutable修饰符。</p><br><p>&amp;a ：将a按引用进行传递。</p><br><p>a, &amp;b ：将a按值进行传递，b按引用进行传递。</p><br><p>=，&amp;a, &amp;b ：除a和b按引用进行传递外，其他参数都按值进行传递。</p><br><p>&amp;, a, b ：除a和b按值进行传递外，其他参数都按引用进行传递。</p><br><p>操作符重载函数参数；<br>标识重载的()操作符的参数，没有参数时，这部分可以省略。参数可以通过按值（如：(a,b)）和按引用（如：(&amp;a,&amp;b)）两种方式进行传递。</p><br><p>可修改标示符；<br>mutable声明，这部分可以省略。按值传递函数对象参数时，加上mutable修饰符后，可以修改按值传递进来的拷贝（注意是能修改拷贝，而不是值本身）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">QPushButton * myBtn = new QPushButton (this);</span><br><span class="line">QPushButton * myBtn2 = new QPushButton (this);</span><br><span class="line">myBtn2-&gt;move(100,100);</span><br><span class="line">int m = 10;</span><br><span class="line"></span><br><span class="line">connect(myBtn,&amp;QPushButton::clicked,this,[m] ()mutable &#123; m = 20; qDebug() &lt;&lt; m; &#125;);</span><br><span class="line"></span><br><span class="line">connect(myBtn2,&amp;QPushButton::clicked,this,[=] ()  &#123; qDebug() &lt;&lt; m; &#125;);</span><br><span class="line"></span><br><span class="line">qDebug() &lt;&lt; m;</span><br></pre></td></tr></table></figure><p>函数返回值；</p><p><code>-&gt;</code>返回值类型，标识函数返回值的类型，当返回值为void，或者函数体中只有一处return的地方（此时编译器可以自动推断出返回值类型）时，这部分可以省略。</p><p>{}是函数体；</p><p>​<code>{}</code>，标识函数的实现，这部分不能省略，但函数体可以为空。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pro文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#pro文件&quot;&gt;&lt;/a&gt; .pro文件&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>安装与配置Linux操作系统</title>
    <link href="https://xiaowuyoucy.github.io/2023/04/10/%E5%AE%89%E8%A3%85%E4%B8%8E%E9%85%8D%E7%BD%AELinux%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xiaowuyoucy.github.io/2023/04/10/安装与配置Linux操作系统/</id>
    <published>2023-04-10T14:29:52.000Z</published>
    <updated>2023-04-11T16:16:03.934Z</updated>
    
    <content type="html"><![CDATA[<p>Linux一般由3个部分组成：内核(kernel)、命令解析层（Shell或其他操作环境）、实用工具。</p><h3 id="重置root管理员密码"><a class="markdownIt-Anchor" href="#重置root管理员密码"></a> 重置root管理员密码</h3><p>（1）先确认是RHEL8</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/redhat-release</span><br></pre></td></tr></table></figure><p>（2）在终端输入reboot，重启之后按E进入内核编辑模式</p><p>（3） 在linux参数行的最后面追加 “rd.break” 然后按下CTRL+X 运行修改过的内核程序</p><p>（4）进入紧急模式。依次输入以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">mount -o remount,rw /sysroot</span><br><span class="line">chroot /sysroot</span><br><span class="line">passwd   这一步按下回车后要输入新密码和确认新密码,输入过程不显示</span><br><span class="line">touch /.autorelabel</span><br><span class="line">exit</span><br><span class="line">reboot</span><br></pre></td></tr></table></figure><h3 id="yum软件仓库"><a class="markdownIt-Anchor" href="#yum软件仓库"></a> yum软件仓库</h3><p>yum软件仓库是为了解决安装软件的时候,如果需要大量的依赖,安装起来是非常痛苦的,所以yum的出现是为了降低软件安装的难度。</p><p>RHEL 先将发布的软件存放到yum服务器内，然后分析软件的依赖属性，将分析出来的软件信息生成清单列表</p><p>容器：软件清单列表数据和软件所在的位置称为容器</p><p>Linux用户安装程序—&gt; 先yum服务器中的容器发起下载xxxx软件清单的请求-------客户机得到清单列表后会和本机的RPM数据库做比较,比较后把不存在的依赖一步下载过来就可以了.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Linux一般由3个部分组成：内核(kernel)、命令解析层（Shell或其他操作环境）、实用工具。&lt;/p&gt;
&lt;h3 id=&quot;重置root管理员密码&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重置root管理员密码&quot;&gt;&lt;/a&gt; 重置root
      
    
    </summary>
    
      <category term="RHEL8" scheme="https://xiaowuyoucy.github.io/categories/RHEL8/"/>
    
    
  </entry>
  
  <entry>
    <title>逆向工程基础</title>
    <link href="https://xiaowuyoucy.github.io/2022/07/10/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B%E5%9F%BA%E7%A1%80/"/>
    <id>https://xiaowuyoucy.github.io/2022/07/10/逆向工程基础/</id>
    <published>2022-07-10T09:21:30.000Z</published>
    <updated>2022-07-13T17:31:26.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="关于逆向工程"><a class="markdownIt-Anchor" href="#关于逆向工程"></a> 关于逆向工程</h1><h3 id="逆向工程reverse-engineering简称re"><a class="markdownIt-Anchor" href="#逆向工程reverse-engineering简称re"></a> 逆向工程（Reverse Engineering，简称RE)</h3><h3 id="代码逆向工程reverse-code-engineering简称rce"><a class="markdownIt-Anchor" href="#代码逆向工程reverse-code-engineering简称rce"></a> 代码逆向工程（Reverse Code Engineering，简称RCE）</h3><h4 id="逆向分析法"><a class="markdownIt-Anchor" href="#逆向分析法"></a> 逆向分析法</h4><ul><li>静态分析法<ul><li>在不执行代码文件的情形下，对代码进行静态分析的一种方法。</li></ul></li><li>动态分析法<ul><li>在程序文件的执行过程中对代码进行动态分析</li></ul></li></ul><p>Hex Editor是一个简单易用的工具，使用它可以轻松地把二进制文件转换为十六进制文件。</p><p><img src="/images/javawz/image-20220710181629406.png" alt="image-20220710181629406"></p><h4 id="打补丁与破解"><a class="markdownIt-Anchor" href="#打补丁与破解"></a> “打补丁”与“破解”</h4><p>对应用程序文件或进程内存内容的更改被称为“打补丁”（Patch），“破解”（Crack）与其含义类似</p><h1 id="逆向分析hello-world程序"><a class="markdownIt-Anchor" href="#逆向分析hello-world程序"></a> 逆向分析Hello World！程序</h1><p>OllyDbg: <a href="http://www.ollydbg.de" target="_blank" rel="noopener">http://www.ollydbg.de</a></p><p>OllyDbg是一种强大的Win32调试工具</p><p><img src="/images/javawz/image-20220710182151607.png" alt="image-20220710182151607"></p><h3 id="入口点"><a class="markdownIt-Anchor" href="#入口点"></a> 入口点</h3><p>EP是Windows可执行文件（EXE、DLL、SYS等）的代码入口点，是执行应用程序时最先执行的代码的起始位置，它依赖于CPU。</p><p>调试器停止的地点即为HelloWorld.exe执行的起始地址，它是一段EP （EntryPoint，入口点）代码。</p><p>地址：进程的虚拟内存地址（Virtual Address， VA）<br>指令：IA32 （或x86） CPU指令<br>反汇编代码：将OP code转换为便于查看的汇编指令<br>注释：调试器添加的注释（根据选项不同，显示的注释略有不同）</p><h3 id="ollydbg基本指令"><a class="markdownIt-Anchor" href="#ollydbg基本指令"></a> OllyDbg基本指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">F2：设置断点/取消断点</span><br><span class="line"></span><br><span class="line">F7：单步步入</span><br><span class="line"></span><br><span class="line">F8：单步执行</span><br><span class="line"></span><br><span class="line">Ctrl + F2：重新调试</span><br><span class="line"></span><br><span class="line">Ctrl+G：跳转到指定地址（查看代码时使用，非运行时命令）</span><br><span class="line"></span><br><span class="line">F9：运行（遇到断点时暂停）</span><br><span class="line"></span><br><span class="line">Ctrl+F9：执行函数代码内的命令，直到遇到RETN命令，用于跳出函数体</span><br><span class="line"></span><br><span class="line">F4：执行到光标所在位置（直接转到要调试的位置）</span><br><span class="line"></span><br><span class="line">;    添加注释</span><br><span class="line"></span><br><span class="line">:  添加标签</span><br><span class="line"></span><br><span class="line">*     显示当前EIP(命令指针)位置</span><br><span class="line"></span><br><span class="line">-     显示上一个光标位置</span><br><span class="line"></span><br><span class="line">Enter：若光标处有CALL/JMP等指令，则跟踪并显示相关地址（运行时不可用，简单查看函数内容时非常有用）</span><br><span class="line"></span><br><span class="line">空格键：编辑汇编代码</span><br></pre></td></tr></table></figure><h3 id="设置大本营的四种方法"><a class="markdownIt-Anchor" href="#设置大本营的四种方法"></a> 设置“大本营”的四种方法</h3><h4 id="1goto命令"><a class="markdownIt-Anchor" href="#1goto命令"></a> 1.Goto命令</h4><p>执行Go to（Ctrl+G）命令</p><p><img src="/images/javawz/image-20220710195834481.png" alt="image-20220710195834481"></p><h4 id="2设置断点"><a class="markdownIt-Anchor" href="#2设置断点"></a> 2.设置断点</h4><p>在OllyDbg菜单栏中依次选择View-Breakpoints选项（快捷键（ALT+B）），打开Breakpoints对话框，列出代码中设置的断点</p><p><img src="/images/javawz/image-20220710200136557.png" alt="image-20220710200136557"></p><p>在断点列表中双击某个断点会直接跳转到相应位置。</p><h4 id="3注释"><a class="markdownIt-Anchor" href="#3注释"></a> 3.注释</h4><p>按键盘上的“；”键可以在指定地址处添加注释，还可以通过查找命令找到它。</p><p>在鼠标右键菜单中依次选择Search for-User defined comment，这样就能看到用户输入的所有注释</p><p><img src="/images/javawz/image-20220710200340518.png" alt="image-20220710200340518"></p><p>双击相应注释，光标将自动定位到相应位置。</p><h4 id="4标签"><a class="markdownIt-Anchor" href="#4标签"></a> 4.标签</h4><p>单击鼠标右键，依次选择Search forlUser defined labels菜单即可打开User defined labels窗口，该窗口列出了用户设置的标签</p><p>在User defined labels窗口中双击某个标签，光标即移动到相应位置。</p><p><img src="/images/javawz/image-20220710200640747.png" alt="image-20220710200640747"></p><p><img src="/images/javawz/image-20220710200714534.png" alt="image-20220710200714534"></p><h3 id="快速查找指定代码的四种方法"><a class="markdownIt-Anchor" href="#快速查找指定代码的四种方法"></a> 快速查找指定代码的四种方法</h3><p>1.代码执行法</p><p>2.字符串检索法</p><p>鼠标右键菜单-Search for-All referenced text strings</p><p><img src="/images/javawz/image-20220710201316743.png" alt="image-20220710201316743"></p><p>双击字符串，光标定位到使用该字符串的指令处</p><p>VC++中， static字符串会被默认保存为Unicode码形式， static字符串是指在程序内部被硬编码（Hard Coding）的字符串。</p><h4 id="api检索法1在调用代码中设置断点"><a class="markdownIt-Anchor" href="#api检索法1在调用代码中设置断点"></a> API检索法（1）：在调用代码中设置断点</h4><p>鼠标右键菜单-Search for-All intermodular calls</p><p><img src="/images/javawz/image-20220710201618956.png" alt="image-20220710201618956"></p><p>双击它，光标即定位到调用它的地址处</p><h4 id="api检索法2在api代码中设置断点"><a class="markdownIt-Anchor" href="#api检索法2在api代码中设置断点"></a> API检索法（2）：在API代码中设置断点</h4><p>鼠标右键菜单-Search for-Name in all calls</p><p>在OllyDbg菜单栏中依次选择View-Memory菜单（快捷键Alt+M），打开内存映射窗口。内存映射窗口中显示了一部分HelloWorld.exe进程内存。在图底部的方框中可以看到，USER32库被加载到了内存。</p><p><img src="/images/javawz/image-20220710202412666.png" alt="image-20220710202412666"></p><p>使用OllyDbg中的Name in all modules命令可以列出被加载的DLL文件中提供的所有API。使用Name in all modules命令打开All names窗口，单击Name栏目按名称排序，通过键盘敲出MessageBoxW后，光标会自动定位到MessageBoxW上</p><p><img src="/images/javawz/image-20220710203219441.png" alt="image-20220710203219441"></p><p>双击MessageBoxW函数后就会显示其代码，它实现于USER32.dll库中</p><p><img src="/images/javawz/image-20220710203502389.png" alt="image-20220710203502389"></p><p>模块中的地址和本程序的地址是完全不同的。</p><h3 id="修改字符串的两种方法"><a class="markdownIt-Anchor" href="#修改字符串的两种方法"></a> 修改字符串的两种方法</h3><h4 id="1直接修改字符串缓冲区"><a class="markdownIt-Anchor" href="#1直接修改字符串缓冲区"></a> 1.直接修改字符串缓冲区</h4><p>在Dump窗口中按Ctrl+G快捷键执行Go to命令，在弹出窗口中输入地址进入字符串缓冲区。然后使用鼠标选中地址处的字符串，按Ctrl+E快捷键打开编辑窗口</p><p><img src="/images/javawz/image-20220710220035154.png" alt="image-20220710220035154"></p><p>注意:<br>若新字符串长度大于原有字符串，执行覆盖操作时可能损坏字符串后面的数据，所以一定要小心。特别是字符串后面有非常重要的数据时，覆盖操作导致数据损坏就会引发程序内存引用错误。</p><p>新字符串的长度不应比原字符串长。</p><h4 id="保存更改到可执行文件"><a class="markdownIt-Anchor" href="#保存更改到可执行文件"></a> 保存更改到可执行文件</h4><p>选中更改后的“Hello Reversing”字符串，单击鼠标右键，在弹出的菜单中选择Copy to executable file菜单</p><p><img src="/images/javawz/image-20220710220428077.png" alt="image-20220710220428077"></p><p>在弹出的Hex窗口中单击鼠标右键，选择Save file菜单，在Save file as对话框中输人文件名“Hello Reversing.exe”后保存为.exe可执行文件。</p><p>2.在其他内存区域新建字符串并传递给消息函数</p><p><img src="/images/javawz/image-20220710220905979.png" alt="image-20220710220905979"></p><p><img src="/images/javawz/image-20220710220921112.png" alt="image-20220710220921112"></p><p><img src="/images/javawz/image-20220710220933154.png" alt="image-20220710220933154"></p><p><img src="/images/javawz/image-20220710220950573.png" alt="image-20220710220950573"></p><br><br><br><br><h1 id="小端序标记法"><a class="markdownIt-Anchor" href="#小端序标记法"></a> 小端序标记法</h1><h3 id="字节序"><a class="markdownIt-Anchor" href="#字节序"></a> 字节序</h3><p><img src="/images/javawz/image-20220713005301379.png" alt="image-20220713005301379"></p><p>字节型: 大小端的字节顺序都是一样的。</p><p>大端：低地址放数据的高位</p><p>小端：高地址放数据的低位</p><p>OD中查看小端序</p><p><img src="/images/javawz/image-20220713005536736.png" alt="image-20220713005536736"></p><p><br><br></p><h1 id="ia-32寄存器基本讲解"><a class="markdownIt-Anchor" href="#ia-32寄存器基本讲解"></a> IA-32寄存器基本讲解</h1><h3 id="什么是cpu寄存器"><a class="markdownIt-Anchor" href="#什么是cpu寄存器"></a> 什么是CPU寄存器</h3><p>寄存器是CPU内部用来存放数据的一些小型存储区域</p><p><br><br></p><h4 id="基本程序运行寄存器"><a class="markdownIt-Anchor" href="#基本程序运行寄存器"></a> 基本程序运行寄存器</h4><p>通用寄存器（ General Purpose Registers， 32位， 8个）<br>段寄存器（ Segment Registers， 16位， 6个）<br>程序状态与控制寄存器（ Program Status and Control Registers， 32位， 1个）<br>指令指针寄存器（Instruction Pointer， 32位， 1个）</p><p><img src="/images/javawz/image-20220713005855404.png" alt="image-20220713005855404"></p><p><img src="/images/javawz/image-20220713005916672.png" alt="image-20220713005916672"></p><br><p>EAX：（0~31）32位<br>AX：（0~15）EAX的低16位<br>AH：（8~15）AX的高8位<br>AL：（0-7）AX的低8位</p><br><p>循环命令（LOOP）中，ECX用来循环计数（loop count），每执行一次循环，ECX都会减1。EAX一般用在函数返回值中，所有Win32API函数都会先把返回值保存到EAX再返回。</p><br><p>Win32 API函数在内部会使用ECX与EDX</p><br><br><p>EBP：（SS段中栈内数据指针）扩展基址指针寄存器<br>ESI：（字符串操作源指针）源变址寄存器<br>EDI：（字符串操作目标指针）目的变址寄存器<br>ESP：（SS段中栈指针）栈指针寄存器</p><br><p>ESP指示栈区域的栈顶地址</p><p>EBP表示栈区域的基地址，函数被调用时保存ESP的值，函数返回时再把值返回ESP，保证栈不会崩溃，这称为栈帧技术。</p><br><p>ESI和EDI与特定指令（LODS、STOS、REP、MOVS等）一起使用，主要用于内存复制。</p><p><br><br></p><h4 id="段寄存器"><a class="markdownIt-Anchor" href="#段寄存器"></a> 段寄存器</h4><p>段内存记录在SDT（Segment Descriptor Table，段描述符表）</p><p>段寄存器就持有这些SDT的索引（index）。</p><p>段寄存器有6各个：CS 、SS、DS、ES、FS、GS 每个寄存器大小为16位，2个字节。</p><p>每个段寄存器指向的段描述符（Segment Descriptor）与虚拟内存结合，形成一个线性地址（Linear Address），借助分页技术，线性地址最终被转换为实际的物理地址（Physical Address）。</p><br><p>CS： Code Segment，代码段寄存器<br>SS： Stack Segment，栈段寄存器<br>DS： Data Segment，数据段寄存器<br>ES： Extra （Data） Segment，附加（数据）段寄存器<br>FS： Data Segment，数据段寄存器<br>GS： Data Segment，数据段寄存器</p><br><p><img src="/images/javawz/image-20220713013432002.png" alt="image-20220713013432002"></p><br><p>程序调试中会经常用到FS寄存器，它用于计算SEH（Structured Exception Handler，结构化异常处理机制）、TEB（Thread Environment Block，线程环境块）、PEB（Process Environment Block，进程环境块）等地址</p><p><br><br></p><h4 id="程序状态与控制寄存器"><a class="markdownIt-Anchor" href="#程序状态与控制寄存器"></a> 程序状态与控制寄存器</h4><p>EFLAGS：Flag Register，标志寄存器</p><p>其大小为4个字节（32位）</p><p>EFLAGS寄存器的每位都有意义，每位的值或为1或为0，代表On/Off或True/False。</p><p>ZF（Zero Flag，零标志）</p><p>OF（Overflow Flag，溢出标志)</p><p>CF（Carry Flag，进位标志）</p><p><img src="/images/javawz/image-20220713014111043.png" alt="image-20220713014111043"></p><p>ZF<br>若运算结果为0，则其值为1（True），否则其值为0（False）。<br>OF<br>有符号整数（signed integer）溢出时， OF值被置为1。此外， MSB （Most Significant Bit，<br>最高有效位）改变时，其值也被设为1。<br>CF<br>无符号整数（unsigned integer）溢出时，其值也被置为1。</p><p><br><br></p><h4 id="指令指针寄存器"><a class="markdownIt-Anchor" href="#指令指针寄存器"></a> 指令指针寄存器</h4><p>EIP：Instruction Pointer，指令指针寄存器</p><p>程序运行时，CPU会读取EIP中一条指令的地址，传送指令到指令缓冲区后，EIP寄存器的值自动增加，增加的大小即是读取指令的字节大小。</p><p>不能直接修改EIP的值，只能通过其他指令间接修改</p><p><br><br></p><br><h1 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h1><p>（1）暂时保存函数内的局部变量。<br>（2）调用函数时传递参数。<br>（3）保存函数返回后的地址。</p><p>栈其实是一种数据结构，它按照FILO（First In Last Out，后进先出）的原则存储数据。</p><p><img src="/images/javawz/image-20220714011408035.png" alt="image-20220714011408035"></p><p>栈顶指针（ESP）初始状态指向栈底端。</p><p>执行PUSH命令将数据压入栈时，栈顶指针就会上移到栈顶端。</p><p>执行POP命令从栈中弹出数据时，若栈为空，则栈顶指针重新移动到栈底端。</p><p>栈是一种由高地址向低地址扩展的数据结构</p><p>栈是逆向扩展的</p><p>从栈中弹出数据后，ESP随之向下移动。</p><p>向栈压入数据时，栈顶指针减小，向低地址移动；从栈中弹出数据时，栈顶指针增<br>加，向高地址移动。</p><h1 id="汇编指令"><a class="markdownIt-Anchor" href="#汇编指令"></a> 汇编指令</h1><p><img src="/images/javawz/image-20220714012232945.png" alt="image-20220714012232945"></p><p>函数参数压入栈时是从最后一个参数开始压入的。</p><p><img src="/images/javawz/image-20220714012419678.png" alt="image-20220714012419678"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;关于逆向工程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于逆向工程&quot;&gt;&lt;/a&gt; 关于逆向工程&lt;/h1&gt;
&lt;h3 id=&quot;逆向工程reverse-engineering简称re&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="逆向工程" scheme="https://xiaowuyoucy.github.io/categories/%E9%80%86%E5%90%91%E5%B7%A5%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt操作Json</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/26/Qt%E6%93%8D%E4%BD%9CJson/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/26/Qt操作Json/</id>
    <published>2022-06-25T16:30:11.000Z</published>
    <updated>2022-06-27T08:07:00.698Z</updated>
    
    <content type="html"><![CDATA[<h3 id="json介绍"><a class="markdownIt-Anchor" href="#json介绍"></a> json介绍:</h3><p>json分为:</p><ul><li>json对象</li><li>json数组</li></ul><h4 id="json对象"><a class="markdownIt-Anchor" href="#json对象"></a> json对象:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">&quot;class&quot;:31,</span><br><span class="line">&quot;count&quot;:51,</span><br><span class="line">&quot;master&quot;:&quot;yalong&quot;,</span><br><span class="line">&quot;banzhuren&quot;:&quot;chenlaoshi&quot;,</span><br><span class="line">&quot;like&quot;:[&quot;dancing&quot;, &quot;sing&quot;, &quot;drinking&quot;], </span><br><span class="line">&quot;hometown&quot;:&#123;&quot;hebei&quot;:&quot;baoding&quot;, &quot;henan&quot;:&quot;xinyang&quot;&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h4 id="json数组"><a class="markdownIt-Anchor" href="#json数组"></a> json数组:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[10, 10.5, [&quot;xiaohu&quot;, &quot;liming&quot;, 10], &#123;&quot;name&quot;:&quot;xiaohu&quot;, &quot;age&quot;:32, &quot;sex&quot;:&quot;man&quot;&#125;]</span><br></pre></td></tr></table></figure><p>1 json对象格式的数据都是以key:value的形式存在的, 其中key值是字符串形式的.<br>2 在json对象中, value值可以是子对象, 也可以是数组<br>3 在json格式的文件中, 只能是json对象或者是json数组<br>4 在json数组中, 数据的类型不定, 可以是double int string 子对象, 子数组.</p><br><br><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;QJsonDocument&gt;</span><br><span class="line">#include &lt;QJsonArray&gt;</span><br><span class="line">#include &lt;QJsonObject&gt;</span><br><span class="line">#include &lt;QByteArray&gt;</span><br><span class="line">#include &lt;QJsonValue&gt;</span><br><span class="line">#include &lt;QFile&gt;</span><br></pre></td></tr></table></figure><br><br><h3 id="json对象操作"><a class="markdownIt-Anchor" href="#json对象操作"></a> json对象操作</h3><h4 id="创建json对象"><a class="markdownIt-Anchor" href="#创建json对象"></a> 创建json对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonObject json;</span><br></pre></td></tr></table></figure><br><h4 id="给json对象插入值"><a class="markdownIt-Anchor" href="#给json对象插入值"></a> 给json对象插入值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">iterator QJsonObject::insert(const QString &amp;key, const QJsonValue &amp;value)</span><br></pre></td></tr></table></figure><br><h3 id="json数组操作"><a class="markdownIt-Anchor" href="#json数组操作"></a> json数组操作</h3><h4 id="创建json数组"><a class="markdownIt-Anchor" href="#创建json数组"></a> 创建json数组</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray jsonArr;</span><br></pre></td></tr></table></figure><br><p>给json数组插入值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void QJsonArray::append(const QJsonValue &amp;value)</span><br></pre></td></tr></table></figure><br><h4 id="将qjsonobject-或qjsonarray转换为-qjsondocument"><a class="markdownIt-Anchor" href="#将qjsonobject-或qjsonarray转换为-qjsondocument"></a> 将QJsonObject 或QJsonArray转换为 QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">JsonDocument::QJsonDocument(const QJsonObject &amp;object) //将json对象转换为QJsonDocument</span><br><span class="line"></span><br><span class="line">JsonDocument::QJsonDocument(const QJsonArray &amp;array)//将json数组转换为QJsonDocument</span><br></pre></td></tr></table></figure><br><h4 id="将qjsondocument对象转换为qbytearray对象"><a class="markdownIt-Anchor" href="#将qjsondocument对象转换为qbytearray对象"></a> 将QJsonDocument对象转换为QByteArray对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QByteArray QJsonDocument::toJson(JsonFormat format = Indented) const</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="操作文件"><a class="markdownIt-Anchor" href="#操作文件"></a> 操作文件</h3><h4 id="创建文件对象"><a class="markdownIt-Anchor" href="#创建文件对象"></a> 创建文件对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QFile::QFile(const QString &amp;name)</span><br><span class="line"></span><br><span class="line">QFile file(fileName);</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="打开文件"><a class="markdownIt-Anchor" href="#打开文件"></a> 打开文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">virtual bool open(OpenMode mode)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">QIODevice::NotOpen0x0000The device is not open.</span><br><span class="line">QIODevice::ReadOnly0x0001The device is open for reading.</span><br><span class="line">QIODevice::WriteOnly0x0002The device is open for writing. Note that this mode implies Truncate.</span><br><span class="line">QIODevice::ReadWriteReadOnly | WriteOnlyThe device is open for reading and writing.</span><br><span class="line">QIODevice::Append0x0004The device is opened in append mode so that all data is written to the end of the file.</span><br><span class="line"></span><br><span class="line">QIODevice::Truncate0x0008If possible, the device is truncated before it is opened. All earlier contents of the device are lost.</span><br><span class="line"></span><br><span class="line">QIODevice::Text0x0010When reading, the end-of-line terminators are translated to &apos;\n&apos;. When writing, the end-of-line terminators are translated to the local encoding, for example &apos;\r\n&apos; for Win32.</span><br><span class="line"></span><br><span class="line">QIODevice::Unbuffered0x0020Any buffer in the device is bypassed.</span><br></pre></td></tr></table></figure><br><br><h4 id="读文件"><a class="markdownIt-Anchor" href="#读文件"></a> 读文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QByteArray QIODevice::readAll()//一次性读完</span><br><span class="line"></span><br><span class="line">QByteArray byteArray = file.readAll();</span><br></pre></td></tr></table></figure><br><h4 id="将qbytearray类对象转换为qjsondocument"><a class="markdownIt-Anchor" href="#将qbytearray类对象转换为qjsondocument"></a> 将QByteArray类对象转换为QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">QJsonDocument fromJson(const QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span><br><span class="line"></span><br><span class="line">QJsonDocument jsonDoc = QJsonDocument::fromJson(byteArray);</span><br></pre></td></tr></table></figure><br><h4 id="判断是不是对象"><a class="markdownIt-Anchor" href="#判断是不是对象"></a> 判断是不是对象</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bool QJsonDocument::isObject() const</span><br></pre></td></tr></table></figure><br><h4 id="将qjsondocument转换为qjsonobject"><a class="markdownIt-Anchor" href="#将qjsondocument转换为qjsonobject"></a> 将QJsonDocument转换为QJsonObject</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonObject QJsonDocument::object() const</span><br></pre></td></tr></table></figure><h4 id="将qjsondocument转换为qjsonarray"><a class="markdownIt-Anchor" href="#将qjsondocument转换为qjsonarray"></a> 将QJsonDocument转换为QJsonArray</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray QJsonDocument::array() const</span><br></pre></td></tr></table></figure><h4 id="获取对象中所有的key值"><a class="markdownIt-Anchor" href="#获取对象中所有的key值"></a> 获取对象中所有的key值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">QStringList QJsonObject::keys() const</span><br></pre></td></tr></table></figure><h4 id="返回key的数量"><a class="markdownIt-Anchor" href="#返回key的数量"></a> 返回key的数量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int QJsonObject::size() const</span><br></pre></td></tr></table></figure><h4 id="根据key值获取value值"><a class="markdownIt-Anchor" href="#根据key值获取value值"></a> 根据key值获取value值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">QJsonValue QJsonObject::value(const QString &amp;key) const</span><br><span class="line">QJsonValue QJsonObject::value(QLatin1String key) const</span><br></pre></td></tr></table></figure><h4 id="判断value值的类型"><a class="markdownIt-Anchor" href="#判断value值的类型"></a> 判断value值的类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">bool isArray() const</span><br><span class="line">bool isBool() const</span><br><span class="line">bool isDouble() const</span><br><span class="line">bool isNull() const</span><br><span class="line">bool isObject() const</span><br><span class="line">bool isString() const</span><br><span class="line">bool isUndefined() const</span><br></pre></td></tr></table></figure><h4 id="将value转换到对应类型的值"><a class="markdownIt-Anchor" href="#将value转换到对应类型的值"></a> 将value转换到对应类型的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">QJsonArray toArray(const QJsonArray &amp;defaultValue) const//转换到数组</span><br><span class="line">QJsonArray toArray() const//转换到数组</span><br><span class="line"></span><br><span class="line">bool toBool(bool defaultValue = false) const//转换到布尔</span><br><span class="line"></span><br><span class="line">double toDouble(double defaultValue = 0) const//转换到到double</span><br><span class="line"></span><br><span class="line">int toInt(int defaultValue = 0) const//转换到整型</span><br><span class="line"></span><br><span class="line">QJsonObject toObject(const QJsonObject &amp;defaultValue) const//转换到对象</span><br><span class="line">QJsonObject toObject() const//转换到对象</span><br><span class="line"></span><br><span class="line">QString toString() const//转换到字符串</span><br><span class="line">QString toString(const QString &amp;defaultValue) const//转换到字符串</span><br><span class="line"></span><br><span class="line">QVariant toVariant() const</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="将qjsondocument转换为const-char"><a class="markdownIt-Anchor" href="#将qjsondocument转换为const-char"></a> 将QJsonDocument转换为const char *</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const char *QJsonDocument::rawData(int *size) const</span><br></pre></td></tr></table></figure><h4 id="将const-char-转换为qjsondocument"><a class="markdownIt-Anchor" href="#将const-char-转换为qjsondocument"></a> 将const char * 转换为QJsonDocument</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fromRawData(const char *data, int size, DataValidation validation = Validate)</span><br></pre></td></tr></table></figure><p><br><br><br></p><h2 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QCoreApplication&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonDocument&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonArray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonObject&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QByteArray&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QJsonValue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QFile&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QDebug&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">writeJsonToFile</span><span class="params">(<span class="keyword">char</span> *fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//第一种: 将json对象写入磁盘文件</span></span><br><span class="line">    <span class="comment">//创建一个json对象</span></span><br><span class="line">    <span class="comment">/*QJsonObject json;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //给json对象插入值</span></span><br><span class="line"><span class="comment">    // iterator insert(const QString &amp;key, const QJsonValue &amp;value)</span></span><br><span class="line"><span class="comment">    json.insert("name", "xiaowu");</span></span><br><span class="line"><span class="comment">    json.insert("age", 21);</span></span><br><span class="line"><span class="comment">    json.insert("sex", "female");</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //插入子对象</span></span><br><span class="line"><span class="comment">    QJsonObject subJson;</span></span><br><span class="line"><span class="comment">    subJson.insert("father", "longji");</span></span><br><span class="line"><span class="comment">    subJson.insert("mather", "liwei");</span></span><br><span class="line"><span class="comment">    subJson.insert("sister", "wangjin");</span></span><br><span class="line"><span class="comment">    json.insert("family", subJson);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    //插入json数组</span></span><br><span class="line"><span class="comment">    QJsonArray jsonArr;</span></span><br><span class="line"><span class="comment">    jsonArr.append("english"); </span></span><br><span class="line"><span class="comment">    jsonArr.append("chinese");</span></span><br><span class="line"><span class="comment">    jsonArr.append("math");</span></span><br><span class="line"><span class="comment">    jsonArr.append("history");</span></span><br><span class="line"><span class="comment">    json.insert("course", jsonArr);*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//第二种: 将json数组写入磁盘文件</span></span><br><span class="line">    <span class="comment">//构造一个QJsonArray对象</span></span><br><span class="line">    QJsonArray <span class="built_in">array</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//void append(const QJsonValue &amp;value)</span></span><br><span class="line">    <span class="comment">//给array对象添加值</span></span><br><span class="line">    <span class="built_in">array</span>.append(<span class="number">10</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(<span class="string">"jinyanlong"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加子数组到array中</span></span><br><span class="line">    QJsonArray subArray;</span><br><span class="line">    subArray.append(<span class="string">"english"</span>);</span><br><span class="line">    subArray.append(<span class="string">"chinese"</span>);</span><br><span class="line">    subArray.append(<span class="string">"history"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(subArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//添加对象到array中</span></span><br><span class="line">    QJsonObject subObj;</span><br><span class="line">    subObj.insert(<span class="string">"mother"</span>, <span class="string">"xiaoling"</span>);</span><br><span class="line">    subObj.insert(<span class="string">"father"</span>, <span class="string">"xiaotong"</span>);</span><br><span class="line">    subObj.insert(<span class="string">"sister"</span>, <span class="string">"damiao"</span>);</span><br><span class="line">    <span class="built_in">array</span>.append(subObj);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QJsonObject 转换为 QJsonDocument</span></span><br><span class="line">    <span class="comment">//JsonDocument::QJsonDocument(const QJsonObject &amp;object)</span></span><br><span class="line">    <span class="comment">//QJsonDocument jsonDoc(json);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//QJsonDocument(const QJsonArray &amp;array)</span></span><br><span class="line">    <span class="function">QJsonDocument <span class="title">jsonDoc</span><span class="params">(<span class="built_in">array</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QJsonDocument对象转换为QByteArray对象</span></span><br><span class="line">    <span class="comment">//QByteArray toJson(JsonFormat format = Indented) const</span></span><br><span class="line">    QByteArray byteArray = jsonDoc.toJson();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//文件操作--将byteArray写入文件</span></span><br><span class="line">    <span class="comment">//QFile(const QString &amp;name)</span></span><br><span class="line">    <span class="function">QFile <span class="title">file</span><span class="params">(fileName)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    <span class="comment">//virtual bool open(OpenMode mode)</span></span><br><span class="line">    file.open(QIODevice::WriteOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写文件</span></span><br><span class="line">    <span class="comment">//qint64 write(const QByteArray &amp;byteArray)</span></span><br><span class="line">    file.write(byteArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="comment">//virtual void close()</span></span><br><span class="line">    file.close();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">readJsonFromFile</span><span class="params">(<span class="keyword">char</span> *fileName)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//构造QFile类对象</span></span><br><span class="line">    QFile file;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//设置要读的文件</span></span><br><span class="line">    <span class="comment">//void setFileName(const QString &amp;name)</span></span><br><span class="line">    file.setFileName(fileName);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开文件</span></span><br><span class="line">    <span class="comment">//virtual bool open(OpenMode mode)</span></span><br><span class="line">    file.open(QIODevice::ReadOnly);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读文件</span></span><br><span class="line">    <span class="comment">//QByteArray readAll()</span></span><br><span class="line">    QByteArray byteArray = file.readAll();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    <span class="comment">//virtual void close()</span></span><br><span class="line">    file.close();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将QByteArray类对象转换为QJsonDocument</span></span><br><span class="line">    <span class="comment">//QJsonDocument fromJson(const QByteArray &amp;json, QJsonParseError *error = Q_NULLPTR)</span></span><br><span class="line">    QJsonDocument jsonDoc = QJsonDocument::fromJson(byteArray);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//判断是数组还是对象</span></span><br><span class="line">    <span class="keyword">if</span>(jsonDoc.isObject())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//QJsonObject object() const</span></span><br><span class="line">        QJsonObject jsonObj = jsonDoc.object();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取对象中所有的key值</span></span><br><span class="line">        <span class="comment">//QStringList keys() const</span></span><br><span class="line">        QStringList keys = jsonObj.keys();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;keys.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="comment">//获取每一个key值</span></span><br><span class="line">            <span class="comment">//QString key = keys[i];</span></span><br><span class="line">            QString key = keys.at(i);</span><br><span class="line">            <span class="comment">//qDebug() &lt;&lt; key &lt;&lt; ":";</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">//根据key值获取value值</span></span><br><span class="line">            <span class="comment">//QJsonValue value(const QString &amp;key) const</span></span><br><span class="line">            <span class="comment">//QJsonValue operator[](const QString &amp;key) const</span></span><br><span class="line">            QJsonValue jsonValue = jsonObj.value(key);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断value值的类型</span></span><br><span class="line">            <span class="comment">//bool isString() const</span></span><br><span class="line">            <span class="keyword">if</span>(jsonValue.isString())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isDouble())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isBool())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt;  key &lt;&lt; <span class="string">":"</span> &lt;&lt; jsonValue.toBool();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isObject())</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">//QJsonObject toObject() const</span></span><br><span class="line">                 QJsonObject obj = jsonValue.toObject();</span><br><span class="line">                 QStringList subKeys = obj.keys();</span><br><span class="line"></span><br><span class="line">                 qDebug() &lt;&lt; key &lt;&lt; <span class="string">":&#123;"</span>;</span><br><span class="line">                 <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;subKeys.size(); k++)</span><br><span class="line">                 &#123;</span><br><span class="line">                     QString subkey = subKeys[k];</span><br><span class="line">                     QJsonValue subJsonValue = obj.value(subkey);</span><br><span class="line">                     qDebug() &lt;&lt; <span class="string">"  "</span> &lt;&lt; subJsonValue.toString();</span><br><span class="line">                 &#125;</span><br><span class="line">                 qDebug() &lt;&lt; <span class="string">"&#125;"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(jsonValue.isArray())</span><br><span class="line">            &#123;</span><br><span class="line">               <span class="comment">//QJsonArray toArray() const</span></span><br><span class="line">               qDebug() &lt;&lt; key &lt;&lt; <span class="string">":["</span>;</span><br><span class="line">               QJsonArray arr =  jsonValue.toArray();</span><br><span class="line">               <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;arr.size(); j++)</span><br><span class="line">               &#123;</span><br><span class="line">                   QJsonValue va = arr[j];</span><br><span class="line">                   <span class="keyword">if</span>(va.isString())</span><br><span class="line">                   &#123;</span><br><span class="line">                       qDebug() &lt;&lt; <span class="string">"    "</span> &lt;&lt; va.toString();</span><br><span class="line">                   &#125;</span><br><span class="line">               &#125;</span><br><span class="line">               qDebug() &lt;&lt;<span class="string">"]"</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(jsonDoc.isArray())</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">//QJsonArray array() const</span></span><br><span class="line">        QJsonArray <span class="built_in">array</span> = jsonDoc.<span class="built_in">array</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="built_in">array</span>.size(); i++)</span><br><span class="line">        &#123;</span><br><span class="line">            QJsonValue value = <span class="built_in">array</span>[i];</span><br><span class="line"></span><br><span class="line">            <span class="comment">//判断值的类型</span></span><br><span class="line">            <span class="keyword">if</span>(value.isString())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toString();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isDouble())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toInt();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isBool())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; value.toBool();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isArray())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"["</span>;</span><br><span class="line">                QJsonArray subArray = value.toArray();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;subArray.size(); j++)</span><br><span class="line">                &#123;</span><br><span class="line">                    qDebug() &lt;&lt; <span class="string">"   "</span> &lt;&lt; subArray[j].toString();</span><br><span class="line">                &#125;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"]"</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(value.isObject())</span><br><span class="line">            &#123;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"&#123;"</span>;</span><br><span class="line">                QJsonObject subObj = value.toObject();</span><br><span class="line">                QStringList subKeys = subObj.keys();</span><br><span class="line">                <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;subKeys.size(); k++)</span><br><span class="line">                &#123;</span><br><span class="line">                    QString subkey = subKeys[k];</span><br><span class="line">                    QJsonValue value = subObj[subkey];</span><br><span class="line">                    <span class="keyword">if</span>(value.isString())</span><br><span class="line">                    &#123;</span><br><span class="line">                        qDebug() &lt;&lt; <span class="string">"   "</span> &lt;&lt; value.toString();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                qDebug() &lt;&lt; <span class="string">"&#125;"</span>;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span> *argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="function">QCoreApplication <span class="title">a</span><span class="params">(argc, argv)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//写json数据到文件</span></span><br><span class="line">    writeJsonToFile(<span class="string">"test.json"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//读json文件</span></span><br><span class="line">    readJsonFromFile(<span class="string">"test.json"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;json介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#json介绍&quot;&gt;&lt;/a&gt; json介绍:&lt;/h3&gt;
&lt;p&gt;json分为:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;json对象&lt;/li&gt;
&lt;li&gt;json数组&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>occi连接数据库getString函数报错</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/17/occi%E8%BF%9E%E6%8E%A5%E6%95%B0%E6%8D%AE%E5%BA%93rs/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/17/occi连接数据库rs/</id>
    <published>2022-06-17T13:40:16.000Z</published>
    <updated>2022-06-19T04:52:27.425Z</updated>
    
    <content type="html"><![CDATA[<p>1、报错代码：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">while (rs-&gt;next())</span><br><span class="line">&#123;</span><br><span class="line">int nID = rs-&gt;getInt(1);</span><br><span class="line">int nDVDID = rs-&gt;getInt(2);</span><br><span class="line">string strName = rs-&gt;getString(3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2、报错信息：</p><p>OcciToOracle.exe 中的 0x5c99336f (msvcp100d.dll) 处有未经处理的异常: 0xC0000005: 读取位置 0xffffffffffffffff 时发生访问冲突</p><p>错误定位：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">inline void _Container_base12::_Orphan_all()</span><br><span class="line"> &#123; // orphan all iterators</span><br><span class="line"> #if _ITERATOR_DEBUG_LEVEL == 2</span><br><span class="line"> if (_Myproxy != 0)</span><br><span class="line"> &#123; // proxy allocated, drain it</span><br><span class="line"> _Lockit _Lock(_LOCK_DEBUG);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> for (_Iterator_base12 **_Pnext = &amp;_Myproxy-&gt;_Myfirstiter;</span><br><span class="line"> *_Pnext != 0; *_Pnext = (*_Pnext)-&gt;_Mynextiter)</span><br><span class="line"> (*_Pnext)-&gt;_Myproxy = 0;</span><br><span class="line"> _Myproxy-&gt;_Myfirstiter = 0;</span><br><span class="line"> &#125;</span><br><span class="line"> #endif /* _ITERATOR_DEBUG_LEVEL == 2 */</span><br><span class="line"></span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p>3、解决方法：</p><p>将</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">string strName = rs-&gt;getString(3);</span><br></pre></td></tr></table></figure><p>更改为：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static string strName = rs-&gt;getString(3);</span><br></pre></td></tr></table></figure><p>前面加上static。</p><p>问题解决了，但是不清楚问题原因！</p><p>重点：这也造成了多条记录循环取值时只能得到第一次的值。</p><p>可能是oracle客户端occi库版本和编译器版本不一致导致的,linux降低了g++版本之后就编译通过了,并且没有出现问题.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、报错代码：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>如何查看VS编译器版本号</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/17/%E5%A6%82%E4%BD%95%E6%9F%A5%E7%9C%8BVS%E7%BC%96%E8%AF%91%E5%99%A8%E7%89%88%E6%9C%AC%E5%8F%B7/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/17/如何查看VS编译器版本号/</id>
    <published>2022-06-17T13:31:55.000Z</published>
    <updated>2022-06-17T13:34:20.530Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main() &#123;</span><br><span class="line">    int ver = _MSC_VER; // get the version</span><br><span class="line">    cout &lt;&lt; &quot;MSVC Version: &quot; &lt;&lt; ver &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>MSC 1.0 _MSC_VER == 100<br>MSC 2.0 _MSC_VER == 200<br>MSC 3.0 _MSC_VER == 300<br>MSC 4.0 _MSC_VER == 400<br>MSC 5.0 _MSC_VER == 500<br>MSC 6.0 _MSC_VER == 600<br>MSC 7.0 _MSC_VER == 700<br>MSVC++ 1.0 _MSC_VER == 800<br>MSVC++ 2.0 _MSC_VER == 900<br>MSVC++ 4.0 _MSC_VER == 1000 (Developer Studio 4.0)<br>MSVC++ 4.2 _MSC_VER == 1020 (Developer Studio 4.2)<br>MSVC++ 5.0 _MSC_VER == 1100 (Visual Studio 97 version 5.0)<br>MSVC++ 6.0 _MSC_VER == 1200 (Visual Studio 6.0 version 6.0)<br>MSVC++ 7.0 _MSC_VER == 1300 (Visual Studio .NET 2002 version 7.0)<br>MSVC++ 7.1 _MSC_VER == 1310 (Visual Studio .NET 2003 version 7.1)<br>MSVC++ 8.0 _MSC_VER == 1400 (Visual Studio 2005 version 8.0)<br>MSVC++ 9.0 _MSC_VER == 1500 (Visual Studio 2008 version 9.0)<br>MSVC++ 10.0 _MSC_VER == 1600 (Visual Studio 2010 version 10.0)<br>MSVC++ 11.0 _MSC_VER == 1700 (Visual Studio 2012 version 11.0)<br>MSVC++ 12.0 _MSC_VER == 1800 (Visual Studio 2013 version 12.0)<br>MSVC++ 14.0 _MSC_VER == 1900 (Visual Studio 2015 version 14.0)<br>MSVC++ 14.1 _MSC_VER == 1910 (Visual Studio 2017 version 15.0)<br>MSVC++ 14.11 _MSC_VER == 1911 (Visual Studio 2017 version 15.3)<br>MSVC++ 14.12 _MSC_VER == 1912 (Visual Studio 2017 version 15.5)<br>MSVC++ 14.13 _MSC_VER == 1913 (Visual Studio 2017 version 15.6)<br>MSVC++ 14.14 _MSC_VER == 1914 (Visual Studio 2017 version 15.7)<br>MSVC++ 14.15 _MSC_VER == 1915 (Visual Studio 2017 version 15.8)<br>MSVC++ 14.16 _MSC_VER == 1916 (Visual Studio 2017 version 15.9)<br>MSVC++ 14.2 _MSC_VER == 1920 (Visual Studio 2019 Version 16.0)<br>MSVC++ 14.21 _MSC_VER == 1921 (Visual Studio 2019 Version 16.1)<br>MSVC++ 14.22 _MSC_VER == 1922 (Visual Studio 2019 Version 16.2)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt配置使用MSVC编译器</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/16/Qt%E9%85%8D%E7%BD%AE%E4%BD%BF%E7%94%A8MSVC%E7%BC%96%E8%AF%91%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/16/Qt配置使用MSVC编译器/</id>
    <published>2022-06-15T16:08:20.000Z</published>
    <updated>2022-06-15T16:17:15.314Z</updated>
    
    <content type="html"><![CDATA[<p><strong>注意:Qt支持的MSVC就是2017和2015，所以vs也要下载2017，不要直接用最新的，安装路径都用默认的。程序运行失败时可以尝试windeployqt拷贝库文件到本地，然后有可能就能运行了</strong></p><p><a href="https://visualstudio.microsoft.com/zh-hans/downloads/" target="_blank" rel="noopener">VS官网下载</a>Visual Studio Community 2017，在线安装Visual Studio Community2017版本。vs2017如何配置见附文一</p><p><img src="/images/javawz/c75aa6beb6a0fbcc0cdb756a5c963b56.png" alt="在这里插入图片描述"></p><p><a href="https://developer.microsoft.com/en-us/windows/downloads/windows-10-sdk/" target="_blank" rel="noopener">下载并安装Windows10 SDK</a>,</p><p><img src="/images/javawz/abe739fb9bb25bc7581af57e39983b6d.png" alt="在这里插入图片描述"></p><p>直接下载.exe版本，然后安装。安装中，切记选择Debugging Toolsfor Windows组件，因为在后面需要用这个。</p><p>下载并安装Qt Creator，由于最新的版本好像没有集成mysql的驱动，所以我使用的是较先的5.12.2版本。安装Qt Creator的过程中，记得在安装组件过程中，安装MSVC2017 32位和MSVC2017 32位。注意：建议32位和64位都安装，32位可以在64位系统使用，但是返过来不行</p><p><img src="/images/javawz/45292b5514941d8d03ff3e3693e71dd8.png" alt="img"></p><p>配置Debuggers，具体位置在菜单栏-工具-选项-Kits-Debuggers中。当你Windows 10 SDK安装成功后，他会自动出现这两个exe。</p><p><img src="/images/javawz/78ad27fd2b2e331033695046123fc873.png" alt="在这里插入图片描述"></p><p>当然你也可以自己配置一个，具体如下：</p><p><img src="/images/javawz/98a40306a1bc7e3f2972f0c30bc4a007.png" alt="在这里插入图片描述"></p><p>我配置的就是这样：</p><p><img src="/images/javawz/713987ea46b5f34ddc93f68c46cb4023.png" alt="在这里插入图片描述"></p><p>配置构建套件（Kit），具体位置在菜单栏-工具-选项-Kits-构建套件（Kit）中。之前没有SDK或者其他原因，你的套件前面就会有一个黄色的感叹号。这种你就可以自己更改他的设置：</p><p><img src="/images/javawz/b5e4633ca4da9dcf35c1c0dce2a874e6.png" alt="在这里插入图片描述"></p><p>或者你可以自己新建一个，具体配置如下：</p><p><img src="/images/javawz/f37ceb0f6a279408a04134683423c2c3.png" alt="在这里插入图片描述"></p><h3 id="注意这里msvc的kit需要你自己配置不配是不会自动识别的"><a class="markdownIt-Anchor" href="#注意这里msvc的kit需要你自己配置不配是不会自动识别的"></a> 注意：这里MSVC的kit需要你自己配置，不配是不会自动识别的</h3><p><strong>附文一：安装VS2017并配置QT</strong></p><ol><li>打开VS2017，菜单栏 工具-&gt; 扩展和更新，点击 联机 然后搜索qt，下载</li></ol><p><img src="/images/javawz/fda53c8963e6fa4437387e3147c0d9a3.png" alt="img"></p><ol start="2"><li>下载完成后，关闭VS2017，出现以下安装画面，在其初始化完成后点击“修改”，等待配置完成即可</li></ol><p><img src="/images/javawz/4df9703ba669dcfc0817b999079ae264.png" alt="img"></p><ol start="3"><li>再次打开VS 2017，菜单栏出现 Qt VS tools，新建项目也出现QT项目选项</li></ol><p><img src="/images/javawz/4359d919b09e09cb7a0794c887855c06.png" alt="img"></p><p><img src="/images/javawz/bc1a2a8ea8d130616bee43c22eed8928.png" alt="img"></p><p>底部输出框出现：</p><p><img src="/images/javawz/c034a2679bc0525ce416c9a74dbe4b92.png" alt="img"></p><ol start="4"><li>菜单栏 -&gt; Qt Vs tools -&gt; Qt options -&gt; Add，添加如下路径</li></ol><p><img src="/images/javawz/c8f3a93e1ee0045be9f5ca7603693e5f.png" alt="img"></p><ol start="5"><li>环境变量配置： 这台电脑 -&gt; 属性 -&gt; 高级系统设置 -&gt; 环境变量 ，添加Path变量：</li></ol><p><img src="/images/javawz/ef4711f4bd73c576c1df9170f475f819.png" alt="img"></p><p>注意：将C:\Program Files(x86)\Windows Kits\10\bin\10.0.17134.0\x64添加到系统环境变量的Path中去。</p><p>​     Win10 系统环境变量修改方法：此电脑——属性——高级系统设置——高级——环境变量——系统变量——Path——编辑。将路径复制进去后，点击保存便可。</p><ol start="6"><li>安装配置完成</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;注意:Qt支持的MSVC就是2017和2015，所以vs也要下载2017，不要直接用最新的，安装路径都用默认的。程序运行失败时可以尝试windeployqt拷贝库文件到本地，然后有可能就能运行了&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https:
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>Qt操作数据库</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/12/Qt%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/12/Qt操作数据库/</id>
    <published>2022-06-12T15:53:03.000Z</published>
    <updated>2022-06-15T16:17:20.443Z</updated>
    
    <content type="html"><![CDATA[<h3 id="qt-编译oracle的oci驱动"><a class="markdownIt-Anchor" href="#qt-编译oracle的oci驱动"></a> Qt 编译oracle的OCI驱动</h3><p>源码安装的时候必须选择Sources选项, 里边有数据库驱动的源码</p><p><img src="/images/javawz/image-20220614222417323.png" alt="image-20220614222417323"></p><ol><li>版本和路径说明:<ul><li>Qt版本是Qt5.9.0，安装路径是默认的 C:\Qt\Qt5.9.0</li><li>Oracle客户端版本oracle 11g 安装路径是C:\Oracle\product\11.2.0\client_1</li><li>打开C:\Qt\Qt5.9.0\5.9\Src\qtbase\src\plugins\sqldrivers\oci\ <a href="http://xn--oci-y28dj40fqz5aevae82r.pro" target="_blank" rel="noopener">目录下面的oci.pro</a>。</li></ul></li><li><a href="http://xn--QtCreatoroci-ov8sx05oyokvn7e.pro" target="_blank" rel="noopener">使用QtCreator打开oci.pro</a><ul><li>未进行修改的直接编译结果： Library ‘oci’ is not defined.</li><li>修改oci.pro文件</li><li><img src="/images/javawz/image-20220614222805400.png" alt="image-20220614222805400"></li></ul></li><li>之后再重新编译，就会发现编译通过了，这时候我们在Qt安装的 根目录下面去找 “:\plugins”会发现里面有一个“ sqldrivers ” 文件夹，将其复制到Qt的c:\Qt\Qt5.9.0\5.9\mingw53_32\plugins下 面即可。<ul><li>如果Qt安装根目录在C盘, 那么plugins就在C盘根目录</li><li>编译的时候建议编译两个版本<ul><li>debug</li><li>release</li></ul></li></ul></li></ol><p>以上方法对Qt5.8以后的版本都适用.</p><h2 id="qt操作mysql数据库"><a class="markdownIt-Anchor" href="#qt操作mysql数据库"></a> QT操作mysql数据库</h2><p>Header: include</p><p>qmake: QT += sql</p><p>首先需要在QT项目文件的*.pro文件中添加: QT += core gui sql</p><p>所用到的头文件:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;qDebug&gt;</span><br><span class="line">#include &lt;QSqlDatabase&gt;</span><br><span class="line">#include &lt;QSqlQuery&gt;</span><br><span class="line">#include &lt;QSqlRecord&gt;</span><br><span class="line">#include &lt;QSqlError&gt;</span><br></pre></td></tr></table></figure><h3 id="1加载数据库驱动"><a class="markdownIt-Anchor" href="#1加载数据库驱动"></a> 1.加载数据库驱动</h3><p><strong>将libmysql.dll库放到下面的目录下: D:\QT\Qt5.10.1\5.10.1\mingw53_32\bin</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查看QT支持的驱动</span></span><br><span class="line">qDebug() &lt;&lt; QSqlDatabase::drivers();</span><br><span class="line">输出结果为:</span><br><span class="line"><span class="comment">//("QSQLITE", "QMYSQL", "QMYSQL3", "QOCI", "QOCI8", "QODBC", "QODBC3", "QPSQL", "QPSQL7")</span></span><br><span class="line">QSqlDatabase db = QSqlDatabase::addDatabase(<span class="string">"QMYSQL"</span>);</span><br></pre></td></tr></table></figure><h3 id="2设置账号密码"><a class="markdownIt-Anchor" href="#2设置账号密码"></a> 2.设置账号密码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">设置账号和密码信息使用QSqlDatabase类的成员函数:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setHostName</span><span class="params">(<span class="keyword">const</span> QString &amp;host)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPassword</span><span class="params">(<span class="keyword">const</span> QString &amp;password)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setPort</span><span class="params">(<span class="keyword">int</span> port)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setUserName</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setDatabaseName</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span></span></span><br><span class="line">使用方法, 如下所示</span><br><span class="line">db.setHostName(<span class="string">"192.168.10.145"</span>); <span class="comment">//设置mysql主机的IP地址</span></span><br><span class="line">db.setDatabaseName(<span class="string">"scott"</span>); <span class="comment">//设置数据库名</span></span><br><span class="line">db.setUserName(<span class="string">"root"</span>); <span class="comment">//设置用户名</span></span><br><span class="line">db.setPassword(<span class="string">"123456"</span>); <span class="comment">//设置密码</span></span><br><span class="line">其实上面这几步就类似于登录mysql数据库需要的关键信息:</span><br><span class="line">mysql -h192<span class="number">.168</span><span class="number">.10</span><span class="number">.145</span> -uroot -p123456 scott</span><br></pre></td></tr></table></figure><h3 id="3打开数据库"><a class="markdownIt-Anchor" href="#3打开数据库"></a> 3.打开数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">bool</span> QSqlDatabase::open()</span><br><span class="line">详情查看QT帮助手册</span><br><span class="line">使用方法, 如下所示:</span><br><span class="line"><span class="keyword">if</span>(!db.open())</span><br><span class="line">&#123;</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"数据库操作失败"</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4执行select查询操作"><a class="markdownIt-Anchor" href="#4执行select查询操作"></a> 4.执行select查询操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 需要使用QSqlQuery类的相关函数:</span><br><span class="line">Header: <span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;QSqlQuery&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> QSqlQuery类的构造函数:</span><br><span class="line">QSqlQuery(<span class="keyword">const</span> QString &amp;query = QString(), QSqlDatabase db = QSqlDatabase())</span><br><span class="line">该构造函数都有默认值, 构造的时候可以不指定:</span><br><span class="line">用法: QSqlQuery query;</span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 执行select查询语句</span><br><span class="line"><span class="number">3.1</span> 第一种方法, 直接调用exec执行sql语句</span><br><span class="line">例如: query.exec(<span class="string">"select * from dept"</span>);</span><br><span class="line"><span class="number">3.2</span> 第二种方法,先调用prepare准备一个sql语句, 然后再执行exec执行sql语句</span><br><span class="line">例如:</span><br><span class="line">            <span class="keyword">bool</span> success;</span><br><span class="line">            query.prepare(<span class="string">"select * from dept"</span>);</span><br><span class="line">            success = query.exec();</span><br><span class="line">            <span class="keyword">if</span>(!success)</span><br><span class="line">            &#123;</span><br><span class="line">            qDebug() &lt;&lt; <span class="string">"查询失败"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">4</span> 获取查询表的总字段数</span><br><span class="line">先调用QSqlQuery类的record方法:</span><br><span class="line"><span class="function">QSqlRecord <span class="title">record</span><span class="params">()</span> <span class="keyword">const</span></span>;</span><br><span class="line">然后在调用QSqlRecord类的count方法</span><br><span class="line"><span class="keyword">int</span> QSqlRecord::count() <span class="keyword">const</span></span><br><span class="line">例如:</span><br><span class="line">        QSqlRecord rec = query.record();</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"查询结果字段总数为："</span> &lt;&lt; rec.count();</span><br><span class="line">        <span class="comment">//注意: 有的函数有代码示例, 可以直接参考</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">5</span> 获取查询结果总记录数</span><br><span class="line">调用QSqlQuery类的size方法:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">size</span><span class="params">()</span> <span class="keyword">const</span></span></span><br><span class="line">例如:</span><br><span class="line">qDebug() &lt;&lt; <span class="string">"查询结果记录总数为"</span> &lt;&lt; query.size();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> 遍历查询的结果集</span><br><span class="line">获取每一条记录:</span><br><span class="line"><span class="keyword">bool</span> QSqlQuery::next()</span><br><span class="line">通过列的索引位置获取列的值---列的索引从<span class="number">0</span>开始</span><br><span class="line">QVariant QSqlQuery::value(<span class="keyword">int</span> index) <span class="keyword">const</span></span><br><span class="line">通过列名获取列的值:</span><br><span class="line"><span class="function">QVariant <span class="title">value</span><span class="params">(<span class="keyword">const</span> QString &amp;name)</span> <span class="keyword">const</span></span></span><br><span class="line">代码示例:</span><br><span class="line">        <span class="keyword">while</span>(query.next())</span><br><span class="line">        &#123;</span><br><span class="line">        <span class="comment">//qDebug() &lt;&lt; query.value(0).toInt() &lt;&lt; query.value(1).toString() &lt;&lt; query.value(2).toString();</span></span><br><span class="line">        qDebug() &lt;&lt; query.value(<span class="string">"deptno"</span>).toInt() &lt;&lt; query.value(<span class="string">"dname"</span>).toString() &lt;&lt;</span><br><span class="line">        query.value(<span class="string">"loc"</span>).toString();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">7</span> 移动指向结果集的位置指针:</span><br><span class="line"><span class="keyword">bool</span> QSqlQuery::seek(<span class="keyword">int</span> index, <span class="keyword">bool</span> relative = <span class="literal">false</span>)</span><br><span class="line">例如:</span><br><span class="line">query.seek(<span class="number">-1</span>); <span class="comment">//每次next都会使记录指针移动一次, 可以使用seek函数重置指针位置,类似于文件指针</span></span><br></pre></td></tr></table></figure><h3 id="5执行insert操作"><a class="markdownIt-Anchor" href="#5执行insert操作"></a> 5.执行insert操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:</span><br><span class="line">    query.prepare(<span class="string">"insert into dept values(77, 'sports', 'xiuzheng')"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">2</span>: 使用带有占位符的sql语句, 该语句不是一个完整的sql语句,需要调用bindValue函数给占位符设置值.</span><br><span class="line">    query.prepare(<span class="string">"insert into dept values(?, ?, ?)"</span>);</span><br><span class="line">    <span class="comment">//给字段设置值,字段位置索引从0开始</span></span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="number">99</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="string">"SPORTS"</span>);</span><br><span class="line">    query.bindValue(<span class="number">2</span>, <span class="string">"BEIJING"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">3</span>:直接调用exec并将sql语句作为参数也可以直接插入</span><br><span class="line">    success = query.exec(<span class="string">"insert into dept values(66, 'SALES', 'SHANGHAI')"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"插入失败："</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="6执行update操作"><a class="markdownIt-Anchor" href="#6执行update操作"></a> 6.执行update操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:直接调用execl并将sql语句作为参数执行</span><br><span class="line">    success = query.exec(<span class="string">"update dept set loc='MEIGUO' where deptno=99"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">方法<span class="number">2</span>:使用带有占位符占位符的sql语句</span><br><span class="line">    query.prepare(<span class="string">"update dept set loc=? where deptno=?"</span>);</span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="string">"JAPAN"</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="number">77</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="7执行delete操作"><a class="markdownIt-Anchor" href="#7执行delete操作"></a> 7.执行delete操作</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">方法<span class="number">1</span>:直接调用execl并将sql语句作为参数执行</span><br><span class="line">query.exec(<span class="string">"delete from dept where deptno=99"</span>);</span><br><span class="line">方法<span class="number">2</span>:使用带有占位符的sql语句</span><br><span class="line">    query.prepare(<span class="string">"delete from dept where deptno=? or loc=?"</span>);</span><br><span class="line">    query.bindValue(<span class="number">0</span>, <span class="number">77</span>);</span><br><span class="line">    query.bindValue(<span class="number">1</span>, <span class="string">"SHANGHAI"</span>);</span><br><span class="line">    success = query.exec();</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    QSqlError lastError = query.lastError();</span><br><span class="line">    qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h3 id="8事务处理"><a class="markdownIt-Anchor" href="#8事务处理"></a> 8.事务处理</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1</span> 开启事务</span><br><span class="line">query.exec(<span class="string">"START TRANSACTION"</span>);</span><br><span class="line"></span><br><span class="line"><span class="number">2</span> 设置自动提交和手动提交----&gt;默认情况下mysql是自动提交的</span><br><span class="line">query.exec(<span class="string">"SET AUTOCOMMIT=0"</span>); <span class="comment">//手动提交</span></span><br><span class="line">query.exec(<span class="string">"SET AUTOCOMMIT=1"</span>); <span class="comment">//自动提交</span></span><br><span class="line"></span><br><span class="line"><span class="number">3</span> 事务的提交和回滚操作</span><br><span class="line">    query.exec(<span class="string">"COMMIT"</span>);</span><br><span class="line">    query.exec(<span class="string">"ROLLBACK"</span>);</span><br><span class="line">测试方法: 先开启一个新的事务, 并设置为手动提交, 然后插入数据, 最后回滚, 看数据是否已经插入到数据库中;然</span><br><span class="line">后在修改为提交, 查看数据是否已经插入到数据库中.</span><br><span class="line">测试代码如下:</span><br><span class="line">    query.exec(<span class="string">"START TRANSACTION"</span>);</span><br><span class="line">    query.exec(<span class="string">"SET AUTOCOMMIT=0"</span>); <span class="comment">//手动提交</span></span><br><span class="line">    success = query.exec(<span class="string">"insert into dept values(99, 'SALES', 'SHANGHAI')"</span>);</span><br><span class="line">    <span class="keyword">if</span>(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        QSqlError lastError = query.lastError();</span><br><span class="line">        qDebug() &lt;&lt; <span class="string">"update failed"</span> &lt;&lt; lastError.driverText() &lt;&lt; lastError.databaseText();</span><br><span class="line">        <span class="comment">//回滚事务</span></span><br><span class="line">        query.exec(<span class="string">"ROLLBACK"</span>);</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//提交事务</span></span><br><span class="line">    query.exec(<span class="string">"COMMIT"</span>);</span><br></pre></td></tr></table></figure><h3 id="9关闭数据库"><a class="markdownIt-Anchor" href="#9关闭数据库"></a> 9.关闭数据库</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//关闭数据库</span></span><br><span class="line">db.close();</span><br></pre></td></tr></table></figure><p>参考网站: <a href="https://blog.csdn.net/wyansai/" target="_blank" rel="noopener">https://blog.csdn.net/wyansai/</a></p><h2 id="创建sqlite数据库的过程同mysql"><a class="markdownIt-Anchor" href="#创建sqlite数据库的过程同mysql"></a> 创建sqlite数据库的过程—同mysql</h2><p><img src="/images/javawz/image-20220615120258914.png" alt="image-20220615120258914"></p><p><img src="/images/javawz/image-20220615120310264.png" alt="image-20220615120310264"></p><p><img src="/images/javawz/image-20220615120320100.png" alt="image-20220615120320100"></p><p>建好sqlite数据库之后, 可以看到如下图所示:</p><p><img src="/images/javawz/image-20220615120339740.png" alt="image-20220615120339740"></p><p><img src="/images/javawz/image-20220615120350206.png" alt="image-20220615120350206"></p><p>参考网站: <a href="https://www.cnblogs.com/xia-weiwen/archive/2017/05/04/6806709.html" target="_blank" rel="noopener">https://www.cnblogs.com/xia-weiwen/archive/2017/05/04/6806709.html</a></p><p>参考代码:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br></pre></td><td class="code"><pre><span class="line">在QT上建立一个控制台应用程序, 然后将代码直接复制上就可以编译测试.</span><br><span class="line">还有就是需要在*.pro文件中添加: QT += sql</span><br><span class="line">#include &lt;QCoreApplication&gt;</span><br><span class="line">#include &lt;QSqlDatabase&gt;</span><br><span class="line">#include &lt;QSqlError&gt;</span><br><span class="line">#include &lt;QSqlQuery&gt;</span><br><span class="line">#include &lt;qDebug&gt;</span><br><span class="line">#include &lt;QString&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">    QCoreApplication a(argc, argv);</span><br><span class="line">    bool success;</span><br><span class="line">    //建立数据库--加载数据库驱动</span><br><span class="line">    QSqlDatabase database;</span><br><span class="line">    if (QSqlDatabase::contains(&quot;qt_sql_default_connection&quot;))</span><br><span class="line">    &#123;</span><br><span class="line">    database = QSqlDatabase::database(&quot;qt_sql_default_connection&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        database = QSqlDatabase::addDatabase(&quot;QSQLITE&quot;);</span><br><span class="line">        database.setDatabaseName(&quot;C:\\Users\\Administrator\\Desktop\\sqlite.db&quot;);</span><br><span class="line">        //db.setDatabaseName(&quot;main&quot;);//有这个会报错</span><br><span class="line">        //database.setUserName(&quot;&quot;);//可以省略</span><br><span class="line">        //database.setPassword(&quot;&quot;);//可以省略</span><br><span class="line">    &#125;</span><br><span class="line">    //打开数据库</span><br><span class="line">    </span><br><span class="line">    if (!database.open())</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Failed to connect database.&quot; &lt;&lt; database.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--新建一个表student作为测试表</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //执行sql语句---新建一个表</span><br><span class="line">    QSqlQuery sql_query;</span><br><span class="line">    /*QString create_sql = &quot;create table student (id int, name varchar(30), age int)&quot;;</span><br><span class="line">    sql_query.prepare(create_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;Table created!&quot;;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--插入数据操作</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //向student表中插入数据</span><br><span class="line">    //第一种方法:</span><br><span class="line">    /*success = sql_query.exec(&quot;insert into student values(1, &apos;xiaowen&apos;, 10)&quot;);</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //第二种方法:</span><br><span class="line">    QString sql = &quot;insert into student values(3, &apos;xiaozi&apos;, 25)&quot;;</span><br><span class="line">    success = sql_query.exec(sql);</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;Error: Fail to create table.&quot; &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    //第三种方法:执行带有占位符的sql语句</span><br><span class="line">    QString insert_sql = &quot;insert into student values (?, ?, ?)&quot;;</span><br><span class="line">    sql_query.prepare(insert_sql);</span><br><span class="line">    /*sql_query.addBindValue(2);</span><br><span class="line">    sql_query.addBindValue(&quot;xiaohu&quot;);</span><br><span class="line">    sql_query.addBindValue(22);*/</span><br><span class="line">    sql_query.bindValue(0, 5);</span><br><span class="line">    sql_query.bindValue(1, &quot;小马&quot;);</span><br><span class="line">sql_query.bindValue(2, 30);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;inserted success!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //批量插入</span><br><span class="line">    insert_sql = &quot;insert into student values(?,?,?)&quot;;</span><br><span class="line">    sql_query.prepare(insert_sql);</span><br><span class="line">    QVariantList GroupIDs;</span><br><span class="line">    GroupIDs.append(0);</span><br><span class="line">    GroupIDs.append(1);</span><br><span class="line">    GroupIDs.append(2);</span><br><span class="line">    QVariantList GroupNames;</span><br><span class="line">    GroupNames.append(&quot;xiaoma&quot;);</span><br><span class="line">    GroupNames.append(&quot;xiaowei&quot;);</span><br><span class="line">    GroupNames.append(&quot;xiaolian&quot;);</span><br><span class="line">    QVariantList GroupAddress;</span><br><span class="line">    GroupAddress.append(10);</span><br><span class="line">    GroupAddress.append(15);</span><br><span class="line">    GroupAddress.append(18);</span><br><span class="line">    sql_query.addBindValue(GroupIDs);</span><br><span class="line">    sql_query.addBindValue(GroupNames);</span><br><span class="line">    sql_query.addBindValue(GroupAddress);</span><br><span class="line">    success = sql_query.execBatch();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;&quot;insert batch data succ&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    return 0;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--更新数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //QString update_sql = &quot;update student set name = :name where id = :id&quot;;</span><br><span class="line">    QString update_sql = &quot;update student set name = ? where id = ?&quot;;</span><br><span class="line">    sql_query.prepare(update_sql);</span><br><span class="line">    //sql_query.bindValue(&quot;:name&quot;, &quot;Qt&quot;);</span><br><span class="line">    </span><br><span class="line">    //sql_query.bindValue(&quot;:id&quot;, 1);</span><br><span class="line">    sql_query.bindValue(0, &quot;Qt&quot;);</span><br><span class="line">    sql_query.bindValue(1, 2);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; &quot;updated!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line">    //--查询数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    QString select_sql = &quot;select id, name from student&quot;;</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        while(sql_query.next())</span><br><span class="line">        &#123;</span><br><span class="line">            int id = sql_query.value(0).toInt();</span><br><span class="line">            QString name = sql_query.value(1).toString();</span><br><span class="line">            qDebug()&lt;&lt;QString(&quot;id:%1 name:%2&quot;).arg(id).arg(name);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //查询最大的ID</span><br><span class="line">    QString select_max_sql = &quot;select max(id) from student&quot;;</span><br><span class="line">    int max_id = 0;</span><br><span class="line">    sql_query.prepare(select_max_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">        while(sql_query.next())</span><br><span class="line">        &#123;</span><br><span class="line">            max_id = sql_query.value(0).toInt();</span><br><span class="line">            qDebug() &lt;&lt; QString(&quot;max id:%1&quot;).arg(max_id);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    //#####################################################################</span><br><span class="line"></span><br><span class="line">    /--删除数据</span><br><span class="line">    //#####################################################################</span><br><span class="line">    QString delete_sql = &quot;delete from student where id = ?&quot;;</span><br><span class="line">    sql_query.prepare(delete_sql);</span><br><span class="line">    sql_query.addBindValue(3);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug()&lt;&lt;sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug()&lt;&lt;&quot;deleted!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    //清空表</span><br><span class="line">    /*QString clear_sql = &quot;delete from student&quot;;</span><br><span class="line">    sql_query.prepare(clear_sql);</span><br><span class="line">    success = sql_query.exec();</span><br><span class="line">    if(!success)</span><br><span class="line">    &#123;</span><br><span class="line">        qDebug() &lt;&lt; sql_query.lastError();</span><br><span class="line">        return -1;</span><br><span class="line">    &#125;</span><br><span class="line">    else</span><br><span class="line">    &#123;</span><br><span class="line">    qDebug() &lt;&lt; &quot;table cleared&quot;;</span><br><span class="line">    &#125;*/</span><br><span class="line">    //关闭数据库</span><br><span class="line">    database.close();</span><br><span class="line">    return a.exec();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;qt-编译oracle的oci驱动&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#qt-编译oracle的oci驱动&quot;&gt;&lt;/a&gt; Qt 编译oracle的OCI驱动&lt;/h3&gt;
&lt;p&gt;源码安装的时候必须选择Sources选项, 里边有数据
      
    
    </summary>
    
      <category term="Qt" scheme="https://xiaowuyoucy.github.io/categories/Qt/"/>
    
    
  </entry>
  
  <entry>
    <title>ORA-24960错误</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/10/ORA-24960%E9%94%99%E8%AF%AF/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/10/ORA-24960错误/</id>
    <published>2022-06-10T14:55:45.000Z</published>
    <updated>2022-06-12T15:43:29.748Z</updated>
    
    <content type="html"><![CDATA[<h1 id="ubuntu-ora-24960属性oci_attr_username大于最大允许长度255"><a class="markdownIt-Anchor" href="#ubuntu-ora-24960属性oci_attr_username大于最大允许长度255"></a> Ubuntu ORA-24960:属性OCI_ATTR_USERNAME大于最大允许长度255</h1><h3 id="问题描述"><a class="markdownIt-Anchor" href="#问题描述"></a> 问题描述</h3><p>我正在尝试在Ubuntu上运行以下测试程序，以使用即时客户端OCCI库连接到oracle数据库.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;occi.h&gt;</span><br><span class="line"></span><br><span class="line">using namespace oracle::occi;</span><br><span class="line">int main() &#123;</span><br><span class="line"></span><br><span class="line">    Environment *env = Environment::createEnvironment(Environment::DEFAULT);</span><br><span class="line">    Connection *conn = env-&gt;createConnection( &quot;user&quot;, &quot;1234&quot; ); </span><br><span class="line">    env-&gt;terminateConnection(conn);</span><br><span class="line">    Environment::terminateEnvironment(env);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译时没有错误</p><p>但是运行时我会得到</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">terminate called after throwing an instance of &apos;oracle::occi::SQLException&apos;</span><br><span class="line">  what():  ORA-24960: the attribute  OCI_ATTR_USERNAME is greater than the maximum allowable length of 255</span><br><span class="line">Aborted</span><br></pre></td></tr></table></figure><h3 id="推荐答案"><a class="markdownIt-Anchor" href="#推荐答案"></a> 推荐答案</h3><p>通过还原到较早的编译器解决了该问题.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install g++-4.8</span><br><span class="line">$ g++-4.8 main.cpp -L ~/instantclient_12_2 -locci -lclntsh -I ~/instantclient_12_2/sdk/include</span><br></pre></td></tr></table></figure><p>也许最新的编译器和库与用于构建OCCI库的编译器和库不兼容.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;ubuntu-ora-24960属性oci_attr_username大于最大允许长度255&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#ubuntu-ora-24960属性oci_attr_username大于最大允许长度255&quot;&gt;
      
    
    </summary>
    
      <category term="编程错误总结" scheme="https://xiaowuyoucy.github.io/categories/%E7%BC%96%E7%A8%8B%E9%94%99%E8%AF%AF%E6%80%BB%E7%BB%93/"/>
    
    
  </entry>
  
  <entry>
    <title>oracle_win和linux编程</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/08/oracle-win%E5%92%8Clinux%E7%BC%96%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/08/oracle-win和linux编程/</id>
    <published>2022-06-08T14:40:24.000Z</published>
    <updated>2022-06-17T13:54:38.013Z</updated>
    
    <content type="html"><![CDATA[<h3 id="关于信号处理函数的经验"><a class="markdownIt-Anchor" href="#关于信号处理函数的经验"></a> 关于信号处理函数的经验:</h3><p>1 在信号处理函数中尽可能的要简单<br>2 在信号处理函数中不要打印日志.</p><h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h3><p>需要安装oracle服务端对应版本的oracle客户端才行</p><p>比如服务端版本是10.0.1  客户端也必须是10.0.1版本,否则库加载失败或编译不通过</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;occi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> oracle::occi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化环境</span></span><br><span class="line">Environment *ev = Environment::createEnvironment();</span><br><span class="line"><span class="keyword">if</span> (ev == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"createEnvironment failed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接oracle数据库</span></span><br><span class="line"><span class="built_in">string</span> user = <span class="string">"scott"</span>;</span><br><span class="line"><span class="built_in">string</span> passwd = <span class="string">"tiger"</span>;</span><br><span class="line"><span class="built_in">string</span> connstr = <span class="string">"192.168.10.145:1521/orcl"</span>;</span><br><span class="line">Connection *conn = ev-&gt;createConnection(user, passwd, connstr);</span><br><span class="line"><span class="keyword">if</span> (conn == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database failed"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database OK"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//sql语句中不要有分号</span></span><br><span class="line"><span class="comment">/*string sql = "insert into dept values(109, 'lajiao', 'JYL_SC')";</span></span><br><span class="line"><span class="comment">Statement *stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">"delete from dept where deptno=99"</span>;</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">ev-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放环境资源</span></span><br><span class="line">Environment::terminateEnvironment(ev);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><p>初始化环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Environment *env = Environment::createEnvironment();</span><br><span class="line"></span><br><span class="line">成功:返回指针对象</span><br><span class="line">失败:返回NULL</span><br></pre></td></tr></table></figure><p>连接数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Connection *Environment::createConnection(const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br><span class="line">userName: 用户名</span><br><span class="line">password: 用户密码</span><br><span class="line">connectString: ip地址:端口/实例名</span><br><span class="line"></span><br><span class="line">成功: 返回指针对象</span><br><span class="line">失败: 返回NULL</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;occi.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> oracle::occi;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化环境</span></span><br><span class="line">Environment *env = Environment::createEnvironment();</span><br><span class="line"><span class="keyword">if</span>(env==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"create Environment error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line"><span class="comment">//Connection *Environment::createConnection( </span></span><br><span class="line">    <span class="comment">//const string &amp;userName,const string &amp;password, const string &amp;connectString );</span></span><br><span class="line"><span class="built_in">string</span> user=<span class="string">"scott"</span>;</span><br><span class="line"><span class="built_in">string</span> passwd=<span class="string">"tiger"</span>;</span><br><span class="line"><span class="built_in">string</span> connstr=<span class="string">"192.168.10.145:1521/orcl"</span>;</span><br><span class="line">Connection *conn = env-&gt;createConnection(user, passwd, connstr);</span><br><span class="line"><span class="keyword">if</span>(conn==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"connect database error"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"connect database OK!"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">Statement *stmt = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">string</span> sql = <span class="string">"insert into dept values(11, 'training', 'changping')"</span>;</span><br><span class="line"><span class="comment">//创建Statement对象</span></span><br><span class="line"><span class="comment">//第一种方法</span></span><br><span class="line"><span class="comment">/*stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(21, 'sport', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">stmt-&gt;setSQL(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;execute();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第三种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(31, 'SALES', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">stmt-&gt;execute(sql);*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第四种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(41, 'XIANGLIAO', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement();</span></span><br><span class="line"><span class="comment">int num = stmt-&gt;executeUpdate(sql);</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "num==" &lt;&lt; num &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第五种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(51, 'huoguo', 'JYL')";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">int num = stmt-&gt;executeUpdate();</span></span><br><span class="line"><span class="comment">cout &lt;&lt; "num==" &lt;&lt; num &lt;&lt; endl;*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//第六种方法</span></span><br><span class="line"><span class="comment">/*sql = "insert into dept values(:1, :2, :3)";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 61);</span></span><br><span class="line"><span class="comment">stmt-&gt;setString(2, "huajiao");</span></span><br><span class="line"><span class="comment">stmt-&gt;setString(3, "JYL_SC");</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行delete操作</span></span><br><span class="line"><span class="comment">/*sql = "delete from dept where deptno=11";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用占位符的删除操作</span></span><br><span class="line"><span class="comment">/*sql = "delete from dept where deptno=:1";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 21);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行update操作</span></span><br><span class="line"><span class="comment">/*sql = "update dept set dname='xxxxx' where deptno=31";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//使用占位符的update操作</span></span><br><span class="line"><span class="comment">/*sql = "update dept set dname='yyyy' where deptno=:1";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);</span></span><br><span class="line"><span class="comment">stmt-&gt;setInt(1, 41);</span></span><br><span class="line"><span class="comment">stmt-&gt;executeUpdate();*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//执行select查询</span></span><br><span class="line"><span class="comment">/*sql = "select * from dept";</span></span><br><span class="line"><span class="comment">stmt = conn-&gt;createStatement(sql);*/</span></span><br><span class="line"></span><br><span class="line">sql = <span class="string">"select * from dept where deptno&gt;:1"</span>;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(<span class="number">1</span>, <span class="number">30</span>);</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环获取结果集的每一行记录的值</span></span><br><span class="line"><span class="keyword">while</span>(rs-&gt;next())</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; rs-&gt;getInt(<span class="number">1</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; rs-&gt;getString(<span class="number">2</span>) &lt;&lt; <span class="string">" "</span> &lt;&lt; rs-&gt;getString(<span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//关闭结果集</span></span><br><span class="line">stmt-&gt;closeResultSet(rs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//端口数据库连接</span></span><br><span class="line">env-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭环境</span></span><br><span class="line">Environment::terminateEnvironment(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;关于信号处理函数的经验&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#关于信号处理函数的经验&quot;&gt;&lt;/a&gt; 关于信号处理函数的经验:&lt;/h3&gt;
&lt;p&gt;1 在信号处理函数中尽可能的要简单&lt;br&gt;
2 在信号处理函数中不要打印日志.&lt;/p&gt;

      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>保存配置信息的几种方式</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/%E4%BF%9D%E5%AD%98%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/保存配置信息的几种方式/</id>
    <published>2022-06-05T11:23:18.000Z</published>
    <updated>2022-06-05T11:25:10.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="保存配置信息的几种方式"><a class="markdownIt-Anchor" href="#保存配置信息的几种方式"></a> 保存配置信息的几种方式:</h2><h3 id="1-配置文件"><a class="markdownIt-Anchor" href="#1-配置文件"></a> 1 配置文件:</h3><p>​1.1 用户自定义的格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user:scott</span><br><span class="line">passwd:tiger</span><br><span class="line">SID:orcl</span><br><span class="line">socott|tiger|orcl</span><br></pre></td></tr></table></figure><p>​1.2 xml格式的配置文件<br>​1.3 json格式的配置文件</p><h3 id="2-将配置信息设置成环境变量"><a class="markdownIt-Anchor" href="#2-将配置信息设置成环境变量"></a> 2 将配置信息设置成环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *p = getenv(&quot;HOME&quot;);//获取环境变量的值</span><br></pre></td></tr></table></figure><h3 id="3-存到数据库表中"><a class="markdownIt-Anchor" href="#3-存到数据库表中"></a> 3 存到数据库表中</h3><p>将配置信息写入配置文件有什么好处?<br> 省去编译源代码的麻烦,只要修改配置文件之后重启服务即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;保存配置信息的几种方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#保存配置信息的几种方式&quot;&gt;&lt;/a&gt; 保存配置信息的几种方式:&lt;/h2&gt;
&lt;h3 id=&quot;1-配置文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>OCCI</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/OCCI/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/OCCI/</id>
    <published>2022-06-05T00:38:09.000Z</published>
    <updated>2022-06-05T11:22:19.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写服务端程序"><a class="markdownIt-Anchor" href="#编写服务端程序"></a> 编写服务端程序</h3><p>服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,<br>可以使用map完成线程ID和TcpSocket的映射关系, map&lt;pthread_t, TcpSocket *&gt;m_listSocket;</p><p>线程的回调函数需要访问到服务端操作类的成员变量, 所以应该将回调函数设置为类的友元函数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto it = m_socketList.find(threadId);----&gt;自动类型推导</span><br><span class="line">但是如果it是先定义后赋值不行:</span><br><span class="line">auto it;</span><br><span class="line">it = m_socketList.find(threadId);</span><br></pre></td></tr></table></figure><p>在使用SHA1进行加密的时候, 函数参数是什么类型, 就提供什么类型的数据, 否则可能会有问题.</p><h3 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h3><ol><li>守护进程特点</li></ol><blockquote><ul><li>后台服务进程</li><li>独立于控制终端</li><li>周期性执行某任务</li><li>不受用户登录注销影响</li><li>一般采用以d结尾的名字(服务)</li></ul></blockquote><ol start="2"><li><p>创建守护进程的流程</p><ul><li>创建子进程, 杀死父进程 - 必须的<ul><li>创建子进程: fork();</li><li>守护进程是怎么来的?<ul><li>有一个没有任何职务的进程才可以被加官进爵, 守护进程是一个会话<ul><li>范围: 进程 -&gt; 进程组 -&gt; 会话<ul><li>进程组中的组长: 默认是进程组中的第一个进程</li></ul></li></ul></li></ul></li><li>如何杀死父进程<ul><li>exit(0)</li><li>kill()</li><li>raise() -&gt; 自己给自己发信号</li><li>abort() -&gt; 给自己发送SIGABRT信号</li></ul></li></ul></li><li>子进程提升为会话 - 必须的<ul><li>setsid()</li><li>提升成功之后, 进程就脱离了终端</li></ul></li><li>修改工作目录 - 可选<ul><li>chdir();</li><li>/mnt/U盘1/app<ul><li>在当前目录/mnt/U盘1/下 执行 ./app, 进程的工作路径: /mnt/U盘1/</li></ul></li><li>将工作目录切换到一个不能被卸载的路径下就可以了<ul><li>chdir(&quot;/home&quot;);</li></ul></li></ul></li><li>修改掩码 - 可选<ul><li>umask();</li></ul></li><li>关闭/重定向文件描述法 - 可选<ul><li>标准输入 -&gt; 0</li><li>标准输出 -&gt; 1</li><li>标准错误 -&gt; 2</li><li>如果的重定向, 对应的位置: /dev/null<ul><li>/dev/null是一个黑洞文件,不管放什么数据进去,文件大小都是0</li><li>重定向的目的: 排除干扰</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int devFd = open(&quot;/dev/null&quot;, O_RDWR);</span><br><span class="line">int dup2(int oldfd, int newfd);</span><br><span class="line">dup2(devFd, 0);</span><br><span class="line">newfd 不管之前指向哪一个文件, 现在指向oldfd</span><br></pre></td></tr></table></figure><ul><li>核心处理动作 -&gt; 周期性的执行某些操作 - 必须</li><li>关闭守护进程 -&gt; 使用shell脚本管理 - 可选</li></ul></li></ol><h2 id="occi"><a class="markdownIt-Anchor" href="#occi"></a> OCCI</h2><blockquote><p>Oracle C<ins>调用接口 – OCCI 即 Oracle C</ins> Call Interface<br>OCCI 是Oracle 的C++ API, 允许你使用面向对象的特性、本地类、C++语言的方法来访问Oracle数据库</p></blockquote><h3 id="occi-介绍"><a class="markdownIt-Anchor" href="#occi-介绍"></a> OCCI 介绍</h3><ol><li><p>优势</p><blockquote><ol><li>基于标准C++和面向对象的设计；</li><li>效率较高；</li><li>适合开发C/S模式的程序，软件中间层；</li></ol></blockquote></li><li><p>特性</p><blockquote><ol><li>完整支持SQL/PLSQL</li><li>为不断增长的用户和请求提供了弹性选项</li><li>为使用用户自定义类型，如C中的类，提供了无缝接口</li><li>支持所有的Oracle数据类型以及LOB types（大对象）</li><li>可以访问数据库元数据</li></ol></blockquote></li></ol><p>OCCI 头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;occi.h&gt; -- 程序中只需要包含这一个头文件</span><br><span class="line">#include &lt;occiCommon.h&gt;</span><br><span class="line">#include &lt;occiControl.h&gt;</span><br><span class="line">#include &lt;occiData.h&gt;</span><br><span class="line">#include &lt;occiObjects.h&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>OCCI 库</li></ol><ul><li><p>Windows</p><ul><li>oraocci11.lib/ oraocci11d.lib</li><li>oraocci11.dll/ oraocci11d.dll</li></ul></li><li><p>Linux</p><ul><li><a href="http://libnnz11.so" target="_blank" rel="noopener">libnnz11.so</a></li><li><a href="http://libocci.so" target="_blank" rel="noopener">libocci.so</a></li><li><a href="http://libclntsh.so" target="_blank" rel="noopener">libclntsh.so</a></li></ul></li></ul><p>linux下的环境配置-----root用户下进行配置</p><ul><li>将oracle_client_11gR2.tar.gz文件上传值linux操作系统的/opt目录下</li><li>执行tar -zxvf oracle_client_11gR2.tar.gz解压至当前目录下</li><li>进入到刚刚解压的目录, 打开&lt;&lt;Hi-看我,<a href="http://xn--wnuv08b.sh" target="_blank" rel="noopener">看我.sh</a>&gt;&gt;</li><li>将文件中的export导出的环境变量拷贝到root用户的.bashrc文件中<ul><li>注意: 若解压的目录不是/opt, 环境变量中的路径需要修改</li></ul></li><li>执行. .bashrc或者source .bashrc 或者退出再次登录使配置的环境变量生效<ul><li>可以执行echo $OCCI_HOME进行查看, 若看到内容则设置成功</li></ul></li><li>切换到/opt/instantclient_11_2/network/admin目录下<ul><li>打开tnsnames.ora文件, 修改其中的HOST部分, 将IP修改成实际的oracle服务的IP地址</li></ul></li><li>occi.cpp测试代码上传到root用户下<ul><li>然后执行: g++ -o a.out occi.cpp -locci -lclntsh, 编译通过表明设置的没有问题.</li><li>若执行报错, 查看一下代码中的oracle的用户名和密码是否正确.</li></ul></li></ul><p>常见的几个环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PATH:命令或者可执行程序搜索的路径</span><br><span class="line"></span><br><span class="line">C_INCLUDE_PATH:gcc编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">CPLUS_INCLUDE_PATH: g++编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH:查找动态链接库的路径</span><br><span class="line"></span><br><span class="line">LIBRARY_PATH: 查找静态库的路径</span><br><span class="line"></span><br><span class="line">若编译的时候使用静态库文件:</span><br><span class="line">则: gcc foo.c -L /home/itcast/lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oracle用户安装了oracle服务系统, 本身就有oracle编程需要的库文件和头文件:</span><br><span class="line">&gt; export OCCI_HOME=/u01/app/oracle/product/11.2.0/db_1</span><br><span class="line">&gt; export OCCI_INCLUDE_DIR=$OCCI_HOME/rdbms/public</span><br><span class="line">&gt; export OCCI_LIBRARY_PATH=$OCCI_HOME/lib</span><br><span class="line">&gt; export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的库目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export LIBRARY_PATH=$$LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的头文件目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export CPLUS_INCLUDE_PATH=$$CPLUS_INCLUDE_PATH:$OCCI_INCLUDE_DIR</span><br><span class="line">&gt;</span><br><span class="line">&gt; 上面的环境变量中OCCI_HOME和OCCI_INCLUDE_DIR与在root中的配置不同, 其余相同</span><br></pre></td></tr></table></figure><h2 id="occi使用"><a class="markdownIt-Anchor" href="#occi使用"></a> OCCI使用</h2><h3 id="初始化-environment-类"><a class="markdownIt-Anchor" href="#初始化-environment-类"></a> 初始化 - Environment 类</h3><blockquote><p>OCCI通过创建一个Environment的对象完成初始化工作。<br>可以通过Environment创建数据库连接，从而进行其它的操作<br>要创建Environment，应该调用Environment类的静态方法createEnvironment()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 环境初始化</span><br><span class="line">Environment* env = Environment::createEnvironment();</span><br><span class="line">// 关闭, 释放资源</span><br><span class="line">Environment::terminateEnvironment(env);</span><br></pre></td></tr></table></figure><h3 id="连接数据库-connection-类"><a class="markdownIt-Anchor" href="#连接数据库-connection-类"></a> 连接数据库 - Connection 类</h3><blockquote><p>连接数据库通过Connection类的对象实例实现</p><p>调用Environment类的createConnection()方法可以创建一个Connection对象；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 函数原型:</span><br><span class="line">Connection *Environment::createConnection(</span><br><span class="line">const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数调用</span><br><span class="line">const string userName = &quot;scott&quot;; // 用户名</span><br><span class="line">const string passwd = &quot;tiger&quot;; // 密码</span><br><span class="line">const string connstr = &quot;192.168.247.129:1521/orcl&quot;; // 数据库连接串</span><br><span class="line">Connection* conn = env-&gt;createConnection(userName, passwd, connstr);</span><br></pre></td></tr></table></figure><blockquote><p>使用Environment::terminateConnection()断开连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 断开连接</span><br><span class="line">env-&gt;terminateConnection(conn);</span><br></pre></td></tr></table></figure><h3 id="执行sql"><a class="markdownIt-Anchor" href="#执行sql"></a> 执行SQL</h3><blockquote><p>Statement 类用于执行SQL语句,并获取返回结果。<br>ResultSet 类用于处理SELECT 查询的结果。<br>对于所有类型的数据的绑定或者获取，OCCI都提供了统一的方法<br>setXXX 方法用于Statement<br>getXXX 方法用于Statement &amp; ResultSet<br>OCCI会自动处理类型之间的转换。<br>使用方法：<br>使用Connection::createStatement()创建Statement对象, 指定 SQL 命令(DDL/DML/query)作为参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 操作函数</span><br><span class="line">Connection::createStatement(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::setSQL(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::execute(string &amp;sql); // can be used for any SQL, returns status</span><br><span class="line"></span><br><span class="line">Statement::executeUpdate(string &amp;sql); // returns Insert/Update/Delete count</span><br><span class="line"></span><br><span class="line">Statement::executeQuery(string &amp;sql); // returns ResultSet（结果集）</span><br></pre></td></tr></table></figure><blockquote><p>使用 setXXX 方法传递要绑定用于输入的值<br>使用合适的execute方法执行SQL<br>对于SELECT 查询, 使用ResultSet 对象处理返回结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 插入操作</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Dept(Deptno,Dname, Loc) values (1,</span><br><span class="line">‘ACCOUNTS’, ‘ZONE1’ ”);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line">conn-&gt;terminateStatement(stmt); // 关闭查询, 释放资源</span><br></pre></td></tr></table></figure><blockquote><p>使用绑定参数的DML（数据操作语句）示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Emp(EmpNo,Ename) values(:1, :2) ”);</span><br><span class="line">//1 and 2 are bind placeholders</span><br><span class="line">int empno = 2;</span><br><span class="line">string empname = “JOHN W”;</span><br><span class="line">//first parameter is bind position, second is value</span><br><span class="line">stmt-&gt;setInt(1, empno);</span><br><span class="line">stmt-&gt;setString(2, empname);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br></pre></td></tr></table></figure><blockquote><p>执行SELECT查询并处理结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(</span><br><span class="line">“select Empno, Ename, Sal from Emp where Hiredate &gt;= :1”);</span><br><span class="line">//automatically converted to Date</span><br><span class="line">stmt-&gt;setString(1, “01-JAN-1987”);</span><br><span class="line">//executeQuery returns a ResultSet</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line">//ResultSet::next fetches rows and returns FALSE</span><br><span class="line">//when no more rows</span><br><span class="line">while (rs-&gt;next() == true)</span><br><span class="line">&#123;</span><br><span class="line">    //get values using the getXXX methods of ResultSet</span><br><span class="line">    empno = rs-&gt;getInt(1);</span><br><span class="line">    empname = rs-&gt;getString(2);</span><br><span class="line">    empsalary = rs-&gt;getFloat(3);</span><br><span class="line">&#125;</span><br><span class="line">stmt-&gt;closeResultSet(rs);//to free resources</span><br></pre></td></tr></table></figure><h2 id="window配置occi环境"><a class="markdownIt-Anchor" href="#window配置occi环境"></a> window配置occi环境</h2><p>包含头文件和库路径还有库名字</p><p><img src="/images/javawz/image-20220605190706609.png" alt="image-20220605190706609"></p><h3 id="1-linux如何查找动态库编译-运行"><a class="markdownIt-Anchor" href="#1-linux如何查找动态库编译-运行"></a> 1. Linux如何查找动态库(编译、运行) ?</h3><ol><li>编译和链接时，动态库的搜索路径顺序如下（注意不会递归性地在其子目录下搜索）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) gcc编译、链接命令中的-L选项；</span><br><span class="line">(2) gcc的环境变量的 LIBRARY_PATH（多个路径用冒号分割）；</span><br><span class="line">(3) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib。</span><br></pre></td></tr></table></figure><ol start="2"><li>运行时，动态库的搜索路径顺序如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(1) 编译目标代码时指定的动态库搜索路径：用选项-Wl,rpath和include指定的动态库的搜索路径，</span><br><span class="line">比如gcc -Wl,-rpath,include -L. -ldltest hello.c，在执行文件时会搜索路径`./include`;</span><br><span class="line"></span><br><span class="line">(2) 环境变量LD_LIBRARY_PATH（多个路径用冒号分割）;</span><br><span class="line"></span><br><span class="line">(3) 修改 /etc/ld.so.conf 配置文件指定的动态库绝对路径, /etc/ld.so.cache</span><br><span class="line">（通过sudo ldconfig生效，一般是非root用户时使用）;</span><br><span class="line"></span><br><span class="line">(4) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib 等。</span><br></pre></td></tr></table></figure><h3 id="2-oracle解锁用户"><a class="markdownIt-Anchor" href="#2-oracle解锁用户"></a> 2. oracle解锁用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解锁用户</span><br><span class="line">ALTER USER scott ACCOUNT UNLOCK;</span><br><span class="line">// 重写设置密码</span><br><span class="line">ALTER USER scott IDENTIFIED BY tiger;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写服务端程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编写服务端程序&quot;&gt;&lt;/a&gt; 编写服务端程序&lt;/h3&gt;
&lt;p&gt;服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
</feed>
