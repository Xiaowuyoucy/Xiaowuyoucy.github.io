<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-05-06T10:10:08.384Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>starta-cmd命令</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/06/win001starta-cmd%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/06/win001starta-cmd命令/</id>
    <published>2021-05-06T10:04:05.000Z</published>
    <updated>2021-05-06T10:10:08.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="starta-cmd命令"><a class="markdownIt-Anchor" href="#starta-cmd命令"></a> starta-cmd命令</h1><h2 id="start"><a class="markdownIt-Anchor" href="#start"></a> Start</h2><p>启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。</p><p>语法<br><code>start [&quot;title&quot;] [/dPath] [/i] [/min] [/max] [{/separate | /shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}] [/wait] [/b] [FileName] [parameters]</code></p><p>参数<br>“title” 指定在“命令提示符”窗口标题栏中显示的标题。<br>/dpatch 指定启动目录。<br>/i 将 Cmd.exe 启动环境传送到新的“命令提示符”窗口。<br>/min 启动新的最小化窗口。<br>/max 启动新的最大化窗口。<br>/separate 在单独的内存空间启动 16 位程序。<br>/shared 在共享的内存空间启动 16 位程序。<br>/low 以空闲优先级启动应用程序。<br>/normal 以一般优先级启动应用程序。<br>/high 以高优先级启动应用程序。<br>/realtime 以实时优先级启动应用程序。<br>/abovenormal 以超出常规优先级的方式启动应用程序。<br>/belownormal 以低出常规优先级的方式启动应用程序。<br>/wait 启动应用程序，并等待其结束。<br>/b 启动应用程序时不必打开新的“命令提示符”窗口。除非应用程序启用 CTRL+C，否则将忽略 CTRL+C 操作。使用 CTRL+BREAK 中断应用程序。<br>非执行文件只要将文件名作为命令键入，即可通过其文件关联运行该文件。有关使用 assoc 和 ftype 在命令脚本中创建这些关联的详细信息，请参阅“”。</p><p>在运行的命令的第一个标记为“CMD”字符串但不包括扩展名或路径限定符时，“CMD”将被 COMSPEC 变量的值取代。这样可以防止用户从当前目录选取 cmd。<br>当您运行 32 位图形用户界面 (GUI) 应用程序时，cmd  不会在返回到命令提示符之前等待应用程序退出。如果从命令脚本运行应用程序，则不会发生这种新情况。在运行的命令中第一个符号不包括扩展名的情况下，Cmd.exe 使用 PATHEXT 环境变量的值确定要查找的扩展名以及查找顺序。PATHEXT 变量的默认值为：COM;.EXE;.BAT;.CMD（语法与 PATH 变量相同，使用分号分开不同元素）。当您搜索可执行文件且在任何扩展名上都没有匹配项时，start 将搜索目录名。</p><p>具体例子：</p><p>说明：如果你所在程序的路径中带有空格，那么必须用“”把路径括起来，否则系统会提示找不到XX文件，另外，在运行某些程序时，需在路径的前面加一对空白的“”，表示创建一个空白的窗口，它指向的程序是XXXXXXXX。还有就是别忘了空格。</p><p>当我想运行位于“D:/draw/”的“photoshop.exe”使，应该使用以下命令：<br>start “”“D:/draw/photoshop.exe” 表示以常规窗口运行程序</p><p>如果想让程序以最大化窗口运行，则使用以下命令：</p><p>start /max“”“D:/draw/photoshop.exe” 表示以最大化窗口运行程序</p><p>最小化这是这样：</p><p>start /min “” “D:/draw/photoshop.exe” 表示以最小化窗口运行程序</p><p>等待某个程序允许完毕，也就是窗口关闭后，再打开下一个程序这可以这样：</p><p>start /w “” “D:/draw/photoshop.exe”<br>start “” cmd.exe</p><h2 id="cmd"><a class="markdownIt-Anchor" href="#cmd"></a> CMD</h2><p>cmd /c dir 是执行完dir命令后关闭命令窗口。</p><p>cmd /k dir 是执行完dir命令后不关闭命令窗口。</p><p>cmd /c start dir 会打开一个新窗口后执行dir指令，原窗口会关闭。</p><p>cmd /k start dir 会打开一个新窗口后执行dir指令，原窗口不会关闭。</p><ol><li>gpedit.msc-----组策略</li><li>sndrec32-------录音机</li><li>Nslookup-------IP地址侦测器</li><li>explorer-------打开资源管理器</li><li>logoff---------注销命令</li><li>tsshutdn-------60秒倒计时关机命令</li><li>lusrmgr.msc----本机用户和组</li><li>services.msc—本地服务设置</li><li>oobe/msoobe /a----检查XP是否激活</li><li>notepad--------打开记事本</li><li>cleanmgr-------垃圾整理</li><li>net start messenger----开始信使服务</li><li>compmgmt.msc—计算机管理</li><li>net stop messenger-----停止信使服务</li><li>conf-----------启动netmeeting</li><li>dvdplay--------DVD播放器</li><li>charmap--------启动字符映射表</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>calc-----------启动计算器</li><li>dfrg.msc-------磁盘碎片整理程序</li><li>chkdsk.exe-----Chkdsk磁盘检查</li><li>devmgmt.msc— 设备管理器</li><li>regsvr32 /u *.dll----停止dll文件运行</li><li>drwtsn32------ 系统医生</li><li>rononce -p ----15秒关机</li><li>dxdiag---------检查DirectX信息</li><li>regedt32-------注册表编辑器</li><li>Msconfig.exe—系统配置实用程序</li><li>rsop.msc-------组策略结果集</li><li>mem.exe--------显示内存使用情况</li><li>regedit.exe----注册表</li><li>winchat--------XP自带局域网聊天</li><li>progman--------程序管理器</li><li>winmsd---------系统信息</li><li>perfmon.msc----计算机性能监测程序</li><li><ol start="36"><li>winver---------检查Windows版本</li></ol></li><li>sfc /scannow-----扫描错误并复原</li><li>taskmgr-----任务管理器（2000／xp／2003</li><li>winver---------检查Windows版本</li><li>wmimgmt.msc----打开windows管理体系结构(WMI)</li><li>wupdmgr--------windows更新程序</li><li>wscript--------windows脚本宿主设置</li><li>write----------写字板</li><li>winmsd---------系统信息</li><li>wiaacmgr-------扫描仪和照相机向导</li><li>winchat--------XP自带局域网聊天</li><li>mem.exe--------显示内存使用情况</li><li>Msconfig.exe—系统配置实用程序</li><li>mplayer2-------简易widnows media player</li><li>mspaint--------画图板</li><li>mstsc----------远程桌面连接</li><li>mplayer2-------媒体播放机</li><li>magnify--------放大镜实用程序</li><li>mmc------------打开控制台</li><li>mobsync--------同步命令</li><li>dxdiag---------检查DirectX信息</li><li>drwtsn32------ 系统医生</li><li>devmgmt.msc— 设备管理器</li><li>dfrg.msc-------磁盘碎片整理程序</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>dcomcnfg-------打开系统组件服务</li><li>ddeshare-------打开DDE共享设置</li><li>dvdplay--------DVD播放器</li><li>net stop messenger-----停止信使服务</li><li>net start messenger----开始信使服务</li><li>notepad--------打开记事本</li><li>nslookup-------网络管理的工具向导</li><li>ntbackup-------系统备份和还原</li><li>narrator-------屏幕“讲述人”</li><li>ntmsmgr.msc----移动存储管理器</li><li>ntmsoprq.msc—移动存储管理员操作请求</li><li>netstat -an----(TC)命令检查接口</li><li>syncapp--------创建一个公文包</li><li>sysedit--------系统配置编辑器</li><li>sigverif-------文件签名验证程序</li><li>sndrec32-------录音机</li><li>shrpubw--------创建共享文件夹</li><li>secpol.msc-----本地安全策略</li><li>syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</li><li>services.msc—本地服务设置</li><li>Sndvol32-------音量控制程序</li><li>sfc.exe--------系统文件检查器</li><li>sfc /scannow—windows文件保护</li><li>tsshutdn-------60秒倒计时关机命令</li><li><ol start="84"><li>tsshutdn-------60秒倒计时关机命令</li></ol></li><li>tourstart------xp简介（安装完成后出现的漫游xp程序）</li><li>taskmgr--------任务管理器</li><li>eventvwr-------事件查看器</li><li>eudcedit-------造字程序</li><li>explorer-------打开资源管理器</li><li>packager-------对象包装程序</li><li>perfmon.msc----计算机性能监测程序</li><li>progman--------程序管理器</li><li>regedit.exe----注册表</li><li>rsop.msc-------组策略结果集</li><li>regedt32-------注册表编辑器</li><li>rononce -p ----15秒关机</li><li>regsvr32 /u *.dll----停止dll文件运行</li><li>regsvr32 /u zipfldr.dll------取消ZIP支持</li><li>cmd.exe--------CMD命令提示符</li><li>chkdsk.exe-----Chkdsk磁盘检查</li><li>certmgr.msc----证书管理实用程序</li><li>calc-----------启动计算器</li><li>charmap--------启动字符映射表</li><li>cliconfg-------SQL SERVER 客户端网络实用程序</li><li>Clipbrd--------剪贴板查看器</li><li>conf-----------启动netmeeting</li><li>compmgmt.msc—计算机管理</li><li>cleanmgr-------垃圾整理</li><li>ciadv.msc------索引服务程序</li><li>osk------------打开屏幕键盘</li><li>odbcad32-------ODBC数据源管理器</li><li>oobe/msoobe /a----检查XP是否激活</li><li>lusrmgr.msc----本机用户和组</li><li>logoff---------注销命令</li><li>iexpress-------木马捆绑工具，系统自带</li><li>Nslookup-------IP地址侦测器</li><li>fsmgmt.msc-----共享文件夹管理器</li><li>utilman--------辅助工具管理器</li><li>gpedit.msc-----组策略</li><li>explorer-------打开资源管理器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;starta-cmd命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#starta-cmd命令&quot;&gt;&lt;/a&gt; starta-cmd命令&lt;/h1&gt;
&lt;h2 id=&quot;start&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
      <category term="Windows命令" scheme="https://xiaowuyoucy.github.io/categories/Windows%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>cpp单词</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/28/bcck01cpp%E5%8D%95%E8%AF%8D/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/28/bcck01cpp单词/</id>
    <published>2021-04-28T13:58:43.000Z</published>
    <updated>2021-04-28T15:19:07.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day-1"><a class="markdownIt-Anchor" href="#day-1"></a> day 1</h1><p>asm</p><h3 id="auto"><a class="markdownIt-Anchor" href="#auto"></a> auto</h3><p><img src="/images/javawz/1619619876725.png" alt="1619619876725"></p><p><br><br>boolbreakcase<br><br></p><h3 id="catch"><a class="markdownIt-Anchor" href="#catch"></a> catch</h3><p><img src="/images/javawz/1619619952264.png" alt="1619619952264"></p><p>​<br><br>charclassoperatorconst</p><p>const_castcontinue<br><br></p><h3 id="default"><a class="markdownIt-Anchor" href="#default"></a> default</h3><p><img src="/images/javawz/1619620002159.png" alt="1619620002159"></p><p><br><br>deletedo</p><p>double<br><br></p><h3 id="dynamic_cast"><a class="markdownIt-Anchor" href="#dynamic_cast"></a> dynamic_cast</h3><p><img src="/images/javawz/1619620060785.png" alt="1619620060785"></p><p>​<br><br>elseenum<br><br></p><h3 id="explicit"><a class="markdownIt-Anchor" href="#explicit"></a> explicit</h3><p><img src="/images/javawz/1619620100751.png" alt="1619620100751"><br><br></p><h3 id="export"><a class="markdownIt-Anchor" href="#export"></a> export</h3><p><img src="/images/javawz/1619620129112.png" alt="1619620129112"><br><br></p><h3 id="extern"><a class="markdownIt-Anchor" href="#extern"></a> extern</h3><p><img src="/images/javawz/1619620172632.png" alt="1619620172632"><br><br>false</p><p><img src="/images/javawz/1619620201169.png" alt="1619620201169"><br><br></p><p>floatfor<br><br></p><h3 id="friend"><a class="markdownIt-Anchor" href="#friend"></a> friend</h3><p><img src="/images/javawz/1619620232782.png" alt="1619620232782"><br><br></p><p>​gotoifinlineintlong<br><br></p><h3 id="mutable"><a class="markdownIt-Anchor" href="#mutable"></a> mutable</h3><p><img src="/images/javawz/1619620269069.png" alt="1619620269069"><br><br></p><p>​namespacenew<br><br></p><h3 id="private"><a class="markdownIt-Anchor" href="#private"></a> private</h3><p><img src="/images/javawz/1619620314328.png" alt="1619620314328"><br><br></p><h3 id="protected"><a class="markdownIt-Anchor" href="#protected"></a> protected</h3><p><img src="/images/javawz/1619620340059.png" alt="1619620340059"><br><br></p><p>​public<br></p><h3 id="register"><a class="markdownIt-Anchor" href="#register"></a> register</h3><p><img src="/images/javawz/1619620380403.png" alt="1619620380403"><br><br></p><h3 id="reinterpret_cast"><a class="markdownIt-Anchor" href="#reinterpret_cast"></a> reinterpret_cast</h3><p><img src="/images/javawz/1619620417007.png" alt="1619620417007"><br><br></p><p>return</p><p>short<br><br></p><h3 id="signed"><a class="markdownIt-Anchor" href="#signed"></a> signed</h3><p><img src="/images/javawz/1619620448286.png" alt="1619620448286"><br><br></p><p>​sizeofstaticstatic_caststructswitch</p><h3 id="template"><a class="markdownIt-Anchor" href="#template"></a> template</h3><p><img src="/images/javawz/1619620493551.png" alt="1619620493551"><br><br></p><p>this</p><h3 id="throw"><a class="markdownIt-Anchor" href="#throw"></a> throw</h3><p><img src="/images/javawz/1619620527031.png" alt="1619620527031"><br><br></p><p>​truetrytypedeftypeidtypenameunionunsigned</p><p>using</p><h3 id="virtual"><a class="markdownIt-Anchor" href="#virtual"></a> virtual</h3><p><img src="/images/javawz/1619620595859.png" alt="1619620595859"><br><br></p><p>​void</p><h3 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> volatile</h3><p><img src="/images/javawz/1619620621013.png" alt="1619620621013"><br><br></p><p>​wchar_t</p><p><strong>1. asm</strong></p><p>asm (指令字符串)：允许在 C++ 程序中嵌入汇编代码。</p><p><strong>2. auto</strong></p><p>auto（自动，automatic）是存储类型标识符，表明变量&quot;自动&quot;具有本地范围，块范围的变量声明（如for循环体内的变量声明）默认为auto存储类型。</p><p><strong>3. bool</strong></p><p>bool（布尔）类型，C++ 中的基本数据结构，其值可选为 true（真）或者 false（假）。C++ 中的 bool 类型可以和 int 混用，具体来说就是 0 代表 false，非 0 代表 true。bool 类型常用于条件判断和函数返回值。</p><p><strong>4. break</strong></p><p>break（中断、跳出），用在switch语句或者循环语句中。程序遇到 break 后，即跳过该程序段，继续后面的语句执行。</p><p><strong>5. case</strong></p><p>用于 switch 语句中，用于判断不同的条件类型。</p><p><strong>6. catch</strong></p><p>catch 和 try 语句一起用于异常处理。</p><p><strong>7. char</strong></p><p>char（字符，character）类型，C++ 中的基本数据结构，其值一般为 0~255 的 int。这 256 个字符对应着 256 个 ASCII 码。char 类型的数据需要用单引号 ’ 括起来。</p><p><strong>8.class</strong></p><p>class（类）是 C++ 面向对象设计的基础。使用 class 关键字声明一个类。</p><p><strong>9. const</strong></p><p>const（常量的，constant）所修饰的对象或变量不能被改变，修饰函数时，该函数不能改变在该函数外面声明的变量也不能调用任何非const函数。在函数的声明与定义时都要加上const，放在函数参数列表的最后一个括号后。在 C++ 中，用 const 声明一个变量，意味着该变量就是一个带类型的常量，可以代替 #define，且比 #define  多一个类型信息，且它执行内链接，可放在头文件中声明；但在 C 中，其声明则必须放在源文件（即 .C 文件）中，在 C 中 const  声明一个变量，除了不能改变其值外，它仍是一具变量。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const double pi(3.14159);</span><br><span class="line">或 </span><br><span class="line">const double pi = 3.14159;</span><br></pre></td></tr></table></figure><p><strong>10. const_cast用法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_cast&lt;type_id&gt; (expression)</span><br></pre></td></tr></table></figure><p>该运算符用来修改类型的 const 或 volatile 属性。除了 const 或 volatile 修饰之外， type_id 和  expression  的类型是一样的。常量指针被转化成非常量指针，并且仍然指向原来的对象；常量引用被转换成非常量引用，并且仍然指向原来的对象；常量对象被转换成非常量对象。</p><p><strong>11. continue</strong></p><p>continue（继续）关键字用于循环结构。它使程序跳过代码段后部的部分，与 break 不同的是，continue 不是进入代码段后的部分执行，而是重新开始新的循环。因而它是&quot;继续循环&quot;之意，不是 break（跳出）。</p><p><strong>12. default</strong></p><p>default（默认、缺省）用于 switch 语句。当 switch 所有的 case 都不满足时，将进入 default 执行。default 只能放在 switch 语句所有的 case 之后，并且是可选的。</p><p><strong>13. delete</strong></p><p>delete（删除）释放程序动态申请的内存空间。delete 后面通常是一个指针或者数组 []，并且只能 delete 通过 new 关键字申请的指针，否则会发生段错误。</p><p><strong>14. do</strong></p><p>do-while是一类循环结构。与while循环不同，do-while循环保证至少要进入循环体一次。</p><p><strong>15. double</strong></p><p>double（双精度）类型，C++ 中的基本数据结构，以双精度形式存储一个浮点数。</p><p><strong>16. dynamic_cast</strong></p><p>dynamic_cast（动态转换），允许在运行时刻进行类型转换，从而使程序能够在一个类层次结构安全地转换类型。dynamic_cast 提供了两种转换方式，把基类指针转换成派生类指针，或者把指向基类的左值转换成派生类的引用。</p><p><strong>17. else</strong></p><p>else 紧跟在 if 后面，用于对 if 不成立的情况的选择。</p><p><strong>18. enum</strong></p><p>enum（枚举）类型，给出一系列固定的值，只能在这里面进行选择一个。</p><p><strong>19. explicit</strong></p><p>explicit（显式的）的作用是&quot;禁止单参数构造函数&quot;被用于自动型别转换，其中比较典型的例子就是容器类型。在这种类型的构造函数中你可以将初始长度作为参数传递给构造函数。</p><p><strong>20. export</strong></p><p>为了访问其他编译单元（如另一代码文件）中的变量或对象，对普通类型（包括基本数据类、结构和类），可以利用关键字  extern，来使用这些变量或对象时；但是对模板类型，则必须在定义这些模板类对象和模板函数时，使用标准 C++ 新增加的关键字  export（导出）。</p><p><strong>21. extern</strong></p><p>extern（外部的）声明变量或函数为外部链接，即该变量或函数名在其它文件中可见。被其修饰的变量（外部变量）是静态分配空间的，即程序开始时分配，结束时释放。用其声明的变量或函数应该在别的文件或同一文件的其它地方定义（实现）。在文件内声明一个变量或函数默认为可被外部使用。在 C++ 中，还可用来指定使用另一语言进行链接，这时需要与特定的转换符一起使用。目前仅支持 C 转换标记，来支持 C 编译器链接。使用这种情况有两种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; 声明语句</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; &#123; 声明语句块 &#125;</span><br></pre></td></tr></table></figure><p><strong>22. false</strong></p><p>false（假的），C++ 的基本数据结构 bool 类型的值之一。等同于 int 的 0 值。</p><p><strong>23. float</strong></p><p>float（浮点数），C++ 中的基本数据结构，精度小于 double。</p><p><strong>24. for</strong></p><p>for 是 C++ 中的循环结构之一。</p><p><strong>25. friend</strong></p><p>friend（友元）声明友元关系。友元可以访问与其有 friend 关系的类中的 private/protected 成员，通过友元直接访问类中的 private/protected 成员的主要目的是提高效率。友元包括友元函数和友元类。</p><p><strong>26. goto</strong></p><p>goto（转到），用于无条件跳转到某一标号处开始执行。</p><p><strong>27. if</strong></p><p>if（如果），C++ 中的条件语句之一，可以根据后面的 bool 类型的值选择进入一个分支执行。</p><p><strong>28. inline</strong></p><p>inline（内联）函数的定义将在编译时在调用处展开。inline 函数一般由短小的语句组成，可以提高程序效率。</p><p><strong>29. int</strong></p><p>int（整型，integer），C++ 中的基本数据结构，用于表示整数，精度小于 long。</p><p><strong>30. long</strong></p><p>long（长整型，long integer），C++ 中的基本数据结构，用于表示长整数。</p><p><strong>31. mutable</strong></p><p>mutable（易变的）是 C++  中一个不常用的关键字。只能用于类的非静态和非常量数据成员。由于一个对象的状态由该对象的非静态数据成员决定，所以随着数据成员的改变，对像的状态也会随之发生变化。如果一个类的成员函数被声明为 const  类型，表示该函数不会改变对象的状态，也就是该函数不会修改类的非静态数据成员。但是有些时候需要在该类函数中对类的数据成员进行赋值，这个时候就需要用到 mutable 关键字。</p><p><strong>32. namespace</strong></p><p>namespace（命名空间）用于在逻辑上组织类，是一种比类大的结构。</p><p><strong>33. new</strong></p><p>new（新建）用于新建一个对象。new 运算符总是返回一个指针。由 new 创建</p><p><strong>34. operator</strong></p><p>operator（操作符）用于操作符重载。这是 C++ 中的一种特殊的函数。</p><p><strong>35. private</strong></p><p>private（私有的），C++ 中的访问控制符。被标明为 private 的字段只能在本类以及友元中访问。</p><p><strong>36. protected</strong></p><p>protected（受保护的），C++ 中的访问控制符。被标明为 protected 的字段只能在本类以及其继承类和友元中访问。</p><p><strong>37. public</strong></p><p>public（公有的），C++ 中的访问控制符。被标明为 public 的字段可以在任何类</p><p><strong>38.register</strong></p><p>register（寄存器）声明的变量称着寄存器变量，在可能的情况下会直接存放在机器的寄存器中；但对 32 位编译器不起作用，当 global  optimizations（全局优化）开的时候，它会做出选择是否放在自己的寄存器中；不过其它与 register  关键字有关的其它符号都对32位编译器有效。</p><p><strong>39. reinterpret_cast</strong></p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinpreter_cast&lt;type-id&gt; (expression)</span><br></pre></td></tr></table></figure><p>type-id 必须是一个指针、引用、算术类型、函数指针或者成员指针。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，在把该整数转换成原类型的指针，还可以得到原先的指针值）。</p><p><strong>40. return</strong></p><p>return（返回）用于在函数中返回值。程序在执行到 return 语句后立即返回，return 后面的语句无法执行到。</p><p><strong>41. short</strong></p><p>short（短整型，short integer），C++ 中的基本数据结构，用于表示整数，精度小于 int。</p><p><strong>42. signed</strong></p><p>signed（有符号），表明该类型是有符号数，和 unsigned 相反。数字类型（整型和浮点型）都可以用 signed 修饰。但默认就是 signed，所以一般不会显式使用。</p><p><strong>43. sizeof</strong></p><p>由于 C++ 每种类型的大小都是由编译器自行决定的，为了增加可移植性，可以用 sizeof 运算符获得该数据类型占用的字节数。</p><p><strong>44. static</strong></p><p>static（静态的）静态变量作用范围在一个文件内，程序开始时分配空间，结束时释放空间，默认初始化为  0，使用时可改变其值。静态变量或静态函数，只有本文件内的代码才可访问它，它的名字（变量名或函数名）在其它文件中不可见。因此也称为&quot;文件作用域&quot;。在 C++ 类的成员变量被声明为  static（称为静态成员变量），意味着它被该类的所有实例所共享，也就是说当某个类的实例修改了该静态成员变量，其修改值为该类的其它所有实例所见；而类的静态成员函数也只能访问静态成员（变量或函数）。类的静态成员变量必须在声明它的文件范围内进行初始化才能使用，private 类型的也不例外。</p><p><strong>45. static_cast</strong></p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static_cast &lt; type-id &gt; ( expression )</span><br></pre></td></tr></table></figure><p>该运算符把 expression 转换为 type-id 类型，但没有运行时类型检查来保证转换的安全性。它主要有如下几种用法：</p><ul><li>① 用于类层次结构中基类和子类之间指针或引用的转换。进行上行转换（把子类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成子类表示）时，由于没有动态类型检查，所以是不安全的。</li><li>② 用于基本数据类型之间的转换，如把 int 转换成 char，把 int 转换成 enum。这种转换的安全性也要开发人员来保证。</li><li>③ 把空指针转换成目标类型的空指针。</li><li>④ 把任何类型的表达式转换成void类?</li></ul><p><strong>注意</strong> static_cast 不能转换掉 expression 的 const、volitale、或者 __unaligned 属性。</p><p><strong>46. struct</strong></p><p>struct（结构）类型，类似于 class 关键字，与 C 语言兼容（class 关键字是不与 C 语言兼容的），可以实现面向对象程序设计。</p><p><strong>47. switch</strong></p><p>switch（转换）类似于 if-else-if 语句，是一种多分枝语句。它提供了一种简洁的书写，并且能够生成效率更好的代码。但是，switch 后面的判断只能是int（char也可以，但char本质上也是一种int类型）。switch 语句最后的 default 分支是可选的。</p><p><strong>48. template</strong></p><p>template（模板），C++ 中泛型机制的实现。</p><p><strong>49. this</strong></p><p>this 返回调用者本身的指针。</p><p><strong>50. throw</strong></p><p>throw（抛出）用于实现 C++ 的异常处理机制，可以通过 throw 关键字&quot;抛出&quot;一个异常。</p><p><strong>51. true</strong></p><p>true（真的），C++ 的基本数据结构 bool 类型的值之一。等同于 int 的非 0 值。</p><p><strong>52. try</strong></p><p>try（尝试）用于实现 C++ 的异常处理机制。可以在 try 中调用可能抛出异常的函数，然后在 try 后面的 catch 中捕获并进行处理。</p><p><strong>53. typedef</strong></p><p>typedef（类型定义，type define），其格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef  类型 定义名;</span><br></pre></td></tr></table></figure><p>类型说明定义了一个数据类型的新名字而不是定义一种新的数据类型。定义名表示这个类型的新名字。</p><p><strong>54. typeid</strong></p><p>指出指针或引用指向的对象的实际派生类型。</p><p><strong>55. typename</strong></p><p>typename（类型名字）关键字告诉编译器把一个特殊的名字解释成一个类型。在下列情况下必须对一个 name 使用 typename 关键字：</p><ul><li>1．  一个唯一的name（可以作为类型理解），它嵌套在另一个类型中的。</li><li>2．  依赖于一个模板参数，就是说：模板参数在某种程度上包含这个name。当模板参数使编译器在指认一个类型时产生了误解。</li></ul><p><strong>56. union</strong></p><p>union（联合），类似于 enum。不同的是 enum 实质上是 int 类型的，而 union 可以用于所有类型，并且其占用空间是随着实际类型大小变化的。</p><p><strong>57. unsigned</strong></p><p>unsigned（无符号），表明该类型是无符号数，和 signed 相反。</p><p><strong>58. using</strong></p><p>表明使用 namespace。</p><p><strong>59. virtual</strong></p><p>virtual（虚的），C++ 中用来实现多态机制。</p><p><strong>60. void</strong></p><p>void（空的），可以作为函数返回值，表明不返回任何数据；可以作为参数，表明没有参数传入（C++中不是必须的）；可以作为指针使用。</p><p><strong>61. volatile</strong></p><p>volatile（不稳定的）限定一个对象可被外部进程（操作系统、硬件或并发线程等）改变，声明时的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int volatile nVint;</span><br></pre></td></tr></table></figure><p>这样的声明是不能达到最高效的，因为它们的值随时会改变，系统在需要时会经常读写这个对象的值。因此常用于像中断处理程序之类的异步进程进行内存单元访问。</p><p><strong>62. wchar_t</strong></p><p>wchar_t 是宽字符类型，每个 wchar_t 类型占 2 个字节，16 位宽。汉字的表示就要用到 wchar_t。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;day-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#day-1&quot;&gt;&lt;/a&gt; day 1&lt;/h1&gt;
&lt;p&gt;asm&lt;/p&gt;
&lt;h3 id=&quot;auto&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#auto&quot;
      
    
    </summary>
    
      <category term="编程词汇" scheme="https://xiaowuyoucy.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%8D%E6%B1%87/"/>
    
    
  </entry>
  
  <entry>
    <title>linux1-3</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/28/002linux1-3/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/28/002linux1-3/</id>
    <published>2021-04-28T13:17:57.000Z</published>
    <updated>2021-04-28T13:54:38.465Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1">快捷键</a></li><li><a href="#2">目录</a></li><li><a href="#3">ls和tree的使用</a></li><li><a href="#4">文件目录和文件的创建</a></li><li><a href="#a5">删除目录和文件</a></li><li><a href="#6">文件和目录的拷贝</a></li><li><a href="#7">查看文件内容</a></li><li><a href="#8">mv命令</a></li><li><a href="#9">文件的检索</a></li><li><a href="#10">od 查看二进制文件</a></li><li><a href="#11">软件的安装和卸载</a></li><li><a href="#12">U盘挂载和卸载</a></li><li><a href="#13">ftp服务器配置 <code>vsftpd</code></a></li></ul><p>终端：(虚拟终端)  所有输入输出设备总称</p><p>shell： 命令解析器</p><p>bash： bore again shell 命令解析器。</p><p><span id="1"></span></p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键:</h3><p>命令和路径补齐: tab</p><h4 id="主键盘快捷键"><a class="markdownIt-Anchor" href="#主键盘快捷键"></a> 主键盘快捷键:</h4><p>​ 1).历史命令切换:<br>​     历史命令:history<br>​     向上遍历: ctrl + p<br>​     向下遍历: ctrl + n</p><h4 id="2光标移动"><a class="markdownIt-Anchor" href="#2光标移动"></a> 2).光标移动:</h4><p>   向左: ctrl + b<br>   向右: ctrl + f<br> 移动到头部: ctrl + a<br>  移动到尾部: ctrl + e</p><h4 id="3删除字符"><a class="markdownIt-Anchor" href="#3删除字符"></a> 3).删除字符:</h4><p>    删除光标后边的字符: ctrl + d<br>   删除光标前面的字符: ctrl + h<br> 删除光标前面的所有内容: ctrl + u</p><p><span id="2"></span></p><h3 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h3><p> / 根目录<br> ls /</p><p> /bin  常用的命令</p><p> cd /bin  进入bin目录</p><p> /boot 开机启动项文件</p><p> /dev  设备文件</p><p> /etc 配置文件</p><p> /home 主目录,存放用户</p><p> /lib  动态链接库(共享库)</p><p> /lost-found  存放文件碎片</p><p> /media  挂载外设 U盘或光盘等等</p><p> /mnt  手动挂载外设到这个目录</p><p> /opt 第三方软件</p><p> /root 超级用户目录</p><p> /sbin 管理员使用的系统管理程序</p><p> /usr 用户软件资源目录(用户的软件或文件)</p><p> /usr/bin 系统用户的应用程序</p><p> /usr/sbin 超级用户使用的管理程序和系统守护程序</p><p> /usr/src 内核源码默认的放置目录</p><p> ctrl + l 清屏,或clear</p><p>绝对路径 从/开始<br>相对路径<br> ./当前路径<br> …/上一级路径<br> cd -  两个相邻目录切换<br> cd ~  切换到当前用户目录<br> cd  切换到用户目录</p><h3 id="yxc19981cyc~"><a class="markdownIt-Anchor" href="#yxc19981cyc~"></a> yxc19981c@yc:~$</h3><p>  yxc19981c  用户名<br>  yc 主机名<br>  ~ 用户目录<br>  $普通用户</p><p>  超级用户root   切换到超级用户 sudo su  或 su root</p><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">rw-</th><th>r–</th><th>r–</th><th>1</th><th>root</th><th>root</th><th>1937</th><th>9月   2  2020</th><th style="text-align:center">ucontext.h</th></tr></thead><tbody><tr><td style="text-align:center">文件类型</td><td style="text-align:center">所有者</td><td>所属组</td><td>其他人</td><td>硬连接数</td><td>文件所有者</td><td>文件所属组</td><td>文件大小</td><td>日期</td><td style="text-align:center">文件名</td></tr></tbody></table><p>文件类型：</p><ol><li><p> 文件  “-”</p></li><li><p> 目录  “d”</p></li><li><p> 软连接 “l”  --快捷方式</p></li><li><p> 管道   “p”</p></li><li><p> 套接字 “s”</p></li><li><p> 字符设备 “c”</p></li><li><p> 块设备 “b”</p></li><li><p> 未知类型</p></li></ol><p><span id="3"></span></p><h3 id="ls和tree的使用"><a class="markdownIt-Anchor" href="#ls和tree的使用"></a> ls和tree的使用:</h3><p> ls -a 显示所有文件<br> ls -l 详细显示<br> ls -al<br> ls -h 人性化显示文件大小<br>  tree 目录</p><p> pwd 查看当前位置</p><p><span id="4"></span></p><h3 id="文件目录和文件的创建"><a class="markdownIt-Anchor" href="#文件目录和文件的创建"></a> 文件目录和文件的创建</h3><p> mkdir 目录名<br> mkdir dri/dir/dir -p  递归创建目录<br> mkdir -p dir/dir/dir<br> touch 文件名<br> touch 文件名1 文件名2 … 文件名n</p><p><span id="a5"></span></p><h3 id="删除目录和文件"><a class="markdownIt-Anchor" href="#删除目录和文件"></a> 删除目录和文件</h3><p>​ rmdir 空目录名<br> rm 目录名 -rf (f代表不提示)<br>​ rm 文件名 -f<br> rm 目录名 -ri (i代表提示)<br>​<span id="6"></span></p><h3 id="文件和目录的拷贝"><a class="markdownIt-Anchor" href="#文件和目录的拷贝"></a> 文件和目录的拷贝</h3><p> cp 源文件 目标文件名<br> cp h1 h2  将h1复制一份并命名为h2<br> 如果h2存在将原来内容覆盖<br> cp 源目录 目的目录 -r<br>如果目的目录不存在就将源码目拷贝一份并命名为目的目录<br>如果目的目录存在,就将源目录拷贝一份,复制到目的目录里面</p><p><span id="7"></span></p><h3 id="查看文件内容"><a class="markdownIt-Anchor" href="#查看文件内容"></a> 查看文件内容</h3><p> gedit 文件名</p><p> cat 文件名<br> cat 文件1 文件2 … 文件n   拼接查看文件<br> cat 文件1 | more</p><p> more 文件名<br>  回车  一行<br>  空格  一页<br> 只能往后看<br>  q 退出<br>  ctrl + c 退出</p><p> less 文件名<br>  回车  一行<br>  空格  一页<br> 可以往前后看<br>  q 退出<br>  ctrl + c 退出<br>  ctrl + p 向前一行<br>  ctrl + n 先后一行</p><p> head 文件名      显示文件前十行<br>  head -5 文件名   显示文件前五行</p><p> tail 文件名 显示文件后十行<br>  tail -5 文件名 显示文件后五行</p><p><span id="8"></span></p><h3 id="mv命令"><a class="markdownIt-Anchor" href="#mv命令"></a> mv命令</h3><h5 id="文件改名"><a class="markdownIt-Anchor" href="#文件改名"></a> 文件改名</h5><p> mv 源文件 改名后的文件</p><h5 id="移动"><a class="markdownIt-Anchor" href="#移动"></a>  移动</h5><p>​ mv 文件名 目录名    将文件移动到目录中</p><p><span id="9"></span></p><h3 id="文件的检索"><a class="markdownIt-Anchor" href="#文件的检索"></a> 文件的检索</h3><p> grep -r “文件内容” 路径    -r代表递归检索文件<br> grep -r “printf” /从根目录开始递归查找文件包含&quot;printf&quot;内容的文件</p><p> 文件和目录属性命令<br> wc 获取文本文件的信息<br> yxsdc19c@yscc:/usr/include$ wc time.h<br>  309  1515 10360 time.h<br> 309代表行数 1515代表单词个数 10360代表字节数</p><p><span id="10"></span></p><h3 id="od-查看二进制文件"><a class="markdownIt-Anchor" href="#od-查看二进制文件"></a> od 查看二进制文件</h3><p> od -t 文件名<br>  -t 指定数据的显示格式<br>  -tc ASCII字符<br>  -tx 十六进制数<br>  -td 有符号十进制数<br>  -tu 无符号十进制数<br>  -to 八进制数<br>  -tf 浮点数</p><p><span id="11"></span></p><h3 id="软件的安装和卸载"><a class="markdownIt-Anchor" href="#软件的安装和卸载"></a> 软件的安装和卸载</h3><h4 id="在线安装"><a class="markdownIt-Anchor" href="#在线安装"></a> 在线安装</h4><p> 安装 sudo apt-get install 软件名<br> 卸载 sudo apt-get remove  软件名<br> 更新 sudo apt-get update  更新软件列表<br> 软件列表存放的是软件名字和下载地址</p><p> 清理所有软件安装包 sudo apt-get clean<br> 实际清理的是: /var/cache/apt/archives目录下的.deb文件</p><h4 id="deb包安装"><a class="markdownIt-Anchor" href="#deb包安装"></a> deb包安装</h4><p> 安装 sudo dpkg -i xxx.deb</p><p> 卸载 sudo dpkg -r xxx</p><h4 id="源码安装"><a class="markdownIt-Anchor" href="#源码安装"></a> 源码安装</h4><p> 1.解压缩源代码包<br> 2.进入到安装目录</p><p> 3.检测文件是否缺失,创建Makefile,检测编译环境: ./configure<br> 4.编译源码 生成库和可以执行程序:make<br> 5.把库和可执行程序,安装到系统目录下: sudo make install<br> 6.删除和卸载软件:sudo make distclean<br> 7.上述安装步骤并不是绝对的,应该先查看附带的README文件</p><p><span id="12"></span></p><h3 id="u盘挂载和卸载"><a class="markdownIt-Anchor" href="#u盘挂载和卸载"></a> U盘挂载和卸载</h3><p> 卸载: umount 设备文件名<br> 挂载: mount 设备文件名 挂载路径<br> 将外设挂载到非mnt目录时,会临时覆盖原来内容,卸载之后会恢复</p><p><span id="13"></span></p><h3 id="ftp服务器配置-vsftpd"><a class="markdownIt-Anchor" href="#ftp服务器配置-vsftpd"></a> ftp服务器配置  <code>vsftpd</code></h3><p> 作用:文件上传和下载</p><p> ftp服务器配置<br> 配置文件在<code>/etc/vsftpd.conf</code></p><pre><code>anonymous_enable=YES  允许匿名用户登录write_enable=YES   实名登录用户拥有写的权限local_umask=022 设置本地掩码为022anon_upload_enable=YES  匿名用户拥有写的权限anon_mkdir_write_enable=YES  匿名用户可以在ftp服务器上创建目录</code></pre><h5 id="重启ftp服务"><a class="markdownIt-Anchor" href="#重启ftp服务"></a> 重启ftp服务</h5><p>​<code>sudo service vsftpd restart</code></p><p>实名登录ftp<br> <code>ftp ip地址</code><br> 输入用户<br> 输入密码<br> 退出<br>  <code>bye</code><br>  <code>quit</code><br>  <code>exit</code></p><p>文件上传和下载</p><p> 上传<br>  在什么目录登录的,文件默认从那里找<br>  <code>put 文件名</code></p><p> 下载<br>  <code>get 文件名</code><br>  不允许操作目录,可以打包处理</p><p> 匿名登录服务器<br>  <code>用户名 anonymous</code><br>  不允许匿名用户在任意目录直接切换<br>  只能在一个指定的目录范围内工作<br>  需要在ftp服务器上创建一个匿名用户的目录 --匿名用户的根目录<br>  在配置文件添加  <code>anon_root=/home/yxc19980620c/myFtp/</code><br>  匿名登录默认路径是在<code>/srv/ftp</code><br>  在配置文件<code>/etc/passwd</code>可以查看并修改<br> <code>ftp:x:123:127:ftp daemon,,,:/srv/ftp:/usr/sbin/nologin</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;ls和tree的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;文件目录和文件的创建&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0023-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0023-深拷贝和浅拷贝/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T16:12:56.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝"><a class="markdownIt-Anchor" href="#深拷贝和浅拷贝"></a> 深拷贝和浅拷贝</h1><p>字符串如果进行浅拷贝会出现以下问题:</p><p>假设有两个char类型指针a,b指向同一个内存空间</p><p>当a被释放时,b还未修改,再次使用b时就会出现段错误(Linux)或内存中断(windows)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher() &#123;</span><br><span class="line">m_id = <span class="number">0</span>;</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数,开辟一个空间给m_name</span></span><br><span class="line">Teacher(<span class="keyword">int</span> id,<span class="keyword">const</span> <span class="keyword">char</span> * name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">m_id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数,开辟一个空间</span></span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; another).."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_name, another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_id = another.m_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印id 和name和name的地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放从堆区开辟的内存</span></span><br><span class="line">~Teacher()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">free</span>(m_name);</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"free"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_id;</span><br><span class="line"><span class="keyword">char</span> * m_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Teacher <span class="title">tc1</span><span class="params">(<span class="number">123</span>, <span class="string">"xiaoh"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">tc2</span><span class="params">(tc1)</span></span>;</span><br><span class="line"></span><br><span class="line">tc1.print();</span><br><span class="line">tc2.print();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深拷贝和浅拷贝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#深拷贝和浅拷贝&quot;&gt;&lt;/a&gt; 深拷贝和浅拷贝&lt;/h1&gt;
&lt;p&gt;字符串如果进行浅拷贝会出现以下问题:&lt;/p&gt;
&lt;p&gt;假设有两个char类型指针a,b指向同一个内存空间&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类中默认函数的隐藏条件</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0022-%E7%B1%BB%E4%B8%AD%E9%BB%98%E8%AE%A4%E5%87%BD%E6%95%B0%E7%9A%84%E9%9A%90%E8%97%8F%E6%9D%A1%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0022-类中默认函数的隐藏条件/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T13:27:28.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类中默认函数的隐藏条件"><a class="markdownIt-Anchor" href="#类中默认函数的隐藏条件"></a> 类中默认函数的隐藏条件</h1><h3 id="编译器不提供默认无参构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认无参构造函数的条件"></a> 编译器不提供默认无参构造函数的条件:</h3><p>1.显示的提供一个有参或无参构造函数</p><p>2.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供默认拷贝构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认拷贝构造函数的条件"></a> 编译器不提供默认拷贝构造函数的条件</h3><p>1.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供析构函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供析构函数的条件"></a> 编译器不提供析构函数的条件</h3><p>1.显示的提供了一个析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">默认提供的函数</span></span><br><span class="line"><span class="comment">B() &#123;</span></span><br><span class="line"><span class="comment">//默认的无惨构造函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">B(const B&amp; b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">m_b = b.m_b; //默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">p = b.p;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果显示的写了一个普通构造函数， 会隐藏默认的无惨构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个拷贝构造函数 ，会隐藏默认的无参构造函数和默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个析构函数， 会隐藏默认的析构函数</span></span><br><span class="line">B(<span class="keyword">const</span> B&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的构造函数</span></span><br><span class="line"><span class="comment">如果普通构造函数，提供了一个显示的构造， 那么这个无参的默认构造就会被隐藏。 不会把拷贝构造函数隐藏掉</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">A(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">m_a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">A(const A &amp; a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   m_a = a;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//显示的提供一个拷贝构造的函数的时候，默认的拷贝构造函数就会被隐藏</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"显示提供的拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_a = a.m_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 默认的析构函数</span></span><br><span class="line"><span class="comment"> ~A()</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有提供一个显示的析构函数，才会将默认的析构覆盖点</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A的析构函数 调用 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">aObj</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//当你不提供任何构造函数的时候， 系统会有一个默认的构造函数</span></span><br><span class="line">A aObj2 = aObj;  <span class="comment">//调用了aObj2的拷贝构造函数</span></span><br><span class="line"><span class="comment">//A aObj2(aObj);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类中默认函数的隐藏条件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类中默认函数的隐藏条件&quot;&gt;&lt;/a&gt; 类中默认函数的隐藏条件&lt;/h1&gt;
&lt;h3 id=&quot;编译器不提供默认无参构造函数的条件&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0021-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0021-拷贝构造函数/</id>
    <published>2021-04-26T12:41:44.000Z</published>
    <updated>2021-04-26T13:06:54.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拷贝构造函数"><a class="markdownIt-Anchor" href="#拷贝构造函数"></a> 拷贝构造函数</h1><p>编译器会默认提供一个浅拷贝的构造函数</p><p>一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(<span class="keyword">const</span> 类名 &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">拷⻉贝构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">test(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"><span class="comment">//赋值操作符函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::<span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是赋值操作符函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t3</span><span class="params">(t2)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">test t4 = t3;<span class="comment">//这里调用的是拷贝构造函数,因为是初始化</span></span><br><span class="line">t4 = t2;  <span class="comment">//这里是调用赋值操作符函数,因为不是初始化</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拷贝构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#拷贝构造函数&quot;&gt;&lt;/a&gt; 拷贝构造函数&lt;/h1&gt;
&lt;p&gt;编译器会默认提供一个浅拷贝的构造函数&lt;/p&gt;
&lt;p&gt;一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>默认的无参构造和析构函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0020-%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0020-默认的无参构造和析构函数/</id>
    <published>2021-04-26T12:32:36.000Z</published>
    <updated>2021-04-26T12:37:41.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认的无参构造和析构函数"><a class="markdownIt-Anchor" href="#默认的无参构造和析构函数"></a> 默认的无参构造和析构函数</h1><p>不写构造函数时,编译器会默认提供一个无参构造函数</p><p>如果显示的提供了一个构造函数,编译器将不再提供无参构造函数</p><p>如果显示提供了一个析构函数,编译器将不再提供构造函数</p><p>如果手动添加了一个有参构造函数,就需要根据情况添加一个无参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造函数。 就是一个无参数的构造函数，</span></span><br><span class="line"><span class="comment">//如果不显示提供构造函数，系统就是调用默认的构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test() &#123;&#125; 默认的构造函数，已经手动提供，默认就被隐藏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们提供了一个显示的构造函数，那么默认的构造函数就被隐藏掉了。</span></span><br><span class="line"><span class="comment">//构造函数一旦手动提供， 默认将不复存在。</span></span><br><span class="line">Test(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">m_x = x;</span><br><span class="line">m_y = y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了有参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数的构造函数</span></span><br><span class="line">Test()&#123;</span><br><span class="line">m_x = <span class="number">0</span>;</span><br><span class="line">m_y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了无参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数 ，想通过另一个Test对象 another 将本对象进行拷贝</span></span><br><span class="line">Test(<span class="keyword">const</span> Test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">m_x = another.m_x;</span><br><span class="line">m_y = another.m_y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等号操作符</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">m_x = t.m_x;</span><br><span class="line">m_y = t.m_y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x : "</span> &lt;&lt; m_x &lt;&lt; <span class="string">", y : "</span> &lt;&lt; m_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个析构函数</span></span><br><span class="line">~Test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Test（）析构函数被执行了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; m_x &lt;&lt; <span class="string">", "</span> &lt;&lt; m_y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">"被析构了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_x;</span><br><span class="line"><span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1; <span class="comment">//调用无参的构造函数</span></span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="comment">//Test t3(10, 20, 30);</span></span><br><span class="line">t2.printT();</span><br><span class="line"><span class="function">Test <span class="title">t3</span><span class="params">(t2)</span></span>; <span class="comment">//调用t3的拷贝构造函数  //调用拷贝构造函数的方式</span></span><br><span class="line">t3.printT();</span><br><span class="line"><span class="comment">//Test t4 = t2; // 依然是调用t4的拷贝构造函数，</span></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t4</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>; <span class="comment">//调用t4 的两个参数的构造函数</span></span><br><span class="line"></span><br><span class="line">Test t5; <span class="comment">//先调用无惨构造。</span></span><br><span class="line">t5 = t2; <span class="comment">//不会调用拷贝构造函数 //调用=号重载操作符  赋值操作符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数的调用顺序， 跟对象的构造顺序相反， 谁先构造，谁最后一个被析构。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;默认的无参构造和析构函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#默认的无参构造和析构函数&quot;&gt;&lt;/a&gt; 默认的无参构造和析构函数&lt;/h1&gt;
&lt;p&gt;不写构造函数时,编译器会默认提供一个无参构造函数&lt;/p&gt;
&lt;p&gt;如果显示的提供了一个
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>构造和析构</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0019-%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0019-构造和析构/</id>
    <published>2021-04-26T12:09:33.000Z</published>
    <updated>2021-04-26T12:26:06.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造和析构"><a class="markdownIt-Anchor" href="#构造和析构"></a> 构造和析构</h1><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>C++中的类可以定义与类名相同的特殊成员函数，这种与类名相同的成员函数叫做构造函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(形式参数)</span><br><span class="line">&#123;</span><br><span class="line">构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(形参)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用</h4><p><code>自动调用</code>：一般情况下C++编译器会自动调用构造函数.<br><code>手动调用</code>：在一些情况下则需要手工调用构造函数.</p><h4 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则:</h4><p>1 在对象创建时自动调用,完成初始化相关工作。<br>2 无返回值,与类名同,默认无参,可以重载,可默认参数。<br>3 一经实现,默认不复存在。</p><h3 id="析构函数"><a class="markdownIt-Anchor" href="#析构函数"></a> 析构函数</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>C++中的类可以定义一个特殊的成员函数清理对象，这个特殊的成员函数叫做析构函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~类名()</span><br><span class="line">&#123;</span><br><span class="line">析构体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规则-2"><a class="markdownIt-Anchor" href="#规则-2"></a> 规则:</h4><p>1 对象销毁时,自动调用。完成销毁的善后工作。<br>2 无返值 ,与类名同。无参。不可以重载与默认参数</p><p><code>析构函数的作用,并不是删除对象,而在对象销毁前完成的一些清理工作。</code></p><h4 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构造和析构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造和析构&quot;&gt;&lt;/a&gt; 构造和析构&lt;/h1&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造函数&quot;&gt;&lt;/a&gt; 构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类分成多文件</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0018-%E7%B1%BB%E5%88%86%E6%88%90%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0018-类分成多文件/</id>
    <published>2021-04-26T10:10:39.000Z</published>
    <updated>2021-04-26T10:32:21.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类分成多文件"><a class="markdownIt-Anchor" href="#类分成多文件"></a> 类分成多文件</h1><h3 id="circleh"><a class="markdownIt-Anchor" href="#circleh"></a> circle.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> m_R;</span><br><span class="line"><span class="keyword">double</span> m_area;</span><br><span class="line"><span class="keyword">double</span> m_girth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="circlecpp"><a class="markdownIt-Anchor" href="#circlecpp"></a> circle.cpp</h3><p>在类的外部创建类方法需要使用作用域名;</p><p><code>函数类型 类名::类方法(函数形参)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getArea() &#123;</span><br><span class="line">m_area = <span class="number">3.14</span> * m_R * m_R;</span><br><span class="line"><span class="keyword">return</span> m_area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getGirth() &#123;</span><br><span class="line">m_girth = <span class="number">2</span> * <span class="number">3.14</span> * m_R;</span><br><span class="line"><span class="keyword">return</span> m_girth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getR() &#123;</span><br><span class="line"><span class="keyword">return</span> m_R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Circle::setR(<span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">m_R = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><p>使用Circle类需要引用类头文件<code>#include&quot;Circle.h&quot;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Circle.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c;</span><br><span class="line">c.setR(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getGirth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getR() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类分成多文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类分成多文件&quot;&gt;&lt;/a&gt; 类分成多文件&lt;/h1&gt;
&lt;h3 id=&quot;circleh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#circleh&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类的封装</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/25/cpp0017-%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/25/cpp0017-类的封装/</id>
    <published>2021-04-24T20:24:57.000Z</published>
    <updated>2021-04-24T20:37:46.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的封装"><a class="markdownIt-Anchor" href="#类的封装"></a> 类的封装</h1><p>面向对象有三大特点， 封装，继承，多态<br>C++将struct 做了功能的增强，struct实际上就是一个class<br>只不过<code>struct</code>的类的内部，默认的访问控制权限是<code>public</code><br>class 的类的内部，默认的访问控制权限是<code>private</code></p><h2 id="输入年月日并判断是否是闰年"><a class="markdownIt-Anchor" href="#输入年月日并判断是否是闰年"></a> 输入年月日,并判断是否是闰年</h2><h3 id="封装前"><a class="markdownIt-Anchor" href="#封装前"></a> 封装前</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化这个结构体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(struct Date &amp; date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"year, month, day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.year;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.month;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印此结构体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">(struct Date &amp;date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"日期是"</span> &lt;&lt; date.year &lt;&lt; <span class="string">"年"</span> &lt;&lt; date.month &lt;&lt; <span class="string">"月"</span> &lt;&lt; date.day &lt;&lt; <span class="string">"日"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为闰年</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">(struct Date &amp;date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (((date.year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (date.year % <span class="number">100</span> != <span class="number">0</span>)) || (date.year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Date</span> <span class="title">date</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传统的C语言开发，面向过程的， 是一个一个函数来操作， C语种最小单元是一个函数</span></span><br><span class="line">init(date);</span><br><span class="line"></span><br><span class="line">printDate(date);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isLeapYear(date) == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"不是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装后"><a class="markdownIt-Anchor" href="#封装后"></a> 封装后</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//类的&#123;&#125;中的所有区域称为 类的 内部， 除了&#123;&#125;区域以外都是 类的外部</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//访问控制权限  //在public标识符下面定义的成员变量和成员函数 均可以在类的外部和类的内部 访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"year, month, day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; month;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"日期是"</span> &lt;&lt; year &lt;&lt; <span class="string">"年"</span> &lt;&lt; month &lt;&lt; <span class="string">"月"</span> &lt;&lt; day &lt;&lt; <span class="string">"日"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">//如果是单个类， 跟private是一样的。 在类的内部能够访问，在类的外部不能够访问</span></span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//在private 访问控制符 下定义的成员变量和成员函数 只能在类的内部访问</span></span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyDate date; <span class="comment">//通过MyDate 类 实例化一个对象</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//c++中 是面向对象进行开发，所有方法都封装在类中， 通过一个一个的对象进行编程。</span></span><br><span class="line">date.init();</span><br><span class="line"><span class="keyword">if</span> (date.isLeapYear() == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"不是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt;"年"&lt;&lt; date.year &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"年"</span> &lt;&lt; date.getYear() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">date.year = 2005;//在类的外部修改了成员变量</span></span><br><span class="line"><span class="comment">date.month;</span></span><br><span class="line"><span class="comment">date.day;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test1();</span></span><br><span class="line">test2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的封装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的封装&quot;&gt;&lt;/a&gt; 类的封装&lt;/h1&gt;
&lt;p&gt;面向对象有三大特点， 封装，继承，多态&lt;br&gt;
C++将struct 做了功能的增强，struct实际上就是一个class&lt;br&gt;

      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类的基本概念</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/25/cpp0016-%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/25/cpp0016-类的基本概念/</id>
    <published>2021-04-24T20:01:19.000Z</published>
    <updated>2021-04-24T20:27:25.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的基本概念"><a class="markdownIt-Anchor" href="#类的基本概念"></a> 类的基本概念</h1><h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span>&#123;</span></span><br><span class="line">类成员变量或方法</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类方法可以直接调用类成员变量或方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"跑起来了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"写字了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; color &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal dog, cat;</span><br><span class="line"><span class="built_in">strcpy</span>(dog.color, <span class="string">"yellow"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(dog.name, <span class="string">"xiaoming"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(cat.name, <span class="string">"xiaohua"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(cat.color, <span class="string">"black"</span>);</span><br><span class="line"></span><br><span class="line">dog.print();</span><br><span class="line">cat.print();</span><br><span class="line"></span><br><span class="line">dog.run();</span><br><span class="line">dog.write();</span><br><span class="line"></span><br><span class="line">cat.run();</span><br><span class="line">cat.write();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>public</code> 公有的,类的外部可以直接调用</p><p><code>private</code>私有的,类的外部不可以直接调用,可以通过方法get或set</p><p><code>protected</code>保护的,在类的外部调用不到,子类可以调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的基本概念&quot;&gt;&lt;/a&gt; 类的基本概念&lt;/h1&gt;
&lt;h3 id=&quot;类的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的定义&quot;&gt;&lt;/a&gt; 类的
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数重载和函数指针</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/23/cpp0015-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%92%8C%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/23/cpp0015-函数重载和函数指针/</id>
    <published>2021-04-22T16:12:36.000Z</published>
    <updated>2021-04-22T17:49:33.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数重载和函数指针"><a class="markdownIt-Anchor" href="#函数重载和函数指针"></a> 函数重载和函数指针</h1><p>函数重载与函数指针<br>当使⽤用重载函数名对函数指针进⾏行赋值时<br>根据重载规则挑选与函数指针参数列表⼀一致的候选者<br>严格匹配候选者的函数类型与函数指针的函数类型</p><p>函数指针，调用的时候是不能够发生函数重载的</p><h3 id="函数指针基本语法"><a class="markdownIt-Anchor" href="#函数指针基本语法"></a> 函数指针基本语法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种函数指针定义</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(My_func)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种函数指针定义</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*My_func2)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//第三种函数指针定义</span></span><br><span class="line"><span class="keyword">int</span>(*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = func;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt;d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 定义一个函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(myfunctype)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义了一个函数类型， 返回值void 参数列表是 int，int   ,, void()(int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 定义一个函数指针类型 </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*myfunctype_pointer)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义了一个函数指针类型， 返回值void 参数列表是 int，int   ,, void(*)(int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1  定义一个函数指针</span></span><br><span class="line">myfunctype * fp1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp1 = func;</span><br><span class="line"></span><br><span class="line">fp1(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 定义一个函数指针</span></span><br><span class="line">myfunctype_pointer fp2 = <span class="literal">NULL</span>;</span><br><span class="line">fp2 = func;</span><br><span class="line">fp2(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 直接定义一个函数指针</span></span><br><span class="line"><span class="keyword">void</span>(*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp3 = func;</span><br><span class="line"></span><br><span class="line">fp3(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" -----------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时的fp3 是 void(*)(int,int)</span></span><br><span class="line"><span class="comment">//fp3(10, 30, 30); //fp3 恒定指向一个 函数入口，void func(int, int) 的函数入口</span></span><br><span class="line"><span class="comment">//fp3(10, 30, 40, 50); //想要通过函数指针，发生函数重载 是不可能。</span></span><br><span class="line">fp3(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(*fp4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = func; <span class="comment">//在堆函数指针赋值的时候，函数指针会根据自己的类型 找到一个重载函数</span></span><br><span class="line"></span><br><span class="line">fp4(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//fp4(10, 10, 10, 10);</span></span><br><span class="line"><span class="comment">//函数指针，调用的时候是不能够发生函数重载的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(*fp5)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = func;<span class="comment">// void func(int ,int ,int ,int )</span></span><br><span class="line">fp5(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数重载和函数指针&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数重载和函数指针&quot;&gt;&lt;/a&gt; 函数重载和函数指针&lt;/h1&gt;
&lt;p&gt;函数重载与函数指针&lt;br&gt;
当使⽤用重载函数名对函数指针进⾏行赋值时&lt;br&gt;
根据重载规则挑选与函数指
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数重载</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/23/cpp0014-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/23/cpp0014-函数重载/</id>
    <published>2021-04-22T16:12:36.000Z</published>
    <updated>2021-04-22T16:38:09.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数重载"><a class="markdownIt-Anchor" href="#函数重载"></a> 函数重载</h1><p>函数重载(Function Overload)：用同一个函数名定义不同的函数，当函<br>数名和不同的参数搭配时函数的含义不同。</p><h3 id="重载规则"><a class="markdownIt-Anchor" href="#重载规则"></a> 重载规则</h3><p>1,函数名相同。<br>2,参数个数不同,参数的类型不同,参数顺序不同,均可构成重载。<br>3,返回值类型不影响重载。</p><h3 id="调用准则"><a class="markdownIt-Anchor" href="#调用准则"></a> 调用准则</h3><p>1,严格匹配,找到则调用。<br>2,通过隐式转换寻求一个匹配,找到则调用。</p><h3 id="编译器调用重载函数的准则"><a class="markdownIt-Anchor" href="#编译器调用重载函数的准则"></a> 编译器调用重载函数的准则:</h3><p>1.将所有同名函数作为候选者<br>2.尝试寻找可行的候选函数<br>3.精确匹配实参<br>4.通过默认参数能够匹配实参<br>5.通过默认类型转换匹配实参<br>6.匹配失败<br>7.最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。<br>8.无法匹配所有候选者，函数未定义，编译失败。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//决定一个函数的  1 返回值， 2 参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span><span class="comment">//void (*fp)(int)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func1 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数重载 是对一种函数的 添加的 意义， 对一个函数名  添加多中不同的实现  （+）</span></span><br><span class="line"><span class="comment">//函数重载， 就是对参数列表的 变换不是 函数返回值的变化</span></span><br><span class="line"><span class="comment">//返回值必须一样，参数列表不同， 并且函数名 相同的函数 都是重载函数</span></span><br><span class="line"><span class="comment">//void func(int a, int b = 10)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">","</span> &lt;&lt;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数 完全相同 也不是一个函数重载</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void func(int a, int b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span> &lt;&lt; b &lt;&lt; <span class="string">", "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值类型不同，不能构成重载</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">char func()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print double "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">float</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"print float"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;a &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print int"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print char"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个 指向void func(int a)的函数指针</span></span><br><span class="line"><span class="comment">//void(*fp)(int) = func;//fp 就是执行 void()(int) 这种函数类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fp(10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="number">10</span>); <span class="comment">//编译器 会根据用户传递的参数类型和个数 进行重载函数的匹配</span></span><br><span class="line"><span class="comment">//如果说函数重载 加上了默认参数， 回导致调用函数的时候出现二义性，</span></span><br><span class="line"><span class="comment">//记住：  函数重载 最好不要有默认参数，</span></span><br><span class="line">func(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">func(<span class="number">10</span>, <span class="number">20</span>, <span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//print(10); //void print(int a)</span></span><br><span class="line"><span class="comment">//print(1.1);//void print(double a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//print(1.1f); // 经过隐式转换 会调用void print(double a)</span></span><br><span class="line"><span class="comment">//print('a'); //经过隐式转化， 'a' -&gt;int   void print(int a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//print("asbdasd");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 严格进行参数列表匹配</span></span><br><span class="line"><span class="comment">//2 如果隐式转换可以找到匹配 那么依然可以调用</span></span><br><span class="line"><span class="comment">//3 如果匹配不到， 直接报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载底层实现name-mangling"><a class="markdownIt-Anchor" href="#重载底层实现name-mangling"></a> 重载底层实现（name mangling）</h3><p>C++利用 name mangling(倾轧)技术,来改名函数名,区分参数不同的同<br>名函数。<br>实现原理:用 <code>v c i f l d</code>表示 <code>void char int float long double</code> 及其引<br>用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a)</span></span>; <span class="comment">// func_c(char a)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> b,<span class="keyword">double</span> c)</span></span>; <span class="comment">//func_cid(char a,int b,double c);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数重载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数重载&quot;&gt;&lt;/a&gt; 函数重载&lt;/h1&gt;
&lt;p&gt;函数重载(Function Overload)：用同一个函数名定义不同的函数，当函&lt;br&gt;
数名和不同的参数搭配时函数的含义不同。&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数的默认参数和占位参数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0013-%E5%87%BD%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0013-函数的默认参数和占位参数/</id>
    <published>2021-04-22T15:48:32.000Z</published>
    <updated>2021-04-22T16:12:03.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数的默认参数和占位参数"><a class="markdownIt-Anchor" href="#函数的默认参数和占位参数"></a> 函数的默认参数和占位参数</h1><h3 id="默认参数规则"><a class="markdownIt-Anchor" href="#默认参数规则"></a> 默认参数规则</h3><p>只有参数列表后面部分的参数才可以提供默认参数值<br>一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参<br>数都必须使用默认参数值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qiuLiFangTiTiJi</span><span class="params">(<span class="keyword">int</span> l = <span class="number">10</span>, <span class="keyword">int</span> w = <span class="number">20</span>, <span class="keyword">int</span> h = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l, w) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l, w, h) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="占位参数"><a class="markdownIt-Anchor" href="#占位参数"></a> 占位参数</h3><p>函数占位参数<br>占位参数只有参数类型声明，⽽而没有参数名声明<br>一般情况下，在函数体内部⽆无法使⽤用占位参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">float</span> = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max2(<span class="number">410</span>,<span class="number">330</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数的默认参数和占位参数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数的默认参数和占位参数&quot;&gt;&lt;/a&gt; 函数的默认参数和占位参数&lt;/h1&gt;
&lt;h3 id=&quot;默认参数规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>内联函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0012-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0012-内联函数/</id>
    <published>2021-04-22T15:30:23.000Z</published>
    <updated>2021-04-22T15:47:32.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内联函数"><a class="markdownIt-Anchor" href="#内联函数"></a> 内联函数</h1><p>c 语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了<br>函数调用 的开销。但是由于宏函数的处理发生在预处理阶段,缺失了语法检测<br>和有可能带来的语意差错</p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点：</h3><p>1）内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直<br>接忽略内联请求。<br>2）C<ins>编译器直接将函数体插入在函数调用的地方 。<br>3）内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)。<br>4）内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型<br>等）。<br>5） 内联函数由 编译器处理，直接将编译后的函数体插入调用的地方，<br>宏代码片段 由预处理器处理， 进行简单的文本替换，没有任何编译过程。<br>6）C</ins>中内联编译的限制：</p><p>  不能存在任何形式的循环语句<br>  不能存在过多的条件判断语句<br>  函数体不能过于庞大<br>  不能对函数进行取址操作<br>  函数内联声明必须在调用语句之前<br>7）编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优<br>势只是省去了函数调用时压栈，跳转和返回的开销。因此，当函数体的执行开<br>销远大于压栈，跳转和返回所用的开销时，那么内联将无意义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> max = Max(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内联函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内联函数&quot;&gt;&lt;/a&gt; 内联函数&lt;/h1&gt;
&lt;p&gt;c 语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了&lt;br&gt;
函数调用 的开销。但是由于宏函数的处理发生在预处理阶段,
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>const引用</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0011-const%E5%BC%95%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0011-const引用/</id>
    <published>2021-04-22T15:26:26.000Z</published>
    <updated>2021-04-26T15:48:11.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="const引用"><a class="markdownIt-Anchor" href="#const引用"></a> const引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const引用一般用在形参上，来限制  被引用的变量不能被修改，</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printX</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; re )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// a必须初始化</span></span><br><span class="line"><span class="comment">//int &amp; b = a;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是一个const 常量， 必须用const 引用来接收它</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;re1 = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re1 "</span> &lt;&lt; re1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re1 "</span> &lt;&lt; re1 &lt;&lt; <span class="string">", x: "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;re2 = <span class="number">10</span>;<span class="comment">// 用const 引用 引用一个字面量</span></span><br><span class="line"><span class="comment">// 当用一个const 引用  去引用一个字面量的时候， 字面量他是没有地址，</span></span><br><span class="line"><span class="comment">//引用是无法 对字面量取地址的， 临时创建一个 int temp， 10 ---&gt;temp</span></span><br><span class="line"><span class="comment">//const int &amp;re2 = temp;</span></span><br><span class="line"><span class="comment">//用re2 就是代表 temp，re2是const的引用，你无法去改变temp的值</span></span><br><span class="line"><span class="comment">//int &amp;re2 = 10;         //非常量引用 必须是左值。 左值就是可以放在=左边的表达式，左值是可以赋值，是有内存空间的</span></span><br><span class="line"><span class="comment">//如果想对一个字面量做引用的话，只能用 const 的引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re2 = "</span> &lt;&lt; re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(re2)"</span> &lt;&lt; <span class="keyword">sizeof</span>(re2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;const引用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#const引用&quot;&gt;&lt;/a&gt; const引用&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>指针引用</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0010-%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0010-指针引用/</id>
    <published>2021-04-22T15:15:14.000Z</published>
    <updated>2021-04-22T15:19:03.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针引用"><a class="markdownIt-Anchor" href="#指针引用"></a> 指针引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_malloc</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> **pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">*pp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针引用做函数参数,优化二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_malloc2</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> * &amp;pp)</span><span class="comment">//pp 代表 *pp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">pp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">my_malloc(<span class="number">100</span>, &amp;p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">my_malloc2(<span class="number">4</span>, p);</span><br><span class="line"></span><br><span class="line">*p = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;指针引用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#指针引用&quot;&gt;&lt;/a&gt; 指针引用&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>引用的本质</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0009-%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0009-引用的本质/</id>
    <published>2021-04-22T14:28:42.000Z</published>
    <updated>2021-04-22T14:32:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用的本质"><a class="markdownIt-Anchor" href="#引用的本质"></a> 引用的本质</h1><p>在研究引用的时候 ，可以将引用理解为 一个 常指针<br>在理解引用的时候， 可以将引用理解为 一个变量的别名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> &amp;a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyTeacher</span><span class="params">(Teacher &amp;t)</span> <span class="comment">//</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t.id = <span class="number">100</span>; <span class="comment">// 如果说t是一个常指针， *t 就是指针指向内存空间  (*t).id = 100</span></span><br><span class="line"><span class="comment">//当你要试图修改或者获取已经初始化的引用的时候， 编译器会有一个隐藏的*的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyA</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span> a)</span>   <span class="comment">//常指针 也是一个常量， 也是必须要初始化，  也不能被修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyB</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">1000</span>; <span class="comment">//a 实际上是一个常量指针， 但是如果你给一个a赋值，编译器会有一个隐形的操作， *</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在研究引用的时候 ，可以将引用理解为 一个 常指针</span></span><br><span class="line"><span class="comment">//在理解引用的时候， 可以将引用理解为 一个变量的别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">20</span>;</span><br><span class="line">Teacher t1 = &#123; <span class="number">1</span>, <span class="string">"zhangsan"</span> &#125;;</span><br><span class="line"></span><br><span class="line">motifyA(&amp;value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"value = "</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">motifyB(value);  <span class="comment">// int value --&gt; int &amp;a  , int&amp; a = value 给引用指定指向哪个变量的时候， 编译器提供又有了一个隐形的操作</span></span><br><span class="line"> <span class="comment">// a = &amp;value;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"value = "</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">motifyTeacher(t1);  <span class="comment">//如果说 motifyTeacher 的形参是一个常指针，Teacher *const t = &amp;t1;</span></span><br><span class="line"><span class="comment">//编译器发现 Teacher &amp;t 形参是一个引用， Teacher &amp;t = &amp;t1;</span></span><br><span class="line"><span class="comment">//当给引用初始化的时候， 会有一个&amp;  的隐形操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyAA</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = <span class="number">100</span>;   <span class="comment">//间接的赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyBB</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> <span class="comment">//int &amp;a = a;    a = &amp;a;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">200</span>; <span class="comment">//*a = 200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//条件一</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">motifyAA(&amp;a); <span class="comment">//int*a = &amp;a; //建立了关联</span></span><br><span class="line"></span><br><span class="line">motifyBB(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c_a = 20;//常量在初始化之后，不能够再修改了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp;re = a; <span class="comment">//引用必须初始化.  引用在初始化之后，也不能够被改变</span></span><br><span class="line">re = b; <span class="comment">// a = b 而不是 让re引用指向b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re = "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">re = <span class="number">100</span>; <span class="comment">//是该的a 还是b？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re = "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 引用 可能是一个 常量？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(TypeA): "</span> &lt;&lt; <span class="keyword">sizeof</span>(TypeA) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(TypeB):"</span> &lt;&lt; <span class="keyword">sizeof</span>(TypeB) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过对引用求大小， 发现不管引用是什么类型 都是4个字节，都跟指针的大小一样。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 引用可能是一个 指针？</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用的本质&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引用的本质&quot;&gt;&lt;/a&gt; 引用的本质&lt;/h1&gt;
&lt;p&gt;在研究引用的时候 ，可以将引用理解为 一个 常指针&lt;br&gt;
在理解引用的时候， 可以将引用理解为 一个变量的别名&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>引用的基本概念</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0008-%E5%BC%95%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0008-引用的基本概念/</id>
    <published>2021-04-22T13:35:32.000Z</published>
    <updated>2021-04-22T19:44:07.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用的基本概念"><a class="markdownIt-Anchor" href="#引用的基本概念"></a> 引用的基本概念</h1><p>给变量起别名</p><h3 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h3><p>1 引用没有定义,是一种关系型声明。声明它和原有某一变量(实体)的关<br>系。故 而类型与原类型保持一致,且不分配内存。与被引用的变量有相同的地<br>址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp; re = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;a = "</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;re = "</span> &lt;&lt; &amp;re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1619099566174.png" alt="1619099566174"></p><p>2 声明的时候必须初始化,一经声明,不可变更。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int &amp;re; //Error</span></span><br><span class="line"><span class="keyword">int</span> &amp;re = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 可对引用,再次引用。多次引用的结果,是某一变量具有多个别名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int &amp;re; //Error</span></span><br><span class="line"><span class="keyword">int</span> &amp;re = a;</span><br><span class="line"><span class="keyword">int</span> &amp;re2 = re;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 &amp;符号前有数据类型时,是引用。其它皆为取地址。</p><p>引用做函数参数或函数返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="comment">//交换两个变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tem = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tem;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结构体变量</span></span><br><span class="line"><span class="function">Student &amp; <span class="title">my_print</span><span class="params">(Student &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student XiaoMing = &#123; <span class="string">"XiaoMing"</span>,<span class="number">100.0f</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">my_swap(a, b);</span><br><span class="line">my_print(XiaoMing);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用的基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引用的基本概念&quot;&gt;&lt;/a&gt; 引用的基本概念&lt;/h1&gt;
&lt;p&gt;给变量起别名&lt;/p&gt;
&lt;h3 id=&quot;规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>枚举的增强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0007-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0007-枚举的增强/</id>
    <published>2021-04-15T15:10:03.000Z</published>
    <updated>2021-04-15T15:11:30.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举的增强"><a class="markdownIt-Anchor" href="#枚举的增强"></a> 枚举的增强</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Son &#123;</span><br><span class="line">xiaom,</span><br><span class="line">xiaoh,</span><br><span class="line">xiaol,</span><br><span class="line">xiaolan,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//可以省略enum关键字不写</span></span><br><span class="line">Son house = xiaom;</span><br><span class="line"><span class="comment">//c++中,枚举变量只能用枚举常量来赋值</span></span><br><span class="line"><span class="comment">//house = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; house &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举的增强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#枚举的增强&quot;&gt;&lt;/a&gt; 枚举的增强&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
</feed>
