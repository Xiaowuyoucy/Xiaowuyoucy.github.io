<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-06-20T00:57:23.179Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>异常类型和异常变量的生命周期</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/20/cpp0073-%E5%BC%82%E5%B8%B8%E7%B1%BB%E5%9E%8B%E5%92%8C%E5%BC%82%E5%B8%B8%E5%8F%98%E9%87%8F%E7%9A%84%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/20/cpp0073-异常类型和异常变量的生命周期/</id>
    <published>2021-06-20T00:14:35.000Z</published>
    <updated>2021-06-20T00:57:23.179Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常类型和异常变量的生命周期"><a class="markdownIt-Anchor" href="#异常类型和异常变量的生命周期"></a> 异常类型和异常变量的生命周期</h1><p>throw的异常是有类型的，可以使，数字、字符串、类对象。</p><p>throw的异常是有类型的，catch严格按照类型进行匹配。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MyException()&#123;&#125;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">MyException(<span class="keyword">const</span> <span class="keyword">char</span> * str)&#123;</span><br><span class="line">mStr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(mStr,str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">MyException(<span class="keyword">const</span> MyException &amp; mE) &#123;</span><br><span class="line"><span class="keyword">this</span> -&gt; mStr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(mE.mStr) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;mStr,mE.mStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mStr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyException() &#123;</span><br><span class="line"><span class="keyword">if</span> (mStr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] mStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"对象析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * mStr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个匿名对象</span></span><br><span class="line"><span class="keyword">throw</span> MyException(<span class="string">"未知异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MyException mE) &#123;</span><br><span class="line">mE.what();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><h4 id="throw抛出去的如果是普通类型或者引用变量它的生命周期是在catch结束后释放掉"><a class="markdownIt-Anchor" href="#throw抛出去的如果是普通类型或者引用变量它的生命周期是在catch结束后释放掉"></a> throw抛出去的如果是普通类型或者引用变量,它的生命周期是在catch结束后释放掉</h4><h4 id="如果throw抛出去的是一个指针那么在进入catch前被释放掉"><a class="markdownIt-Anchor" href="#如果throw抛出去的是一个指针那么在进入catch前被释放掉"></a> 如果throw抛出去的是一个指针,那么在进入catch前被释放掉</h4><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyException</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">MyException()&#123;&#125;</span><br><span class="line"><span class="comment">//有参构造</span></span><br><span class="line">MyException(<span class="keyword">const</span> <span class="keyword">char</span> * str)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"对象构造"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">mStr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(str) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(mStr,str);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造</span></span><br><span class="line">MyException(<span class="keyword">const</span> MyException &amp; mE) &#123;</span><br><span class="line"><span class="keyword">this</span> -&gt; mStr = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="built_in">strlen</span>(mE.mStr) + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;mStr,mE.mStr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">what</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mStr &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~MyException() &#123;</span><br><span class="line"><span class="keyword">if</span> (mStr != <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">delete</span>[] mStr;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"对象析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * mStr;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个匿名对象,如果抛出的是指针,会在进入catch前就释放掉该指针</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;(MyException(未知异常))"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">throw</span> &amp;(MyException(<span class="string">"未知异常"</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建一个匿名对象,抛出一个普通对象,用引用去接</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException(未知异常)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">throw</span> MyException(<span class="string">"未知异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个匿名对象,抛出一个普通对象</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"MyException(未知异常) 用普通对象来接"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">throw</span> MyException(<span class="string">"未知异常"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">catch</span> (MyException * mE) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未知异常"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test02();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MyException &amp; mE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未知异常"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test03();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (MyException  mE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"未知异常"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1624150637188.png" alt="1624150637188"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常类型和异常变量的生命周期&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#异常类型和异常变量的生命周期&quot;&gt;&lt;/a&gt; 异常类型和异常变量的生命周期&lt;/h1&gt;
&lt;p&gt;throw的异常是有类型的，可以使，数字、字符串、类对象。&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>异常接口声明</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/20/cpp0072-%E5%BC%82%E5%B8%B8%E6%8E%A5%E5%8F%A3%E5%A3%B0%E6%98%8E/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/20/cpp0072-异常接口声明/</id>
    <published>2021-06-19T23:55:35.000Z</published>
    <updated>2021-06-20T00:05:55.745Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常接口声明"><a class="markdownIt-Anchor" href="#异常接口声明"></a> 异常接口声明</h1><p>为了加强程序的可读性，可以在函数声明中列出可能抛出的所有异常类<br>型，例如：</p><p><code>void func() throw (A, B, C , D);</code>这个函数func（）能够且只能抛出类<br>型A B C D及其子类型的异常。</p><p>如果在函数声明中没有包含异常接口声明，则次函数可以抛掷任何类型的<br>异常，例如：<br><code>void func();</code></p><p>一个不抛掷任何类型异常的函数可以声明为：<br><code>void func() throw();</code></p><p>如果一个函数抛出了它的异常接口声明所不允许抛出的异常，unexpected<br>函数会被调用，该函数默认行为调用terminate函数中止程序。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//只能抛出int,double,char这三个类型的异常</span></span><br><span class="line"><span class="comment">//在VS中可能抛出其他类型的异常不会出错,但在Linux会报错</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * gStr = <span class="string">"abc"</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span><span class="title">throw</span><span class="params">(<span class="keyword">int</span>,<span class="keyword">double</span>,<span class="keyword">char</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">throw</span> gStr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//不能抛出异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span><span class="title">throw</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以抛出所有类型的异常</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test03</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">int</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">const</span> <span class="keyword">char</span> * y) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">double</span>) &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常接口声明&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#异常接口声明&quot;&gt;&lt;/a&gt; 异常接口声明&lt;/h1&gt;
&lt;p&gt;为了加强程序的可读性，可以在函数声明中列出可能抛出的所有异常类&lt;br&gt;
型，例如：&lt;/p&gt;
&lt;p&gt;&lt;code&gt;void 
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>栈解旋</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/20/cpp0071-%E6%A0%88%E8%A7%A3%E6%97%8B/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/20/cpp0071-栈解旋/</id>
    <published>2021-06-19T23:33:40.000Z</published>
    <updated>2021-06-19T23:41:28.962Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈解旋"><a class="markdownIt-Anchor" href="#栈解旋"></a> 栈解旋</h1><p>异常被抛出后，从进入try块起，到异常被抛掷前，这期间在栈上的构造的<br>所有对象，都会被自动析构。析构的顺序与构造的顺序相反。这一过程称为栈<br>的解旋(unwinding)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"对象构造"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Person() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"对象析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dev</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person p1, p2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dev(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">double</span> y) <span class="comment">//异常是根据类型进行匹配的 可以是catch (double)不接收异常的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"除数为: "</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1624146025433.png" alt="1624146025433"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈解旋&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#栈解旋&quot;&gt;&lt;/a&gt; 栈解旋&lt;/h1&gt;
&lt;p&gt;异常被抛出后，从进入try块起，到异常被抛掷前，这期间在栈上的构造的&lt;br&gt;
所有对象，都会被自动析构。析构的顺序与构造的顺序相反。这一过
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>异常基本语法</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/20/cpp0070-%E5%BC%82%E5%B8%B8%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/20/cpp0070-异常基本语法/</id>
    <published>2021-06-19T23:26:16.000Z</published>
    <updated>2021-06-19T23:33:13.078Z</updated>
    
    <content type="html"><![CDATA[<h1 id="异常基本语法"><a class="markdownIt-Anchor" href="#异常基本语法"></a> 异常基本语法</h1><p>如果抛出异常后,不处理异常,程序会自动结束</p><p>异常是一层层向上抛出的,直到处理异常为止,如果抛到顶层还没有处理,程序自动结束.</p><p>c++的异常是必须处理的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">//抛异常</span><br><span class="line">throw 变量/对象/值/指针  </span><br><span class="line"></span><br><span class="line">try&#123;</span><br><span class="line">//可能会出现异常的语句块</span><br><span class="line">&#125;</span><br><span class="line">catch(类型/类型 变量名)</span><br><span class="line">&#123;</span><br><span class="line">//处理异常</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1624145192251.png" alt="1624145192251"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">dev</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">double</span> y)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (y == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">throw</span> y; <span class="comment">//抛异常</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> x / y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">dev(<span class="number">10</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">try</span> &#123; <span class="comment">//可能会出现异常</span></span><br><span class="line">test01();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">catch</span> (<span class="keyword">double</span> y) <span class="comment">//异常是根据类型进行匹配的 可以是catch (double)不接收异常的值</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test02();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="number">123</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;异常基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#异常基本语法&quot;&gt;&lt;/a&gt; 异常基本语法&lt;/h1&gt;
&lt;p&gt;如果抛出异常后,不处理异常,程序会自动结束&lt;/p&gt;
&lt;p&gt;异常是一层层向上抛出的,直到处理异常为止,如果抛到顶层还没有处
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类型转换</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/20/cpp0069-%E7%B1%BB%E5%9E%8B%E8%BD%AC%E6%8D%A2/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/20/cpp0069-类型转换/</id>
    <published>2021-06-19T21:52:15.000Z</published>
    <updated>2021-06-19T23:09:22.303Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类型转换"><a class="markdownIt-Anchor" href="#类型转换"></a> 类型转换</h1><p>C++提供了4种类型转换，分别处理不同的场合应用</p><h3 id="static_cast-静态类型转换"><a class="markdownIt-Anchor" href="#static_cast-静态类型转换"></a> static_cast 静态类型转换。</h3><p>可以转换基本数据类型和具有继承关系的对象指针或引用</p><p><code>static_cast&lt;目标类型&gt; (标识符)</code></p><p><img src="/images/javawz/1624139983807.png" alt="1624139983807"></p><h3 id="reinterpret_cast重新解释类型转换"><a class="markdownIt-Anchor" href="#reinterpret_cast重新解释类型转换"></a> reinterpret_cast重新解释类型转换。</h3><p>仅仅重新解释类型，但没有进行二进制的转换：</p><p>1. 转换的类型必须是一个指针、引用、算术类型、函数指针或者成员指针。</p><p>2. 在比特位级别上进行转换。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针(先把一个指针转换成一个整数，在把该整数转换成原类型的指针，还可以得到原先的指针值)。但不能将非32bit的实例转成指针。</p><p>3. 最普通的用途就是在函数指针类型之间进行转换。</p><p>4. 很难保证移植性。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*VFun)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">double</span><span class="params">(*DFun)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">VFun vf = <span class="literal">NULL</span>;</span><br><span class="line">DFun df = <span class="keyword">reinterpret_cast</span>&lt;DFun&gt;(vf);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="dynamic_cast-子类和父类之间的多态类型转换"><a class="markdownIt-Anchor" href="#dynamic_cast-子类和父类之间的多态类型转换"></a> dynamic_cast 子类和父类之间的多态类型转换。</h3><p><code>dynamic_cast&lt;目标类型&gt; (标识符)</code></p><p>只能转换具有继承关系的指针或引用,会做类型安全检查</p><p>只能从子类转父类,因为一般子类内存空间是大于等于父类的,如果子类内存空间大于父类，把父类指针转换成子类指针,会越界处理，所以不安全。</p><p>如果转换失败返回NULL</p><p><img src="/images/javawz/1624140927217.png" alt="1624140927217"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * mName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> * mName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Base * pBase = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">Son * pSon = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">Animal * pAnimal = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//pSon = dynamic_cast&lt;Son *&gt;(pBase); 父类指针不能装子类指针</span></span><br><span class="line"><span class="comment">//pSon = dynamic_cast&lt;Son *&gt;(pAnimal); 不具有继承关系的不能转换</span></span><br><span class="line">pBase = <span class="keyword">dynamic_cast</span>&lt;Son *&gt;(pSon); <span class="comment">//子类转父类可以</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="const_cast-去掉const属性转换"><a class="markdownIt-Anchor" href="#const_cast-去掉const属性转换"></a> const_cast 去掉const属性转换。</h3><p><code>const_cast&lt;目标类型&gt;(标识符)</code></p><p>目标类类型只能是指针或引用。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Base</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * mName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Son</span> :</span> <span class="keyword">public</span> Base &#123;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> * mName;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//基本数据类型</span></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp; b = a;</span><br><span class="line"><span class="keyword">int</span> &amp;c = <span class="keyword">const_cast</span>&lt;<span class="keyword">int</span> &amp;&gt;(b);</span><br><span class="line"></span><br><span class="line">c = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test02</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Base * a = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">const</span> Base *b = a;</span><br><span class="line">Base * c = <span class="keyword">const_cast</span>&lt;Base *&gt;(b);</span><br><span class="line">c = <span class="keyword">new</span>(Base);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"==========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> c;</span><br><span class="line">c = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//基础数据类型</span></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="comment">//对象数据类型</span></span><br><span class="line">test02();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类型转换&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类型转换&quot;&gt;&lt;/a&gt; 类型转换&lt;/h1&gt;
&lt;p&gt;C++提供了4种类型转换，分别处理不同的场合应用&lt;/p&gt;
&lt;h3 id=&quot;static_cast-静态类型转换&quot;&gt;&lt;a class=
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类模板中的static成员</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/19/cpp0068-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E4%B8%AD%E7%9A%84static%E6%88%90%E5%91%98/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/19/cpp0068-类模板中的static成员/</id>
    <published>2021-06-18T23:33:17.000Z</published>
    <updated>2021-06-18T23:38:27.036Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类模板中的static成员"><a class="markdownIt-Anchor" href="#类模板中的static成员"></a> 类模板中的static成员</h1><p>类模板中的static成员单独属于每一个实例化出来的类</p><p>也就是说每个具体化类的static成员都是不一样的,没有关联的</p><p>例如有一个模板类A中有一个static成员</p><p>类<code>A&lt;int&gt;</code>和类<code>A&lt;double&gt;</code>都有自己的static成员,他们两个的static成员是不同且没有关联的</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T value;</span><br><span class="line"><span class="keyword">static</span> T a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span> &lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">T</span> <span class="title">A</span>&lt;T&gt;:</span>:a = <span class="number">0</span>;<span class="comment">//类中的静态成员需要在类的外部进行初始化。</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1 模板类通过二次编译根据调用的代码生成了两个不同的类A  一个是A&lt;int&gt; 一个A&lt;char&gt;</span></span><br><span class="line">A&lt;<span class="keyword">int</span>&gt; a1, a2, a3;</span><br><span class="line">A&lt;<span class="keyword">char</span>&gt; b1, b2, b3;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">A&lt;<span class="keyword">int</span>&gt;::a = <span class="number">20</span>; <span class="comment">//改变A&lt;int&gt;的静态成员</span></span><br><span class="line">A&lt;<span class="keyword">char</span>&gt;::a = <span class="string">'X'</span>;<span class="comment">//改变A&lt;char&gt;的静态成员</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a1:a = "</span> &lt;&lt; a1.a &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//20</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b1:a = "</span> &lt;&lt; b1.a &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//'X'</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a2:a = "</span> &lt;&lt; a2.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a3:a = "</span> &lt;&lt; a3.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b2:a= "</span> &lt;&lt; b2.a &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//'X'</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b3:a = "</span> &lt;&lt; b3.a &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//'X'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类模板中的static成员&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板中的static成员&quot;&gt;&lt;/a&gt; 类模板中的static成员&lt;/h1&gt;
&lt;p&gt;类模板中的static成员单独属于每一个实例化出来的类&lt;/p&gt;
&lt;p&gt;也就是说
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类模板的多文件编写</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/19/cpp0067-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%A4%9A%E6%96%87%E4%BB%B6%E7%BC%96%E5%86%99/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/19/cpp0067-类模板的多文件编写/</id>
    <published>2021-06-18T23:18:48.000Z</published>
    <updated>2021-06-18T23:32:09.100Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类模板的多文件编写"><a class="markdownIt-Anchor" href="#类模板的多文件编写"></a> 类模板的多文件编写</h1><p>不建议类模板分多文件编写</p><p>如果多文件编写类模板,在调用实例化模板类要包含cpp实现</p><p>一般的类模板实现文件后缀名是hpp</p><p><img src="/images/javawz/1624058903726.png" alt="1624058903726"></p><p>如果不包含类实现,在调用具体化模板类时,因为编译器是逐个文件进行编译的，所以编译器在当前文件找不到类实现，会认为类实现在其他文件,然后编译器会自动跳过,交给链接器处理,而链接器又找不到具体化函数,就会报错</p><h3 id="h头文件"><a class="markdownIt-Anchor" href="#h头文件"></a> h头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#define  _CRT_SECURE_NO_WARNINGS </span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">template &lt;class T&gt;</span><br><span class="line">class Complex</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Complex();</span><br><span class="line">~Complex();</span><br><span class="line">Complex(T a, T b);</span><br><span class="line">void pirntComplex();</span><br><span class="line"></span><br><span class="line">Complex operator+(Complex &amp;another);</span><br><span class="line"></span><br><span class="line">Complex operator-(Complex &amp;another);</span><br><span class="line">private:</span><br><span class="line">T a;</span><br><span class="line">T b;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="hpp文件"><a class="markdownIt-Anchor" href="#hpp文件"></a> hpp文件</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Complext.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//最终通过第二次编译生成class Complex&lt;int&gt; 是在cpp文件中展开</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">class Complex&lt;int&gt; </span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Complex</span>&lt;T&gt;:</span>:Complex()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Complex</span>&lt;T&gt;:</span>:~Complex()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Complex</span>&lt;T&gt;:</span>:Complex(T a, T b)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">this</span>-&gt;a = a;</span><br><span class="line"><span class="keyword">this</span>-&gt;b = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">Complex</span>&lt;T&gt;:</span>:pirntComplex()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Complex</span>&lt;T&gt; <span class="title">Complex</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>+(Complex&lt;T&gt; &amp;another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a + another.a, <span class="keyword">this</span>-&gt;b + another.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">Complex</span>&lt;T&gt; <span class="title">Complex</span>&lt;T&gt;:</span>:<span class="keyword">operator</span>-(Complex&lt;T&gt; &amp;another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">Complex <span class="title">temp</span><span class="params">(<span class="keyword">this</span>-&gt;a - another.a, <span class="keyword">this</span>-&gt;b - another.b)</span></span>;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Complext.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Complext.hpp"</span> <span class="comment">//不能够引入cpp</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//模板类的 方法的实现不能够用多文件编写。</span></span><br><span class="line"><span class="comment">//如果实现多文件的 由于二次编译 真正的实现体是在cpp文件定义的。需要引入cpp头文件。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">Complex&lt;<span class="keyword">int</span>&gt; c1(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">c1.pirntComplex();</span><br><span class="line"></span><br><span class="line">Complex&lt;<span class="keyword">int</span>&gt; c2(<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Complex&lt;<span class="keyword">int</span>&gt; c3; <span class="comment">//调用无参构造</span></span><br><span class="line">c3 = c1 + c2;</span><br><span class="line"></span><br><span class="line">c3.pirntComplex();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类模板的多文件编写&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板的多文件编写&quot;&gt;&lt;/a&gt; 类模板的多文件编写&lt;/h1&gt;
&lt;p&gt;不建议类模板分多文件编写&lt;/p&gt;
&lt;p&gt;如果多文件编写类模板,在调用实例化模板类要包含cpp实现&lt;/p
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类模板的类外实现</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/19/cpp0066-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%B1%BB%E5%A4%96%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/19/cpp0066-类模板的类外实现/</id>
    <published>2021-06-18T18:13:48.000Z</published>
    <updated>2021-06-18T23:02:47.919Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类模板的类外实现"><a class="markdownIt-Anchor" href="#类模板的类外实现"></a> 类模板的类外实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//在类的外面声明一下友元模板函数</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">class</span> <span class="title">Person</span>;</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">void</span> <span class="title">Show</span>(<span class="title">Person</span>&lt;T&gt; &amp;<span class="title">p</span>);</span></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;<span class="title">ostream</span> &amp; <span class="title">operator</span>&lt;&lt; (ostream &amp; os, Person&lt;T&gt; &amp;p);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">class Person &#123;</span></span><br><span class="line"><span class="class">public:</span></span><br><span class="line"><span class="class">Person();</span></span><br><span class="line"><span class="class">Person(T name);</span></span><br><span class="line"><span class="class">friend ostream &amp; operator&lt;&lt; &lt;&gt; (ostream &amp; os, Person&lt;T&gt; &amp;p);</span></span><br><span class="line"><span class="class">Person&lt;T&gt; operator=(Person&lt;T&gt; &amp; tp);</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">friend void Show&lt;&gt;(Person&lt;T&gt; &amp;p);</span></span><br><span class="line"><span class="class">private:</span></span><br><span class="line"><span class="class">T mName;</span></span><br><span class="line"><span class="class">&#125;;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">void Show(Person&lt;T&gt; &amp;p) &#123;</span></span><br><span class="line"><span class="class">cout &lt;&lt; p.mName &lt;&lt; endl;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">Person&lt;T&gt; Person&lt;T&gt;::operator=(Person&lt;T&gt; &amp; tp)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class">this-&gt;mName = tp.mName;</span></span><br><span class="line"><span class="class">return *this;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">ostream &amp; operator&lt;&lt; (ostream &amp; os, Person&lt;T&gt; &amp;p)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class">os &lt;&lt; p.mName;</span></span><br><span class="line"><span class="class">return os;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">Person&lt;T&gt;::Person()&#123;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">template&lt;class T&gt;</span></span><br><span class="line"><span class="class">Person&lt;T&gt;::Person(T name) &#123;</span></span><br><span class="line"><span class="class">mName = name;</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">void test01() &#123;</span></span><br><span class="line"><span class="class">Person&lt;string&gt; p("小明");</span></span><br><span class="line"><span class="class">Person&lt;string&gt; p2("123");</span></span><br><span class="line"><span class="class">//p2 = p;</span></span><br><span class="line"><span class="class">//cout &lt;&lt; p2 &lt;&lt; endl;</span></span><br><span class="line"><span class="class">//cout &lt;&lt; p &lt;&lt; endl;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">Show(p);</span></span><br><span class="line"><span class="class">Show(p2);</span></span><br><span class="line"><span class="class">&#125;</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">int main(char *argv[], int argc)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="class">test01();</span></span><br><span class="line"><span class="class"></span></span><br><span class="line"><span class="class">return 0;</span></span><br><span class="line"><span class="class">&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类模板的类外实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板的类外实现&quot;&gt;&lt;/a&gt; 类模板的类外实现&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>类模板的类内实现</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/19/cpp0065-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E7%B1%BB%E5%86%85%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/19/cpp0065-类模板的类内实现/</id>
    <published>2021-06-18T16:50:07.000Z</published>
    <updated>2021-06-18T16:58:03.010Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类模板的类内实现"><a class="markdownIt-Anchor" href="#类模板的类内实现"></a> 类模板的类内实现</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,<span class="title">class</span> <span class="title">T2</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T1 mName;</span><br><span class="line">T2 mAge;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()&#123;&#125;</span><br><span class="line">Person(T1 name,T2 age):mName(name),mAge(age) &#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mName &lt;&lt; <span class="string">":"</span> &lt;&lt; mAge &lt;&lt; <span class="string">"岁"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Person&lt;<span class="built_in">string</span>, <span class="keyword">int</span>&gt; p(<span class="string">"小明"</span>,<span class="number">18</span>);</span><br><span class="line">p.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类模板的类内实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板的类内实现&quot;&gt;&lt;/a&gt; 类模板的类内实现&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类模板派生普通类与类模板派生类模板</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/18/cpp0064-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E6%B4%BE%E7%94%9F%E6%99%AE%E9%80%9A%E7%B1%BB%E4%B8%8E%E7%B1%BB%E6%A8%A1%E6%9D%BF%E6%B4%BE%E7%94%9F%E7%B1%BB%E6%A8%A1%E6%9D%BF/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/18/cpp0064-类模板派生普通类与类模板派生类模板/</id>
    <published>2021-06-18T15:47:47.000Z</published>
    <updated>2021-06-18T22:04:31.661Z</updated>
    
    <content type="html"><![CDATA[<h3 id="类模板派生普通类"><a class="markdownIt-Anchor" href="#类模板派生普通类"></a> 类模板派生普通类</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#define _CRT_SECURE_NO_WARNINGS</span><br><span class="line">#include&lt;iostream&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">template&lt;class T&gt;</span><br><span class="line">class A &#123;</span><br><span class="line">public:</span><br><span class="line">T mA;</span><br><span class="line"></span><br><span class="line">A()&#123;&#125;</span><br><span class="line">A(T a):mA(a)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">//模板类派生普通类</span><br><span class="line">//结论：子类从模板类继承的时候，需要让编译器知道父类的数据类型具体是什么（数据类型的本</span><br><span class="line">质：固定大小内存块的别名）A&lt;int&gt;</span><br><span class="line">class B : public A&lt;int&gt; &#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line">void show() &#123;</span><br><span class="line">cout &lt;&lt; mA &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">B(int a):A(a)&#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void test01() &#123;</span><br><span class="line">B b(100);</span><br><span class="line">b.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(char *argv[], int argc)</span><br><span class="line">&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类模板派生类模板"><a class="markdownIt-Anchor" href="#类模板派生类模板"></a> 类模板派生类模板</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">A</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">T mA;</span><br><span class="line"></span><br><span class="line">A()&#123;&#125;</span><br><span class="line">A(T a)&#123;</span><br><span class="line">mA = a;</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">B</span> :</span> <span class="keyword">public</span> A&lt;T&gt;</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B():A&lt;T&gt;()&#123;&#125;</span><br><span class="line">B(T a):A&lt;T&gt;(a)&#123;&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//要显示的指明要调用哪个类实例的mA</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; A&lt;T&gt;::mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">B&lt;<span class="built_in">string</span>&gt; b(<span class="string">"wwww"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;类模板派生普通类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板派生普通类&quot;&gt;&lt;/a&gt; 类模板派生普通类&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gut
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类模板的基本语法</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/18/cpp0063-%E7%B1%BB%E6%A8%A1%E6%9D%BF%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/18/cpp0063-类模板的基本语法/</id>
    <published>2021-06-18T15:07:46.000Z</published>
    <updated>2021-06-18T15:24:17.657Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类模板的基本语法"><a class="markdownIt-Anchor" href="#类模板的基本语法"></a> 类模板的基本语法</h1><p>类模板必须显式指定类型</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt;</span></span><br><span class="line"><span class="class"><span class="title">class</span> <span class="title">Person</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">T mA;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Person()&#123;&#125;</span><br><span class="line">Person(T a) &#123;</span><br><span class="line">mA = a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//类模板必须显示调用</span></span><br><span class="line">Person&lt;<span class="built_in">string</span>&gt; str(<span class="string">"123"</span>);</span><br><span class="line">str.show();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类模板的基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类模板的基本语法&quot;&gt;&lt;/a&gt; 类模板的基本语法&lt;/h1&gt;
&lt;p&gt;类模板必须显式指定类型&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>编译器对模板机制剖析</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/18/cpp0062-%E7%BC%96%E8%AF%91%E5%99%A8%E5%AF%B9%E6%A8%A1%E6%9D%BF%E6%9C%BA%E5%88%B6%E5%89%96%E6%9E%90/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/18/cpp0062-编译器对模板机制剖析/</id>
    <published>2021-06-18T14:58:38.000Z</published>
    <updated>2021-06-18T22:05:26.870Z</updated>
    
    <content type="html"><![CDATA[<h1 id="编译器对模板机制剖析"><a class="markdownIt-Anchor" href="#编译器对模板机制剖析"></a> 编译器对模板机制剖析</h1><p>简析编译器的编译过程</p><p><img src="/images/javawz/1624028370358.png" alt="1624028370358"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">g++ -E hello.c -o hello.i（预处理）</span><br><span class="line">g++ -S hello.i -o hello.s（编译）</span><br><span class="line">g++ -c hello.s -o hello.o（汇编）</span><br><span class="line">g++ hello.o -o hello（链接）</span><br><span class="line">以上四个步骤，可合成一个步骤</span><br><span class="line">g++ hello.c -o hello（直接编译链接成可执行目标文件）</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1624028541838.png" alt="1624028541838"></p><ol><li>编译器并不是把函数模板处理成能够处理任意类的函数</li><li>编译器从函数模板通过具体类型产生不同的函数</li><li>编译器会对函数模板进行两次编译,在声明的地方对模板代码本身进行编译；<br>在调用的地方对参数替换后的代码进行编译。</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;编译器对模板机制剖析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译器对模板机制剖析&quot;&gt;&lt;/a&gt; 编译器对模板机制剖析&lt;/h1&gt;
&lt;p&gt;简析编译器的编译过程&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/16240
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数模板基本语法</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/18/cpp0061-%E5%87%BD%E6%95%B0%E6%A8%A1%E6%9D%BF%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/18/cpp0061-函数模板基本语法/</id>
    <published>2021-06-18T14:29:13.000Z</published>
    <updated>2021-06-18T22:05:15.666Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数模板基本语法"><a class="markdownIt-Anchor" href="#函数模板基本语法"></a> 函数模板基本语法</h1><p><img src="/images/javawz/1624027325150.png" alt="1624027325150"></p><h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T1</span>,...,<span class="title">class</span> <span class="title">Tn</span>&gt; //<span class="title">template</span>&lt;typename T&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">FunName</span>(<span class="title">T1</span> <span class="title">x1</span>,...,<span class="title">Tn</span> <span class="title">xn</span>)</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="comment">//函数体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>template是语义是模板的意思，尖括号中先写关键字typename或是<br>class，后面跟一个类型T，此类即是虚拟的类型。至于为什么用T用的人多了，也<br>就是T了。</p><p>函数模板,只适用于函数的参数个数相同而类型不同,且函数体相同的情况。<br>如 果个数不同,则不能用函数模板。</p><p>普通函数会进行隐式的数据类型转换, 函数模板不提供隐式的数据类型转<br>换 必须是严格的匹配。</p><p>当函数模板和普通函数都符合调⽤用时,优先选择普通函数</p><ol><li>当函数模板和普通函数都符合调用时,优先选择普通函数</li><li>若显示使用函数模板,则使用&lt;&gt; 类型列表</li><li>如果 函数模板产生更好的匹配 使用函数模板</li></ol><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="class"><span class="keyword">class</span> <span class="title">T</span>&gt; //<span class="title">template</span>&lt;typename T&gt;</span></span><br><span class="line"><span class="class"><span class="title">void</span> <span class="title">MySwap</span>(<span class="title">T</span> &amp;<span class="title">a</span>,<span class="title">T</span> &amp;<span class="title">b</span>) &#123;</span></span><br><span class="line"></span><br><span class="line">T temp = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"   "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">a = b;</span><br><span class="line">b = temp;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">"   "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test01</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</span><br><span class="line"><span class="keyword">double</span> da = <span class="number">1.1</span>, db = <span class="number">2.2</span>;</span><br><span class="line"><span class="comment">//隐式调用模板函数</span></span><br><span class="line">MySwap(a,b);</span><br><span class="line"><span class="comment">//显示调用模板函数</span></span><br><span class="line">MySwap&lt;<span class="keyword">double</span>&gt;(da,db);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test01();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"int Max(int a, int b)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T a, T b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"T Max(T a, T b)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">typename</span> T&gt;</span><br><span class="line"><span class="function">T <span class="title">Max</span><span class="params">(T a, T b, T c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"T Max(T a, T b, T c)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> Max(Max(a, b), c);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">2</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(a, b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//当函数模板和普通函数都符合调用时,优先选择普通函数</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max&lt;&gt;(a, b) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//若显示使用函数模板,则使用 &gt;类型列表</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(<span class="number">3.0</span>, <span class="number">4.0</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//如果函数模板产生更好的匹配使用函数模板</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(<span class="number">5.0</span>, <span class="number">6.0</span>, <span class="number">7.0</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//重载</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Max(<span class="string">'a'</span>, <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>; <span class="comment">//调用普通函数可以隐式类型转换</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数模板基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数模板基本语法&quot;&gt;&lt;/a&gt; 函数模板基本语法&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1624027325150.png&quot; alt=&quot;16240
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>画图</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/13/pwcp017-%E7%94%BB%E5%9B%BE/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/13/pwcp017-画图/</id>
    <published>2021-06-12T17:34:56.000Z</published>
    <updated>2021-06-12T19:04:18.313Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画图"><a class="markdownIt-Anchor" href="#画图"></a> 画图</h1><h3 id="多边形"><a class="markdownIt-Anchor" href="#多边形"></a> 多边形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL POLYGON(HDC HDC, CONST POINT *LPPOINTS, INT NCOUNT)；</span><br></pre></td></tr></table></figure><p>HDC：设备环境句柄。</p><p>LPPOINTS：指向用于指定多边形顶点的POINT结构<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>。LPPOINTS中坐标以当前位置为<a href="https://baike.baidu.com/item/%E5%8E%9F%E7%82%B9/8271864" target="_blank" rel="noopener">原点</a>。</p><p>NCOUNT：指定数组中顶点个数，此值必须大于等于2。</p><p>返回值：如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，返回值非零；如果函数调用失败，返回值是0。</p><h3 id="多个多边形"><a class="markdownIt-Anchor" href="#多个多边形"></a> 多个多边形</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL PolyPolygon(HDC hdc, CONST POINT *lpPoints, CONST INT *lpPolyCounts, int nCount)；</span><br></pre></td></tr></table></figure><p>参数：</p><p>hdc：设备环境句柄。</p><p>lpPoints：指向定义多边形顶点的POINT结构<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>，各多边形是连续定义的，每个多边形通过画一条从最后中一个顶点到第一个顶点的线段而自动闭合起来，每个顶点应被定义一次。</p><p>lpPolyCounts：指向整数<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>，每个整数指定相应多边表的点数，每个整数必须大于等于2。</p><p>nCount：指定多边形的总个数。</p><p>返回值：如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，返回值非零，否则返回值是0。</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画图.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"画图.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY);</span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">POINT pt[<span class="number">4</span>] = &#123;</span><br><span class="line">&#123;<span class="number">200</span>,<span class="number">200</span>&#125;,</span><br><span class="line">&#123;<span class="number">500</span>,<span class="number">200</span>&#125;,</span><br><span class="line">&#123;<span class="number">500</span>,<span class="number">500</span>&#125;,</span><br><span class="line">&#123;<span class="number">200</span>,<span class="number">500</span>&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">POINT pt2[<span class="number">8</span>] = &#123;</span><br><span class="line">&#123; <span class="number">200</span>,<span class="number">200</span> &#125;,</span><br><span class="line">&#123; <span class="number">500</span>,<span class="number">200</span> &#125;,</span><br><span class="line">&#123; <span class="number">500</span>,<span class="number">500</span> &#125;,</span><br><span class="line">&#123; <span class="number">200</span>,<span class="number">500</span> &#125;,</span><br><span class="line">&#123;<span class="number">600</span>,<span class="number">200</span>&#125;,</span><br><span class="line">&#123;<span class="number">1000</span>,<span class="number">200</span>&#125;,</span><br><span class="line">&#123;<span class="number">1000</span>,<span class="number">500</span>&#125;,</span><br><span class="line">&#123;<span class="number">600</span>,<span class="number">500</span>&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//多个多边形的顶点数</span></span><br><span class="line"><span class="keyword">int</span> pn[<span class="number">2</span>] = &#123; <span class="number">4</span>,<span class="number">4</span> &#125;;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"><span class="comment">//多边形函数</span></span><br><span class="line"><span class="comment">//连接点,最后一个点会自动连接到第一个点</span></span><br><span class="line"><span class="comment">//Polygon(hdc,pt,4);</span></span><br><span class="line">PolyPolygon(</span><br><span class="line">hdc, <span class="comment">//句柄</span></span><br><span class="line">pt2,<span class="comment">//多边形顶点数组</span></span><br><span class="line">pn,<span class="comment">//存储的是多边形顶点的个数,比如第一个多边形的顶点是4,第二个也是4</span></span><br><span class="line"><span class="number">2</span><span class="comment">//多边形个数</span></span><br><span class="line">);</span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;画图&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#画图&quot;&gt;&lt;/a&gt; 画图&lt;/h1&gt;
&lt;h3 id=&quot;多边形&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#多边形&quot;&gt;&lt;/a&gt; 多边形&lt;/h3&gt;
&lt;figure
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>画刷</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/13/pwcp016-%E7%94%BB%E5%88%B7/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/13/pwcp016-画刷/</id>
    <published>2021-06-12T16:25:11.000Z</published>
    <updated>2021-06-12T17:03:49.629Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画刷"><a class="markdownIt-Anchor" href="#画刷"></a> 画刷</h1><h3 id="备用画刷stock-brush"><a class="markdownIt-Anchor" href="#备用画刷stock-brush"></a> 备用画刷（stock brush）</h3><p>​1.WHITE_BRUSH</p><p>白色画刷</p><ol start="2"><li>LTGRAY_BRUSH</li></ol><p>浅灰色画刷</p><p>3.GRAY_BRUSH</p><p>灰色画刷</p><p>4.DKGRAY_BRUSH</p><p>深灰色画刷</p><ol start="5"><li>BLACK_BRUSH</li></ol><p>黑色画刷</p><ol start="6"><li>NULL_BRUSH</li></ol><p>空画刷</p><h3 id="创建颜色画刷"><a class="markdownIt-Anchor" href="#创建颜色画刷"></a> 创建颜色画刷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HBRUSH CreateSolidBrush(COLORREF crColor);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateSolidBrush(RGB(255,100,200));</span><br></pre></td></tr></table></figure><h3 id="创建阴影画刷"><a class="markdownIt-Anchor" href="#创建阴影画刷"></a> 创建阴影画刷</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HBRUSH CreateHatchBrush(int fnStyle, COLORREF clrref)；</span><br></pre></td></tr></table></figure><p>fnStyle：指定刷子的阴影样式。该参数可以取下列值，这些值的含义为：</p><p>HS_BDIAGONAL：表示45度向上，从左至右的阴影(/////)；</p><p>HS_CROSS：水平和垂直交叉阴影(+++++)；</p><p>HS_DIAGCROSS：45度交叉阴影(XXXXX)；</p><p>HS_FDIAGONAL：45度向下，自左至右阴影(\\\)；</p><p>HS_HORIZONTAL：水平阴影(-----)；</p><p>HS_VERTICAL：垂直阴影(|||||)。</p><p>cirref：指定用于阴影的刷子的前景色。</p><p>返回值：如果函数执行成功，那么返回值标识为逻辑刷子；如果函数执行失败，那么返回值为NULL。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CreateHatchBrush(HS_VERTICAL, RGB(2, 202, 33));</span><br></pre></td></tr></table></figure><h3 id="hbrush类型"><a class="markdownIt-Anchor" href="#hbrush类型"></a> HBRUSH类型</h3><p>画刷句柄类型</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画刷.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"画刷.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY);</span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">HBRUSH hBrush;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">SelectObject(hdc,CreatePen(PS_SOLID,<span class="number">5</span>,RGB(<span class="number">255</span>,<span class="number">0</span>,<span class="number">0</span>)));</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, GetStockObject(GRAY_BRUSH));</span><br><span class="line">Rectangle(hdc,<span class="number">100</span>,<span class="number">100</span>,<span class="number">200</span>,<span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">hBrush = (HBRUSH)CreateHatchBrush(HS_HORIZONTAL, RGB(<span class="number">2</span>, <span class="number">202</span>, <span class="number">33</span>));</span><br><span class="line">SelectObject(hdc, hBrush);</span><br><span class="line">Rectangle(hdc, <span class="number">250</span>, <span class="number">100</span>, <span class="number">350</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">DeleteObject(SelectObject(hdc, CreateSolidBrush(RGB(<span class="number">255</span>,<span class="number">100</span>,<span class="number">200</span>))));</span><br><span class="line">Rectangle(hdc, <span class="number">400</span>, <span class="number">100</span>, <span class="number">500</span>, <span class="number">200</span>);</span><br><span class="line"></span><br><span class="line">DeleteObject(SelectObject(hdc, CreateHatchBrush(HS_BDIAGONAL, RGB(<span class="number">2</span>, <span class="number">202</span>, <span class="number">33</span>))));</span><br><span class="line">Rectangle(hdc, <span class="number">550</span>, <span class="number">100</span>, <span class="number">650</span>, <span class="number">200</span>);</span><br><span class="line">DeleteObject(SelectObject(hdc, CreateHatchBrush(HS_VERTICAL, RGB(<span class="number">2</span>, <span class="number">202</span>, <span class="number">33</span>))));</span><br><span class="line">Rectangle(hdc, <span class="number">700</span>, <span class="number">100</span>, <span class="number">800</span>, <span class="number">200</span>);</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(WHITE_BRUSH)));</span><br><span class="line">DeleteObject(SelectObject(hdc, GetStockObject(WHITE_PEN)));</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;画刷&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#画刷&quot;&gt;&lt;/a&gt; 画刷&lt;/h1&gt;
&lt;h3 id=&quot;备用画刷stock-brush&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#备用画刷stock-brus
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>CS模型的TCP/IP协议</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/08/WS002CS%E6%A8%A1%E5%9E%8B%E7%9A%84TCP-IP%E5%8D%8F%E8%AE%AE/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/08/WS002CS模型的TCP-IP协议/</id>
    <published>2021-06-08T14:48:18.000Z</published>
    <updated>2021-06-11T13:33:42.761Z</updated>
    
    <content type="html"><![CDATA[<h1 id="cs模型的tcpip协议"><a class="markdownIt-Anchor" href="#cs模型的tcpip协议"></a> CS模型的TCP/IP协议</h1><h3 id="创建服务端步骤"><a class="markdownIt-Anchor" href="#创建服务端步骤"></a> 创建服务端步骤</h3><ol><li>打开网络头文件</li><li>启动网络库</li><li>校验版本</li><li>创建SOCKET</li><li>绑定地址与端口</li><li>开始监听</li><li>接受连接</li><li>与客户端收发消息</li></ol><h3 id="网络头文件-网络库"><a class="markdownIt-Anchor" href="#网络头文件-网络库"></a> 网络头文件 网络库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;WinSock2.h&gt; </span><br><span class="line">#pragma comment(lib,“ws2_32.lib”)</span><br></pre></td></tr></table></figure><p>目前网络库有哪些版本:</p><p>1.0<br>1.1<br>2.0<br>2.1<br>2.2</p><h3 id="wsadata结构"><a class="markdownIt-Anchor" href="#wsadata结构"></a> WSADATA结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">typedef struct WSAData &#123;</span><br><span class="line">        WORD                    wVersion;</span><br><span class="line">        WORD                    wHighVersion;</span><br><span class="line">#ifdef _WIN64</span><br><span class="line">        unsigned short          iMaxSockets;</span><br><span class="line">        unsigned short          iMaxUdpDg;</span><br><span class="line">        char FAR *              lpVendorInfo;</span><br><span class="line">        char                    szDescription[WSADESCRIPTION_LEN+1];</span><br><span class="line">        char                    szSystemStatus[WSASYS_STATUS_LEN+1];</span><br><span class="line">#else</span><br><span class="line">        char                    szDescription[WSADESCRIPTION_LEN+1];</span><br><span class="line">        char                    szSystemStatus[WSASYS_STATUS_LEN+1];</span><br><span class="line">        unsigned short          iMaxSockets;</span><br><span class="line">        unsigned short          iMaxUdpDg;</span><br><span class="line">        char FAR *              lpVendorInfo;</span><br><span class="line">#endif</span><br><span class="line">&#125; WSADATA;</span><br></pre></td></tr></table></figure><p><strong>wVersion</strong></p><p>Windows Sockets DLL期望调用者使用的Windows Sockets规范的版本。 高位<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>存储副版本号, 低位字节存储主版本号，可以用WORD MAKEWORD(BYTE,BYTE ) 返回这个值,例如:MAKEWORD(1,1)</p><p><strong>wHighVersion</strong></p><p>这个DLL能够支持的Windows Sockets规范的最高版本。通常它与wVersion相同。</p><p><strong>szDescription</strong></p><p>以null结尾的ASCII字符串，Windows Sockets DLL将对Windows Sockets实现的描述拷贝到这个字符串中，包括制造商标识。文本（最多可以有256个字符）可以包含任何字符，但是要注意不能包含<a href="https://baike.baidu.com/item/%E6%8E%A7%E5%88%B6%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">控制字符</a>和<a href="https://baike.baidu.com/item/%E6%A0%BC%E5%BC%8F%E5%AD%97%E7%AC%A6" target="_blank" rel="noopener">格式字符</a>，应用程序对其最可能的使用方式是把它（可能被截断）显示在在状态信息中。</p><p><strong>szSystemStatus</strong></p><p>以null结尾的ASCII字符串，Windows Sockets DLL把有关的状态或配置信息拷贝到该字符串中。Windows Sockets DLL应当仅在这些信息对用户或支持人员有用时才使用它们，它不应被作为szDescription域的扩展。</p><p><strong>iMaxSockets</strong></p><p>单个进程能够打开的socket的最大数目。Windows  Sockets的实现能提供一个全局的socket池，可以为任何进程分配；或者它也可以为socket分配属于进程的资源。这个数字能够很好地反映Windows Sockets DLL或网络软件的配置方式。应用程序的编写者可以通过这个数字来粗略地指明Windows  Sockets的实现方式对应用程序是否有用。例如，X  Windows服务器在第一次启动的时候可能会检查iMaxSockets的值：如果这个值小于8，应用程序将显示一条错误信息，指示用户重新配置网络软件（这是一种可能要使用szSystemStatus文本的场合）。显然无法保证某个应用程序能够真正分配iMaxSockets个socket，因为可能有其它WindowsSockets应用程序正在使用。</p><p><strong>iMaxUdpDg</strong></p><p>Windows Sockets应用程序能够发送或接收的最大的用户数据包协议（UDP）的数据包大小，以<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>为单位。如果实现方式没有限制，那么iMaxUdpDg为零。在Berkeley sockets的许多实现中，对于UDP数据包有个固有的限制（在必要时被分解），大小为8192字节。Windows  Sockets的实现可以对碎片重组缓冲区的分配作出限制。对于适合的WindowsSockets  实现，iMaxUdpDg的最小值为512。注意不管iMaxUdpDg的值是什么，都不推荐你发回一个比网络的最大传送单元（MTU）还大的<a href="https://baike.baidu.com/item/%E5%B9%BF%E6%92%AD%E6%95%B0%E6%8D%AE%E5%8C%85" target="_blank" rel="noopener">广播数据包</a>。（Windows Sockets API 没有提供发现MTU的机制，但是它不会小于512个字节)。WinSock2.0版中已被废弃。</p><p><strong>lpVendorInfo</strong></p><p>指向销售商的数据结构的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>。这个结构的定义（如果有）超出了<a href="https://baike.baidu.com/item/WindowsSockets%E8%A7%84%E8%8C%83" target="_blank" rel="noopener">WindowsSockets规范</a>的范围。WinSock2.0版中已被废弃。</p><h3 id="wsastartup打开网络库"><a class="markdownIt-Anchor" href="#wsastartup打开网络库"></a> WSAStartup打开网络库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int WSAStartup(</span><br><span class="line">WORD      wVersionRequired,</span><br><span class="line">LPWSADATA lpWSAData</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>⑴ wVersionRequested：一个WORD（双字节）型数值，在最高版本的Windows Sockets支持调用者使用，高阶字节指定小版本(修订本)号,低位字节指定主<a href="https://baike.baidu.com/item/%E7%89%88%E6%9C%AC/505574" target="_blank" rel="noopener">版本</a>号。</p><p>⑵lpWSAData 指向WSADATA数据结构的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>，用来接收Windows Sockets [1] 实现的<a href="https://baike.baidu.com/item/%E7%BB%86%E8%8A%82/82732" target="_blank" rel="noopener">细节</a>。</p><p>WindowsSockets API提供的调用方可使用的最高版本号。高位<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>指出副版本(修正)号，低位字节指明主版本号。</p><p>返回值:</p><p>0 成功。</p><p>否则返回下列的错误代码之一。注意通常依靠应用程序调用WSAGetLastError()机制获得的<a href="https://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">错误代码</a>是不能使用的，因为Windows Sockets DLL可能没有建立“上一错误”信息储存的客户数据区域。</p><p>错误代码:</p><p>WSASYSNOTREADY 代码数值为10091，指出网络通信依赖的网络子系统还没有准备好。</p><p>WSAVERNOTSUPPORTED 代码数值为10092，表示所需的Windows Sockets API的版本未由特定的Windows Sockets实现提供。</p><p>WSAEINVAL 代码数值为10022，说明应用程序指出的Windows Sockets版本不被该DLL支持。</p><p>WSAEINPROGRESS 代码数值为10036，说明一个阻塞的Winsock调用正在进行中。</p><p>WSAEPROCLIM 代码数值为10067，说明已经达到了Windows Sockets实现所支持的任务数量的极限。</p><p>WSAEFAULT 代码数值为10014，说明lpWSADATA参数是一个无效的指针。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//MAKEWORD(主版本,副版本)   负责将2,2分配到wdVerSion低8位和高8位</span><br><span class="line">//wdVerSion低8位存储主版本,高8位存储副版本</span><br><span class="line">WORD wdVerSion = MAKEWORD(2, 2);</span><br><span class="line">WSADATA wdSockMsg;</span><br><span class="line"></span><br><span class="line">int nRes = WSAStartup(wdVerSion, &amp;wdSockMsg);</span><br><span class="line"></span><br><span class="line">if (0 != nRes)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;WSAStartup Error %d\n&quot;,nRes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="校验版本"><a class="markdownIt-Anchor" href="#校验版本"></a> 校验版本</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//校验网络库版本</span><br><span class="line">//HIBYTE取高8位,LOBYTE取高8位</span><br><span class="line">if (HIBYTE(wdSockMsg.wVersion) != 2 || LOBYTE(wdSockMsg.wVersion) != 2)</span><br><span class="line">&#123;</span><br><span class="line">//关闭网络库</span><br><span class="line">WSACleanup();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建socket套接字"><a class="markdownIt-Anchor" href="#创建socket套接字"></a> 创建SOCKET套接字</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SOCKET PASCAL FAR socket( int af, int type, int protocol);</span><br></pre></td></tr></table></figure><p>参数1</p><p>地址的类型</p><ul><li><p>比如大家联系我</p><ul><li>手机 15512345678</li><li>固定电话 7881234</li><li>ＱＱ 40916626xx</li><li>微信 c3_xin666</li><li>找上门  内蒙古 xxxxxxx</li><li>…</li></ul></li><li><p>AF_INET  2</p><ul><li>ipv4<ul><li>Internet协议版本4（IPv4）地址系列。<ul><li>192.168.1.103<ul><li>0.0.0.0  ~  255.255.255.255</li><li>点分十进制表示法</li></ul></li></ul></li><li>4字节 32位的地址<ul><li>个数快不够<ul><li>就是无符号int类型的范围  0 ~ 4294967295</li></ul></li></ul></li></ul></li></ul></li><li><p>AF_INET6  23</p><ul><li>ipv6<ul><li>Internet协议版本6（IPv6）地址系列。<ul><li>2001:0:3238:DFE1:63::FEFB</li></ul></li><li>16字节  128位的地址<ul><li>这个地球每寸一个IP</li></ul></li></ul></li></ul></li><li><p>AF_BTH  32</p><ul><li>蓝牙地址系列。<br>如果计算机安装了蓝牙适配器和驱动程序，则Windows XP SP2或更高版本支持此地址系列。<ul><li>6B:2D:BC:A9:8C:12</li></ul></li></ul></li><li><p>AF_IRDA  26</p><ul><li>红外数据协会（IrDA）地址系列。<br>仅当计算机安装了红外端口和驱动程序时，才支持此地址系列。</li></ul></li><li><p>通信地址不仅仅只有IP地址</p><br></li></ul><p>参数2</p><ul><li><p>套接字类型</p><ul><li><p>SOCK_STREAM    1</p><ul><li>一种套接字类型，提供带有OOB数据传输机制的顺序，可靠，双向，基于连接的字节流。 此套接字类型使用传输控制协议（TCP）作为Internet地址系列（AF_INET或AF_INET6）。</li></ul></li><li><p>SOCK_DGRAM    2</p><ul><li>一种支持数据报的套接字类型，它是固定（通常很小）最大长度的无连接，不可靠的缓冲区。 此套接字类型使用用户数据报协议（UDP）作为Internet地址系列（AF_INET或AF_INET6）。</li></ul></li><li><p>SOCK_RAW   3</p><ul><li>一种套接字类型，提供允许应用程序操作下一个上层协议头的原始套接字。 要操作IPv4标头，必须在套接字上设置IP_HDRINCL套接字选项。 要操作IPv6标头，必须在套接字上设置IPV6_HDRINCL套接字选项。</li></ul></li><li><p>SOCK_RDM   4</p><ul><li>一种套接字类型，提供可靠的消息数据报。 这种类型的一个示例是Windows中的实用通用多播（PGM）多播协议实现，通常称为可靠多播节目。<br>仅在安装了可靠多播协议时才支持此类型值。</li></ul></li><li><p>SOCK_SEQPACKET   5</p><ul><li>一种套接字类型，提供基于数据报的伪流数据包。</li></ul><br></li></ul></li></ul><p>参数3</p><ul><li>协议的类型<ul><li>IPPROTO_TCP<ul><li>传输控制协议（TCP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_STREAM时，这是一个可能的值。</li></ul></li><li>IPPROTO_UDP<ul><li>用户数据报协议（UDP）。 当af参数为AF_INET或AF_INET6且类型参数为SOCK_DGRAM时，这是一个可能的值。</li></ul></li><li>IPPROTO_ICMP<ul><li>Internet控制消息协议（ICMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</li></ul></li><li>IPPROTO_IGMP<ul><li>Internet组管理协议（IGMP）。 当af参数为AF_UNSPEC，AF_INET或AF_INET6且类型参数为SOCK_RAW或未指定时，这是一个可能的值。</li></ul></li><li>IPPROTO_RM<ul><li>用于可靠多播的PGM协议。 当af参数为AF_INET且类型参数为SOCK_RDM时，这是一个可能的值。 在针对Windows Vista及更高版本发布的Windows SDK上，此协议也称为IPPROTO_PGM。<br>仅在安装了可靠多播协议时才支持此协议值。</li></ul></li><li>整理下<ul><li>通过参数3得到一个事儿，参数1 2 3三者是配套的，是一套参数，不是随便填的，即使用不同的协议，那要添加对应的那套参数。</li><li>想要使用一个协议，咱们设备得支持才行，比如红外</li><li>参数3中，有个可能这个词，所以说一般，参数3可以填写0，系统会自动帮我们选择协议类型</li></ul></li></ul></li></ul><p>返回值</p><ul><li><p>成功返回可用的socket</p><ul><li><p>不用了就一定要销毁套接字</p><ul><li>closesocket(socketListen);</li></ul></li></ul></li><li><p>失败返回INVALID_SOCKET</p><ul><li><p>关闭网络库</p><ul><li>WSACleanup();</li></ul></li><li><p>可用WSAGetLasterror()返回错误码</p></li></ul></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SOCKET sock = socket(AF_INET,SOCK_STREAM,IPPROTO_TCP);</span><br><span class="line"><span class="comment">//如果创建套接字失败</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == sock)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket Error: %d\n"</span>,WSAGetLastError());</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><h3 id="绑定地址与端口"><a class="markdownIt-Anchor" href="#绑定地址与端口"></a> 绑定地址与端口</h3><p>给我们的socket绑定端口号与具体地址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int PASCAL FAR bind( SOCKET sockaddr, const struct sockaddr FAR* my_addr,int addrlen);</span><br></pre></td></tr></table></figure><p>参数1<br>上一个函数创建了socket，绑定了协议信息（地址类型，套接字类型，协议类型），咱们bind函数就是绑定实质的地址，端口号</p><p>参数2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sockaddr_in sockAddress;</span><br><span class="line">sockAddress.sin_family = AF_INET; //地址类型</span><br><span class="line">sockAddress.sin_addr.s_addr = inet_addr(&quot;127.0.0.1&quot;); //服务器ip地址</span><br><span class="line">sockAddress.sin_port = 12345;//服务器端口号</span><br><span class="line">(sockaddr*)&amp;sockAddress强转添加到参数2上</span><br></pre></td></tr></table></figure><p>参数3</p><p>参数2的类型大小</p><p>sizeof(sockAddress)</p><p>返回值<br>成功返回0<br>失败返回SOCKET_ERROR<br>具体错误码通过int WSAGetLastError(void);获得<br>closesocket(socketListen);<br>WSACleanup();</p><h5 id="htons"><a class="markdownIt-Anchor" href="#htons"></a> htons</h5><p>htons的功能：将一个无符号短整型的主机数值转换为网络<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E9%A1%BA%E5%BA%8F" target="_blank" rel="noopener">字节顺序</a>，即大尾顺序(big-endian)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u_short htons(u_short hostshort);</span><br></pre></td></tr></table></figure><p>而我们常用的 x86 CPU (intel, AMD) 电脑是 little-endian,也就是整数的低位<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82" target="_blank" rel="noopener">字节</a>放在内存的低字节处。举个例子吧。假定你的数据是0x1234,</p><p>在网络字节顺序里 这个数据放到内存中就应该显示成</p><p>addr addr+1</p><p>0x12 0x34</p><p>而在x86电脑上，数据0x1234放到内存中实际是：</p><p>addr addr+1</p><p>0x34 0x12</p><p>htons 的用处就是把实际主机内存中的整数存放方式调整成网络字节顺序。</p><h5 id="inet_addr"><a class="markdownIt-Anchor" href="#inet_addr"></a> inet_addr</h5><p>inet_addr是一个<a href="https://baike.baidu.com/item/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%87%BD%E6%95%B0/3504881" target="_blank" rel="noopener">计算机函数</a>，功能是将一个点分<a href="https://baike.baidu.com/item/%E5%8D%81%E8%BF%9B%E5%88%B6/6521392" target="_blank" rel="noopener">十进制</a>的IP转换成一个长整数型数（u_long类型）等同于inet_addr()。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">in_addr_t inet_addr(const char* strptr);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">daddr.s_addr=inet_addr(&quot;192.168.1.60&quot;);</span><br></pre></td></tr></table></figure><h5 id="inet_ntoa"><a class="markdownIt-Anchor" href="#inet_ntoa"></a> inet_ntoa</h5><p>功能是将网络地址转换成“.”点隔的字符串格式。</p><p>网络字节序IP转化点分十进制IP</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *inet_ntoa (struct in_addr);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in si;</span><br><span class="line">//地址类型</span><br><span class="line">si.sin_family = AF_INET;</span><br><span class="line">//端口</span><br><span class="line">si.sin_port = htons(12345);</span><br><span class="line">//地址</span><br><span class="line">si.sin_addr.S_un.S_addr = inet_addr(&quot;127.0.0.1&quot;);</span><br><span class="line"></span><br><span class="line">if (SOCKET_ERROR == bind(sock, (const struct sockaddr *)&amp;si, sizeof(si)))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;bind Error: %d\n&quot;, WSAGetLastError());</span><br><span class="line">//关闭套接字</span><br><span class="line">closesocket(sock);</span><br><span class="line">//关闭网络库</span><br><span class="line">WSACleanup();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="开始监听"><a class="markdownIt-Anchor" href="#开始监听"></a> 开始监听</h3><p>将套接字置于正在侦听传入连接的状态。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int WSAAPI listen(</span><br><span class="line">  SOCKET s,</span><br><span class="line">  int    backlog</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="参数1"><a class="markdownIt-Anchor" href="#参数1"></a> 参数1</h5><p>​服务器端的socket，也就是socket函数创建的</p><h5 id="参数2"><a class="markdownIt-Anchor" href="#参数2"></a> 参数2</h5><p>​挂起连接队列的最大长度。<br>​我们一般填写这个参数<br>​SOMAXCONN<br>​作用是让系统自动选择最合适的个数<br>​不同的系统环境不一样，所以这个合适的数也都不一样</p><h5 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h5><h6 id="成功"><a class="markdownIt-Anchor" href="#成功"></a> 成功</h6><p>​返回0</p><h6 id="失败"><a class="markdownIt-Anchor" href="#失败"></a> 失败</h6><p>​SOCKET_ERROR<br>​具体错误码<br>​ WSAGetLastError()<br>​释放<br>​closesocket(socketListen);<br>​WSACleanup();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//开始监听</span><br><span class="line">if (SOCKET_ERROR == listen(sock, SOMAXCONN)) &#123;</span><br><span class="line">printf(&quot;listen Error: %d\n&quot;, WSAGetLastError());</span><br><span class="line">//关闭套接字</span><br><span class="line">closesocket(sock);</span><br><span class="line">//关闭网络库</span><br><span class="line">WSACleanup();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端socket接受连接"><a class="markdownIt-Anchor" href="#创建客户端socket接受连接"></a> 创建客户端socket/接受连接</h3><p>作用<br>accept函数允许在套接字上进行传入连接尝试。<br>listen监听客户端来的链接，accept讲客户端的信息绑定到一个socket上，也就是给客户端创建一个socket,通过返回值返回给我们客户端的socket<br>一次只能创建一个，有几个客户端链接，就要调用几次</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SOCKET WSAAPI accept(</span><br><span class="line">  SOCKET   s,//服务端socket</span><br><span class="line">  sockaddr *addr,//用来接收客户端地址和端口</span><br><span class="line">  int      *addrlen //参数2的长度</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>这个函数是阻塞的</p><p>参数2,参数3可以设置为NULL,不得到客户端信息,可以调用getpeername函数得到客户端信息</p><h5 id="返回值-2"><a class="markdownIt-Anchor" href="#返回值-2"></a> 返回值</h5><h6 id="成功-2"><a class="markdownIt-Anchor" href="#成功-2"></a> 成功</h6><p>​返回值就是给客户端包好的socket,与客户端通信就靠这个</p><h6 id="失败-2"><a class="markdownIt-Anchor" href="#失败-2"></a> 失败</h6><p>​返回INVALID_SOCKET ,用WSAGetLastError()得到错误码<br>​释放空间<br>​closesocket(socketListen);<br>​WSACleanup();</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">struct sockaddr_in sockClientAddr;</span><br><span class="line">int len = sizeof(sockClientAddr);</span><br><span class="line">printf(&quot;等待连接...\n&quot;);</span><br><span class="line">SOCKET sockClient = accept(sock, (struct sockaddr *)&amp;sockClientAddr,&amp;len);</span><br><span class="line"></span><br><span class="line">if (sockClient == INVALID_SOCKET) &#123;</span><br><span class="line">printf(&quot;accept Error: %d\n&quot;, WSAGetLastError());</span><br><span class="line">//关闭套接字</span><br><span class="line">closesocket(sock);</span><br><span class="line">//关闭网络库</span><br><span class="line">WSACleanup();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="通过getpeername函数得到客户端信息"><a class="markdownIt-Anchor" href="#通过getpeername函数得到客户端信息"></a> 通过getpeername函数得到客户端信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getpeername(newSocket, (struct sockaddr*)&amp;sockClient, &amp;nLen);</span><br></pre></td></tr></table></figure><h4 id="getsockname函数得到本地服务器信息"><a class="markdownIt-Anchor" href="#getsockname函数得到本地服务器信息"></a> getsockname函数得到本地服务器信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">getsockname(sSocket, (sockaddr*)&amp;addr, &amp;nLen);</span><br></pre></td></tr></table></figure><h3 id="与客户端收发消息"><a class="markdownIt-Anchor" href="#与客户端收发消息"></a> 与客户端收发消息</h3><h4 id="recv收消息"><a class="markdownIt-Anchor" href="#recv收消息"></a> recv收消息</h4><p>数据的接收都是由协议本身做的，也就是socket的底层做的，系统会有一段缓冲区，存储着接收到的数据。</p><p>咱们外边调用recv的作用，就是通过socket找到这个缓冲区，并把数据复制进咱们的参数2，复制参数3个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int recv(</span><br><span class="line">  SOCKET s, //客户端socket</span><br><span class="line">  char   *buf, //缓冲区</span><br><span class="line">  int    len, //缓冲区大小</span><br><span class="line">  int    flags  //正常写0,表示读完就删除</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="参数1-2"><a class="markdownIt-Anchor" href="#参数1-2"></a> 参数1</h5><p>​客户端的socket，每个客户端对应唯一的socket</p><h5 id="参数2-2"><a class="markdownIt-Anchor" href="#参数2-2"></a> 参数2</h5><p>​客户端消息的存储空间，也就是个字符数组<br>​这个一般1500字节<br>​网络传输得最大单元，1500字节，也就是客户端发过来得数据，一次最大就是1500字节，这是协议规定，这个数值也是根据很多情况，总结出来得最优值<br>​所以客户端最多一组来1500字节，咱们这头1500读一次，够够的了。</p><h5 id="参数3"><a class="markdownIt-Anchor" href="#参数3"></a> 参数3</h5><p>​想要读取得字节个数<br>​一般是参数2得字节数-1，把\0字符串结尾留出来</p><h5 id="参数4"><a class="markdownIt-Anchor" href="#参数4"></a> 参数4</h5><p>一般填0,表示读完就删</p><h6 id="msg_peek"><a class="markdownIt-Anchor" href="#msg_peek"></a> MSG_PEEK</h6><p>​窥视传入的数据。 数据将复制到缓冲区中，但不会从输入队列中删除。<br>​读出来的不删除<br>​这个东西是不建议被使用的<br>​第一、读数据不行<br>​第二、那就无法计数了</p><h6 id="msg_oob"><a class="markdownIt-Anchor" href="#msg_oob"></a> MSG_OOB</h6><p>​带外数据<br>​意义<br>​就是传输一段数据，在外带一个额外的特殊数据<br>​相当于小声BB<br>​实际<br>​就不建议被使用了<br>​1、TCP协议规范（RFC 793）中OOB的原始描述被“主机要求”规范取代（ RFC 1122），但仍有许多机器具有RFC 793 OOB实现。<br>​2、既然两种数据，那咱们就send两次，另一方recv两次就行了，何必搞得那么神神秘秘，浪费计算机精力</p><h6 id="msg_waitall"><a class="markdownIt-Anchor" href="#msg_waitall"></a> MSG_WAITALL</h6><p>​直到系统缓冲区字节数满足参数3所请求得字节数，才开始读取</p><h5 id="返回值-3"><a class="markdownIt-Anchor" href="#返回值-3"></a> 返回值</h5><h5 id="成功-3"><a class="markdownIt-Anchor" href="#成功-3"></a> 成功</h5><p>​返回0</p><h5 id="失败-3"><a class="markdownIt-Anchor" href="#失败-3"></a> 失败</h5><p>​SOCKET_ERROR<br>​具体错误码<br>​ WSAGetLastError()<br>​释放<br>​closesocket(socketListen);<br>​WSACleanup();</p><h3 id="send发送消息"><a class="markdownIt-Anchor" href="#send发送消息"></a> send发送消息</h3><p>向目标发送数据</p><p>本质<br>send函数将我们的数据复制黏贴进系统的协议发送缓冲区，计算机伺机发出去<br>最大传输单元是1500字节</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int WSAAPI send(</span><br><span class="line">  SOCKET     s,//客户端socket</span><br><span class="line">  const char *buf,//发送缓冲区</span><br><span class="line">  int        len,//发送长度</span><br><span class="line">  int        flags//一般写0</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="参数1-3"><a class="markdownIt-Anchor" href="#参数1-3"></a> 参数1</h5><p>​目标的socket，每个客户端对应唯一的socket</p><h5 id="参数2-3"><a class="markdownIt-Anchor" href="#参数2-3"></a> 参数2</h5><p>​给对方发送的字节串<br>​这个不要超过1500字节<br>​发送时候，协议要进行包装，加上协议信息，也叫协议头，或者叫包头，咱们在理论部分，会非常详细的介绍协议头，以及功能<br>​这个大小不同的协议不一样，链路层14字节，ip头20字节，tcp头20字节，数据结尾还要有状态确认，加起来也几十个字节，所以实际咱们的数据位，不能写1500个，要留出来，那就1024吧，或者最多1400，就差不多了<br>​懂这个大体原理就好<br>​<br>​当然大家这个不一定每次都是正好那么多字节，比如聊天，一句话就十个八个的汉字，别多于1400是最好的<br>​超过1500系统咋办？<br>​系统会分片处理<br>​比如2000个字节<br>​系统分成两个包<br>​1400 + 包头 == 1500<br>假设包头100字节<br>600 + 包头 == 700</p><p>​分两次发送出去<br>​结果<br>​1、系统要给咱们分包再打包，再发送， 客户端接收到了还得拆包，组合数据。从而增加了系统的工作，降低效率<br>​2、有的协议，就把分片后的二包直接丢了</p><h5 id="参数3-2"><a class="markdownIt-Anchor" href="#参数3-2"></a> 参数3</h5><p>​字节个数<br>​1400</p><h5 id="参数4-2"><a class="markdownIt-Anchor" href="#参数4-2"></a> 参数4</h5><p>​写0就行了<br>​其他<br>​MSG_OOB<br>​意义同recv<br>​就不用使用了<br>​带外数据<br>​意义<br>​就是传输一段数据，在外带一个额外的特殊数据<br>​相当于小声BB<br>​实际<br>​就不建议被使用了<br>​1、TCP协议规范（RFC 793）中OOB的原始描述被“主机要求”规范取代（ RFC 1122），但仍有许多机器具有RFC 793 OOB实现。<br>​2、既然两种数据，那咱们就send两次，另一方recv两次就行了，何必搞得那么神神秘秘，浪费计算机精力<br>​MSG_DONTROUTE<br>​指定数据不应受路由限制。 Windows套接字服务提供程序可以选择忽略此标志。</p><h5 id="返回值-4"><a class="markdownIt-Anchor" href="#返回值-4"></a> 返回值</h5><h6 id="成功-4"><a class="markdownIt-Anchor" href="#成功-4"></a> 成功</h6><p>返回写入的字节数</p><h6 id="执行失败"><a class="markdownIt-Anchor" href="#执行失败"></a> 执行失败</h6><p>返回SOCKET_ERROR<br>WSAGetLastError()得到错误码<br>根据错误码信息做相应处理<br>重启<br>等待<br>不用理会</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;WinSock2.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib,<span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//标记</span></span><br><span class="line">BOOL g_nFlag = TRUE;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//打开网络库</span></span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">1</span>,<span class="number">1</span>);</span><br><span class="line">WSADATA wsaData;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//int a = WSAStartup(wdVersion, &amp;wsaData);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//printf("外%d\n", WSAStartup(wdVersion, &amp;wsaData));</span></span><br><span class="line"> <span class="keyword">if</span> (<span class="number">0</span> != WSAStartup(wdVersion,&amp;wsaData)) <span class="comment">// API </span></span><br><span class="line"> &#123;</span><br><span class="line"> <span class="built_in">printf</span> (<span class="string">"WSAStartup fail!"</span>);</span><br><span class="line"> <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">1</span> != HIBYTE(wsaData.wVersion) || <span class="number">1</span> != LOBYTE(wsaData.wVersion))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Version fail!"</span> );</span><br><span class="line"><span class="comment">//关闭库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个SOCKET 监听</span></span><br><span class="line">SOCKET socketListen = socket(AF_INET,SOCK_STREAM,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketListen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"socket fail!"</span>);</span><br><span class="line"><span class="comment">//关闭库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//绑定地址</span></span><br><span class="line">SOCKADDR_IN sockAddress;</span><br><span class="line">sockAddress.sin_family = AF_INET;</span><br><span class="line">sockAddress.sin_addr.s_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line">sockAddress.sin_port = <span class="number">12345</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == bind(socketListen,(struct sockaddr*)&amp;sockAddress,<span class="keyword">sizeof</span>(sockAddress)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"bind fail!"</span>);</span><br><span class="line"><span class="comment">//int nError = ::WSAGetLastError();</span></span><br><span class="line"><span class="comment">//关闭库</span></span><br><span class="line">closesocket(socketListen);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//开始监听</span></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == listen(socketListen,<span class="number">2</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen fail!"</span>);</span><br><span class="line"><span class="comment">//关闭库</span></span><br><span class="line">closesocket(socketListen);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//接受链接</span></span><br><span class="line">SOCKADDR_IN sockClient;</span><br><span class="line"><span class="keyword">int</span> nLen = <span class="keyword">sizeof</span>(sockClient);</span><br><span class="line"></span><br><span class="line">SOCKET newSocket;</span><br><span class="line">newSocket = accept(socketListen, <span class="literal">NULL</span>, <span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//getsockname(socketListen, (struct sockaddr*)&amp;sockClient, &amp;nLen);</span></span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == newSocket)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"listen fail!"</span> );</span><br><span class="line"><span class="comment">//关闭库</span></span><br><span class="line">closesocket(socketListen);</span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(g_nFlag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//判断客户端连接的集合中是否有需要接收的数据</span></span><br><span class="line"><span class="keyword">char</span> szRecvBuffer[<span class="number">5</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">char</span> szSendBuffer[<span class="number">1024</span>];</span><br><span class="line"><span class="comment">//遍历setClient集合，如果发现setClient中的某个</span></span><br><span class="line"><span class="keyword">int</span> nReturnValue = recv(newSocket, szRecvBuffer, <span class="keyword">sizeof</span>(szRecvBuffer)<span class="number">-1</span>, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nRes = WSAGetLastError();</span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> == nReturnValue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//客户端正常关闭   服务端释放Socket</span></span><br><span class="line"><span class="keyword">continue</span> ;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (SOCKET_ERROR == nReturnValue)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//网络中断  </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"客户端中断连接"</span>);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//接收到客户端消息 </span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Client Data : %s \n"</span>,szRecvBuffer);</span><br><span class="line"><span class="comment">//给客户回信</span></span><br><span class="line"><span class="comment">//scanf_s ("%s", szSendBuffer, 1024);</span></span><br><span class="line"><span class="comment">//getchar();</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//send(newSocket, "repeat over", strlen(szSendBuffer)+1, 0);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭socket</span></span><br><span class="line">closesocket(socketListen);</span><br><span class="line">closesocket(newSocket);</span><br><span class="line"><span class="comment">//关闭网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line"><span class="comment">//system("pause");</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="创建客户端步骤"><a class="markdownIt-Anchor" href="#创建客户端步骤"></a> 创建客户端步骤</h3><ol><li>打开网络头文件</li><li>启动网络库</li><li>校验版本</li><li>创建SOCKET</li><li>链接到服务器</li><li>与服务端收发消息</li></ol><h3 id="链接到服务器"><a class="markdownIt-Anchor" href="#链接到服务器"></a> 链接到服务器</h3><p>链接服务器并把服务器信息与服务器socket绑定到一起</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">int WSAAPI connect</span><br><span class="line">(</span><br><span class="line">  SOCKET         s,  //服务器socket</span><br><span class="line">  const sockaddr *name, //服务器Ip地址端口号结构体</span><br><span class="line">  int            namelen //参数2结构体大小</span><br><span class="line">);</span><br></pre></td></tr></table></figure><h5 id="返回值-5"><a class="markdownIt-Anchor" href="#返回值-5"></a> 返回值</h5><h6 id="成功-5"><a class="markdownIt-Anchor" href="#成功-5"></a> 成功</h6><p>​返回0</p><h6 id="失败-4"><a class="markdownIt-Anchor" href="#失败-4"></a> 失败</h6><p>​返回 SOCKET_ERROR<br>​WSAGetLastError()得到错误码<br>​释放空间<br>​closesocket(socketListen);<br>​WSACleanup();</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Winsock2.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> comment(lib, <span class="meta-string">"Ws2_32.lib"</span>)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">WORD wdVersion = MAKEWORD(<span class="number">2</span>, <span class="number">2</span>); </span><br><span class="line">WSADATA wdScokMsg;</span><br><span class="line"><span class="keyword">int</span> nRes = WSAStartup(wdVersion, &amp;wdScokMsg);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="number">0</span> != nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">switch</span> (nRes)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> WSASYSNOTREADY:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"重启下电脑试试，或者检查网络库"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAVERNOTSUPPORTED:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请更新网络库"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEINPROGRESS:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请重新启动"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> WSAEPROCLIM:</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"请尝试关掉不必要的软件，以为当前网络运行提供充足资源"</span>);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//校验版本</span></span><br><span class="line"><span class="keyword">if</span> (<span class="number">2</span> != HIBYTE(wdScokMsg.wVersion) || <span class="number">2</span> != LOBYTE(wdScokMsg.wVersion))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//说明版本不对</span></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//服务器socket</span></span><br><span class="line">SOCKET socketServer = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (INVALID_SOCKET == socketServer)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链接服务器</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">serverMsg</span>;</span></span><br><span class="line">serverMsg.sin_family = AF_INET;</span><br><span class="line">serverMsg.sin_port = htons(<span class="number">12345</span>);</span><br><span class="line">serverMsg.sin_addr.S_un.S_addr = inet_addr(<span class="string">"127.0.0.1"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == connect(socketServer, (struct sockaddr*)&amp;serverMsg, <span class="keyword">sizeof</span>(serverMsg)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line">closesocket(socketServer);</span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">WSACleanup();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1500</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"><span class="comment">//int res = recv(socketServer, buf, 50, 0);</span></span><br><span class="line"><span class="comment">//if (0 == res)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf("链接中断、客户端下线\n");</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else if (SOCKET_ERROR == res)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">////出错了</span></span><br><span class="line"><span class="comment">//int a = WSAGetLastError();</span></span><br><span class="line"><span class="comment">////根据实际情况处理</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//printf("%d   %s\n", res, buf);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">"%s"</span>, buf);</span><br><span class="line"><span class="keyword">if</span> (<span class="string">'0'</span> == buf[<span class="number">0</span>])</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (SOCKET_ERROR == send(socketServer, buf, <span class="built_in">strlen</span>(buf), <span class="number">0</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//出错了</span></span><br><span class="line"><span class="keyword">int</span> a = WSAGetLastError();</span><br><span class="line"><span class="comment">//根据实际情况处理</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清理网络库</span></span><br><span class="line">closesocket(socketServer);</span><br><span class="line">WSACleanup();</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;cs模型的tcpip协议&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#cs模型的tcpip协议&quot;&gt;&lt;/a&gt; CS模型的TCP/IP协议&lt;/h1&gt;
&lt;h3 id=&quot;创建服务端步骤&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
      <category term="Windows网络编程" scheme="https://xiaowuyoucy.github.io/categories/Windows%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B/"/>
    
    
  </entry>
  
  <entry>
    <title>画笔</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/08/pwcp015-%E7%94%BB%E7%AC%94/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/08/pwcp015-画笔/</id>
    <published>2021-06-08T04:52:49.000Z</published>
    <updated>2021-06-08T08:07:32.586Z</updated>
    
    <content type="html"><![CDATA[<h1 id="画笔"><a class="markdownIt-Anchor" href="#画笔"></a> 画笔</h1><h3 id="hpen创建画笔句柄变量"><a class="markdownIt-Anchor" href="#hpen创建画笔句柄变量"></a> HPEN创建画笔句柄变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HPEN hPen1;</span><br></pre></td></tr></table></figure><h3 id="createpen创建画笔"><a class="markdownIt-Anchor" href="#createpen创建画笔"></a> CreatePen创建画笔</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HPEN CreatePen(int nPenStyle, int nWidth, COLORREF crColor);</span><br></pre></td></tr></table></figure><p>nPenStyle ------ Long，指定画笔样式，可以是下述常数之一</p><p>PS_SOLID</p><p>画笔画出的是实线</p><p>PS_DASH</p><p>画笔画出的是虚线（nWidth必须不大于1）</p><p>PS_DOT</p><p>画笔画出的是点线（nWidth必须不大于1）</p><p>PS_DASHDOT</p><p>画笔画出的是点划线（nWidth必须不大于1）</p><p>PS_DASHDOTDOT</p><p>画笔画出的是点-点-划线（nWidth必须不大于1）</p><p>PS_NULL</p><p>画笔不能画图</p><p>PS_INSIDEFRAME</p><p>由椭圆、矩形、圆角矩形、饼图以及弦等生成的封闭对象框时，画线宽度向内扩展。如指定的准确RGB颜色不存在，就进行抖动处理</p><p>nWidth --------- Long，以逻辑单位表示的画笔的宽度</p><p>crColor -------- Long，画笔的RGB颜色</p><p>[返回值]</p><p>Long，如函数执行成功，就返回指向新画笔的一个句柄；否则返回零</p><p>[其它]</p><p>一旦不再需要画笔，记得用DeleteObject函数将其删除</p><h3 id="selectobject"><a class="markdownIt-Anchor" href="#selectobject"></a> SelectObject</h3><p>该函数选择一对象到指定的<a href="https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8B%E6%96%87/6768144" target="_blank" rel="noopener">设备上下文</a>环境中，该新对象替换先前的相同类型的对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGDIOBJ SelectObject(HDC hdc, HGDIOBJ hgdiobj)</span><br></pre></td></tr></table></figure><p>参数：</p><p>hdc：设备上下文环境的句柄。</p><p>hgdiobj：被选择的对象的句柄，该指定对象必须由如下的函数创建。</p><p><a href="https://baike.baidu.com/item/%E4%BD%8D%E5%9B%BE" target="_blank" rel="noopener">位图</a>：CreateBitmap, CreateBitmapIndirect, CreateCompatible Bitmap, <a href="https://baike.baidu.com/item/CreateDIBitmap" target="_blank" rel="noopener">CreateDIBitmap</a>, CreateDIBsection（只有内存<a href="https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8B%E6%96%87" target="_blank" rel="noopener">设备上下文</a>环境可选择位图，并且在同一时刻只能一个设备上下文环境选择位图）。</p><p>画刷：<a href="https://baike.baidu.com/item/CreateBrushIndirect" target="_blank" rel="noopener">CreateBrushIndirect</a>, <a href="https://baike.baidu.com/item/CreateDIBPatternBrush" target="_blank" rel="noopener">CreateDIBPatternBrush</a>, <a href="https://baike.baidu.com/item/CreateDIBPatternBrushPt" target="_blank" rel="noopener">CreateDIBPatternBrushPt</a>, CreateHatchBrush, CreatePatternBrush, CreateSolidBrush。</p><p>字体：CreateFont, CreateFontIndirect。</p><p>笔：CreatePen, CreatePenIndirect。</p><p>区域：<a href="https://baike.baidu.com/item/CombineRgn" target="_blank" rel="noopener">CombineRgn</a>, <a href="https://baike.baidu.com/item/CreateEllipticRgn" target="_blank" rel="noopener">CreateEllipticRgn</a>, <a href="https://baike.baidu.com/item/CreateEllipticRgnIndirect" target="_blank" rel="noopener">CreateEllipticRgnIndirect</a>, <a href="https://baike.baidu.com/item/CreatePolygonRgn" target="_blank" rel="noopener">CreatePolygonRgn</a>, CreateRectRgn, <a href="https://baike.baidu.com/item/CreateRectRgnIndirect" target="_blank" rel="noopener">CreateRectRgnIndirect</a>。</p><p>返回值：如果选择对象不是区域并且函数执行成功，那么返回值是被取代的对象的句柄；如果选择对象是区域并且函数执行成功，返回如下一值:</p><p>SIMPLEREGION：区域由单个矩形组成；</p><p>COMPLEXREGION：区域由多个矩形组成;</p><p>NULLREGION：区域为空。</p><p>如果发生错误并且选择对象不是一个区域，那么返回值为NULL，否则返回HGDI_ERROR。</p><p>注释：该函数返回先前指定类型的选择对象，一个应用程序在它使用新对象进行绘制完成之后，应该用原始的缺省的对象替换新对象。</p><p>应用程序不能同时选择一个位图到多个<a href="https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8B%E6%96%87" target="_blank" rel="noopener">设备上下文</a>环境中。</p><p>ICM：如果被选择的对象是画笔或笔，那么就执行颜色管理。</p><h3 id="getstockobject"><a class="markdownIt-Anchor" href="#getstockobject"></a> GetStockObject</h3><p>该函数检索预定义的备用笔、刷子、字体或者<a href="https://baike.baidu.com/item/%E8%B0%83%E8%89%B2%E6%9D%BF" target="_blank" rel="noopener">调色板</a>的句柄。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">HGDIOBJ GetStockObject(int fnObject)；</span><br></pre></td></tr></table></figure><p>fnObject：指定对象的类型，该参数可取如下值之一；</p><p>BLACK_BRUSH：黑色画刷；DKGRAY_BRUSH：暗灰色画刷；</p><p>DC_BRUSH：在<a href="https://baike.baidu.com/item/Windows98/5246326" target="_blank" rel="noopener">Windows98</a>,Windows NT 5.0和以后版本中为纯颜色画刷，缺省色为白色，可以用<a href="https://baike.baidu.com/item/SetDCBrushColor" target="_blank" rel="noopener">SetDCBrushColor</a>函数改变颜色，更多的信息参见以下的注释部分。</p><p>GRAY_BRUSH：灰色画刷笔；</p><p>HOLLOW_BRUSH：空画刷（相当于NULL_BRUSH）；</p><p>NULL_BRUSH：空画刷（相当于HOLLOW_BRUSH）；</p><p>LTGRAY_BRUSH：亮灰色画刷；</p><p>WHITE_BRUSH：白色画刷；</p><p>BLACK_PEN：黑色钢笔；</p><p>DC_PEN：在<a href="https://baike.baidu.com/item/Windows98/5246326" target="_blank" rel="noopener">Windows98</a>、Windows NT 5.0和以后版本中为纯色钢笔，缺省色为白色，使用<a href="https://baike.baidu.com/item/SetDCPenColor" target="_blank" rel="noopener">SetDCPenColor</a>函数可以改变色彩，更多的信息，参见下面的注释部分。</p><p>WHITE_PEN：白色钢笔；</p><p>ANSI_FIXED_FONT：在Windows中为固定间距（等宽）系统字体；</p><p>ANSI_VAR_FONT：在Windows中为变间距（比例间距）系统字体；</p><p>DEVICE_DEFAUCT_FONT：在WindowsNT中为设备相关字体；</p><p>DEFAULT_GUI_FONT：用户界面对象缺省字体，如菜单和对话框；</p><p>OEM_FIXED_FONT：<a href="https://baike.baidu.com/item/%E5%8E%9F%E5%A7%8B%E8%AE%BE%E5%A4%87%E5%88%B6%E9%80%A0%E5%95%86" target="_blank" rel="noopener">原始设备制造商</a>（OEM）相关固定间距（等宽）字体；</p><p>SYSTEM_FONT：系统字体，在缺省情况下，系统使用系统字体绘制菜单，对话框控制和文本；</p><p>SYSTEM_FIXED_FONT：固定间距（等宽）系统字体，该对象仅提供给兼容16位Windows版本；</p><p>DEFAULT_PALETTE：缺省<a href="https://baike.baidu.com/item/%E8%B0%83%E8%89%B2%E6%9D%BF" target="_blank" rel="noopener">调色板</a>，该调色板由系统调色板中的静态色彩组成。</p><h5 id="返回值"><a class="markdownIt-Anchor" href="#返回值"></a> 返回值</h5><p>如果成功，返回值标识申请的逻辑对象，如果失败，返回值为NULL。</p><h5 id="注释"><a class="markdownIt-Anchor" href="#注释"></a> 注释</h5><p>仅在CS_HREDRAW和CS_VREDRAW风格的窗口中使用DKGRAY_BRUSH、GRAY_BRUSH和LTGRAY_BRUSH对象。</p><p>如果在其他风格的窗口中使灰色画笔，可能导致在窗口移动或改变大小之后出现画笔模式错位现象，原始储存画笔不能被调整。</p><p>HOLLOW_BRUSH和NULL_BRUSH储存对象相等。</p><p>由DEFAULT_GUI_FONT储存对象使用的字体将改变。当想使用菜单、对话框和其他用户界面对象使用的字体时请使用此储存对象。</p><p>不必要通过调用<a href="https://baike.baidu.com/item/DeleteObject/6379900" target="_blank" rel="noopener">DeleteObject</a>函数来删除储存对象。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GetStockObject(BLACK_PEN);</span><br></pre></td></tr></table></figure><h3 id="deleteobject删除对象句柄"><a class="markdownIt-Anchor" href="#deleteobject删除对象句柄"></a> DeleteObject删除对象句柄</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL DeleteObject(HGDIOBJ hObject)；</span><br></pre></td></tr></table></figure><p>hObject：逻辑笔、画笔、字体、<a href="https://baike.baidu.com/item/%E4%BD%8D%E5%9B%BE" target="_blank" rel="noopener">位图</a>、区域或者调色板的句柄。</p><p>返回值：成功，返回非零值；如果指定的句柄无效或者它已被选入<a href="https://baike.baidu.com/item/%E8%AE%BE%E5%A4%87%E4%B8%8A%E4%B8%8B%E6%96%87" target="_blank" rel="noopener">设备上下文</a>环境，则返回值为零。</p><p>注释：当一个绘画对象（如笔或画笔）当前被选入一个设备上下文环境时不要删除该对象。当一个调色板画笔被删除时，与该画笔相关的位图并不被删除，该图必须单独地删除。</p><p>系统备用的画笔不可以DeleteObject</p><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 画笔.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"画笔.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY);</span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//创建画笔句柄变量</span></span><br><span class="line"><span class="keyword">static</span> HPEN hPen1, hPen2, hPen3,hOldPen;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxClient, cyClient;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cyLine;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line">cyLine   = cyClient / <span class="number">8</span>;</span><br><span class="line"><span class="comment">//创建画笔句柄,除了PS_SOLID可以设置宽度,其他的都不可以设置宽度 CreatePen(, 宽度 ,)</span></span><br><span class="line">hPen1 = CreatePen(PS_SOLID,<span class="number">1</span>,RGB(<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>));</span><br><span class="line">hPen2 = CreatePen(PS_DASH, <span class="number">1</span>, RGB(<span class="number">255</span>, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">hPen3 = CreatePen(PS_DOT, <span class="number">1</span>, RGB(<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>));</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//SelectObject 设置画笔</span></span><br><span class="line">hOldPen = (HPEN)SelectObject(hdc, hPen1);</span><br><span class="line"><span class="comment">//设置起点位置</span></span><br><span class="line">MoveToEx(hdc,<span class="number">0</span>,cyLine * <span class="number">1</span>,<span class="literal">NULL</span>);</span><br><span class="line"><span class="comment">//从起点画到终点</span></span><br><span class="line">LineTo(hdc,cxClient, cyLine * <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, hPen2);</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyLine * <span class="number">2</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyLine * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, hPen3);</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyLine * <span class="number">3</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyLine * <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc, CreatePen(PS_DASHDOT,<span class="number">1</span>,RGB(<span class="number">20</span>,<span class="number">25</span>,<span class="number">255</span>)));</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyLine * <span class="number">4</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyLine * <span class="number">4</span>);</span><br><span class="line"><span class="comment">//DeleteObject删除旧画笔句柄</span></span><br><span class="line">DeleteObject(SelectObject(hdc, CreatePen(PS_DASHDOTDOT, <span class="number">1</span>, RGB(<span class="number">20</span>, <span class="number">25</span>, <span class="number">255</span>))));</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyLine * <span class="number">5</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyLine * <span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//系统备用的画笔不可以DeleteObject</span></span><br><span class="line"><span class="comment">//GetStockObject获取系统备用对象,获取备用画笔句柄</span></span><br><span class="line">DeleteObject(SelectObject(hdc,GetStockObject(BLACK_PEN) ));</span><br><span class="line">MoveToEx(hdc, <span class="number">0</span>, cyLine * <span class="number">6</span>, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, cxClient, cyLine * <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">SelectObject(hdc,hOldPen);</span><br><span class="line">DeleteObject(hPen1);</span><br><span class="line">DeleteObject(hPen2);</span><br><span class="line">DeleteObject(hPen3);</span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;画笔&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#画笔&quot;&gt;&lt;/a&gt; 画笔&lt;/h1&gt;
&lt;h3 id=&quot;hpen创建画笔句柄变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hpen创建画笔句柄变量&quot;&gt;&lt;/a
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>贝塞尔曲线</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/07/pwcp014-%E8%B4%9D%E5%A1%9E%E5%B0%94%E6%9B%B2%E7%BA%BF/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/07/pwcp014-贝塞尔曲线/</id>
    <published>2021-06-07T13:26:23.000Z</published>
    <updated>2021-06-08T05:11:21.800Z</updated>
    
    <content type="html"><![CDATA[<h1 id="贝塞尔曲线"><a class="markdownIt-Anchor" href="#贝塞尔曲线"></a> 贝塞尔曲线</h1><h3 id="polybezier"><a class="markdownIt-Anchor" href="#polybezier"></a> PolyBezier</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL PolyBezier(HDC hdc, CONST POINT *lppt, DWORD cPoints);</span><br></pre></td></tr></table></figure><p>● 参数</p><p>hdc：指定的设备环境句柄。</p><p>lppt：POINT结构<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>的<a href="https://baike.baidu.com/item/%E6%8C%87%E9%92%88" target="_blank" rel="noopener">指针</a>，包括了<code>样条端点和控制点的坐标，其顺序是起点的坐标、起点的控制点的坐标、终点的控制点的坐标和终点的坐标</code>。</p><p>cPoints：指明<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>中的点的个数。</p><p>● 返回值</p><p>若<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，则返回非零，否则返回零。</p><h3 id="polybezierto"><a class="markdownIt-Anchor" href="#polybezierto"></a> PolyBezierTo</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">BOOL PolyBezierTo(</span><br><span class="line">HDChdc,</span><br><span class="line">CONST POINT*lppt,</span><br><span class="line">DWORD cCount</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>hdc ------------ Long，要在其中绘图的设备场景</p><p>lppt ----------- POINTAPI，指定一个POINTAPI结构<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>。其中的第一个结构指定了起点。剩下的点三个一组——包括两个控件点和一个终点.</p><p>cCount---------- lppt<a href="https://baike.baidu.com/item/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>的总点数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">//按下鼠标右键消息</span><br><span class="line">WM_RBUTTONDOWN:</span><br><span class="line">//按下鼠标左键消息</span><br><span class="line">WM_LBUTTONDOWN:</span><br><span class="line">//移动鼠标消息</span><br><span class="line">WM_MOUSEMOVE:</span><br><span class="line"></span><br><span class="line">wParam参数是按下了哪个键</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 贝塞尔曲线.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"贝塞尔曲线.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY);</span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawBezier</span><span class="params">(HDC hdc,POINT apt[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">PolyBezier(hdc,apt,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc,apt[<span class="number">0</span>].x, apt[<span class="number">0</span>].y,<span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, apt[<span class="number">1</span>].x, apt[<span class="number">1</span>].y);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc, apt[<span class="number">3</span>].x, apt[<span class="number">3</span>].y, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, apt[<span class="number">2</span>].x, apt[<span class="number">2</span>].y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DrawBezier2</span><span class="params">(HDC hdc, POINT apt[])</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">MoveToEx(hdc, apt[<span class="number">0</span>].x, apt[<span class="number">0</span>].y, <span class="literal">NULL</span>);</span><br><span class="line">PolyBezierTo(hdc, apt + <span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc, apt[<span class="number">0</span>].x, apt[<span class="number">0</span>].y, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, apt[<span class="number">1</span>].x, apt[<span class="number">1</span>].y);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc, apt[<span class="number">3</span>].x, apt[<span class="number">3</span>].y, <span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc, apt[<span class="number">2</span>].x, apt[<span class="number">2</span>].y);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> POINT apt[<span class="number">4</span>];</span><br><span class="line">HDC hdc;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_RBUTTONDOWN:</span><br><span class="line"><span class="keyword">case</span> WM_LBUTTONDOWN:</span><br><span class="line"><span class="keyword">case</span> WM_MOUSEMOVE:</span><br><span class="line"><span class="keyword">if</span> (wParam &amp; MK_RBUTTON || wParam &amp; MK_LBUTTON )</span><br><span class="line">&#123;</span><br><span class="line">hdc = GetDC(hWnd);</span><br><span class="line">            <span class="comment">//用白色画笔还原</span></span><br><span class="line">SelectObject(hdc,GetStockObject(WHITE_PEN));</span><br><span class="line">DrawBezier(hdc, apt);</span><br><span class="line"><span class="comment">//如果按下鼠标左键</span></span><br><span class="line"><span class="keyword">if</span> (wParam &amp; MK_LBUTTON) &#123;</span><br><span class="line">apt[<span class="number">1</span>].x = LOWORD(lParam);</span><br><span class="line">apt[<span class="number">1</span>].y = HIWORD(lParam);</span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//如果按下鼠标右键</span></span><br><span class="line"><span class="keyword">if</span> (wParam &amp; MK_RBUTTON) &#123;</span><br><span class="line">apt[<span class="number">2</span>].x = LOWORD(lParam);</span><br><span class="line">apt[<span class="number">2</span>].y = HIWORD(lParam);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//用黑色画笔画</span></span><br><span class="line">SelectObject(hdc, GetStockObject(BLACK_PEN));</span><br><span class="line">DrawBezier(hdc, apt);</span><br><span class="line"><span class="comment">//DrawBezier2(hdc, apt);</span></span><br><span class="line">ReleaseDC(hWnd,hdc);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">            <span class="comment">//设置起点,起点控点,终点控点,终点</span></span><br><span class="line">apt[<span class="number">0</span>].x = LOWORD(lParam) / <span class="number">5</span>;</span><br><span class="line">apt[<span class="number">0</span>].y = HIWORD(lParam)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">apt[<span class="number">1</span>].x = <span class="number">0</span>;</span><br><span class="line">apt[<span class="number">1</span>].y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">apt[<span class="number">2</span>].x = LOWORD(lParam) * <span class="number">4</span> / <span class="number">5</span>;</span><br><span class="line">apt[<span class="number">2</span>].y = HIWORD(lParam)/<span class="number">2</span> - <span class="number">200</span>;</span><br><span class="line"></span><br><span class="line">apt[<span class="number">3</span>].x = LOWORD(lParam) * <span class="number">4</span>/ <span class="number">5</span>;</span><br><span class="line">apt[<span class="number">3</span>].y = HIWORD(lParam)/<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">DrawBezier(hdc,apt);</span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../themes/pure/source/images/javawz/1623079557682.png" alt="1623079557682"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;贝塞尔曲线&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#贝塞尔曲线&quot;&gt;&lt;/a&gt; 贝塞尔曲线&lt;/h1&gt;
&lt;h3 id=&quot;polybezier&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#polybezier
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>边框绘制函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/07/pwcp013-%E8%BE%B9%E6%A1%86%E7%BB%98%E5%88%B6%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/07/pwcp013-边框绘制函数/</id>
    <published>2021-06-07T12:08:10.000Z</published>
    <updated>2021-06-07T13:06:27.013Z</updated>
    
    <content type="html"><![CDATA[<h1 id="边框绘制函数"><a class="markdownIt-Anchor" href="#边框绘制函数"></a> 边框绘制函数</h1><h3 id="rectangle矩形"><a class="markdownIt-Anchor" href="#rectangle矩形"></a> Rectangle矩形</h3><p>使用该函数画一个矩形，可以用当前的画笔画矩形轮廓，用当前画刷进行填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL Rectangle(HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect)；</span><br></pre></td></tr></table></figure><p>hdc：设备环境句柄。</p><p>nLeftRect：指定矩形左上角的逻辑X坐标。</p><p>nTopRect：指定矩形左上角的逻辑Y坐标。</p><p>nRightRect：指定矩形右下角的逻辑X坐标。</p><p>nBottomRect：指定矩形右下角的逻辑Y坐标。</p><p>返回值：如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，返回值非零，否则返回值为0。</p><p>Windows NT：若想获得更多错误信息，请调用GetLastError函数。</p><p>备注：此函数不使用和改变当前位置。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Rectangle(hdc,200,50,600,400);</span><br></pre></td></tr></table></figure><h3 id="ellipse画圆或椭圆"><a class="markdownIt-Anchor" href="#ellipse画圆或椭圆"></a> Ellipse画圆或椭圆</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">BOOL Ellipse(HDC hdc,</span><br><span class="line">int nLeftRect,</span><br><span class="line">int nTopRect,</span><br><span class="line">int nRightRect,</span><br><span class="line">int nBottomRect</span><br><span class="line">)；</span><br></pre></td></tr></table></figure><p>hdc：设备环境句柄。</p><p>nLeftRect：指定限定矩形左上角的X坐标。</p><p>nTopRect：指定限定矩形左上角的Y坐标。</p><p>nRightRect：指定限定矩形右下角的X坐标。</p><p>nBottomRect：指定限定矩形右下角的Y坐标。</p><p>如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，返回值非零；如果函数调用失败，返回值是0。</p><p>Windows NT：若想获得更多<a href="https://baike.baidu.com/item/%E9%94%99%E8%AF%AF%E4%BF%A1%E6%81%AF" target="_blank" rel="noopener">错误信息</a>，请调用GetLastError函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ellipse(hdc, 200, 50, 600, 400);</span><br></pre></td></tr></table></figure><h3 id="roundrect带圆角的矩形"><a class="markdownIt-Anchor" href="#roundrect带圆角的矩形"></a> RoundRect带圆角的矩形</h3><p>该函数画一个带圆角的矩形，此矩形由当前画笔画轮廓，由当前画刷填充。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL RoundRect(HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nWidth, int nHeight)；</span><br></pre></td></tr></table></figure><p>参数：</p><p>hdc：设备环境句柄。</p><p>nLeftRect：指定矩形左上角的X坐标。</p><p>nTopRect：指定矩形左上角的Y坐标。</p><p>nRightRect：指定矩形右下角的X坐标。</p><p>nbottomRect：指定矩形右下角的Y坐标。</p><p>nWidth：指定用来画圆角的椭圆的宽。</p><p>nHeight：指定用来画圆角的椭圆的高。</p><p>返回值：如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，则返回值非空，否则返回值是0。</p><p>Windows NT：若想获得更多的错误信息，请调用GetLastError函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RoundRect(hdc, 700, 50, 1100, 400,100,100);</span><br></pre></td></tr></table></figure><h3 id="arc画圆弧"><a class="markdownIt-Anchor" href="#arc画圆弧"></a> ARC画圆弧</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">BOOL Arc(</span><br><span class="line">HDC hdc,</span><br><span class="line">int xLeft,</span><br><span class="line">int yTop,</span><br><span class="line">int xRight,</span><br><span class="line">int yBottom,</span><br><span class="line">int XStart,</span><br><span class="line">int YStart,</span><br><span class="line">int XEnd,</span><br><span class="line">int YEnd);</span><br></pre></td></tr></table></figure><p><em>hdc</em> 绘画的窗口句柄</p><p>xLeft和nyTopt指定外接矩形左上角坐标</p><p>xRight和yBottom指定外接矩形右下角坐标</p><p>xStart和yStart指定圆弧开始坐标</p><p>xEnd和nyEnd指定圆弧结束坐标</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Arc(hdc, 850, 500, 1000, 650, 20, 600, 1200, 400);</span><br></pre></td></tr></table></figure><h3 id="chord画弦"><a class="markdownIt-Anchor" href="#chord画弦"></a> Chord画弦</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BOOL Chord(</span><br><span class="line">  DC: HDC;                                &#123;设备环境句柄&#125;</span><br><span class="line">  int X1, Y1, X2, Y2, X3, Y3, X4, Y4 ; &#123;四个坐标点&#125;</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>参数表</p><p>X1,Y1 ---------- Long，指定围绕椭圆的一个矩形的左上角位置</p><p>X2,Y2 ---------- Long，指定围绕椭圆的一个矩形的右下角位置</p><p>X3,Y3 ---------- Long，指定与椭圆相交的一条线的一个点</p><p>X4,Y4 ---------- Long，指定与椭圆相交的一条线的另一个点</p><p>返回值</p><p>Long，非零表示成功，零表示失败。会设置<a href="https://baike.baidu.com/item/GetLastError/4278820" target="_blank" rel="noopener">GetLastError</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Chord(hdc, 450,500,800,850, 20, 600, 1200, 400);</span><br></pre></td></tr></table></figure><h3 id="pie画圆饼"><a class="markdownIt-Anchor" href="#pie画圆饼"></a> Pie画圆饼</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BOOL Pie(HDC hdc, int nLeftRect, int nTopRect, int nRightRect, int nBottomRect, int nXRadial1, int nYRadial1, int nXRadial2, int nYRadial2)；</span><br></pre></td></tr></table></figure><p>hdc：设备环境句柄。</p><p>nLeftRect：指定限定矩形左上角的X坐标。</p><p>nTopRect：指定限定矩形左上角的Y坐标。</p><p>nRigthRect：指定限定矩形右下角的X坐标。</p><p>nBottomRect：指定限定矩形右下角的Y坐标。</p><p>nXRadial1：指定第一条半径的端点的X坐标。</p><p>nYRadial1：指定第一条半径的端点的Y坐标。</p><p>nXRadial2：指定第二条半径的端点的X坐标。</p><p>nYRadial2：指定第二条半径的端点的Y坐标。</p><p>返回值：如果<a href="https://baike.baidu.com/item/%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8" target="_blank" rel="noopener">函数调用</a>成功，返回值非零；如果函数调用失败，返回值是0。</p><p>Windows：要得到更多的错误信息，调用GetLastError。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Pie(hdc,50,500,400,850,500,0,50,650);</span><br></pre></td></tr></table></figure><hr><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 边框绘制函数.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"边框绘制函数.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_MY);</span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW ,</span><br><span class="line">     <span class="number">0</span>, <span class="number">0</span>, GetSystemMetrics(SM_CXSCREEN), GetSystemMetrics(SM_CYSCREEN), <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line"><span class="comment">//画矩形</span></span><br><span class="line">Rectangle(hdc,<span class="number">200</span>,<span class="number">50</span>,<span class="number">600</span>,<span class="number">400</span>);</span><br><span class="line"><span class="comment">//画椭圆或正圆</span></span><br><span class="line">Ellipse(hdc, <span class="number">200</span>, <span class="number">50</span>, <span class="number">600</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">//画带圆角的矩形</span></span><br><span class="line">RoundRect(hdc, <span class="number">700</span>, <span class="number">50</span>, <span class="number">1100</span>, <span class="number">400</span>,<span class="number">100</span>,<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//画弦</span></span><br><span class="line">Chord(hdc, <span class="number">450</span>,<span class="number">500</span>,<span class="number">800</span>,<span class="number">850</span>, <span class="number">20</span>, <span class="number">600</span>, <span class="number">1200</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">//画弧</span></span><br><span class="line">Arc(hdc, <span class="number">850</span>, <span class="number">500</span>, <span class="number">1000</span>, <span class="number">650</span>, <span class="number">20</span>, <span class="number">600</span>, <span class="number">1200</span>, <span class="number">400</span>);</span><br><span class="line"><span class="comment">//画圆饼</span></span><br><span class="line">Pie(hdc,<span class="number">50</span>,<span class="number">500</span>,<span class="number">400</span>,<span class="number">850</span>,<span class="number">500</span>,<span class="number">0</span>,<span class="number">50</span>,<span class="number">650</span>);</span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;边框绘制函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#边框绘制函数&quot;&gt;&lt;/a&gt; 边框绘制函数&lt;/h1&gt;
&lt;h3 id=&quot;rectangle矩形&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#rectan
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
  <entry>
    <title>正弦波</title>
    <link href="https://xiaowuyoucy.github.io/2021/06/07/pwcp012-%E6%AD%A3%E5%BC%A6%E6%B3%A2/"/>
    <id>https://xiaowuyoucy.github.io/2021/06/07/pwcp012-正弦波/</id>
    <published>2021-06-07T10:49:41.000Z</published>
    <updated>2021-06-07T11:12:28.817Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正弦波"><a class="markdownIt-Anchor" href="#正弦波"></a> 正弦波</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 正弦波.cpp : 定义应用程序的入口点。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"stdafx.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"正弦波.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX_LOADSTRING 100</span></span><br><span class="line"><span class="comment">//点的数量</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> NUM 1000</span></span><br><span class="line"><span class="comment">//波的数量10</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> TWOPI (10 * 3.14159265)</span></span><br><span class="line"><span class="comment">// 全局变量: </span></span><br><span class="line">HINSTANCE hInst;                                <span class="comment">// 当前实例</span></span><br><span class="line">WCHAR szTitle[MAX_LOADSTRING];                  <span class="comment">// 标题栏文本</span></span><br><span class="line">WCHAR szWindowClass[MAX_LOADSTRING];            <span class="comment">// 主窗口类名</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 此代码模块中包含的函数的前向声明: </span></span><br><span class="line"><span class="function">ATOM                <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span>;</span><br><span class="line"><span class="function">BOOL                <span class="title">InitInstance</span><span class="params">(HINSTANCE, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="function">LRESULT CALLBACK    <span class="title">WndProc</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"><span class="function">INT_PTR CALLBACK    <span class="title">About</span><span class="params">(HWND, UINT, WPARAM, LPARAM)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> APIENTRY <span class="title">wWinMain</span><span class="params">(_In_ HINSTANCE hInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_opt_ HINSTANCE hPrevInstance,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ LPWSTR    lpCmdLine,</span></span></span><br><span class="line"><span class="function"><span class="params">                     _In_ <span class="keyword">int</span>       nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(hPrevInstance);</span><br><span class="line">    UNREFERENCED_PARAMETER(lpCmdLine);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// <span class="doctag">TODO:</span> 在此放置代码。</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// 初始化全局字符串</span></span><br><span class="line">    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);</span><br><span class="line">    LoadStringW(hInstance, IDC_MY, szWindowClass, MAX_LOADSTRING);</span><br><span class="line">    MyRegisterClass(hInstance);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 执行应用程序初始化: </span></span><br><span class="line">    <span class="keyword">if</span> (!InitInstance (hInstance, nCmdShow))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> FALSE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_MY));</span><br><span class="line"></span><br><span class="line">    MSG msg;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 主消息循环: </span></span><br><span class="line">    <span class="keyword">while</span> (GetMessage(&amp;msg, <span class="literal">nullptr</span>, <span class="number">0</span>, <span class="number">0</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (!TranslateAccelerator(msg.hwnd, hAccelTable, &amp;msg))</span><br><span class="line">        &#123;</span><br><span class="line">            TranslateMessage(&amp;msg);</span><br><span class="line">            DispatchMessage(&amp;msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) msg.wParam;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: MyRegisterClass()</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的: 注册窗口类。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">ATOM <span class="title">MyRegisterClass</span><span class="params">(HINSTANCE hInstance)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    WNDCLASSEXW wcex;</span><br><span class="line"></span><br><span class="line">    wcex.cbSize = <span class="keyword">sizeof</span>(WNDCLASSEX);</span><br><span class="line"></span><br><span class="line">    wcex.style          = CS_HREDRAW | CS_VREDRAW;</span><br><span class="line">    wcex.lpfnWndProc    = WndProc;</span><br><span class="line">    wcex.cbClsExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.cbWndExtra     = <span class="number">0</span>;</span><br><span class="line">    wcex.hInstance      = hInstance;</span><br><span class="line">    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_MY));</span><br><span class="line">    wcex.hCursor        = LoadCursor(<span class="literal">nullptr</span>, IDC_ARROW);</span><br><span class="line">    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+<span class="number">1</span>);</span><br><span class="line">wcex.lpszMenuName= <span class="literal">NULL</span>;<span class="comment">// MAKEINTRESOURCEW(IDC_MY);</span></span><br><span class="line">    wcex.lpszClassName  = szWindowClass;</span><br><span class="line">    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> RegisterClassExW(&amp;wcex);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   函数: InitInstance(HINSTANCE, int)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   目的: 保存实例句柄并创建主窗口</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//   注释: </span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//        在此函数中，我们在全局变量中保存实例句柄并</span></span><br><span class="line"><span class="comment">//        创建和显示主程序窗口。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">BOOL <span class="title">InitInstance</span><span class="params">(HINSTANCE hInstance, <span class="keyword">int</span> nCmdShow)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">   hInst = hInstance; <span class="comment">// 将实例句柄存储在全局变量中</span></span><br><span class="line"></span><br><span class="line">   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,</span><br><span class="line">      CW_USEDEFAULT, <span class="number">0</span>, CW_USEDEFAULT, <span class="number">0</span>, <span class="literal">nullptr</span>, <span class="literal">nullptr</span>, hInstance, <span class="literal">nullptr</span>);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">if</span> (!hWnd)</span><br><span class="line">   &#123;</span><br><span class="line">      <span class="keyword">return</span> FALSE;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   ShowWindow(hWnd, nCmdShow);</span><br><span class="line">   UpdateWindow(hWnd);</span><br><span class="line"></span><br><span class="line">   <span class="keyword">return</span> TRUE;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  函数: WndProc(HWND, UINT, WPARAM, LPARAM)</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  目的:    处理主窗口的消息。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//  WM_COMMAND  - 处理应用程序菜单</span></span><br><span class="line"><span class="comment">//  WM_PAINT    - 绘制主窗口</span></span><br><span class="line"><span class="comment">//  WM_DESTROY  - 发送退出消息并返回</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="function">LRESULT CALLBACK <span class="title">WndProc</span><span class="params">(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> cxClient, cyClient;</span><br><span class="line">POINT apt[NUM];</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> WM_SIZE:</span><br><span class="line">cxClient = LOWORD(lParam);</span><br><span class="line">cyClient = HIWORD(lParam);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">int</span> wmId = LOWORD(wParam);</span><br><span class="line">            <span class="comment">// 分析菜单选择: </span></span><br><span class="line">            <span class="keyword">switch</span> (wmId)</span><br><span class="line">            &#123;</span><br><span class="line">            <span class="keyword">case</span> IDM_ABOUT:</span><br><span class="line">                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">case</span> IDM_EXIT:</span><br><span class="line">                DestroyWindow(hWnd);</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_PAINT:</span><br><span class="line">        &#123;</span><br><span class="line">            PAINTSTRUCT ps;</span><br><span class="line">            HDC hdc = BeginPaint(hWnd, &amp;ps);</span><br><span class="line"></span><br><span class="line">MoveToEx(hdc,<span class="number">0</span>,cyClient / <span class="number">2</span>,<span class="literal">NULL</span>);</span><br><span class="line">LineTo(hdc,cxClient,cyClient / <span class="number">2</span>);</span><br><span class="line"><span class="comment">//将正弦波点分成NUM份</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; NUM; i++)</span><br><span class="line">&#123;</span><br><span class="line">apt[i].x = i * cxClient / NUM;</span><br><span class="line">apt[i].y = (<span class="keyword">int</span>) cyClient/<span class="number">2</span> *(<span class="number">1</span> - <span class="built_in">sin</span>(i * TWOPI/NUM));</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">            <span class="comment">//连接点</span></span><br><span class="line">Polyline(hdc,apt,NUM);</span><br><span class="line"></span><br><span class="line">            <span class="comment">// <span class="doctag">TODO:</span> 在此处添加使用 hdc 的任何绘图代码...</span></span><br><span class="line">            EndPaint(hWnd, &amp;ps);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> WM_DESTROY:</span><br><span class="line">        PostQuitMessage(<span class="number">0</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">return</span> DefWindowProc(hWnd, message, wParam, lParam);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// “关于”框的消息处理程序。</span></span><br><span class="line"><span class="function">INT_PTR CALLBACK <span class="title">About</span><span class="params">(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    UNREFERENCED_PARAMETER(lParam);</span><br><span class="line">    <span class="keyword">switch</span> (message)</span><br><span class="line">    &#123;</span><br><span class="line">    <span class="keyword">case</span> WM_INITDIALOG:</span><br><span class="line">        <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> WM_COMMAND:</span><br><span class="line">        <span class="keyword">if</span> (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)</span><br><span class="line">        &#123;</span><br><span class="line">            EndDialog(hDlg, LOWORD(wParam));</span><br><span class="line">            <span class="keyword">return</span> (INT_PTR)TRUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (INT_PTR)FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正弦波&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#正弦波&quot;&gt;&lt;/a&gt; 正弦波&lt;/h1&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span cla
      
    
    </summary>
    
      <category term="windows程序设计2" scheme="https://xiaowuyoucy.github.io/categories/windows%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A12/"/>
    
    
  </entry>
  
</feed>
