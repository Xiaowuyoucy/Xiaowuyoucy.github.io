<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-04-15T15:11:30.054Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>枚举的增强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0007-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0007-枚举的增强/</id>
    <published>2021-04-15T15:10:03.000Z</published>
    <updated>2021-04-15T15:11:30.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举的增强"><a class="markdownIt-Anchor" href="#枚举的增强"></a> 枚举的增强</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Son &#123;</span><br><span class="line">xiaom,</span><br><span class="line">xiaoh,</span><br><span class="line">xiaol,</span><br><span class="line">xiaolan,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//可以省略enum关键字不写</span></span><br><span class="line">Son house = xiaom;</span><br><span class="line"><span class="comment">//c++中,枚举变量只能用枚举常量来赋值</span></span><br><span class="line"><span class="comment">//house = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; house &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举的增强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#枚举的增强&quot;&gt;&lt;/a&gt; 枚举的增强&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>const的增强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0006-const%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0006-const的增强/</id>
    <published>2021-04-15T14:19:28.000Z</published>
    <updated>2021-04-15T14:58:24.627Z</updated>
    
    <content type="html"><![CDATA[<h1 id="const的增强"><a class="markdownIt-Anchor" href="#const的增强"></a> const的增强</h1><p><code>const int * a</code>表示指针指向的内存空间不可以修改</p><p><code>int * const a</code>表示不能修改a的指向</p><p><code>const int * const a</code> 表示a的内存和a所指向的内存都不可以修改</p><p><img src="../../themes/pure/source/images/javawz/1618497147515.png" alt="1618497147515"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在c语言中a是一个假常量,c++中a是一个真的常量,只不过在编译阶段完成,而不是预处理阶段</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个临时变量的地址赋值给p1,所以修改*p1时,a不会改变</span></span><br><span class="line"><span class="keyword">int</span> * p1 = (<span class="keyword">int</span> *)&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c++中const修饰过的整型变量可以声明数组,c语言不可以</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[a] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">*p1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p1 = "</span> &lt;&lt; *p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../themes/pure/source/images/javawz/1618498667603.png" alt="1618498667603"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;const的增强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#const的增强&quot;&gt;&lt;/a&gt; const的增强&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;const int * a&lt;/code&gt;表示指针指向的内存空间不可以修改&lt;/p&gt;
&lt;p&gt;&lt;cod
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>C++语言对C的增强和bool</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0004-C-%E8%AF%AD%E8%A8%80%E5%AF%B9C%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%92%8Cbool/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0004-C-语言对C的增强和bool/</id>
    <published>2021-04-14T17:53:25.000Z</published>
    <updated>2021-04-14T18:31:06.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c语言对c的增强和bool"><a class="markdownIt-Anchor" href="#c语言对c的增强和bool"></a> C++语言对C的增强和bool</h1><ul><li><p>变量定义</p><ul><li>c语言:早期版本中规定要定义在函数首部</li><li>c++:在函数内随便一个位置都可以</li></ul></li><li><p>c<ins>对定义全局变量的检测能力增强了,c语言在同一个地方可以定义多次重名的全局变量,c</ins>不可以.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_a;</span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">c语言会处理成:</span></span><br><span class="line"><span class="comment">int g_a;</span></span><br><span class="line"><span class="comment">g_a = 2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>struct</code>的类型增强<ul><li>C++定义<code>struct</code>变量时可以不用加<code>struct</code>关键字</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//可以不用加struct关键字</span></span><br><span class="line">student xiaoming;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++不可以没有函数类型,c语言可以没有函数类型,默认是int</p><p>C++填写函数参数必须是对应个数,C语言可以不对应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c语言可以没有函数类型,默认为int</span></span><br><span class="line">fun()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入过多的参数,c语言也不会出错</span></span><br><span class="line">fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">61</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++引入了<code>bool</code>类型来表示<code>true</code>和<code>false</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">bool</span>)flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(flag) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag = <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag = <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;c语言对c的增强和bool&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c语言对c的增强和bool&quot;&gt;&lt;/a&gt; C++语言对C的增强和bool&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c语言:早期版本中
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>三目运算符的加强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0005-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8A%A0%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0005-三目运算符的加强/</id>
    <published>2021-04-14T17:53:25.000Z</published>
    <updated>2021-04-15T14:18:49.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三目运算符的加强"><a class="markdownIt-Anchor" href="#三目运算符的加强"></a> 三目运算符的加强</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//三目运算符可以用作左值,返回的是a或b的引用</span></span><br><span class="line"><span class="comment">//c语言则不行,除非这样写(a &gt; b ? &amp;a : &amp;b) = 100;</span></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三目运算符的加强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#三目运算符的加强&quot;&gt;&lt;/a&gt; 三目运算符的加强&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>自定义命名空间</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0003-%E8%87%AA%E5%AE%9A%E4%B9%89%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0003-自定义命名空间/</id>
    <published>2021-04-14T17:37:03.000Z</published>
    <updated>2021-04-14T18:29:54.500Z</updated>
    
    <content type="html"><![CDATA[<h1 id="自定义命名空间"><a class="markdownIt-Anchor" href="#自定义命名空间"></a> 自定义命名空间</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">语法:</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">namespace 自定义命名空间名&#123;</span></span><br><span class="line"><span class="comment">内容</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> xiaochenyanA &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> xiaochenyanB &#123;</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//可以嵌套定义命名空间</span></span><br><span class="line"><span class="keyword">namespace</span> xiaochenyanC &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;<span class="keyword">student_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> xiaochenyanD &#123;</span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="keyword">double</span> score;</span><br><span class="line">&#125;<span class="keyword">student_t</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//默认使用xiaochenyanC命名空间下的变量或对象,不建议这样做</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xiaochenyanC;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xiaochenyanA;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xiaochenyanB;</span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> xiaochenyanB::xiaochenyanC;</span><br><span class="line"></span><br><span class="line"><span class="keyword">student_t</span> xiaoming = &#123; <span class="number">100.0f</span> &#125;;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xiaoming.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//如果命名空间中的对象冲突,需要使用命名空间名来引用对象</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (xiaochenyanA::a = <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xiaochenyanA::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xiaochenyanB::a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//程序暂停</span></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;自定义命名空间&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#自定义命名空间&quot;&gt;&lt;/a&gt; 自定义命名空间&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>namespace命名空间</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0002-namespace%E5%91%BD%E5%90%8D%E7%A9%BA%E9%97%B4/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0002-namespace命名空间/</id>
    <published>2021-04-14T16:43:28.000Z</published>
    <updated>2021-04-14T18:29:40.618Z</updated>
    
    <content type="html"><![CDATA[<h1 id="namespace命名空间"><a class="markdownIt-Anchor" href="#namespace命名空间"></a> namespace命名空间</h1><p>假如同一个公司有两个张三，当你叫张三的时候，两个张三都会回头。这就出现了二义性。</p><p>为了区分这两个张三，就引进了命名空间。</p><p>第一个张三可以叫为张三A</p><p>第二个张三可以叫为张三B</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="comment">//方式1，可以直接使用std内的元素</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式2，可以直接使用cout</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//方式3，通过命名空间名来引用cout</span></span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//只能在本复合语句内使用</span></span><br><span class="line"><span class="keyword">using</span> <span class="built_in">std</span>::<span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a;<span class="comment">//出错</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;namespace命名空间&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#namespace命名空间&quot;&gt;&lt;/a&gt; namespace命名空间&lt;/h1&gt;
&lt;p&gt;假如同一个公司有两个张三，当你叫张三的时候，两个张三都会回头。这就出现了二义性
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个c++程序 hello world</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0001%E7%AC%AC%E4%B8%80%E4%B8%AAc-%E7%A8%8B%E5%BA%8F-hello-world/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0001第一个c-程序-hello-world/</id>
    <published>2021-04-14T16:37:42.000Z</published>
    <updated>2021-04-14T16:42:43.811Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一个c程序-hello-world"><a class="markdownIt-Anchor" href="#第一个c程序-hello-world"></a> 第一个c++程序 hello world</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"hello world"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">int</span> a;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a;</span><br><span class="line">    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>cout 表示输出流，将hello world流到终端</p><p>endl 表示换行</p><p>cin 表示输入流，从键盘输入内容流到变量a中</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> <span class="number">0</span></span><br><span class="line"><span class="comment">//可以理解为注释,编译器会忽略里面的代码</span></span><br><span class="line"></span><br><span class="line">endif</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一个c程序-hello-world&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一个c程序-hello-world&quot;&gt;&lt;/a&gt; 第一个c++程序 hello world&lt;/h1&gt;
&lt;figure class=&quot;highlight 
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>第四章网络层</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/14/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0-%E7%AC%AC%E5%9B%9B%E7%AB%A0%E7%BD%91%E7%BB%9C%E5%B1%82/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/14/计算机网络原理笔记-第四章网络层/</id>
    <published>2021-04-14T15:31:49.000Z</published>
    <updated>2021-04-14T16:06:16.574Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络原理笔记-第四章-网络层"><a class="markdownIt-Anchor" href="#计算机网络原理笔记-第四章-网络层"></a> 计算机网络原理笔记 第四章 网络层</h3><ul><li><ul><li><a href="#网络层提供得两种服务">网络层提供得两种服务</a></li></ul></li><li><ul><li><a href="#1.虚电路服务">1.虚电路服务</a></li></ul></li><li><p><a href="#2.数据包服务">2.数据包服务</a></p></li><li><p><a href="#虚电路服务与数据报服务的对比">虚电路服务与数据报服务的对比</a></p></li><li><p><a href="#网际协议 IP">网际协议 IP</a></p></li><li><ul><li><a href="#1.虚拟互联网">1.虚拟互联网</a></li></ul></li><li><p><a href="#2.IP地址">2.IP地址</a></p><ul><li><p><a href="#3.划分子网和构造超网">3.划分子网和构造超网</a></p></li><li><p><a href="#4.IP地址与硬件地址">4.IP地址与硬件地址</a></p></li><li><p><a href="#5.**ARP & RARP**">5.<strong>ARP &amp; RARP</strong></a></p></li><li><p><a href="#6.IP数据报格式">6.IP数据报格式</a></p></li><li><p><a href="#7.IP转发分组的流程">7.IP转发分组的流程</a></p></li><li><p><a href="#网际控制报文协议 ICMP">网际控制报文协议 ICMP</a></p></li><li><p><a href="#互联网的路由选择协议">互联网的路由选择协议</a></p></li><li><ul><li><p><a href="#（1）内部网关协议RIP">（1）内部网关协议RIP</a></p></li><li><p><a href="#(2)内部网关协议OSPF">(2)内部网关协议OSPF</a></p></li></ul></li><li><p><a href="#IP多播">IP多播</a></p></li><li><p><a href="#网络地址转换NAT">网络地址转换NAT</a></p></li></ul></li></ul><p><span id="网络层提供得两种服务"></span></p><h2 id="网络层提供得两种服务"><a class="markdownIt-Anchor" href="#网络层提供得两种服务"></a> 网络层提供得两种服务</h2><p><strong>网络层提供的两种服务</strong></p><ul><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。</li><li>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是<strong>网络</strong>还是网络层提供的两种服务</li><li>在计算机网络领域，网络层应该向运输层提供怎样的服务（“面向连接”还是“无连接”）曾引起了长期的争论。</li><li>争论焦点的实质就是：在计算机通信中，可靠交付应当由谁来负责？是网络还是端系统？ ？</li><li>两种服务：网络层应该向运输层提供怎样得服务<ul><li>虚电路服务</li><li>数据包服务</li></ul></li></ul><p><span id="1.虚电路服务"></span></p><h3 id="1虚电路服务"><a class="markdownIt-Anchor" href="#1虚电路服务"></a> 1.虚电路服务</h3><p>面向连接的通信方式</p><ul><li>建立<strong>虚电路</strong>(Virtual Circuit)，以保证双方通信所需的一切网络资源。</li><li>如果再使用可靠传输的网络协议，就可使所发送的分组无差错按序到达终点。<br><img src="/images/javawz/20200430162831795.png" alt="在这里插入图片描述"><br><strong>虚电路是逻辑连接</strong></li><li>虚电路表示这只是一条<strong>逻辑上的连接</strong>，分组都沿着这条逻辑连接按照存储转发方式传送，而<strong>并不是真正建立了一条物理连接</strong>。</li><li>请注意，电路交换的电话通信是先建立了一条真正的连接。因此分组交换的虚连接和电路交换的连接只是类似，但并不完全一样。</li></ul><p>.<br>.<br><span id="2.数据包服务"></span></p><h3 id="2数据包服务"><a class="markdownIt-Anchor" href="#2数据包服务"></a> 2.数据包服务</h3><p><img src="/images/javawz/20200430163756614.png" alt="在这里插入图片描述"><br><img src="/images/javawz/20200506083348375.png" alt="在这里插入图片描述"></p><p><strong>因特网采用的设计思路</strong></p><ul><li>网络层向上只提供简单灵活的、无连接的、<strong>尽最大努力交付</strong>的<strong>数据报服务</strong>。</li><li>网络在发送分组时不需要先建立连接。每一个分组（即 IP 数据报）独立发送，与其前后的分组无关（不进行编号）。</li><li>网络层不提供服务质量的承诺。即所传送的分组可能出错、丢失、重复和失序（不按序到达终点），当然也不保证分组传送的时限。</li></ul><p>.<br>.</p><p><strong>尽最大努力交付的好处</strong></p><ul><li>由于传输网络不提供端到端的可靠传输服务，这就使网络中的路由器可以做得比较简单，而且价格低廉（与电信网的交换机相比较）。</li><li>如果主机（即端系统）中的进程之间的通信需要是可靠的，那么就由网络的主机中的运输层负责（包括差错处理、流量控制等）。</li><li>采用这种设计思路的好处是：网络的造价大大降低，运行方式灵活，能够适应多种应用。</li><li>因特网能够发展到今日的规模，充分证明了当初采用这种设计思路的正确性。</li></ul><p>.<br>.<br><span id="虚电路服务与数据报服务的对比"></span></p><h3 id="虚电路服务与数据报服务的对比"><a class="markdownIt-Anchor" href="#虚电路服务与数据报服务的对比"></a> 虚电路服务与数据报服务的对比</h3><ul><li><table><thead><tr><th>对比的方面</th><th>虚电路服务</th><th>数据报服务</th></tr></thead><tbody><tr><td>思路</td><td>可靠通信应当由网络来保证</td><td>可靠通信应当由用户主机来保证</td></tr><tr><td>连接的建立</td><td>必须有</td><td>不需要</td></tr><tr><td>终点地址</td><td>仅在连接建立阶段使用，每个分组使用短的虚电路号</td><td>每个分组都有终点的完整地址</td></tr><tr><td>分组的转发</td><td>属于同一条虚电路的分组均按照同一路由进行转发</td><td>每个分组独立选择路由进行转发</td></tr><tr><td>当结点出故障时</td><td>所有通过出故障的结点的虚电路均不能工作</td><td>出故障的结点可能会丢失分组，一些路由可能会发生变化</td></tr><tr><td>分组的顺序</td><td>总是按发送顺序到达终点</td><td>到达终点时不一定按发送顺序</td></tr><tr><td>端到端的差错处理和流量控制</td><td>可以由网络负责，也可以由用户主机负责</td><td>由用户主机负责</td></tr></tbody></table></li></ul><p>.<br>.<br><span id="网际协议 IP"></span></p><h2 id="网际协议-ip"><a class="markdownIt-Anchor" href="#网际协议-ip"></a> 网际协议 IP</h2><p><img src="/images/javawz/20200507093025535.png" alt="在这里插入图片描述"><br><span id="1.虚拟互联网"></span></p><h3 id="1虚拟互联网"><a class="markdownIt-Anchor" href="#1虚拟互联网"></a> 1.虚拟互联网</h3><p><strong>网络层中间设备</strong><br>中间设备又称为中间系统或中继(relay)系统。</p><ul><li>物理层中继系统：转发器(repeater)。</li><li>数据链路层中继系统：网桥或桥接器(bridge)。</li><li>网络层中继系统：路由器(router)。</li><li>网络层以上的中继系统：网关(gateway)。<br>注： 现在说的网关一般指的是路由器接口，网关地址一般习惯使用本网段第一个地址或者最后一个地址</li></ul><p><img src="/images/javawz/20200502224434522.png" alt="在这里插入图片描述"></p><p><img src="/images/javawz/20200502224345992.png" alt="在这里插入图片描述"><br><strong>虚拟互连网络的意义</strong></p><ul><li>所谓虚拟互连网络也就是逻辑互连网络，它的意思就是互连起来的各种物理网络的异构性本来是客观存在的，但是我们利用 IP 协议就可以使这些性能各异的网络从用户看起来好像是一个统一的网络。</li><li>使用 IP 协议的虚拟互连网络可简称为 IP 网。</li><li>使用虚拟互连网络的好处是：当互联网上的主机进行通信时，就好像在一个网络上通信一样，而看不见互连的各具体的网络异构细节。</li></ul><p>.<br>.<br><span id="2.IP地址"></span></p><h3 id="2ip地址"><a class="markdownIt-Anchor" href="#2ip地址"></a> 2.IP地址</h3><p><strong>本小节我转载了与韩老师讲解思路一致 但是总结的更详细的IP地址与划分博文合集笔记供大家阅读</strong><br><strong>点下方链接就可进入</strong></p><blockquote><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896270" target="_blank" rel="noopener">1、IP地址和子网划分学习笔记之《预备知识：进制计数》</a></strong></p><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896390" target="_blank" rel="noopener">2、IP地址和子网划分学习笔记之《IP地址详解》</a></strong></p><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896584" target="_blank" rel="noopener">3、IP地址和子网划分学习笔记之《子网掩码详解》</a></strong><br><span id="3.划分子网和构造超网"></span></p></blockquote><h3 id="3划分子网和构造超网"><a class="markdownIt-Anchor" href="#3划分子网和构造超网"></a> 3.划分子网和构造超网</h3><p><strong>本小节我转载了与韩老师讲解思路一致 但是总结的更详细的IP地址与划分博文合集笔记供大家阅读</strong><br><strong>点下方链接就可进入</strong></p><blockquote><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896492" target="_blank" rel="noopener">4、IP地址和子网划分学习笔记之《子网划分详解》</a></strong></p><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896531" target="_blank" rel="noopener">5、IP地址和子网划分学习笔记之《超网合并详解》</a></strong><br><span id="4.IP地址与硬件地址"></span></p></blockquote><h3 id="4ip地址与硬件地址"><a class="markdownIt-Anchor" href="#4ip地址与硬件地址"></a> 4.IP地址与硬件地址</h3><p><strong>本小节我转载了与韩老师讲解思路一致 但是总结的更详细的IP地址与划分博文合集笔记供大家阅读</strong><br><strong>点下方链接就可进入</strong></p><blockquote><p><strong><a href="https://blog.csdn.net/LeeQiang8023/article/details/105896390" target="_blank" rel="noopener">2、IP地址和子网划分学习笔记之《IP地址详解》</a></strong></p></blockquote><p>.<br>.<br><span id="5.**ARP & RARP**"></span></p><h3 id="5arp-rarp"><a class="markdownIt-Anchor" href="#5arp-rarp"></a> 5.<strong>ARP &amp; RARP</strong></h3><p><img src="/images/javawz/20200506112109402.png" alt="在这里插入图片描述"><br><strong>ARP简介</strong></p><p>不管网络层使用的是什么协议，在实际网络的链路上传送数据帧时，最终还是必须使用硬件地址。</p><p>每一个主机都设有一个 ARP 高速缓存(ARP cache)，里面有所在的局域网上的各主机和路由器的 IP 地址到硬件地址的映射表。</p><p>当主机 A 欲向本局域网上的某个主机 B 发送 IP 数据报时，就先在其 ARP 高速缓存中查看有无主机 B 的 IP 地址。如有，就可查出其对应的硬件地址，再将此硬件地址写入 MAC 帧，然后通过局域网将该 MAC 帧发往此硬件地址。<br><img src="/images/javawz/20200506112227720.png" alt="在这里插入图片描述"></p><p><strong>ARP高速缓存的作用</strong></p><p>为了减少网络上的通信量，主机 A 在发送其 ARP 请求分组时，就将自己的 IP 地址到硬件地址的映射写入 ARP 请求分组。</p><p>当主机 B 收到 A 的 ARP 请求分组时，就将主机 A 的这一地址映射写入主机 B 自己的 ARP 高速缓存中。这对主机 B 以后向 A 发送数据报时就更方便了。</p><p>.</p><p>.<br><strong>使用</strong> <strong>ARP</strong> <strong>的四种典型情况</strong></p><ul><li>发送方是主机，要把IP数据报发送到本网络上的另一个主机。这时用 ARP 找到目的主机的硬件地址。</li><li>发送方是主机，要把 IP 数据报发送到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li><li>发送方是路由器，要把 IP 数据报转发到本网络上的一个主机。这时用 ARP 找到目的主机的硬件地址。</li><li>发送方是路由器，要把 IP 数据报转发到另一个网络上的一个主机。这时用 ARP 找到本网络上的一个路由器的硬件地址。剩下的工作由这个路由器来完成。</li></ul><p>.<br>.</p><p><strong>应当注意的问题</strong></p><p>ARP 是解决同一个局域网上的主机或路由器的 IP 地址和硬件地址的映射问题。</p><p>如果所要找的主机和源主机不在同一个局域网上，那么就要通过 ARP 找到一个位于本局域网上的某个路由器的硬件地址，然后把分组发送给这个路由器，让这个路由器把分组转发给下一个网络。剩下的工作就由下一个网络来做。</p><p>从IP地址到硬件地址的解析是自动进行的，主机的用户对这种地址解析过程是不知道的。</p><p>只要主机或路由器要和本网络上的另一个已知 IP 地址的主机或路由器进行通信，ARP 协议就会自动地将该 IP 地址解析为链路层所需要的硬件地址。</p><p>.<br>.<br><strong>逆地址解析协议 RARP</strong></p><p>逆地址解析协议 RARP 使只知道自己硬件地址的主机能够知道其 IP 地址。</p><p>.<br><span id="6.IP数据报格式"></span></p><h3 id="6ip数据报格式"><a class="markdownIt-Anchor" href="#6ip数据报格式"></a> 6.IP数据报格式</h3><p><strong>IP数据包</strong><br><img src="/images/javawz/20200506085348654.png" alt="在这里插入图片描述"></p><p>一个 IP 数据包由首部和数据两部分组成。</p><ul><li>首部的前一部分是固定长度，共 20 字节，是所有 IP 数据报必须具有的。</li><li>在首部的固定部分的后面是一些可选字段，其长度是可变的。</li></ul><p><img src="/images/javawz/20200506085505183.png" alt="在这里插入图片描述"></p><p><strong>IP 数据报首部的固定部分中的各字段</strong></p><ul><li><strong>版本</strong>——占4位，指IP协议的版本，目前使用的IP协议版本号为4（即IPv4）</li><li><strong>首部长度</strong>——占4位，课表示的最大数值 是15个单位(一个单位为4字节)，因此IP的首部长度的最大值是60字节。</li><li><strong>区分服务</strong>——让数据包加上一个标记，来告诉网络上那些传输的数据，这些数据包在传的时候 是着急还是不着急。QOS服务质量</li><li><strong>总长度</strong>——占16位，指首部和数据之和的长度，单位位字节，因此数据报的最大长度位65535字节。总长度必须不超过最大传送单元MTU。</li><li><strong>标识</strong>——占16位，它是一个计数器，用老产生数据报的标识，不是序号，每产生一个数据包，就增加1。</li><li><strong>标志</strong>——占3位，目前只有前两位有意义。标志字段的最低位是MF。 MF=1表示后面“还有分片”。MF=0表示最后一个分片。标志字段中间的一位是DF。 只有当DF=0时才允许分片。<br><img src="/images/javawz/20200506094017932.png" alt="在这里插入图片描述"></li><li><strong>生存时间</strong> 记位TTL （Time To Live） 占8位，数据报在网络中可通过的路由器数的最大值<br>数据包没过一个路由器 TTL-1</li><li><strong>协议</strong>——协议（8位）字段指出此数据报携带的数据使用何种学语以便目的主机的IP层讲数据部分交给哪个处理<br><img src="/images/javawz/20200506101736822.png" alt="在这里插入图片描述"></li><li><strong>首部检验和</strong>——首部检验和(16 位)字段只检验数据报的首部，不检验数据部分。这里不采用 CRC 检验码而采用简单的计算方法。<br><img src="/images/javawz/20200506102016792.png" alt="在这里插入图片描述"><br><img src="/images/javawz/20200506102238549.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<br><strong>IP数据报首部的可变部分</strong></p><p>IP 首部的可变部分就是一个选项字段，用来支持排错、测量以及安全等措施，内容很丰富。</p><p>选项字段的长度可变，从 1 个字节到 40 个字节不等，取决于所选择的项目。</p><p>增加首部的可变部分是为了增加 IP 数据报的功能，但这同时也使得 IP 数据报的首部长度成为可变的。这就增加了每一个路由器处理数据报的开销。</p><p>实际上这些选项很少被使用。</p><p>.<br>.<br><span id="7.IP转发分组的流程"></span></p><h3 id="7ip转发分组的流程"><a class="markdownIt-Anchor" href="#7ip转发分组的流程"></a> 7.IP转发分组的流程</h3><p><strong>数据包如何路由</strong><br><img src="/images/javawz/20200507093926598.png" alt="在这里插入图片描述"></p><p><strong>IP路由</strong></p><ul><li><p>路由就是路由器从一个网段到另外一个网段转发数据包的过程，即数据包通过路由器转发，就是数据路由。</p></li><li><p>网络畅通条件，要求数据包必须能够到达目标地址，同时数据包必须能够返回发送地址。</p></li><li><p>这就要求沿途经过的路由器必须知道到目标网络如何转发数据包，即到达目的网络下一跳转发给哪个路由器，也就是必须有到达目标网络的路由，沿途的路由器还必须有数据包返回所需的路由。<br>.</p></li><li><blockquote><p><strong>数据路由</strong>：路由器在不同网段转发数据包<br><strong>网络畅通的条件</strong>：能去能回<br>沿途的路由器必须知道目标网络下一跳给哪个接口<br>沿途的路由器必须知道源网络下一跳给哪个接口</p></blockquote></li></ul><p><img src="/images/javawz/20200506204208551.png" alt="在这里插入图片描述"></p><ul><li>如图所示，计算机PC0 ping PC1，网络要想通，要求沿途的路由器Router0，Router1，Router2，Router3都必须有到192.168.1.0/24网络的路由，这样数据包才能到达PC1。</li><li>PC1要回应数据包给PC0，沿途所有的路由器必须有到192.168.0.0/24网络的路由，这样数据包才能回来。</li></ul><p>.<br>.<br><strong>配置静态路由</strong><br><img src="/images/javawz/20200506205100202.png" alt="在这里插入图片描述"></p><p><strong>默认路由</strong></p><ul><li>网络地址和子网掩码都为0，如图所示配置，这就意味着到任何网络下一跳转发给10.0.0.2。</li><li>网络地址和子网掩码均为0的路由就是默认路由。<ul><li>Router(config)#ip route 0.0.0.0 0.0.0.0 10.0.0.2</li></ul></li></ul><p>.<br>.<br><strong>Windows上的默认路由和网关</strong></p><ul><li>计算机也有路由表，我们可以在计算机上运行route print显示Windows操作系统上的路由表。</li><li>运行netstat –r也可以显示Windows操作系统上的路由表。</li><li>如图所示，给计算机配置网关就是给计算机添加默认路由。<br><img src="/images/javawz/20200506212853937.png" alt="在这里插入图片描述"></li></ul><p>.<br>.</p><ul><li>如果不配置计算机的网关，使用以下命令添加默认路由。</li><li>如图所示，去掉本地连接的网关，在命令提示符下，输入route print ，可以看到没有默认路由了，该计算机也不能访问其他网段，ping 202.99.160.68 提示“目标主机不可到达”。<br><img src="/images/javawz/20200506212957308.png" alt="在这里插入图片描述"><br>.<br>.</li><li>如图所示，在命令提示符下，输入route /?可以看到该命令的帮助。</li><li>输入route add 0.0.0.0 mask 0.0.0.0 192.168.8.1，添加默认路由。</li><li>输入route print 可以显示路由表，默认路由已经出现。</li><li>Ping 202.99.160.68 可以ping通。<br><img src="/images/javawz/20200506213204945.png" alt="在这里插入图片描述"></li></ul><p>.<br>.</p><ul><li>如图所示，内网的计算机需要配置IP地址、子网掩码和网关，网关就是Server的内网网卡的IP地址。在Server的两个连接，内网的网卡不需要配置网关，但是连接Internet的网卡需要配置默认网关。<br><img src="/images/javawz/20200506213316454.png" alt="在这里插入图片描述"><br>.<br>.<br><strong>注意</strong></li><li>IP 数据报的首部中没有地方可以用来指明“下一跳路由器的 IP 地址”。</li><li>当路由器收到待转发的数据报，不是将下一跳路由器的 IP 地址填入 IP 数据报，而是送交下层的网络接口软件。</li><li>网络接口软件使用 ARP 负责将下一跳路由器的 IP 地址转换成硬件地址，并将此硬件地址放在链路层的 MAC 帧的首部，然后根据这个硬件地址找到下一跳路由器。<br>.<br>.<br><span id="网际控制报文协议 ICMP"></span></li></ul><h2 id="网际控制报文协议-icmp"><a class="markdownIt-Anchor" href="#网际控制报文协议-icmp"></a> 网际控制报文协议 ICMP</h2><p><strong>ICMP简介</strong></p><p>为了提高 IP 数据报交付成功的机会，在网际层使用了网际控制报文协议 ICMP (Internet Control Message Protocol)。</p><p>ICMP 允许主机或路由器报告差错情况和提供有关异常情况的报告。</p><p>ICMP 不是高层协议，而是 IP 层的协议。</p><p>ICMP 报文作为 IP 层数据报的数据，加上数据报的首部，组成 IP 数据报发送出去。<br>.<br>.<br><strong>ICMP报文格式</strong><br><img src="/images/javawz/20200507091405628.png" alt="在这里插入图片描述"><br>.<br>.<br><strong>ICMP报文的类型</strong></p><ul><li>ICMP 报文的种类有两种，即 ICMP 差错报告报文和 ICMP 询问报文。</li><li>ICMP 报文的前 4 个字节是统一的格式，共有三个字段：即类型、代码和检验和。接着的 4 个字节的内容与 ICMP 的类型有关。</li><li>差错报告报文有五种：终点不可达 ，源点抑制(Source quench) ，时间超过 ，参数问题 ，改变路由（重定向）(Redirect)</li><li>询问报文有两种：回送请求和回答报文，时间戳请求和回答报文<br><img src="/images/javawz/20200507091541236.png" alt="在这里插入图片描述"><img src="/images/javawz/20200507091556553.png" alt="在这里插入图片描述"></li></ul><p><strong>差错报告报告报文的数据字段的内容</strong><br><img src="/images/javawz/20200507091643165.png" alt="在这里插入图片描述"><br>.<br>.<br><strong>ICMP应用举例</strong></p><ul><li>PING 用来测试两个主机之间的连通性。<ul><li>PING 使用了 ICMP 回送请求与回送回答报文。</li></ul></li><li>PING 是应用层直接使用网络层 ICMP 的例子，它没有通过运输层的 TCP 或UDP。</li><li>Pathping</li><li>tracert<br><img src="/images/javawz/20200507092729465.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<br><strong>ping命令诊断网络故障</strong></p><ul><li>PING（Packet Internet Grope），因特网包探索器，用于测试网络连接量的程序。Ping发送一个ICMP回声请求消息给目的地并报告是否收到所希望的ICMP回声应答。</li><li>ping指的是端对端连通，通常用来作为可用性的检查， 但是某些病毒木马会强行大量远程执行ping命令抢占你的网络资源，导致系统变慢，网速变慢。 严禁ping入侵作为大多数防火墙的一个基本功能提供给用户进行选择。</li><li>如果你打开IE浏览器访问网站失败，你可以通过ping命令测试到Internet的网络连通，可以为你排除网络故障提供线索，下面展示ping命令返回的信息以及分析其原因。</li></ul><p>.<br><strong>目标主机不可到达</strong><br><img src="/images/javawz/20200507103301406.png" alt="在这里插入图片描述"><br><strong>目标网络不可到达</strong><br><img src="/images/javawz/20200507103340478.png" alt="在这里插入图片描述"><br><strong>请求超时</strong><br><img src="/images/javawz/20200507103422784.png" alt="在这里插入图片描述"></p><p><strong>通过延迟评估网络带宽</strong><br><img src="/images/javawz/20200507103834272.png" alt="在这里插入图片描述"><br>.<br>.<br><strong>Pathping跟踪数据包的路径</strong></p><p>使用ping能够判断网络通还是不通，比如请求超时，你就不能判断什么位置出现的网络故障造成的请求超时。使用pathping命令能跟踪数据包的路径，能够查出故障点，并且能够计算路由器转发丢包率和链路丢包率以及延迟，据此能够判断出网络拥塞情况。<br><img src="/images/javawz/2020050710393134.png" alt="在这里插入图片描述"><br><span id="互联网的路由选择协议"></span></p><h2 id="互联网的路由选择协议"><a class="markdownIt-Anchor" href="#互联网的路由选择协议"></a> 互联网的路由选择协议</h2><p>路由选择协议的核心就是路由算法，一个理想的路由算法应该以下特点：</p><ul><li>算法必须是正确的和完整的：沿着各路由表所指引的路由，分组一定能够最终到达目的网络和目的主机</li><li>算法在计算上应简单</li><li>算法应能适应通信量和网络拓扑的变化：即要有自适应性。</li><li>算法应具有稳定性</li><li>算法应该是公平的</li><li>算法应该是最佳的</li></ul><p><strong>路由选择包括静态和动态：</strong></p><ul><li><p>静态（非自适应路由选择）：简单和开销较小，但不能及时适应网络状态的变化，适用于简单的小网络</p></li><li><p>动态（自适应路由）：能较好地适应网络状态的变化。但实现起来较为复杂，开销比较大。</p></li><li><p>互联网才用的路由选择协议主要是<strong>自适应、分布式路由选择协议</strong>，由于以下两个原因，互联网采用分层次的路由选择协议：</p><ul><li>互联网的规模非常大，如果让所有的路由器知道所有的网络应怎样到达，则这种路由表将非常大</li><li>许多单位不愿意外界了解自己单位网路的布局细节和本部门所采用的路由选择协议，但同时还希望连接到互联网上。</li></ul><p>.</p></li><li><p>为此，把整个互联网划分为许多较小的自治系统AS（autonomous system）。自治系统AS是在单一技术管理下的一组路由器，这些路由器使用一种自治系统内部的路由选择协议和共同的度量。一个AS对其他AS表现出的是一个单一的和一直的路由选择策略。</p></li></ul><p>这样就把路由选择协议划分为两大类：<br><strong>内部网关协议IGP</strong>（Interior Gateway protocol）:也叫作域内路由选择，即在一个自治系统内部使用的路由选择协议，如RIP和OSPF协议。<br><strong>外部网关协议EGP</strong>（External Gateway Protocol）：也叫作域间路由选择，若源主机和目的主机处在不同的自治系统中，当数据报传到一个自治系统的边界时，就需要使用一种协议将路由选择信息传递到另一个自治系统中。<br><span id="（1）内部网关协议RIP"></span></p><h3 id="1内部网关协议rip"><a class="markdownIt-Anchor" href="#1内部网关协议rip"></a> （1）内部网关协议RIP</h3><p>RIP是一种<strong>分布式的基于距离向量的路由选择协议</strong>。<br>RIP要求每一个路由器都要维护从它自己到其他每一个目的网络距离记录。<br>距离的定义：从一个路由器到直接连接的网络的距离定义为1/0，其中每经过一次路由器就加1，也称为“跳数”。<br>分布式路由的特点就是：每一个路由器都要不断地和其他一些路由器交换路由信息，周期性广播。</p><p><strong>RIP协议的特点：</strong></p><ul><li>仅和相邻路由器交换信息。</li><li>路由器交换的信息使当前本路由器所知道的全部信息，即自己现在的路由表，包括到本自治网络的最短距离，以及到每个网络应经过的下一跳路由器。</li><li>按照固定的时间间隔交换路由信息。</li><li>路由器刚刚开始工作时，它的路由表是空的，经过若干次更新后，所有路由器最终都会知道到达本自治系统中任何一个网络的最短距离和下一跳路由器的地址。</li><li>距离向量算法：找出每个目的网络的最短距离算法。</li></ul><blockquote><p>收到相邻路由器（其地址为 X）的一个 RIP 报文：<br>(1) 先修改此 RIP 报文中的所有项目：把“下一跳”字段中的地址都改为 X，并把所有的“距离”字段的值加 1。<br>(2) 对修改后的 RIP 报文中的每一个项目，重复以下步骤：<br>若项目中的目的网络不在路由表中，则把该项目加到路由表中。<br>否则<br>​ 若下一跳字段给出的路由器地址是同样的，则把收到的项 目 替换原路由表中的项目。<br>否则<br>​ 若收到项目中的距离小于路由表中的距离，则进行更新，<br>否则，什么也不做。<br>(3) 若 3 分钟还没有收到相邻路由器的更新路由表，则把此相邻路由器记为不可达路由器，即将距离置为16（距离为16表示不可达）。</p></blockquote><p><strong>RIP协议的优缺点</strong></p><ul><li>RIP 存在的一个问题是当网络出现故障时，要经过比较长的时间才能将此信息传送到所有的路由器。</li><li>RIP 协议最大的优点就是实现简单，开销较小。</li><li>RIP 限制了网络的规模，它能使用的最大距离为 <strong>15（16 表示不可达）。</strong></li><li>路由器之间交换的路由信息是路由器中的完整路由表，因而随着网络规模的扩大，开销也就增加。</li></ul><p>.<br>.<br><span id="(2)内部网关协议OSPF"></span></p><h3 id="2内部网关协议ospf"><a class="markdownIt-Anchor" href="#2内部网关协议ospf"></a> (2)内部网关协议OSPF</h3><p><strong>OSPF 协议的基本特点</strong></p><p>“开放”表明 OSPF 协议不是受某一家厂商控制，而是公开发表的。</p><p>“最短路径优先”是因为使用了 Dijkstra 提出的最短路径算法SPF</p><p>OSPF 只是一个协议的名字，它并不表示其他的路由选择协议不是“最短路径优先”。</p><p>是分布式的链路状态协议。</p><p>.<br>.<br><strong>三个要点</strong></p><p><strong>向本自治系统中所有路由器发送信息</strong>，这里使用的方法是洪泛法。</p><p>发送的信息就是与本路由器<strong>相邻</strong>的所有路由器的链路状态，但这只是路由器所知道的<strong>部分信息</strong>。</p><p>“链路状态”就是说明本路由器都和哪些路由器相邻，以及该链路的“度量”(metric)。</p><p>只有当链路状态发生变化时，路由器才用洪泛法向所有路由器发送此信息。</p><p>.<br>.<br><strong>链路状态数据库</strong></p><ul><li>由于各路由器之间频繁地交换链路状态信息，因此所有的路由器最终都能建立一个链路状态数据库。</li><li>这个数据库实际上就是全网的拓扑结构图，它在全网范围内是一致的（这称为链路状态数据库的同步）。</li><li>OSPF 的链路状态数据库能较快地进行更新，使各个路由器能及时更新其路由表。OSPF 的更新过程收敛得快是其重要优点。 \</li></ul><p><strong>OSPF 划分为两种不同的区域</strong><br><img src="/images/javawz/20200511145155197.png" alt="在这里插入图片描述"></p><p><strong>划分区域</strong></p><ul><li>划分区域的好处就是将利用洪泛法交换链路状态信息的范围局限于每一个区域而不是整个的自治系统，这就减少了整个网络上的通信量。</li><li>在一个区域内部的路由器只知道本区域的完整网络拓扑，而不知道其他区域的网络拓扑的情况。</li><li>OSPF 使用层次结构的区域划分。在上层的区域叫作主干区域(backbone area)。主干区域的标识符规定为0.0.0.0。主干区域的作用是用来连通其他在下层的区域。<br><img src="/images/javawz/20200511145252579.png" alt="在这里插入图片描述"><br><img src="/images/javawz/20200511145303192.png" alt="在这里插入图片描述"></li></ul><p><strong>OSPF 直接用 IP 数据报传送</strong></p><ul><li>OSPF 不用 UDP 而是直接用 IP 数据报传送。</li><li>OSPF 构成的数据报很短。这样做可减少路由信息的通信量。</li><li>数据报很短的另一好处是可以不必将长的数据报分片传送。分片传送的数据报只要丢失一个，就无法组装成原来的数据报，而整个数据报就必须重传。</li></ul><p>.<br>.<br><strong>OSPF 的其他特点</strong></p><ul><li>OSPF 对不同的链路可根据 IP 分组的不同服务类型 TOS 而设置成不同的代价。因此，OSPF 对于不同类型的业务可计算出不同的路由。</li><li>如果到同一个目的网络有多条相同代价的路径，那么可以将通信量分配给这几条路径。这叫作多路径间的负载平衡。</li><li>所有在 OSPF 路由器之间交换的分组都具有鉴别的功能。</li><li>支持可变长度的子网划分和无分类编址 CIDR。</li><li>每一个链路状态都带上一个 32 位的序号，序号越大状态就越新。</li></ul><p><img src="/images/javawz/20200511145739994.png" alt="在这里插入图片描述"></p><p><strong>OSPF 的五种分组类型</strong></p><ul><li>类型1，问候(Hello)分组。</li><li>类型2，数据库描述(Database Description)分组。</li><li>类型3，链路状态请求(Link State Request)分组。</li><li>类型4，链路状态更新(Link State Update)分组， 用洪泛法对全网更新链路状态。</li><li>类型5，链路状态确认(Link State Acknowledgment) 分组。<br><img src="/images/javawz/20200511150003451.png" alt="在这里插入图片描述"><br><img src="/images/javawz/20200511150049489.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<br><strong>OSPF 的其他特点</strong></p><ul><li>OSPF 还规定每隔一段时间，如 30 分钟，要刷新一次数据库中的链路状态。</li><li>由于一个路由器的链路状态只涉及到与相邻路由器的连通状态，因而与整个互联网的规模并无直接关系。因此当互联网规模很大时，OSPF 协议要比距离向量协议 RIP 好得多。</li><li>OSPF 没有“坏消息传播得慢”的问题，据统计，其响应网络变化的时间小于 100 ms。<br><span id="IP多播"></span></li></ul><h2 id="ip多播"><a class="markdownIt-Anchor" href="#ip多播"></a> IP多播</h2><p><span id="网络地址转换NAT"></span></p><h2 id="网络地址转换nat"><a class="markdownIt-Anchor" href="#网络地址转换nat"></a> 网络地址转换NAT</h2>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络原理笔记-第四章-网络层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络原理笔记-第四章-网络层&quot;&gt;&lt;/a&gt; 计算机网络原理笔记 第四章 网络层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#网
      
    
    </summary>
    
      <category term="计算机网络原理" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>第三章 数据链路层</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/01/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%89%E7%AB%A0-%E6%95%B0%E6%8D%AE%E9%93%BE%E8%B7%AF%E5%B1%82/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/01/计算机网络原理笔记-第三章-数据链路层/</id>
    <published>2021-03-31T16:50:41.000Z</published>
    <updated>2021-03-31T18:00:00.421Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算网络原理-第三章-数据链路层"><a class="markdownIt-Anchor" href="#计算网络原理-第三章-数据链路层"></a> 计算网络原理 第三章 数据链路层</h3><ul><li><a href="#数据链路层（一）">数据链路层（一）</a></li><li><ul><li><a href="#3.1 使用点对点信道的数据链路层">3.1 使用点对点信道的数据链路层</a></li><li><ul><li><a href="#3.1.1 数据链路层和帧">3.1.1 数据链路层和帧</a></li><li><a href="#3.1.2 三个基本问题">3.1.2 三个基本问题</a></li></ul></li></ul></li><li><a href="#数据链路层的信道类型">数据链路层的信道类型</a></li><li><ul><li><a href="#3.2 点对点协议 PPP">3.2 点对点协议 PPP</a></li><li><ul><li><a href="#3.2.1 PPP协议的特点">3.2.1 PPP协议的特点</a></li><li><a href="#3.2.2 PPP协议的帧格式">3.2.2 PPP协议的帧格式</a></li><li><a href="#3.2.3 PPP协议的工作状态">3.2.3 PPP协议的工作状态</a></li></ul></li><li><a href="#3.3 使用广播信道的数据链路层(局域网)">3.3 使用广播信道的数据链路层(局域网)</a></li><li><ul><li><a href="#3.3.1 局域网的数据链路层">3.3.1 局域网的数据链路层</a></li></ul></li></ul></li></ul><p><span id="数据链路层（一）"></span></p><h1 id="数据链路层一"><a class="markdownIt-Anchor" href="#数据链路层一"></a> 数据链路层（一）</h1><p><span id="3.1 使用点对点信道的数据链路层"></span></p><h2 id="31-使用点对点信道的数据链路层"><a class="markdownIt-Anchor" href="#31-使用点对点信道的数据链路层"></a> 3.1 使用点对点信道的数据链路层</h2><p><span id="3.1.1 数据链路层和帧"></span></p><h3 id="311-数据链路层和帧"><a class="markdownIt-Anchor" href="#311-数据链路层和帧"></a> 3.1.1 数据链路层和帧</h3><p><em><strong>*数据发送模型*</strong></em><br><img src="/images/javawz/20200425225800499.gif" alt><br><em><strong>*数据链路层的信道类型*</strong></em><br>数据链路层使用的信道主要有以下两种类型：</p><ul><li>点对点信道。这种信道使用一对一的点对点通信方式。</li><li>广播信道。这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发送。</li></ul><p>.<br>.</p><p><strong>链路与数据链路</strong></p><ul><li>**链路(link)**是一条无源的点到点的物理线路段，中间没有任何其他的交换结点。</li></ul><blockquote><p>一条链路只是一条通路的一个组成部分。</p></blockquote><ul><li><strong>数据链路(data link)</strong> 除了物理线路外，还必须有通信协议来控制这些数据的传输。若把实现这些协议的硬件和软件加到链路上，就构成了数据链路。</li></ul><blockquote><ul><li>现在最常用的方法是使用适配器（即网卡）来实现这些协议的硬件和软件。</li><li>一般的适配器都包括了数据链路层和物理层这两层的功能。</li></ul></blockquote><p><strong>帧</strong></p><ul><li>数据链路层传送的是<strong>帧</strong><br><img src="/images/javawz/20200425231742936.png" alt="-"><img src="/images/javawz/20200425231834393.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<span id="3.1.2 三个基本问题"></span></p><h3 id="312-三个基本问题"><a class="markdownIt-Anchor" href="#312-三个基本问题"></a> 3.1.2 三个基本问题</h3><p><strong>1.封装成帧</strong></p><ul><li><strong>封装成帧(framing)</strong> 就是在一段数据的前后分别添加首部和尾部，然后就构成了一个帧。确定帧的界限。</li><li>首部和尾部的一个重要作用就是进行<strong>帧定界</strong>。<br><img src="/images/javawz/20200426172625769.png" alt="在这里插入图片描述"></li><li>用控制字符进行帧定界的方法举例</li></ul><blockquote><p>试想：帧还未发送完，发送端出了问题，只能重发该帧。接收端却收到了前面的“半截子帧”，它会抛弃吗？为什么？</p></blockquote><p><img src="/images/javawz/20200426172811364.png" alt="在这里插入图片描述"></p><p><strong>2.透明传输</strong></p><blockquote><ul><li>若传输的数据是ASCII码中“可打印字符(共95个)“集时，一切正常。</li><li>若传输的数据不是仅由”可打印字符”组成时，就会出问题，如下<br><img src="/images/javawz/20200426173915485.png" alt="在这里插入图片描述"></li></ul></blockquote><p><strong>用字节填充法解决透明传输问题</strong></p><ul><li>发送端的数据链路层在数据中出现控制字符“SOH”或“EOT”的前面插入一个转义字符“ESC”(其十六进制编码是 1B)。</li><li><strong>字节填充</strong>(byte stuffing)或<strong>字符填充</strong>(character stuffing)——接收端的数据链路层在将数据送往网络层之前删除插入的转义字符。</li><li>如果转义字符也出现数据当中，那么应在转义字符前面插入一个转义字符。当接收端收到连续的两个转义字符时，就删除其中前面的一个。</li><li>当传送的帧是用文本文件组成的帧时（文本文件中的字都是从键盘上输入的），其数据部分显然不会出现像SOH或EOT这样的帧定界控制字符。可见不管从键盘上输入什么字符都可以放在这样的帧中传输过去，因此这样的传输就是透明传输。<br><img src="/images/javawz/20200426174326691.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<br><strong>3.差错控制</strong></p><ul><li>在传输过程中可能会产生<strong>比特差错</strong>：1 可能会变成 0 而 0 也可能变成 1。</li><li>在一段时间内，传输错误的比特占所传输比特总数的比率称为<strong>误码率</strong> BER (Bit Error Rate)。</li><li>误码率与信噪比有很大的关系。</li><li>为了保证数据传输的可靠性，在计算机网络传输数据时，必须采用各种差错检测措施。</li></ul><p><strong>循环冗余检验的原理</strong></p><ul><li>在数据链路层传送的帧中，广泛使用了<strong>循环冗余检验</strong> CRC 的检错技术。</li><li>在发送端，先把数据划分为组。假定每组 <em>k</em> 个比特。</li><li>假设待传送的一组数据 <em>M</em> = 101001（现在 <em>k</em> = 6）。我们在 <em>M</em> 的后面再添加供差错检测用的 <em>n</em> 位<strong>冗余码</strong>一起发送。</li></ul><p><strong>冗余码的计算</strong></p><ul><li>用二进制的模 2 运算进行 2<em>n</em> 乘 <em>M</em> 的运算，这相当于在 <em>M</em> 后面添加 <em>n</em> 个 0。</li><li>得到的 (<em>k</em> + <em>n</em>) 位的数除以事先选定好的长度为 (<em>n</em> + 1) 位的<strong>除数</strong> <em>P</em>，得出<strong>商</strong>是 <em>Q</em> 而余数是 <em>R</em>，<strong>余数</strong> <em>R</em> 比除数 <em>P</em> 少1 位，即 <em>R</em> 是 <em>n</em> 位。</li></ul><p><strong>冗余码的计算举例</strong></p><blockquote><p>现在 <em>k</em> = 6, <em>M</em> = 101001。<br>设 <em>n</em> = 3, 除数 <em>P</em> = 1101，<br>被除数是 2<em>n**M</em> = 101001000。<br>模 2 运算的结果是：商 <em>Q</em> = 110101，<br>余数 <em>R</em> = 001。<br>把余数 <em>R</em> 作为冗余码添加在数据 <em>M</em> 的后面发送出去。发送的数据是：2<em>n**M</em> + <em>R</em><br>即：101001001，共 (<em>k</em> + <em>n</em>) 位。</p></blockquote><p><strong>循环冗余检验的原理说明</strong><br><img src="/images/javawz/20200426190323318.png" alt="在这里插入图片描述"><br><strong>帧检验序列 FCS</strong><br>在数据后面添加上的冗余码称为<strong>帧检验序列</strong> FCS (Frame Check Sequence)。</p><p>循环冗余检验 CRC 和帧检验序列 FCS并不等同。</p><ul><li>CRC 是一种常用的<strong>检错方法</strong>，而 FCS 是添加在数据后面的<strong>冗余码</strong>。</li><li>FCS 可以用 CRC 这种方法得出，但 CRC 并非用来获得 FCS 的唯一方法。</li></ul><p><strong>接收端对收到的每一帧进行 CRC 检验</strong></p><ul><li>(1) 若得出的余数 <em>R</em> = 0，则判定这个帧没有差错，就<strong>接受</strong>(accept)。</li><li>(2) 若余数 <em>R</em> ≠ 0，则判定这个帧有差错，就<strong>丢弃</strong>。</li><li>但这种检测方法并不能确定究竟是哪一个或哪几个比特出现了差错。<br>只要经过严格的挑选，并使用位数足够多的除数 <em>P</em>，那么出现检测不到的差错的概率就很小很小。</li></ul><p><strong>补零位数比除数位数少一</strong></p><blockquote><p>异或运算<br>1+1=0 1+0=0 0+1=0 0+0=0</p></blockquote><p><strong>除数由两台计算机数据链路层协议决定</strong></p><p><em><strong>*小结：CRC差错检测技术*</strong></em><br>仅用循环冗余检验 CRC 差错检测技术只能做到<strong>无差错接受</strong>(accept)。</p><ul><li>“无差错接受”是指：“凡是接受的帧（<strong>即不包括丢弃的帧</strong>），我们都能以非常接近于 1 的概率认为这些帧在传输过程中没有产生差错”。也就是说：“凡是接收端数据链路层接受的帧都没有传输差错”（有差错的帧就丢弃而不接受）。</li><li>要做到“<strong>可靠传输</strong>”（即发送什么就收到什么）就必须再加上<strong>确认</strong>和<strong>重传</strong>机制。<ul><li>考虑：帧重复、帧丢失、帧乱序的情况</li></ul></li></ul><p>可以说“CRC是一种<strong>无比特差错</strong>，而不是<strong>无传输差错</strong>的检测机制”<br>OSI/RM模型的观点:数据链路层要做成无传输差错的!但这种理念目前不被接受。</p><p>.<br>.<br>.<span id="数据链路层的信道类型"></span></p><h1 id="数据链路层的信道类型"><a class="markdownIt-Anchor" href="#数据链路层的信道类型"></a> 数据链路层的信道类型</h1><p>•数据链路层使用的信道主要有以下两种类型：</p><ul><li>点对点信道。 这种信道使用一对一的点对点通信方式。</li><li>广播信道。 这种信道使用一对多的广播通信方式，因此过程比较复杂。广播信道上连接的主机很多，因此必须使用专用的共享信道协议来协调这些主机的数据发。</li></ul><p>.<br>·<span id="3.2 点对点协议 PPP"></span></p><h2 id="32-点对点协议-ppp"><a class="markdownIt-Anchor" href="#32-点对点协议-ppp"></a> 3.2 点对点协议 PPP</h2><ul><li><p>现在全世界使用得最多的数据链路层协议是<strong>点对点协议</strong> PPP (Point-to-Point Protocol)。</p></li><li><p>用户使用拨号电话线接入因特网时，一般都是使用 PPP 协议。</p><p><strong>用户到 ISP 的链路使用 PPP 协议</strong><br><img src="/images/javawz/20200426211558866.png" alt="在这里插入图片描述"></p><p><span id="3.2.1 PPP协议的特点"></span></p></li></ul><h3 id="321-ppp协议的特点"><a class="markdownIt-Anchor" href="#321-ppp协议的特点"></a> 3.2.1 PPP协议的特点</h3><p><strong>PPP 协议应满足的需求</strong></p><ul><li>简单——这是首要的要求</li><li>封装成帧</li><li>透明性</li><li>多种网络层协议</li><li>多种类型链路</li><li>差错检测</li><li>检测连接状态</li><li>最大传送单元</li><li>网络层地址协商</li><li>数据压缩协商</li></ul><p>·</p><p><strong>PPP 协议不需要的功能</strong></p><ul><li>纠错</li><li>流量控制</li><li>序号</li><li>多点线路</li><li>半双工或单工链路</li></ul><p><strong>PPP 协议的组成</strong></p><ul><li>1992 年制订了 PPP 协议。经过 1993 年和 1994 年的修订，现在的 PPP 协议已成为因特网的正式标准[RFC 1661]。<ul><li>PPP 协议有三个组成部分</li><li>一个将 IP 数据报封装到串行链路的方法。</li><li>链路控制协议 LCP (Link Control Protocol)。</li><li>网络控制协议 NCP (Network Control Protocol)。</li></ul></li></ul><p>.<br>.<span id="3.2.2 PPP协议的帧格式"></span></p><h3 id="322-ppp协议的帧格式"><a class="markdownIt-Anchor" href="#322-ppp协议的帧格式"></a> 3.2.2 PPP协议的帧格式</h3><ul><li>标志字段 F = 0x7E （符号“0x”表示后面的字符是用十六进制表示。十六进制的 7E 的二进- - 制表示是 01111110）。</li><li>地址字段 A 只置为 0xFF。地址字段实际上并不起作用。</li><li>控制字段 C 通常置为 0x03。</li><li>PPP 是面向字节的，所有的 PPP 帧的长度都是整数字节。<br><img src="/images/javawz/20200427080007332.png" alt="在这里插入图片描述"></li></ul><p><strong>透明传输问题</strong></p><ul><li>当 PPP 用在同步传输链路时，协议规定采用硬件来完成比特填充（和 HDLC 的做法一样）。</li><li>当 PPP 用在异步传输时，就使用一种特殊的 字符填充法 。</li></ul><p><strong>字符填充</strong></p><ul><li>将信息字段中出现的每一个 0x7E 字节转变成为 2 字节序列(0x7D, 0x5E)。</li><li>若信息字段中出现一个 0x7D 的字节, 则将其转变成为 2 字节序列(0x7D, 0x5D)。</li><li>若信息字段中出现 ASCII 码的控制字符（即数值小于 0x20 的字符），则在该字符前面要加入一个 0x7D 字节，同时将该字符的编码加以改变。</li></ul><p>.<br><strong>零比特填充</strong></p><ul><li>PPP 协议用在 SONET/SDH 链路时，是使用同步传输（一连串的比特连续传送）。这时 PPP 协议采用零比特填充方法来实现透明传输。</li><li>在发送端，只要发现有 5 个连续 1，则立即填入一个 0。接收端对帧中的比特流进行扫描。每当发现 5 个连续1时，就把这 5 个连续 1 后的一个 0 删除。<br><img src="/images/javawz/2020042708083468.png" alt="在这里插入图片描述"><br>.<br>.<br><strong>不提供使用序号和确认 的可靠传输</strong></li><li>PPP 协议之所以不使用序号和确认机制是出于以下的考虑：<ul><li>在数据链路层出现差错的概率不大时，使用比较简单的 PPP 协议较为合理。</li><li>在因特网环境下，PPP 的信息字段放入的数据是 IP 数据报。数据链路层的可靠传输并不能够保证网络层的传输也是可靠的。</li><li>帧检验序列 FCS 字段可保证无差错接受。<br>.<br>.</li></ul></li></ul><p><span id="3.2.3 PPP协议的工作状态"></span></p><h3 id="323-ppp协议的工作状态"><a class="markdownIt-Anchor" href="#323-ppp协议的工作状态"></a> 3.2.3 PPP协议的工作状态</h3><ul><li>当用户拨号接入 ISP 时，路由器的调制解调器对拨号做出确认，并建立一条物理连接。</li><li>PC 机向路由器发送一系列的 LCP 分组（封装成多个 PPP 帧）。</li><li>这些分组及其响应选择一些 PPP 参数，和进行网络层配置，NCP 给新接入的 PC机分配一个临时的 IP 地址，使 PC 机成为因特网上的一个主机。</li><li>通信完毕时，NCP 释放网络层连接，收回原来分配出去的 IP 地址。接着，LCP 释放数据链路层连接。最后释放的是物理层的连接。<br><img src="/images/javawz/20200427081935529.png" alt="在这里插入图片描述"><br>.<br>.</li></ul><p><span id="3.3 使用广播信道的数据链路层(局域网)"></span></p><h2 id="33-使用广播信道的数据链路层局域网"><a class="markdownIt-Anchor" href="#33-使用广播信道的数据链路层局域网"></a> 3.3 使用广播信道的数据链路层(局域网)</h2><p><span id="3.3.1 局域网的数据链路层"></span></p><h3 id="331-局域网的数据链路层"><a class="markdownIt-Anchor" href="#331-局域网的数据链路层"></a> 3.3.1 局域网的数据链路层</h3><p>局域网最主要的特点是：网络为一个单位所拥有，且地理范围和站点数目均有限。</p><p>局域网具有如下的一些主要优点：</p><ul><li>具有广播功能，从一个站点可很方便地访问全网。局域网上的主机可共享连接在局域网上的各种硬件和软件资源。</li><li>便于系统的扩展和逐渐地演变，各设备的位置可灵活调整和改变。</li><li>提高了系统的可靠性、可用性和残存性。<br><img src="/images/javawz/20200427082103326.png" alt="在这里插入图片描述"></li></ul><p>.<br>.<br><strong>媒体共享技术</strong></p><p>静态划分信道</p><ul><li>频分复用</li><li>时分复用</li><li>波分复用</li><li>码分复用</li></ul><p>动态媒体接入控制（多点接入）</p><ul><li>随机接入</li><li>受控接入 ，如多点线路探询(polling)，或轮询。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算网络原理-第三章-数据链路层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算网络原理-第三章-数据链路层&quot;&gt;&lt;/a&gt; 计算网络原理 第三章 数据链路层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#数据链路层（一）&quot;&gt;数据链路
      
    
    </summary>
    
      <category term="计算机网络原理" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>正则表达式</title>
    <link href="https://xiaowuyoucy.github.io/2021/03/29/yyy0002%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2021/03/29/yyy0002正则表达式/</id>
    <published>2021-03-29T08:23:07.000Z</published>
    <updated>2021-03-29T15:08:59.457Z</updated>
    
    <content type="html"><![CDATA[<h1 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h1><h3 id="点号应用之简单的数据提取"><a class="markdownIt-Anchor" href="#点号应用之简单的数据提取"></a> 点号应用之简单的数据提取</h3><p>利用点匹配我们想要的数据并提取出来可以匹配任何一个单字符除换行符外</p><p>1个点号只能匹配字符,如123456789abcde… .等,必须为<code>半角</code>的如果想要匹配全半数字,字母，或汉字,就必须要<code>2个点号</code></p><h3 id="星号正则的认识与应用"><a class="markdownIt-Anchor" href="#星号正则的认识与应用"></a> 星号正则的认识与应用</h3><p><code>*</code>星号表示之前的元素出现任意次数或0次</p><p>比如: 4.*8我们来看一下他是什么意思，星号出现在点号的后面，这代表点号有出现也行，没有出现也行:</p><p>打个比方，他可以匹配48、41238、412345678、4012345670123458</p><h3 id="问号和加号的认识与应用"><a class="markdownIt-Anchor" href="#问号和加号的认识与应用"></a> 问号和加号的认识与应用</h3><p><img src="/images/javawz/1617009958851.png" alt="1617009958851"></p><h3 id="连字符和范围描述符的认识与应用"><a class="markdownIt-Anchor" href="#连字符和范围描述符的认识与应用"></a> 连字符和范围描述符的认识与应用</h3><p>在学习&quot;-&quot;连字符前，我们先来认识一个强大的符号: [ ]， 这个[ ]所括的内容，可以不按顺序进行匹配。[] 范围描述符 范围描述符。如: [a-z]表示从a到z之间的任意一个。</p><p>-  连字符</p><p>A一般都与&quot;[]”起使用，只有连字符在字符组内部</p><p>时，并且出现在两个字符之间时，才能表示字符的范围;如果出现在字符组的开头，则只能表示连字符本身</p><p>例如:</p><p>[0-9]匹配任意0到9的数字</p><p>[a-z]匹配所有小写字母</p><p>[A-Z]匹配所有大写字母</p><p>当然，你可以把它们混在一起写成[a-z0-9]、[0-9a-zA-z]的样 子都可以下面我们举2个例子就明白了</p><p>必从一个网页源码中，区分出数字并提取出来</p><h3 id="脱字符和美元符的认识与应用"><a class="markdownIt-Anchor" href="#脱字符和美元符的认识与应用"></a> 脱字符^和美元符$的认识与应用</h3><p><img src="/images/javawz/1617012879072.png" alt="1617012879072"></p><p>排除:<code>[^1-9]匹配除了1到9的数字,其他的都可以匹配</code></p><h3 id="转义符的认识与应用"><a class="markdownIt-Anchor" href="#转义符的认识与应用"></a> 转义符\的认识与应用</h3><p><code>\</code>转义符作用:把正 则的元字符转换成元字符本身</p><p>如果需要匹配的某个字符本身就是元字符(如:<code>.?*+</code>) ，正则表达式将如何处理呢?</p><p>比如:我想要检索互联网的主机名，也就是我们说的网址,如: www.23 .com我们的正则语句要怎么写呢?</p><p>想的快的会员就会说，我直接就用www.23.com来匹配点号可以匹配任何字符包括点号本身，当然， 这样是可以匹配到。</p><p>但是，<a href="http://xn--www123-hh4kv70g1eb.com" target="_blank" rel="noopener">如果有www123.com</a></p><p>www223. com它们同样也会被匹配出来，唯一的解决办法就是把点号用转义符转换成他自身。</p><h3 id="字符组简记法"><a class="markdownIt-Anchor" href="#字符组简记法"></a> 字符组简记法</h3><p><img src="/images/javawz/1617019185120.png" alt="1617019185120"></p><p><img src="/images/javawz/1617019408172.png" alt="1617019408172"></p><h3 id="大括号与选择符的认识与应用"><a class="markdownIt-Anchor" href="#大括号与选择符的认识与应用"></a> 大括号与选择符的认识与应用</h3><p><img src="/images/javawz/1617020477744.png" alt="1617020477744"></p><h3 id="子表达式的认识与应用"><a class="markdownIt-Anchor" href="#子表达式的认识与应用"></a> 子表达式的认识与应用</h3><p><img src="/images/javawz/1617026254233.png" alt="1617026254233"></p><h3 id="贪婪和懒惰的匹配"><a class="markdownIt-Anchor" href="#贪婪和懒惰的匹配"></a> 贪婪和懒惰的匹配</h3><p><img src="/images/javawz/1617028212400.png" alt="1617028212400"></p><table><thead><tr><th>通配符匹配规则：</th></tr></thead><tbody><tr><td>* ：任意数量的字符</td></tr><tr><td>？：任何单个字符</td></tr><tr><td>正则 匹配规则：</td></tr><tr><td>*         前面元素出现0次以上</td></tr><tr><td>.            匹配任何单个字符</td></tr><tr><td>?           前面元素出现0次或1次</td></tr><tr><td>+          前面元素出现1次以上</td></tr><tr><td>^         表示开头。</td></tr><tr><td>$           表示结尾。</td></tr><tr><td>.*           表示0个以上的任意字符。</td></tr><tr><td>[  ]          范围描述符。[a-z]表示从a到z之间的任意一个。</td></tr><tr><td>\w          英文字母和数字。即[0-9 A-Z a-z]。</td></tr><tr><td>\W          非英文字母和数字</td></tr><tr><td>\s          空字符，即[\t\n\r\f]。</td></tr><tr><td>\S          非空字符。</td></tr><tr><td>\d           数字，即[0-9]。</td></tr><tr><td>\D          非数字。</td></tr><tr><td>\b          词边界字符（在范围描述符外部时）</td></tr><tr><td>\B          非词边界字符</td></tr><tr><td>\b         退格符（0x08）（在范围描述符内部时）</td></tr><tr><td>{m,n}        前面元素最少出现m次,最多出现n次</td></tr><tr><td>|           选择</td></tr><tr><td>(  )           群组</td></tr><tr><td>其他字符   该字符本身</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;正则表达式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#正则表达式&quot;&gt;&lt;/a&gt; 正则表达式&lt;/h1&gt;
&lt;h3 id=&quot;点号应用之简单的数据提取&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#点号应用之简单的
      
    
    </summary>
    
      <category term="易语言" scheme="https://xiaowuyoucy.github.io/categories/%E6%98%93%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>数据类型</title>
    <link href="https://xiaowuyoucy.github.io/2021/03/29/yyy0001%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2021/03/29/yyy0001数据类型/</id>
    <published>2021-03-29T07:07:49.000Z</published>
    <updated>2021-03-29T08:22:32.860Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据类型"><a class="markdownIt-Anchor" href="#数据类型"></a> 数据类型</h1><p>什么是变量的数据类型呢?实际就是指变量内所存储的数据的类型。</p><p>下面我们来讲讲变量内所能存储的基本数据类型。</p><h3 id="1字节型"><a class="markdownIt-Anchor" href="#1字节型"></a> 1.字节型。</h3><p>可容纳0到255之间的数值。</p><h3 id="2短整数型"><a class="markdownIt-Anchor" href="#2短整数型"></a> 2.短整数型。</h3><p>可容纳-32,768到32,767之间的数值，尺寸为2个字节。</p><h3 id="3整数型"><a class="markdownIt-Anchor" href="#3整数型"></a> 3.整数型。</h3><p>可容纳-2,147 ,483,648到2,147,483,647之间的数值，尺寸为4个字节。</p><h3 id="4长整数型"><a class="markdownIt-Anchor" href="#4长整数型"></a> 4.长整数型。</h3><p>可容纳-9,223,372,036,854,775,808到</p><p>9,223,372,036,854,775,807之间的数值，尺寸为8个字节。</p><h3 id="5小数型"><a class="markdownIt-Anchor" href="#5小数型"></a> 5.小数型。</h3><p>可容纳3.4E +/- 38 (7位小数)之间的数值，尺寸为4个字节。</p><h3 id="6双精度小数型"><a class="markdownIt-Anchor" href="#6双精度小数型"></a> 6.双精度小数型。</h3><p>可容纳1.7E +/- 308 (15位小数)之间的数值，尺寸为8个字节。</p><h3 id="7逻辑型"><a class="markdownIt-Anchor" href="#7逻辑型"></a> 7.逻辑型。</h3><p>值只可能为“真&quot;或“假”，尺寸为2个字节。“真&quot;和“假&quot;为系统预定义常量，其对应的英文常量名称为“true&quot;和false&quot;.</p><h3 id="8日期时间型"><a class="markdownIt-Anchor" href="#8日期时间型"></a> 8.日期时间型。</h3><p>用作记录日期及时间，尺寸为8个字节。</p><h3 id="9文本型"><a class="markdownIt-Anchor" href="#9文本型"></a> 9.文本型。</h3><p>用作记录一段文本，文本由以字节0结束的一系列字符组成。</p><h3 id="10字节集"><a class="markdownIt-Anchor" href="#10字节集"></a> 10.字节集。</h3><p>用作记录一段字节型数据。 字节集与字节数组之间可以互相转换，在程序中允许使用字节数组的地方也可以使用字节集，或者相反。字节数组的使用方法，譬如用中括号对(“[]&quot;)加索引数值引用字节成员，使用数组型数值数据进行赋值等等，都可以被字节集所使用。两者之间唯一的不同是字节集可以变长，因此可把字节集看作可变长的字节数组。</p><h3 id="11子程序指针"><a class="markdownIt-Anchor" href="#11子程序指针"></a> 11.子程序指针。</h3><p>用作指向一个子程序，尺寸为4个字节。</p><p>在以上的基本数据类型中，字节型、短整数型、整数型、长整数型、小数型、双精度小数型被统称为“数值型”，它们之间可以任意转换。不过编程需要注意转换可能带来的精度丢失。譬如:将整数257转换为字节后的结果为1，这是因为值257超出了字节型数据的最大上限255,从而产生了溢出。查看变量所可以使用的数据类型，在定义变量中双击类型就可以查看所支持的所有数据类型。</p><h1 id="创建变量"><a class="markdownIt-Anchor" href="#创建变量"></a> 创建变量</h1><h3 id="局部变量"><a class="markdownIt-Anchor" href="#局部变量"></a> 局部变量</h3><p><img src="../../themes/pure/source/images/javawz/1617002258932.png" alt="1617002258932"></p><p>快捷键: <code>ctrl + L</code></p><p>子程序内有效</p><h3 id="全局变量"><a class="markdownIt-Anchor" href="#全局变量"></a> 全局变量</h3><p><img src="../../themes/pure/source/images/javawz/1617002541052.png" alt="1617002541052"></p><p>快捷键:<code>ctrl +G</code></p><p>整个程序有效</p><h3 id="程序集变量"><a class="markdownIt-Anchor" href="#程序集变量"></a> 程序集变量</h3><p><img src="../../themes/pure/source/images/javawz/1617003138851.png" alt="1617003138851"></p><p>点击程序集1按下<code>回车键</code></p><p>整个程序集有效</p><h5 id="变量可以先使用后声明"><a class="markdownIt-Anchor" href="#变量可以先使用后声明"></a> 变量可以先使用后声明</h5><h3 id="易语言规定用代表日期类型数据"><a class="markdownIt-Anchor" href="#易语言规定用代表日期类型数据"></a> 易语言规定用<code>[]</code>代表日期类型数据</h3><p><code>[年-月-日 时-分-秒]</code></p><p><code>[年:月:日 时:分:秒]</code></p><p>[2020-1-1 11-11-22]</p><p>[2020:1:1 11:11:22]</p><h3 id="静态变量和非静态变量的区别"><a class="markdownIt-Anchor" href="#静态变量和非静态变量的区别"></a> 静态变量和非静态变量的区别</h3><h5 id="静态变量"><a class="markdownIt-Anchor" href="#静态变量"></a> 静态变量</h5><p>经过第一次初始化之后,后面就不用初始化了</p><p>子程序结束,变量不释放</p><h5 id="非静态变量"><a class="markdownIt-Anchor" href="#非静态变量"></a> 非静态变量</h5><p>每次都会初始化</p><p>子程序结束,变量释放</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据类型&quot;&gt;&lt;/a&gt; 数据类型&lt;/h1&gt;
&lt;p&gt;什么是变量的数据类型呢?实际就是指变量内所存储的数据的类型。&lt;/p&gt;
&lt;p&gt;下面我们来讲讲变量内所能存储的基本数据类型。&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="易语言" scheme="https://xiaowuyoucy.github.io/categories/%E6%98%93%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>介绍Android系统的发展历史和发行版本</title>
    <link href="https://xiaowuyoucy.github.io/2021/03/29/%E4%BB%8B%E7%BB%8DAndroid%E7%B3%BB%E7%BB%9F%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E5%8F%B2%E5%92%8C%E5%8F%91%E8%A1%8C%E7%89%88%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2021/03/29/介绍Android系统的发展历史和发行版本/</id>
    <published>2021-03-28T16:11:26.000Z</published>
    <updated>2021-03-28T16:11:53.533Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="Android" scheme="https://xiaowuyoucy.github.io/categories/Android/"/>
    
    
  </entry>
  
  <entry>
    <title>易语言介绍</title>
    <link href="https://xiaowuyoucy.github.io/2021/03/29/%E6%98%93%E8%AF%AD%E8%A8%80%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xiaowuyoucy.github.io/2021/03/29/易语言介绍/</id>
    <published>2021-03-28T16:09:38.000Z</published>
    <updated>2021-03-29T06:39:47.350Z</updated>
    
    <content type="html"><![CDATA[<h2 id="官方网站"><a class="markdownIt-Anchor" href="#官方网站"></a> 官方网站</h2><p><span style="font-size:28px;"><a href="http://www.dywt.com.cn/" target="_blank" rel="noopener">http://www.dywt.com.cn/</a> </span></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;官方网站&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#官方网站&quot;&gt;&lt;/a&gt; 官方网站&lt;/h2&gt;
&lt;p&gt;&lt;span style=&quot;font-size:28px;&quot;&gt;&lt;a href=&quot;http://www.dywt.com.cn/&quot; ta
      
    
    </summary>
    
      <category term="易语言" scheme="https://xiaowuyoucy.github.io/categories/%E6%98%93%E8%AF%AD%E8%A8%80/"/>
    
    
  </entry>
  
  <entry>
    <title>第二章 物理层</title>
    <link href="https://xiaowuyoucy.github.io/2021/01/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%BA%8C%E7%AB%A0-%E7%89%A9%E7%90%86%E5%B1%82/"/>
    <id>https://xiaowuyoucy.github.io/2021/01/10/计算机网络原理笔记-第二章-物理层/</id>
    <published>2021-01-10T08:53:04.000Z</published>
    <updated>2021-01-14T07:41:11.865Z</updated>
    
    <content type="html"><![CDATA[<h3 id="计算机网络原理-第二章-物理层"><a class="markdownIt-Anchor" href="#计算机网络原理-第二章-物理层"></a> 计算机网络原理 第二章 物理层</h3><ul><li><a href="#2.1%E7%89%A9%E7%90%86%E5%B1%82%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">2.1 物理层的基本概念</a></li><li><a href="#2.2%E6%95%B0%E6%8D%AE%E9%80%9A%E4%BF%A1%E7%9A%84%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86">2.2 数据通信的基础知识</a></li><li><a href="#%E7%9B%B8%E5%85%B3%E6%9C%AF%E8%AF%AD">相关术语</a></li><li><a href="#%E6%9C%89%E5%85%B3%E4%BF%A1%E9%81%93%E7%9A%84%E5%87%A0%E4%B8%AA%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5">有关信道的几个基本概念</a></li><li><a href="#2.3%E7%89%A9%E7%90%86%E5%B1%82%E4%B8%8B%E9%9D%A2%E7%9A%84%E4%BC%A0%E8%BE%93%E5%AA%92%E4%BD%93">2.3 物理层下面的传输媒体</a></li><li><a href="#2.4%E4%BF%A1%E9%81%93%E5%A4%8D%E7%94%A8%E6%8A%80%E6%9C%AF">2.4 信道复用技术</a></li><li><a href="#2.5%E6%95%B0%E5%AD%97%E4%BC%A0%E8%BE%93%E7%B3%BB%E7%BB%9F">2.5 数字传输系统</a></li><li><a href="#2.6%E5%AE%BD%E5%B8%A6%E6%8E%A5%E5%85%A5%E6%8A%80%E6%9C%AF">2.6 宽带接入技术</a></li></ul><p><span id="2.1物理层的基本概念"></span></p><h2 id="21-物理层的基本概念"><a class="markdownIt-Anchor" href="#21-物理层的基本概念"></a> 2.1 物理层的基本概念</h2><p>物理层解决如何在连接各种计算机传输媒体上传输bit流，注意，不是指用什么传输媒体（介质）<br><strong>物理层主要任务</strong>：确定传输媒体接口的一些特性：（为了统一规划，标准化，各个厂商生产一致，可以通用）<br><strong>机械特性</strong>：接口形状 大小 引线数目 网线内有几根线<br><strong>电气特性</strong>：例如规定电压范围<br><strong>功能特性</strong>：例如规定-5V表示0 +5V表示1（电压信号代表数字信号）<br><strong>过程特性</strong>：（规程特性）规定建立连接时各个部件的工作步骤<br><span id="2.2数据通信的基础知识"></span></p><h2 id="22-数据通信的基础知识"><a class="markdownIt-Anchor" href="#22-数据通信的基础知识"></a> 2.2 数据通信的基础知识</h2><p>数据通信模型（图）<br><img src="/images/javawz/20201219080914249.png" alt="在这里插入图片描述"></p><h2 id="相关术语"><a class="markdownIt-Anchor" href="#相关术语"></a> 相关术语</h2><p>通信的目的是传送消息<br><strong>数据（data）</strong>：运送消息的实体<br><strong>信号（signal）</strong>：数据的电气或电磁表现</p><ul><li>–模拟信号：代表消息的参数取值连续（如电压高低电平代表01数据）</li><li>–数字信号：代表消息的参数取值离散</li></ul><p><strong>码元（code）</strong>：在使用时间域的波形表示数字信号时，则代表不同</p><p>离散数值的基本波形就称为码元<br>在数字通信中常常用时间间隔相同的符号来表示一个二进制数字，这样的时间间隔内的信号称为二进制码元，而这个间隔被称为码元长度，1码元可以携带n bit的信息量<br>解释：<br>如果信号一共用2种可能，那么1码元代表1bit信息（只有高低电平）<br>如果信号一共用4种可能，那么1码元代表2bit信息，00 01 10 11，码元有四种可能，一码元代表2bit<br>……<br>如果信号一共用2的n次方种可能，那么1码元代表nbit信息。</p><h2 id="有关信道的几个基本概念"><a class="markdownIt-Anchor" href="#有关信道的几个基本概念"></a> 有关信道的几个基本概念</h2><p>信道一般表示向一个方向传送的信息的媒体。所以咱们说平常的信息线路往往包含一条发送信息的信道和一条接受信息的信道。<br><strong>单向通信</strong>（单工通信）–只能发送或只能接收<br>例子：电视塔发送电视信号，但是电视无法向电视塔发送信号<br><strong>双向交替通信</strong>（半双工通信）–双方可以收发，但是不能同时发送或同时接收<br><strong>双向同时通信</strong>（全双工通信）–通信的双方可以同时发送和接收消息<br>例子：打电话<br>计算机通信大多数是半双工和全双工通信</p><p><strong>基带信号</strong>（baseband）和<strong>带通信号</strong>（band pass）<br>前提：信号是会衰减的，比如人说话，当距离较远之后，声音就会听不到。<br><strong>基带信号</strong>（baseband）：来自信息源的信号。<br><strong>带通信号</strong>（band pass）：把基带信息经过载波调制后的信号（载波调制就是把信号的频率搬到较高的频段，以便传输）<br>因此，如果传输距离短，信息衰减可以接受，那就直接使用基带信号，如果距离长，信号衰减大，那就得通过调制将基带信号转换为带通信号，以减小衰减，接收方收到后再进行解调，分析成基带信号进行解读。</p><p><strong>几种基本调制方法</strong>：<br>调幅<br>调频<br>调相<br>具体见图：<br><img src="/images/javawz/20201219080923486.png" alt="在这里插入图片描述"></p><p>（数字信号的）<strong>编码格式</strong>：<br>单极性不归零码<br>双极性不归零码<br>单极性归零码<br>双极性归零码<br><strong>归零码</strong>：一次信号结尾始终为0电压 不归零码：一次信号结尾不需要归零<br><strong>单极性</strong>：只有正向和0电压 双极性：有正负电压<br><strong>曼彻斯特编码</strong>：低电平跳高电平代表0 高电平条低电平代表1，可以代表没有数据传输（用电平变化代表数据传输）<br><strong>差分曼彻斯特编码</strong>：0和1没有固定高低电平，后面的信号是几取决于前面的信号<br><img src="/images/javawz/20201219080946865.png" alt="在这里插入图片描述"></p><p><strong>信道极限容量</strong>：信号波形在实际信道传输时，会受到带宽受限、噪声、干扰等引起失真。</p><p><strong>奈氏准则</strong>：在理想条件下，为了避免码间串扰（码元太短，无法识别高低电平），码元传输速率是有上限的（上一章带宽可以无限增加吗例子）<br><strong>信噪比</strong>：带宽受阻且有高斯白噪声干扰的信道的情况下，信道的极限无差错信息传输速率信道的极限信息传输速率C的计算公式：（<strong>香农公式</strong>）<br>C = Wlog<sub>2</sub>(1+S/N) b/s (log<sub>2</sub>是log以2为底)<br>W：信道带宽（单位Hz）<br>S：信道内所传信号的平均功率<br>N：信道内部高斯噪声功率<br><strong>香农公式的结论</strong>：<br>1信道的带宽或信道的信噪比(S/N)越大，信息极限传输速率越高，若W或S/N没有上限，则C没有上限（实际不可能）<br>2只要信息传输速率低于信道极限信息传输速率，则一定可以找到方法确保数据的无差错传输<br>实际上信道所能达到的速率比香农公式计算出的低不少</p><p>例子：每分钟说200字，外面有噪声，降低说话速度，来确保收听者听到<br>又例如：无线网的衰减：路由器和计算机在相同房间，计算机速率150M，计算机搬到隔壁，速率只剩下100M，因为隔了一道墙，要确保可靠传输就要降低速率，墙可以理解为噪声。<br><img src="/images/javawz/20201219080955663.png" alt="在这里插入图片描述"><br><span id="2.3物理层下面的传输媒体"></span></p><h1 id="23-物理层下面的传输媒体"><a class="markdownIt-Anchor" href="#23-物理层下面的传输媒体"></a> 2.3 物理层下面的传输媒体</h1><p>导向传输媒体：电磁波沿着固体介质传播<br><img src="/images/javawz/202012190810070.png" alt="在这里插入图片描述"></p><p><strong>双绞线</strong></p><ul><li>–屏蔽双绞线STP（铜线绞在一起，避免电流相互作用，减少干扰）</li><li>–无屏蔽双绞线UTP（比上面多了一层绝缘层，避免外界干扰）</li></ul><p><strong>同轴电缆</strong> （结构和有线电视的电线一样）</p><ul><li>–50欧姆同轴电缆用于数字传输，多用于基带传输，也叫基带同轴电缆</li><li>–75欧姆同轴电缆用于模拟传输，即宽带同轴电缆</li></ul><p><strong>光缆</strong><br>单模光纤<br>多模光纤<br><img src="/images/javawz/20201219081015693.png" alt="在这里插入图片描述"></p><p><strong>非导向传输媒体</strong>（无线传输）：无线传输所使用的频段很广。<br>短波通信主要是靠电离层的反射，但短波信道的通信质量较差。<br>微波在空间主要是直线传播。</p><ul><li>地面微波接力通信</li><li>卫星通信</li></ul><p><span id="2.4 信道复用技术"></span></p><h1 id="24-信道复用技术"><a class="markdownIt-Anchor" href="#24-信道复用技术"></a> 2.4 信道复用技术</h1><p>目的：多用户同时传输，不会相互影响。提高信道利用率<br><img src="/images/javawz/20201219081023953.png" alt="在这里插入图片描述"></p><p><strong>频分复用 FDM(Frequency Division Multiplexing)</strong><br>用户在分配到一定的频带后，在通信过程中自始至终都占用这个频带。<br>频分复用的所有用户在同样的时间占用不同的带宽资源（请注意，这里的“带宽”是频率带宽而不是数据的发送速率）。<br>解释：特定的用户使用特定的频率波段，传输时采用不同频率的波段进行调制和解调，已达到区分其他数据的目的<br><strong>时分复用TDM(Time Division Multiplexing)</strong><br>时分复用则是将时间划分为一段段等长的时分复用帧（TDM 帧）。每一个时分复用的用户在每一个 TDM 帧中占用固定序号的时隙。<br>每一个用户所占用的时隙是周期性地出现（其周期就是 TDM 帧的长度）。<br>TDM 信号也称为等时(isochronous)信号。<br>时分复用的所有用户是在不同的时间占用同样的频带宽度。<br>时分复用可能会造成线路资源的浪费 ：<br>使用时分复用系统传送计算机数据时，由于计算机数据的突发性质，用户对分配到的子信道的利用率一般是不高的。<br><strong>统计时分复用 STDM(Statistic TDM)</strong><br>与时分复用类似，只不过每次发送时标记是哪个用户发出的，解析时按标记解析。可以避免线路资源的浪费<br><strong>波分复用 WDM(Wavelength Division Multiplexing)</strong><br>波分复用就是光的频分复用。<br><strong>码分复用 CDM(Code Division Multiplexing)</strong><br>常用的名词是码分多址 CDMA (Code Division Multiple Access)。<br>各用户使用经过特殊挑选的不同码型，因此彼此不会造成干扰。这种系统发送的信号有很强的抗干扰能力，其频谱类似于白噪声，不易被敌人发现。 每一个比特时间划分为 m 个短的间隔，称为码片(chip)。</p><p><span id="2.5数字传输系统"></span></p><h1 id="25-数字传输系统"><a class="markdownIt-Anchor" href="#25-数字传输系统"></a> 2.5 数字传输系统</h1><p><strong>脉码调制 PCM 体制</strong>：最初是为了在电话局之间的中继线上传送多路的电话。<br>由于历史上的原因，PCM 有两个互不兼容的国际标准，即北美的 24 路 PCM（简称为 T1）和欧洲的 30 路 PCM（简称为 E1）。我国采用的是欧洲的 E1 标准。<br>E1 的速率是 2.048 Mb/s，而 T1 的速率是 1.544 Mb/s。当需要有更高的数据率时，可采用复用的方法。<br>E1取样8000次/s 每个码元代表8位bit E1 采用时分复用技术 32路同时传输<br>8<em>8000</em>32 = 2.048Mb/s<br>T1只有24路同时传播，且有控制信号<br>8<em>8000</em>24+8K=1.544Mb/s(8K表示控制信号)<br><span id="2.6宽带接入技术"></span></p><h1 id="26-宽带接入技术"><a class="markdownIt-Anchor" href="#26-宽带接入技术"></a> 2.6 宽带接入技术</h1><p><strong>ADSL</strong> (Asymmetric Digital Subscriber Line)：非对称数字用户线（就是通过电话线上网）<br>用数字技术对现有的模拟电话用户线进行改造，使它能够承载宽带业务。把 0~4 kHz 低端频谱留给传统电话使用，而把原来没有被利用的高端频谱留给用户上网使用。<br><strong>ADSL</strong>实现原理采用DMT技术<br>DMT 调制技术采用频分复用的方法，把 40 kHz 以上一直到 1.1 MHz 的高端频谱划分为许多的子信道，其中 25  个子信道用于上行信道，而 249 个子信道用于下行信道。每个子信道占据 4 kHz 带宽（严格讲是 4.3125  kHz），并使用不同的载波（即不同的音调）进行数字调制。这种做法相当于在一对用户线上使用许多小的调制解调器并行地传送数据。<br><img src="/images/javawz/2020121908103317.png" alt="在这里插入图片描述"></p><p>ADSL上网图解：<br><img src="/images/javawz/20201219081052766.png" alt="在这里插入图片描述"></p><p>光纤同轴混合网 <strong>HFC</strong> (Hybrid Fiber Coax)（就是利用有线电视线路上网）<br>HFC 网是在目前覆盖面很广的有线电视网 CATV 的基础上开发的一种居民宽带接入网。HFC 网除可传送 CATV  外，还提供电话、数据和其他宽带交互型业务。现有的 CATV 网是树形拓扑结构的同轴电缆网络，它采用模拟技术的频分复用对电视节目进行单向传输。而  HFC 网则需要对 CATV 网进行改造。<br><strong>HFC 的主要特点</strong><br>HFC网的主干线路采用光纤<br>HFC 网将原 CATV 网中的同轴电缆主干部分改换为光纤，并使用模拟光纤技术。<br>在模拟光纤中采用光的振幅调制 AM，这比使用数字光纤更为经济。<br>模拟光纤从头端连接到光纤结点(fiber node)，即光分配结点 ODN (Optical Distribution Node)。在光纤结点光信号被转换为电信号。在光纤结点以下就是同轴电缆<br>HFC结构示意图</p><p><img src="/images/javawz/2020121908105979.png" alt="在这里插入图片描述"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;计算机网络原理-第二章-物理层&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机网络原理-第二章-物理层&quot;&gt;&lt;/a&gt; 计算机网络原理 第二章 物理层&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#2.1%E7%89%A9%E7%9
      
    
    </summary>
    
      <category term="计算机网络原理" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章 概述</title>
    <link href="https://xiaowuyoucy.github.io/2021/01/10/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86%E7%AC%94%E8%AE%B0-%E7%AC%AC%E4%B8%80%E7%AB%A0-%E6%A6%82%E8%BF%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/01/10/计算机网络原理笔记-第一章-概述/</id>
    <published>2021-01-10T08:15:21.000Z</published>
    <updated>2021-01-13T10:12:33.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="第一章-概述"><a class="markdownIt-Anchor" href="#第一章-概述"></a> 第一章 概述</h1><h3 id="计算机网络基础韩立刚视频笔记第一章-概述"><a class="markdownIt-Anchor" href="#计算机网络基础韩立刚视频笔记第一章-概述"></a> 计算机网络基础（韩立刚视频笔记）第一章 概述</h3><ul><li><a href="#%E7%AC%AC%E4%B8%80%E7%AB%A0%EF%BC%88%E6%A6%82%E8%BF%B0%EF%BC%89">第一章（概述）</a></li><li><a href="#%E5%B1%80%E5%9F%9F%E7%BD%91">局域网</a></li><li><a href="#%E5%B9%BF%E5%9F%9F%E7%BD%91">广域网</a></li><li><a href="#OSI%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B">OSI参考模型</a></li><li><a href="#OSI%E6%9E%B6%E6%9E%84%E5%9B%BE">OSI架构图</a></li><li><a href="#%E5%90%84%E5%B1%82%E9%97%B4%E7%9A%84%E6%95%B0%E6%8D%AE%E4%BC%A0%E8%BE%93">各层间的数据传输</a></li><li><a href="#%E7%BD%91%E7%BB%9C%E6%8E%92%E9%94%99">网络排错</a></li><li><a href="#OSI%E7%BD%91%E7%BB%9C%E5%8F%82%E8%80%83%E6%A8%A1%E5%9E%8B%E5%92%8C%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E7%9A%84%E4%BE%8B%E5%AD%90">OSI网络参考模型和网络安全的例子</a></li><li><a href="#%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E6%80%A7%E8%83%BD%E6%8C%87%E6%A0%87">计算机网络性能指标</a></li></ul><h2 id="第一章概述"><a class="markdownIt-Anchor" href="#第一章概述"></a> 第一章（概述）</h2><h1 id="局域网"><a class="markdownIt-Anchor" href="#局域网"></a> 局域网</h1><p>覆盖范围小，自己单位维护，带宽固定（由硬件决定） 100米 带宽小<br>多台计算机连接到接入层交换机 多台接入层交换机连接到汇聚层交换机<br>每一层都是一个星型结构</p><p><strong>接入层交换机</strong>：接入口多<br><strong>汇聚层交换机</strong>：连接各个接入层交换机，端口带宽高</p><h1 id="广域网"><a class="markdownIt-Anchor" href="#广域网"></a> 广域网</h1><p>距离远 花钱买服务 花钱租带宽</p><p><strong>ISP</strong>（Internet Server Provider）网络服务提供商<br>自己的机房 对网民提供Internet服务<br>运营的网站放在运营商服务器机房<br>运营商直之间只有一条线路连接，所以这条线路会成为通信速率瓶颈，也是为什么我们跨运营商访问网站比较慢的原因</p><p><strong>物理地址的作用</strong>：数据传输时记录当前物理地址和下次的传输物理地址<br><strong>IP地址的作用</strong>：记录当前IP地址和目标IP地址</p><h1 id="osi参考模型"><a class="markdownIt-Anchor" href="#osi参考模型"></a> OSI参考模型</h1><p><strong>应用层</strong> 能产生流量的程序<br><strong>表示层</strong> 加密 压缩等处理 传输格式（二进制 ASCII码）乱码是表示层问题（开发者处理）<br><strong>会话层</strong> 可以查木马 netstat -n查看链接状态 netstat -nb 查看连接由谁创建<br><strong>传输层</strong> 可靠传输 流量控制 不可靠传输<br><strong>网络层</strong> 选择最佳路径 规划IP地址<br><strong>数据链路层</strong> 标记帧的开始和结束 透明传输 差错校验 交换机速度<br><strong>物理层</strong> 网络设备接口标准 电器（气？）标准 如何在物理链路进行更快的传输（电压 接口数量 接口类型 通信介质：光纤 网线 双绞线）</p><p><strong>分层的好处</strong>：7层相互独立，某一层变化不会影响其他层（相当于软件开发的耦合性小的意思）<br>比如在应用程序写入服务器的IP地址是不符合分层的思想的，万一服务器的IP地址修改 应用程序就挂了（IP地址是网络层的内容，应用程序属于应用层）<br><strong>各层关系</strong>：低层向高层提供服务</p><h1 id="osi架构图"><a class="markdownIt-Anchor" href="#osi架构图"></a> OSI架构图</h1><p><img src="/images/javawz/20200425104644679.jpg" alt="在这里插入图片描述"></p><h1 id="各层间的数据传输"><a class="markdownIt-Anchor" href="#各层间的数据传输"></a> 各层间的数据传输</h1><p>数据封装<br><img src="/images/javawz/20201219080529572.png" alt="在这里插入图片描述"></p><p><img src="/images/javawz/20201219080547223.png" alt="在这里插入图片描述"></p><p>（途中的五层架构，就是OSI架构图右侧的五层架构）<br><img src="/images/javawz/20201219080558322.gif" alt="在这里插入图片描述"></p><h1 id="网络排错"><a class="markdownIt-Anchor" href="#网络排错"></a> 网络排错</h1><p>从底层向上排除<br>1.物理层故障：网络连接状态 查看发送和接收数据包<br>2.数据链路层故障：MAC地址冲突 ADSL欠费 网速无法协商 计算机连接到错误的VLAN<br>3.网络层故障：配置了错误的IP 子网掩码 网关，路由器没有配置可达目标的路由<br>4.应用层故障：（上四层都在这里说）应用程序配置错误（如如浏览器配置了错误的代理）</p><h1 id="osi网络参考模型和网络安全的例子"><a class="markdownIt-Anchor" href="#osi网络参考模型和网络安全的例子"></a> OSI网络参考模型和网络安全的例子</h1><p><strong>1.物理层安全</strong> 一栋大厦是保险公司的，建造时布好网线，使用时10层租给了其他公司，其他公司通过原先布好的网线就可以访问保险公司网络。（别人应该无法私自连接到你的网络，租售10层时 应将网线断开服务器，或配置将网络断开）<br><strong>2.数据链路层安全</strong> 上网时 ADSL 上网账号密码 VLAN划分 交换机绑定固定MAC地址<br><strong>3.网络层安全</strong> 路由器上使用ACL控制数据包流量（指定IP才传输） 防火墙设置<br><strong>4.应用层安全</strong> 开发的应用程序没有漏洞（比如没有SQL注入漏洞等等）</p><h1 id="计算机网络性能指标"><a class="markdownIt-Anchor" href="#计算机网络性能指标"></a> 计算机网络性能指标</h1><p><strong>1.速率</strong><br>连接在计算机网络上的主机在数字信道上传送数据位数的速率（data rate，bit rate）单位为b/s,kb/s,Mb/s,Gb/s<br>这就是我们常说的“我家装的100M的带宽”，不过，有些网站测速显示的速率是按字节来表示的，即需要拿100M/8得到网站显示数据<br>还有交换机的带宽为100M，100M其实是100Mb/s<br><strong>2.带宽</strong><br>数据通信中，数字信道所能传输的最高速率，单位为b/s,kb/s,Mb/s,Gb/s<br>注意，这也是一个速率，只不过是最大速率，和上面的理解几乎一样，多数情况受硬件限制<br><strong>3.吞吐量</strong><br>单位时间内通过某个网络数据量（有可能是几条数据链路流量和）<br><strong>4.时延</strong><br>也就是我们平时玩游戏说的延时<br>时延包括 发送时延 传播时延 处理时延 排队时延<br>发送时延 = 数据块长度（bit）/信道带宽（bit/s）=N s<br>加带宽是减少发送时延 传播速度由介质介质决定，介质固定，传播速度固定<br><strong>带宽可以无限增加吗？</strong><br>不可以：数据块长度固定，增加带宽意味着发送时间变短，同时数据块在信道中的长度也变短了（波形长度 = 发送时间 * 传播速度），之前说过传播速度由介质决定，一般固定，那么发送时间越短，波形越短，短到一定程度，接收方就无法识别高低电平了<br><strong>铜线和光纤的对比：</strong><br>铜线的传播速率其实和光纤的速率接近，那为什么使用光纤呢？因为光纤支持更高的发送速率，光纤使用光信号，即使数据很短，也能解析出高低电平。而铜线使用电信号，波形太短，无法识别高低电平。<br>5.时延带宽积=传播时延*带宽<br>6.往返时间（RTT Round-Trip Time）<br>ping出的时间就是往返时间 &gt;2000ms请求超时<br><strong>7.利用率</strong><br><img src="/images/javawz/20201219080635246.png" alt="在这里插入图片描述"></p><p>最形象的例子是汽车和公路。以汽车类比数据块，以高速公路类比网络光纤。当汽车较少时，利用率较低，但汽车开的很快，延时较低。如果遇到节假日，高速公路塞满了汽车，公路利用率高了，同时延时也高了，因为车已经开不快了，堵车啊。。。</p><h2 id="网络模式"><a class="markdownIt-Anchor" href="#网络模式"></a> 网络模式:</h2><p>单工模式：只能发或收  电视台  广播</p><p>半双工模式:  可以发和收，但不能同时进行   对讲机</p><p>全双工模式:  可以同时发和收    互联网   电话</p><p>无线网的带宽 由网络强度决定</p><p>集线器 物理层<br>交换机 物理层 数据链路层<br>路由器 物理层   数据链路层   网络层</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;第一章-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一章-概述&quot;&gt;&lt;/a&gt; 第一章 概述&lt;/h1&gt;
&lt;h3 id=&quot;计算机网络基础韩立刚视频笔记第一章-概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href
      
    
    </summary>
    
      <category term="计算机网络原理" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C%E5%8E%9F%E7%90%86/"/>
    
    
  </entry>
  
  <entry>
    <title>linux1-2</title>
    <link href="https://xiaowuyoucy.github.io/2020/11/18/001linux1-2/"/>
    <id>https://xiaowuyoucy.github.io/2020/11/18/001linux1-2/</id>
    <published>2020-11-18T09:24:59.000Z</published>
    <updated>2020-11-18T16:29:51.407Z</updated>
    
    <content type="html"><![CDATA[<h4 id="操作系统的作用"><a class="markdownIt-Anchor" href="#操作系统的作用"></a> 操作系统的作用:</h4><p>使计算机系统易于使用</p><p>有效管理系统资源</p><p>方便用户开发、测试和引进新功能</p><p>向下封装硬件，向上提供操作接口</p><p>linux分为内核版本和发行版本</p><p>内核源码网站：<a href="http://www.kernel.org" target="_blank" rel="noopener">www.kernel.org</a></p><p>发行版本就是给系统披上了UI</p><h3 id="文件系统"><a class="markdownIt-Anchor" href="#文件系统"></a> 文件系统:</h3><p>采用  “路径” + “文件名”</p><p>linux 采用 ‘’/&quot; 且没有盘符</p><p>路径分为:</p><ol><li>绝对路径</li><li>相对路径</li><li><code>./</code>表示当前目录</li><li><code>../</code>表示上一级目录</li></ol><p>linux目录结构</p><ul><li>/  根目录</li><li>/home  家目录</li><li>/bin   放工具(可执行文件)</li><li>/lib  库文件</li><li>/usr/include  头文件</li></ul><h3 id="文件权限"><a class="markdownIt-Anchor" href="#文件权限"></a> 文件权限</h3><p>文件分类</p><ul><li>普通文件 -</li><li>目录文件 d</li><li>设备文件  c字符设备   b块设备</li><li>管道文件</li><li>链接文件</li></ul><table><thead><tr><th style="text-align:center">文件类型</th><th style="text-align:center">文件所有者</th><th style="text-align:center">用户组</th><th style="text-align:center">其他人</th></tr></thead><tbody><tr><td style="text-align:center">-</td><td style="text-align:center">rwx</td><td style="text-align:center">rwx</td><td style="text-align:center">rwx</td></tr></tbody></table><p>-rwxrwxrwx</p><p>查看用户组信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /ect/gruop</span><br></pre></td></tr></table></figure><p>查看用户信息</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /ect/passwd</span><br></pre></td></tr></table></figure><p>用户名: x : 用户id : 组id</p><p>文件目录的x权限代表可进入权限</p><p>一般情况下linux/unix只允许文件所有者或超级用户(root)改变文件权限</p><p>命令 [-可选参数1] [-可选参数n]</p><p>[]是可选参数</p><h3 id="查命令"><a class="markdownIt-Anchor" href="#查命令"></a> 查命令</h3><p>使用–hellp</p><p>查手册</p><p>用man命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [选项] 命令名</span><br></pre></td></tr></table></figure><p>按q退出</p><p>enter下一行</p><p>空格下一屏</p><p>h列出所有功能键</p><p>/字符串 搜索所有该字符串</p><p>可以使用方向键操控</p><p>以章节方式分类</p><p>1代表命令</p><p>2代表系统调用</p><p>3代表库调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man 3 printf //查询printf函数使用说明</span><br></pre></td></tr></table></figure><p>按tab键可以补全命令</p><p>方向键可以查使用过的命令</p><p><code>history</code> 命令</p><p>列出历史命令(连续重复的命令只列举一次)</p><h3 id="ls-遍历当前目录"><a class="markdownIt-Anchor" href="#ls-遍历当前目录"></a> ls 遍历当前目录</h3><p><code>ls [-选项]</code></p><table><thead><tr><th style="text-align:left">-a</th><th style="text-align:left">遍历所有子目录与文件</th></tr></thead><tbody><tr><td style="text-align:left">-l</td><td style="text-align:left">详细显示信息</td></tr><tr><td style="text-align:left">-h</td><td style="text-align:left">以人性化方式显示文件大小</td></tr></tbody></table><p>使用方式</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls -ahl</span><br><span class="line">ls -a</span><br><span class="line">ls -l</span><br><span class="line">ll  #等价于 ls -l</span><br></pre></td></tr></table></figure><p>一个文件夹默认有两个目录,一个是<code>.</code>另一个是<code>..</code>   分别代表当前目录和上一级目录。</p><table style="font-size:13px;"><tr>    <td>文件类型</td>    <td>权限</td>    <td>硬连接数目</td>    <td>文件所有者</td>    <td>用户组</td>    <td>文件大小</td>    <td>创建日期</td>    <td>文件名/目录</td></tr></table><p>如果是文件夹,硬链接数目代表其下有多少子目录</p><h3 id="touch-创建文件"><a class="markdownIt-Anchor" href="#touch-创建文件"></a> touch 创建文件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">touch 文件名</span><br><span class="line">touch abc</span><br><span class="line">touch 文件名1  文件名2  文件名3...文件名n</span><br></pre></td></tr></table></figure><p>如果文件存在则修改日期时间为当下时间,否则则创建新文件</p><table style="font-size:14px;"><tr><td>?     代表任意一个字符</td></tr><tr><td>[abc]  匹配a、b、c中任意一个字符</td></tr><tr><td>[a~z] 匹配a~z中任意一个字符</td></tr><tr><td> \  转义字符</td></tr></table><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls ?.c</span><br><span class="line">ls a.?</span><br><span class="line">ls [a~d]*</span><br><span class="line">ls [abc].?</span><br></pre></td></tr></table></figure><h3 id="输出重定向命令"><a class="markdownIt-Anchor" href="#输出重定向命令"></a> 输出重定向命令: &gt;</h3><p>将命令执行结果重定向到一个文件上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">ls &gt; text.txt  #如果文件不存在,则创建.存在则覆盖</span><br><span class="line">ls &gt;&gt; a.txt  #如果文件不存在,则创建.存在则追加内容,不覆盖</span><br><span class="line">set -C   #禁止覆盖</span><br><span class="line">set +C   #解除禁止覆盖</span><br></pre></td></tr></table></figure><h3 id="分屏显示more"><a class="markdownIt-Anchor" href="#分屏显示more"></a> 分屏显示:more</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">more 文件名</span><br><span class="line">more abc</span><br></pre></td></tr></table></figure><p>按q退出空格下一页   h帮助</p><h3 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> 管道:|</h3><p>一个命令的输出可以通过管道做为另一个命令输入</p><p>输出|输入</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ls | grep std   #从ls中搜索std字符</span><br><span class="line"></span><br><span class="line">ls | more</span><br></pre></td></tr></table></figure><h3 id="从切换工作目录-cd"><a class="markdownIt-Anchor" href="#从切换工作目录-cd"></a> 从切换工作目录 cd</h3><p>Linux所有的目录或文件名大小写敏感</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换到当前用户的主目录(/home/用户目录)</span></span><br><span class="line">cd ~  </span><br><span class="line"><span class="meta">#</span><span class="bash">当前目录</span></span><br><span class="line">cd .  </span><br><span class="line"><span class="meta">#</span><span class="bash">上一级目录</span></span><br><span class="line">cd ..</span><br><span class="line"><span class="meta">#</span><span class="bash">上一次进入的目录</span></span><br><span class="line">cd -</span><br><span class="line">cd 相对路径和绝对路径</span><br><span class="line">cd ~/share  #等价于cd /home/用户名/share</span><br></pre></td></tr></table></figure><h3 id="查看当前路径-pwd"><a class="markdownIt-Anchor" href="#查看当前路径-pwd"></a> 查看当前路径  pwd</h3><h3 id="清屏-clear"><a class="markdownIt-Anchor" href="#清屏-clear"></a> 清屏 clear</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">clear</span><br></pre></td></tr></table></figure><p><code>ctrl+l</code>也可以</p><h3 id="创建文件夹-mkdir"><a class="markdownIt-Anchor" href="#创建文件夹-mkdir"></a> 创建文件夹 mkdir</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir 文件名</span><br><span class="line">mkdir 123  #创建一个123的文件夹</span><br><span class="line">mkdir /home/yc/aaa   #指定路径创建一个aa文件夹</span><br><span class="line">mkdir -p  /home/yc/a/b/c #递归创建</span><br></pre></td></tr></table></figure><p>创建者需要有当前文件夹写的权限</p><h3 id="删除文件夹-rmdir"><a class="markdownIt-Anchor" href="#删除文件夹-rmdir"></a> 删除文件夹 rmdir</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rmdir 文件夹名</span><br><span class="line">rmdir aaa</span><br></pre></td></tr></table></figure><p>文件夹必须是空的才可以删除</p><h3 id="rm-可以删除非空文件夹或文件"><a class="markdownIt-Anchor" href="#rm-可以删除非空文件夹或文件"></a> rm  可以删除非空文件夹或文件</h3><p><code>-f</code>不提示</p><p><code>-r</code>删除文件夹</p><p><code>-i</code>交互式删除</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rm 文件</span><br><span class="line">rm -r 文件夹</span><br><span class="line">rm * -rf  #危险操作</span><br><span class="line">rm 文件1  文件2  文件3...文件n</span><br></pre></td></tr></table></figure><h3 id="建立链接文件-ln"><a class="markdownIt-Anchor" href="#建立链接文件-ln"></a> 建立链接文件 ln</h3><p>硬链接:</p><p>给某个文件拷贝一份,这两个文件独立存在</p><p>改变其中一个,另一个也会改变</p><p>删除某个硬链接,不会影响另一个文件</p><p>只能链接普通文件,不能链接目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln 源文件 链接文件</span><br><span class="line">ln 1.txt a.txt  #a.txt是硬链接文件</span><br></pre></td></tr></table></figure><p>软链接:</p><p>类似windows的快捷方式</p><p>如果源文件删除,软连接文件没有意义</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ln -s 源文件 链接文件</span><br><span class="line">ln -s aaa bbb</span><br></pre></td></tr></table></figure><p>和windows快捷方式的区别:</p><p>假设有一个软连接目录是aaa,源文件是b,进入aaa路径会显示xx/aaa而不是xx/b,aaa实际上是b的别名,实际进入的是b目录</p><p>软链接文件的大小是固定的</p><h3 id="gedit-图形化文本编辑"><a class="markdownIt-Anchor" href="#gedit-图形化文本编辑"></a> gedit 图形化文本编辑</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gedit 文件名</span><br></pre></td></tr></table></figure><p>文件存在就打开,不存在就创建一个</p><h3 id="查看或合并文本内容-cat"><a class="markdownIt-Anchor" href="#查看或合并文本内容-cat"></a> 查看或合并文本内容 cat</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cat 文件名</span><br><span class="line">cat 文件名1...文件名n</span><br><span class="line">cat 文件名1 文件名2 文件名n &gt;&gt; 文件名x1 #追加合并文本内容</span><br><span class="line">cat 文件名1 文件名2 文件名n &gt; 文件名x1 #覆盖合并文本内容</span><br></pre></td></tr></table></figure><h3 id="文本搜索-grep"><a class="markdownIt-Anchor" href="#文本搜索-grep"></a> 文本搜索 grep</h3><p><code>grep [-选项] '字符串' 文件名</code></p><p>字符串最好用双引号括起来</p><p><code>-v</code>求反</p><p><code>-n</code>显示行号</p><p><code>-i</code>不区分大小写</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">grep "sss" 1.txt</span><br><span class="line">grep aaa 1.txt -n</span><br></pre></td></tr></table></figure><h5 id="正则表达式"><a class="markdownIt-Anchor" href="#正则表达式"></a> 正则表达式</h5><p><code>^a</code>代表以a开头</p><p><code>ke$</code>以ke结尾</p><p><code>[1~9]</code>1~9中任意一个</p><p><code>[1~9]aaa[1~9]</code>aaa是固定字符</p><p><code>.a.</code>点代表任意一个字符,a是固定字符</p><p>?和*失效</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls | grep ^a</span><br></pre></td></tr></table></figure><h3 id="查找文件-find"><a class="markdownIt-Anchor" href="#查找文件-find"></a> 查找文件 find</h3><p>​<code>find 路径 -name 文件名</code></p><p><code>find 路径 -size 文件大小</code></p><p><code>find 路径 -perm 0777</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">find ./ -size 2M #搜索等于2M的文件</span><br><span class="line">find ./ -size +2M #搜索大于2M的文件</span><br><span class="line">find ./ -size -2M #搜索小于2M的文件</span><br><span class="line">find ./ -size +4k -size -5M #搜索大于4k小于5M的文件</span><br><span class="line">find 路径 -perm 0777 #搜索777权限的文件</span><br><span class="line">find ./ -name abc</span><br><span class="line">find ./ -name "*.ssh"</span><br><span class="line">find ./ -name "[a-z]*"</span><br></pre></td></tr></table></figure><h3 id="拷贝文件-cp"><a class="markdownIt-Anchor" href="#拷贝文件-cp"></a> 拷贝文件 cp</h3><p><code>cp 源文件或目录 文件名 [-选项]</code></p><p><code>-a</code>保持文件原有属性</p><p><code>-f</code>不提醒</p><p><code>-i</code>交互式复制</p><p><code>-r</code>递归复制目录</p><p><code>-v</code>显示进度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp ./a /b -r</span><br><span class="line">cp ./1.txt ./a/b</span><br></pre></td></tr></table></figure><h3 id="移动文件-mv"><a class="markdownIt-Anchor" href="#移动文件-mv"></a> 移动文件 mv</h3><p>用来移动或重命名文件或目录</p><p><code>-f</code>  不提示</p><p><code>-i</code> 交互式移动</p><p><code>-v</code>显示进度</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mv ./a.txt ./b </span><br><span class="line">mv ./a.txt ./b.txt #重命名</span><br><span class="line">mv ./a /</span><br></pre></td></tr></table></figure><h3 id="获取文件类型-file"><a class="markdownIt-Anchor" href="#获取文件类型-file"></a> 获取文件类型 file</h3><p><code>file 文件名</code></p><p>executable 可执行文件</p><p>ASCII text 文本文件</p><h3 id="编译文件"><a class="markdownIt-Anchor" href="#编译文件"></a> 编译文件</h3><p><code>gcc 源文件 -o 文件名</code></p><h3 id="运行程序"><a class="markdownIt-Anchor" href="#运行程序"></a> 运行程序</h3><p>直接输入路径+文件名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./a.exe</span><br></pre></td></tr></table></figure><h3 id="归档管理-tar"><a class="markdownIt-Anchor" href="#归档管理-tar"></a> 归档管理 tar</h3><p>打包和解包但不压缩</p><p><code>tar [参数] 打包文件名 源文件</code></p><p><code>-</code>可以不写</p><p>打包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -cvf 打包名称.tar 源文件</span><br><span class="line">c 创建包  v 进度  f 后面是打包名,f放最后</span><br><span class="line"></span><br><span class="line">tar -cvf aaa.tar *</span><br></pre></td></tr></table></figure><p>解包</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -xvf 包名</span><br><span class="line">tar -xvf 包名 -C 路径</span><br><span class="line">指定路径要加大写C,x代表解包</span><br><span class="line"></span><br><span class="line">tar -xvf aaa.tar</span><br></pre></td></tr></table></figure><h3 id="gzip压缩和解压"><a class="markdownIt-Anchor" href="#gzip压缩和解压"></a> gzip压缩和解压</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip xxx.tar #自动生成一个xxx.tar.gz压缩包</span><br></pre></td></tr></table></figure><p><code>-r</code>代表压缩,一般省略不写</p><p><code>-d</code>代表解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip -r xxx.tar xxx.tar.gz</span><br><span class="line">加了-r  xxx.tar.gz要自己写</span><br></pre></td></tr></table></figure><p>解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gzip -d xxx.tar.gz</span><br></pre></td></tr></table></figure><h3 id="bzip2-解压压缩"><a class="markdownIt-Anchor" href="#bzip2-解压压缩"></a> bzip2 解压/压缩</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">bzip2 xxx.tar #压缩</span><br><span class="line">bzip2 -d xxx.tar.bz2 #解压</span><br></pre></td></tr></table></figure><h3 id="打包压缩"><a class="markdownIt-Anchor" href="#打包压缩"></a> 打包压缩</h3><p>指定路径要加 <code>-C</code></p><h4 id="gzip"><a class="markdownIt-Anchor" href="#gzip"></a> gzip</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -czvf xxx.tar.gz *.*</span><br></pre></td></tr></table></figure><h4 id="bzip2"><a class="markdownIt-Anchor" href="#bzip2"></a> bzip2</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cjvf xxx.tar.bz2 *.*</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -cjvf xxx.tar.bz2 -C ./my/*.*</span><br></pre></td></tr></table></figure><h3 id="解压解包"><a class="markdownIt-Anchor" href="#解压解包"></a> 解压解包</h3><h4 id="gzip-2"><a class="markdownIt-Anchor" href="#gzip-2"></a> gzip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xzvf xxx.tar.gz</span><br></pre></td></tr></table></figure><h4 id="bzip2-2"><a class="markdownIt-Anchor" href="#bzip2-2"></a> bzip2</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf xxx.tar.bz2</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -xjvf xxx.tar.bz2 -C ./my/</span><br></pre></td></tr></table></figure><h3 id="文件压缩和解压-zip-unzip"><a class="markdownIt-Anchor" href="#文件压缩和解压-zip-unzip"></a> 文件压缩和解压 zip unzip</h3><h4 id="压缩-zip"><a class="markdownIt-Anchor" href="#压缩-zip"></a> 压缩 zip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip -r 压缩文件名</span><br><span class="line">-r是必须要加的</span><br></pre></td></tr></table></figure><h4 id="解压-unzip"><a class="markdownIt-Anchor" href="#解压-unzip"></a> 解压 unzip</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip -d 压缩包名</span><br><span class="line">unzip -d ./text.zip</span><br></pre></td></tr></table></figure><h3 id="查看命令所在目录-which"><a class="markdownIt-Anchor" href="#查看命令所在目录-which"></a> 查看命令所在目录 which</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">which 命令名</span><br><span class="line">which ls</span><br></pre></td></tr></table></figure><h3 id="who查看最近登录的用户"><a class="markdownIt-Anchor" href="#who查看最近登录的用户"></a> who查看最近登录的用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">who</span><br></pre></td></tr></table></figure><h3 id="w-查看最近登录的用户显示ip"><a class="markdownIt-Anchor" href="#w-查看最近登录的用户显示ip"></a> w 查看最近登录的用户,显示ip</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w</span><br></pre></td></tr></table></figure><h3 id="exit-退出当前用户"><a class="markdownIt-Anchor" href="#exit-退出当前用户"></a> exit 退出当前用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><p>如果是图像界面终端,退出当前终端<br>如果是使用ssh远程登录,退出登录用户<br>如果是切换后的登录用户,退出则返回上一个登录账户.</p><h3 id="su-切换用户"><a class="markdownIt-Anchor" href="#su-切换用户"></a> su 切换用户</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">su  #切换到root用户</span><br><span class="line">su root #切换root用户</span><br><span class="line">su - #切换root用户,同时切换到/root目录</span><br><span class="line">su - root#切换root用户,同时切换到/root目录  -两边都有空格</span><br><span class="line">su 普通用户</span><br><span class="line">su - 普通用户</span><br></pre></td></tr></table></figure><p>sudo 运行普通用户执行一些或全部的root命令的一个工具,减少了root用户的登录和管理时间,提高安全性</p><p>需要root权限</p><h3 id="添加删除组账号groupadd-groupdel"><a class="markdownIt-Anchor" href="#添加删除组账号groupadd-groupdel"></a> 添加删除组账号:groupadd  groupdel</h3><p><code>groupadd</code> 新建组账号<br><code>groupdel</code>删除组账号<br>如果有用户属于组了,就不能删组了,把用户移出该组才可以删<br><code>groupadd</code> 组名<br><code>groupdel</code>组名</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">groupadd abc</span><br><span class="line">groupdel abc</span><br></pre></td></tr></table></figure><h3 id="修改用户所在组-usermod"><a class="markdownIt-Anchor" href="#修改用户所在组-usermod"></a> 修改用户所在组 usermod</h3><p><code>usermod -g 用户组 用户名</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g root abc</span><br></pre></td></tr></table></figure><h3 id="查看用户组信息-cat-etcgroup"><a class="markdownIt-Anchor" href="#查看用户组信息-cat-etcgroup"></a> 查看用户组信息 cat /etc/group</h3><h3 id="查看用户信息-cat-etcpasswd"><a class="markdownIt-Anchor" href="#查看用户信息-cat-etcpasswd"></a> 查看用户信息   cat /etc/passwd</h3><p><code>yxc19980620c:x:1000:0:yc:/home/yxc19980620c:/bin/bash</code><br>1000代表用户id<br>0代表用户组id</p><h3 id="添加用户-useradd或adduser"><a class="markdownIt-Anchor" href="#添加用户-useradd或adduser"></a> 添加用户 useradd或adduser</h3><p>添加用户时需要在/home目录下添加一个和新建用户同名的文件夹<br>useradd和adduser功能完全一样<br><code>useradd -d 用户文件夹 用户名 -m</code><br><code>useradd -d /home/abc abc -m</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">useradd -d 用户文件夹 用户名 -m </span><br><span class="line">useradd -d /home/abc abc -m</span><br></pre></td></tr></table></figure><p><code>-d</code>代表指定用户文件夹<br><code>-m</code>代表如果用户文件夹不存在则新建一个用户文件夹</p><h5 id="新建用户并指定用户组"><a class="markdownIt-Anchor" href="#新建用户并指定用户组"></a> 新建用户并指定用户组</h5><p><code>useradd -d 用户文件夹 用户名 -g 用户组 -m</code></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -d /home/abc abc -g root -m</span><br></pre></td></tr></table></figure><h3 id="删除用户-userdel"><a class="markdownIt-Anchor" href="#删除用户-userdel"></a> 删除用户 userdel</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">userdel 用户名  #不会自动删除用户的主目录</span><br><span class="line">userdel 用户名 -r  #会同时删除用户的主目录</span><br></pre></td></tr></table></figure><h3 id="给用户添加密码-passwd"><a class="markdownIt-Anchor" href="#给用户添加密码-passwd"></a> 给用户添加密码 passwd</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br><span class="line">passwd abc</span><br></pre></td></tr></table></figure><h3 id="查看用户登录情况-last"><a class="markdownIt-Anchor" href="#查看用户登录情况-last"></a> 查看用户登录情况 last</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo last</span><br></pre></td></tr></table></figure><h3 id="修改文件权限-chmod"><a class="markdownIt-Anchor" href="#修改文件权限-chmod"></a> 修改文件权限 chmod</h3><h4 id="字母法"><a class="markdownIt-Anchor" href="#字母法"></a> 字母法:</h4><p><code>chmod 修改权限 文件名</code></p><p>u 用户所有者  g 用户组  o 其他人</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">+ 代表加权限</span><br><span class="line">- 代表减权限</span><br><span class="line">= 赋值权限</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x 1.c  #给1.c文件添加所有者x执行权限</span><br><span class="line"></span><br><span class="line">chmod g-x 1.c  #给1.c文件减去所属组x执行权限</span><br><span class="line"></span><br><span class="line">chmod o=rwx    #给1.c文件赋予其他人rwx权限</span><br></pre></td></tr></table></figure><h4 id="数字法"><a class="markdownIt-Anchor" href="#数字法"></a> 数字法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">u g o</span><br><span class="line">0 0 0</span><br><span class="line">第一个数字0 对应着u权限</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">rwx</span><br><span class="line">--- 000 代表没有权限</span><br><span class="line">r-- 1004</span><br><span class="line">-w- 0102</span><br><span class="line">--x 0011</span><br><span class="line">rw- 1106</span><br><span class="line">r-x 1015</span><br><span class="line">-wx 0113</span><br><span class="line">rwx 111 7</span><br></pre></td></tr></table></figure><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod 777 1.c  #代表1.c的权限是-rwx rwx rwx</span><br><span class="line"></span><br><span class="line">chmod 444 1.c  #代表1.c的权限是-r--r--r--</span><br></pre></td></tr></table></figure><h5 id="文件夹权限说明"><a class="markdownIt-Anchor" href="#文件夹权限说明"></a> 文件夹权限说明</h5><p>目录没有x权限,表示不能进此目录<br>没有r权限,不能查看文件夹内容<br>没有w权限,不能新建或删除,修改文件</p><h3 id="改变文件所有者-chown"><a class="markdownIt-Anchor" href="#改变文件所有者-chown"></a> 改变文件所有者 chown</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件或目录</span><br><span class="line">chown root aa</span><br></pre></td></tr></table></figure><h3 id="改变文件所属组-chgrp"><a class="markdownIt-Anchor" href="#改变文件所属组-chgrp"></a> 改变文件所属组 chgrp</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chgrp 用户组  文件或目录</span><br><span class="line">chgrp root aa</span><br></pre></td></tr></table></figure><h3 id="查看当前日历-cal"><a class="markdownIt-Anchor" href="#查看当前日历-cal"></a> 查看当前日历 cal</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cal</span><br><span class="line">cal -y  #查看一年的日历</span><br></pre></td></tr></table></figure><h3 id="显示或设置时间-date"><a class="markdownIt-Anchor" href="#显示或设置时间-date"></a> 显示或设置时间 date</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">date</span><br></pre></td></tr></table></figure><h3 id="查看进程信息-ps"><a class="markdownIt-Anchor" href="#查看进程信息-ps"></a> 查看进程信息  ps</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -aux</span><br></pre></td></tr></table></figure><p>可以不用加-<br><code>-a</code>显示所有进程,包括其他用户进程<br><code>-u</code>显示进程的详细信息<br><code>-x</code> 显示没有控制终端的进程<br><code>-w</code>显示加宽,以便显示更多的详细</p><p><code>USER PID %CPU %MEM VSZ RSS TTY STAT START TIME COMMAND</code></p><p>USER      用户名<br>PID  进程ID<br>%CPU      进程占用的CPU百分比<br>%MEM      占用内存的百分比<br>VSZ      该进程使用的虚拟內存量（KB）<br>RSS      该进程占用的固定內存量（KB）（驻留中页的数量）<br>TTY    //该进程在哪个终端上运行，若与终端无关，则显示? 若为pts/0等，则表示由网络连接主机进程。<br>STAT     进程的状态<br>START    该进程被触发启动时间<br>TIME     该进程实际使用CPU运行的时间<br>COMMAND:所执行的指令</p><h3 id="动态显示进程信息-top"><a class="markdownIt-Anchor" href="#动态显示进程信息-top"></a> 动态显示进程信息 top</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure><h3 id="结束进程-kill"><a class="markdownIt-Anchor" href="#结束进程-kill"></a> 结束进程 kill</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kill 进程id</span><br><span class="line">kill -9  进程id   #强制结束</span><br></pre></td></tr></table></figure><h3 id="后台运行-jobs-fg"><a class="markdownIt-Anchor" href="#后台运行-jobs-fg"></a> 后台运行 &amp;、jobs、fg</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"> ./hello.exe &amp;  #表示后台运行</span><br><span class="line"> </span><br><span class="line"> jobs  #查看后台程序</span><br><span class="line"> </span><br><span class="line">fg 后台编号 #把后台程序调出前台</span><br></pre></td></tr></table></figure><h3 id="关机重启-reboot-shutdown-init"><a class="markdownIt-Anchor" href="#关机重启-reboot-shutdown-init"></a> 关机重启 reboot shutdown  init</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">reboot  #重启</span><br><span class="line">shutdown -r now  #重启</span><br><span class="line">shutdown -h now  #立刻关机</span><br><span class="line">shutdown -h 20:25  #在20:25分关机</span><br><span class="line">shutdown -h +10  #十分钟后关机</span><br><span class="line">init 0 #关机</span><br><span class="line">init 6 #重启</span><br></pre></td></tr></table></figure><h3 id="字符界面和图像界面切换"><a class="markdownIt-Anchor" href="#字符界面和图像界面切换"></a> 字符界面和图像界面切换</h3><h5 id="redhat平台"><a class="markdownIt-Anchor" href="#redhat平台"></a> redhat平台</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">init 3  #字符界面</span><br><span class="line">init 5#图形界面</span><br></pre></td></tr></table></figure><h3 id="ubuntu快捷键切换"><a class="markdownIt-Anchor" href="#ubuntu快捷键切换"></a> Ubuntu快捷键切换</h3><p><code>ctrl+alt+F2 字符界面</code><br><code>ctrl+alt+F1 图像界面</code></p><h3 id="检测硬盘空间-df"><a class="markdownIt-Anchor" href="#检测硬盘空间-df"></a> 检测硬盘空间 df</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><h3 id="检查目录所占磁盘空间du"><a class="markdownIt-Anchor" href="#检查目录所占磁盘空间du"></a> 检查目录所占磁盘空间:du</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h 目录</span><br></pre></td></tr></table></figure><p><code>-a</code> 递归显示指定目录中各文件和子目录中文件占用的数据块<br><code>-s</code> 显示指定文件和目录占用的数据块<br><code>-b</code> 以字节为单位显示磁盘占用情况<br><code>-h</code>人性化输出大小</p><h3 id="安装软件-rpm"><a class="markdownIt-Anchor" href="#安装软件-rpm"></a> 安装软件 rpm</h3><p><code>rpm [选项][软件包名]</code></p><p><code>-i</code>指定安装的软件包<br><code>-h</code>显示安装过程及进度<br><code>-v</code> 显示安装的详细信息<br><code>-q</code>查询系统是否已安装指定软件包<br><code>-a</code> 查看系统已安装的软件包<br><code>-e</code> 卸载软件<br><code>--nodeps</code> 配合<code>-e</code>使用 ,强制卸载,不检查依赖项<br><code>--force</code> 强制操作,如强制安装或卸载</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rpm -ihv ./aaa.rpm</span><br></pre></td></tr></table></figure><h3 id="获取最新的软件包的列表"><a class="markdownIt-Anchor" href="#获取最新的软件包的列表"></a> 获取最新的软件包的列表</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><h3 id="从源中添加xxx软件"><a class="markdownIt-Anchor" href="#从源中添加xxx软件"></a> 从源中添加xxx软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install xxx</span><br></pre></td></tr></table></figure><h3 id="删除xxx软件"><a class="markdownIt-Anchor" href="#删除xxx软件"></a> 删除xxx软件</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove xxx</span><br></pre></td></tr></table></figure><h3 id="dpkg"><a class="markdownIt-Anchor" href="#dpkg"></a> dpkg</h3><p>Debian Linux系统用来安装、创建和管理软件包的实用工具。</p><h5 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法</h5><p><code>dpkg(选项)(参数)</code></p><h5 id="选项"><a class="markdownIt-Anchor" href="#选项"></a> 选项</h5><p><code>-i</code>：安装软件包；<br><code>-r</code>：删除软件包；<br><code>-P</code>：删除软件包的同时删除其配置文件；<br><code>-L</code>：显示于软件包关联的文件；<br><code>-l</code>：显示已安装软件包列表；<br><code>--unpack</code>：解开软件包；<br><code>-c</code>：显示软件包内文件列表；<br><code>--confiugre</code>：配置软件包。</p><h5 id="参数"><a class="markdownIt-Anchor" href="#参数"></a> 参数</h5><p>Deb软件包：指定要操作的.deb软件包。</p><h5 id="实例"><a class="markdownIt-Anchor" href="#实例"></a> 实例</h5><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">dpkg -i package.deb     #安装包</span><br><span class="line">dpkg -r package         #删除包</span><br><span class="line">dpkg -P package         #删除包（包括配置文件）</span><br><span class="line">dpkg -L package         #列出与该包关联的文件</span><br><span class="line">dpkg -l package         #显示该包的版本</span><br><span class="line">dpkg --unpack package.deb  #解开deb包的内容</span><br><span class="line">dpkg -S keyword            #搜索所属的包内容</span><br><span class="line">dpkg -l                    #列出当前已安装的包</span><br><span class="line">dpkg -c package.deb        #列出deb包的内容</span><br><span class="line">dpkg --configure package   #配置包</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;操作系统的作用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作系统的作用&quot;&gt;&lt;/a&gt; 操作系统的作用:&lt;/h4&gt;
&lt;p&gt;使计算机系统易于使用&lt;/p&gt;
&lt;p&gt;有效管理系统资源&lt;/p&gt;
&lt;p&gt;方便用户开发、测试和引进新功能&lt;/p&gt;
&lt;p
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>属性选择器</title>
    <link href="https://xiaowuyoucy.github.io/2020/06/04/html-css00022%E5%B1%9E%E6%80%A7%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/06/04/html-css00022属性选择器/</id>
    <published>2020-06-04T04:39:16.000Z</published>
    <updated>2020-06-04T04:56:52.137Z</updated>
    
    <content type="html"><![CDATA[<h1 id="属性选择器"><a class="markdownIt-Anchor" href="#属性选择器"></a> 属性选择器</h1><p>在<code>HBuilder</code>中按<code>ctrl+shift+f</code>可以折叠代码</p><p><code>title</code>属性</p><p>可以给标签起一个标题名字</p><p>鼠标放上去会显示属性值</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"123"</span>&gt;</span>zzz<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br></pre></td></tr></table></figure><p>元素名[属性名] 选择含有指定属性的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素名[属性名=属性值] 选择含有指定属性和属性值的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title="123"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class="111"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素名[属性名^=属性值] 选择属性值以指定值开头的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title^="a"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class^="b"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素名[属性名$=属性值] 选择属性值以指定值结尾的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title$="a"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class$="b"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>元素名[属性名*=属性值] 选择属性值中含有某值的元素的元素</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[title*="a"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-attr">[class*="b"]</span>&#123;</span><br><span class="line"><span class="attribute">color</span>: yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span> <span class="attr">type</span>=<span class="string">"text/css"</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[class]</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: yellow;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[title="a"]</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[title^="ac"]</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: green;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[title$="bc"]</span>&#123;</span></span><br><span class="line"><span class="undefined">color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-attr">[title*="z"]</span>&#123;</span></span><br><span class="line"><span class="undefined">color: brown;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"acc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"acc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"abc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"abc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"a"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">class</span>=<span class="string">"bc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"azs"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"aza"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span> <span class="attr">title</span>=<span class="string">"azc"</span>&gt;</span>123<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;属性选择器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#属性选择器&quot;&gt;&lt;/a&gt; 属性选择器&lt;/h1&gt;
&lt;p&gt;在&lt;code&gt;HBuilder&lt;/code&gt;中按&lt;code&gt;ctrl+shift+f&lt;/code&gt;可以折叠代码&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="HTML/CSS" scheme="https://xiaowuyoucy.github.io/categories/HTML-CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>伪元素</title>
    <link href="https://xiaowuyoucy.github.io/2020/06/04/html-css00021%E4%BC%AA%E5%85%83%E7%B4%A0/"/>
    <id>https://xiaowuyoucy.github.io/2020/06/04/html-css00021伪元素/</id>
    <published>2020-06-04T04:12:31.000Z</published>
    <updated>2020-06-04T04:27:13.487Z</updated>
    
    <content type="html"><![CDATA[<h1 id="伪元素"><a class="markdownIt-Anchor" href="#伪元素"></a> 伪元素</h1><p><code>:first-letter</code></p><p>首字符伪元素</p><p>修改第一个字符的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素名<span class="selector-pseudo">:first-letter</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:first-line</code></p><p>首行伪元素</p><p>修改首行的样式</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素名<span class="selector-pseudo">::first-line</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:before</code></p><p>表示元素最前面部分</p><p><code>:before</code>和<code>:after</code>通常搭配<code>content</code>来使用</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"2133"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:after</code></p><p>表示元素最后面</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span><br><span class="line"><span class="attribute">content</span>: <span class="string">"2133"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:first-letter</span>&#123;</span></span><br><span class="line"><span class="undefined">color: red;</span></span><br><span class="line"><span class="undefined">font-size: 50px;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:first-line</span>&#123;</span></span><br><span class="line"><span class="undefined">background-color: saddlebrown;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:before</span>&#123;</span></span><br><span class="line"><span class="undefined">font-size: 50px;</span></span><br><span class="line"><span class="undefined">content: "www";</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="css"><span class="selector-tag">p</span><span class="selector-pseudo">:after</span>&#123;</span></span><br><span class="line"><span class="undefined">font-size: 50px;</span></span><br><span class="line"><span class="css"><span class="selector-tag">content</span>: "<span class="selector-class">.com</span>";</span></span><br><span class="line"><span class="undefined">color: green;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>12342112423141242<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;伪元素&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#伪元素&quot;&gt;&lt;/a&gt; 伪元素&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;:first-letter&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;首字符伪元素&lt;/p&gt;
&lt;p&gt;修改第一个字符的样式&lt;/p&gt;
&lt;figur
      
    
    </summary>
    
      <category term="HTML/CSS" scheme="https://xiaowuyoucy.github.io/categories/HTML-CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>元素的伪类选择器</title>
    <link href="https://xiaowuyoucy.github.io/2020/05/30/html-css00020%E5%85%83%E7%B4%A0%E7%9A%84%E4%BC%AA%E7%B1%BB%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/05/30/html-css00020元素的伪类选择器/</id>
    <published>2020-05-30T11:43:22.000Z</published>
    <updated>2020-05-30T12:01:39.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="元素的伪类选择器"><a class="markdownIt-Anchor" href="#元素的伪类选择器"></a> 元素的伪类选择器</h1><p>伪类专门用来表示元素的一种特殊的状态.</p><p>比如访问过的超链接等</p><p><img src="/images/javawz/1590839109726.png" alt="1590839109726"></p><p><code>:link</code>表示普通的链接（没访问过的超链接）</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:link</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:visited</code>表示访问过的超链接</p><p>浏览器是通过历史记录来判断一个链接是否访问过.</p><p>由于隐私的原因，所以visited这个伪类只能修改链接的颜色</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:visited</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:hover</code>表示鼠标移入的状态</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:active</code>表示的是超链接被点击的状态.</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">a</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>:hover</code>和<code>:active</code>也可以为其他元素设置</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:hover</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">:active</span>&#123;</span><br><span class="line"><span class="attribute">color</span>:red;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>IE6中,不支持对超链接以为的元素设置<code>:hover</code>和<code>:active</code></p><p><code>:focus</code>获取焦点</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line"><span class="attribute">background-color</span>:yellow;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>::selection</code>为p标签中选中的内容使用样式</p><p>可以用::selection伪类</p><p>注意:这个伪类在火狐浏览器中需要采用另外一种方式编写<code>::-moz-selection</code></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::-moz-selection</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="selector-tag">p</span><span class="selector-pseudo">::selection</span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;元素的伪类选择器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#元素的伪类选择器&quot;&gt;&lt;/a&gt; 元素的伪类选择器&lt;/h1&gt;
&lt;p&gt;伪类专门用来表示元素的一种特殊的状态.&lt;/p&gt;
&lt;p&gt;比如访问过的超链接等&lt;/p&gt;
&lt;p&gt;&lt;img src=
      
    
    </summary>
    
      <category term="HTML/CSS" scheme="https://xiaowuyoucy.github.io/categories/HTML-CSS/"/>
    
    
  </entry>
  
  <entry>
    <title>后代选择器和子元素选择器</title>
    <link href="https://xiaowuyoucy.github.io/2020/05/30/html-css00019%E5%90%8E%E4%BB%A3%E9%80%89%E6%8B%A9%E5%99%A8%E5%92%8C%E5%AD%90%E5%85%83%E7%B4%A0%E9%80%89%E6%8B%A9%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/05/30/html-css00019后代选择器和子元素选择器/</id>
    <published>2020-05-30T09:52:56.000Z</published>
    <updated>2020-05-30T10:04:18.151Z</updated>
    
    <content type="html"><![CDATA[<h1 id="后代选择器和子元素选择器"><a class="markdownIt-Anchor" href="#后代选择器和子元素选择器"></a> 后代选择器和子元素选择器</h1><h5 id="父元素"><a class="markdownIt-Anchor" href="#父元素"></a> 父元素</h5><p>直接包含子元素的元素叫做父元素</p><h5 id="子元素"><a class="markdownIt-Anchor" href="#子元素"></a> 子元素</h5><p>直接被父元素包含的元素是子元素</p><h5 id="祖先元素"><a class="markdownIt-Anchor" href="#祖先元素"></a> 祖先元素</h5><p>​    直接或间接包含后代元素的元素叫做祖先元素<br>​            一个元素的父元素也是它的祖先元素</p><h5 id="后代元素"><a class="markdownIt-Anchor" href="#后代元素"></a> 后代元素</h5><p>​    直接或间接被祖先元素包含的元素叫做后代元素<br>​            子元素也是后代元素</p><h5 id="兄弟元素"><a class="markdownIt-Anchor" href="#兄弟元素"></a> 兄弟元素</h5><p>拥有相同父元素的元素是兄弟元素</p><h3 id="后代元素选择器"><a class="markdownIt-Anchor" href="#后代元素选择器"></a> 后代元素选择器</h3><p>作用：选中指定元素内的指定后代元素<br>语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">祖先 后代&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div span&#123;</span></span><br><span class="line"><span class="undefined">background-color: red;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div的后代<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>我也是div的后代<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我span也是div的后代<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="子元素选择器"><a class="markdownIt-Anchor" href="#子元素选择器"></a> 子元素选择器</h3><p>​        作用：选中指定父元素的指定子元素<br>​                语法：</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">父元素&gt;子元素&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span><span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">style</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="undefined">div&gt;span&#123;</span></span><br><span class="line"><span class="css"><span class="selector-tag">background-color</span><span class="selector-pseudo">:red</span>;</span></span><br><span class="line"><span class="undefined">&#125;</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">style</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">span</span>&gt;</span>我是div的直接子元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span><span class="tag">&lt;<span class="name">span</span>&gt;</span>我span不是div的直接子元素<span class="tag">&lt;/<span class="name">span</span>&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;后代选择器和子元素选择器&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#后代选择器和子元素选择器&quot;&gt;&lt;/a&gt; 后代选择器和子元素选择器&lt;/h1&gt;
&lt;h5 id=&quot;父元素&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hre
      
    
    </summary>
    
      <category term="HTML/CSS" scheme="https://xiaowuyoucy.github.io/categories/HTML-CSS/"/>
    
    
  </entry>
  
</feed>
