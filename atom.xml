<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2020-03-16T03:51:45.054Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>斗地主案例的需求分析和代码实现</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00163%E6%96%97%E5%9C%B0%E4%B8%BB%E6%A1%88%E4%BE%8B%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00163斗地主案例的需求分析和代码实现/</id>
    <published>2020-03-16T03:49:07.000Z</published>
    <updated>2020-03-16T03:51:45.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斗地主案例的需求分析和代码实现"><a class="markdownIt-Anchor" href="#斗地主案例的需求分析和代码实现"></a> 斗地主案例的需求分析和代码实现</h1><p><img src="/images/javawz/1584330604545.png" alt="1584330604545"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    斗地主综合案例:</span></span><br><span class="line"><span class="comment">        1.准备牌</span></span><br><span class="line"><span class="comment">        2.洗牌</span></span><br><span class="line"><span class="comment">        3.发牌</span></span><br><span class="line"><span class="comment">        4.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.准备牌</span></span><br><span class="line">        <span class="comment">//定义一个存储54张牌的ArrayList集合,泛型使用String</span></span><br><span class="line">        ArrayList&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//定义两个数组,一个数组存储牌的花色,一个数组存储牌的序号</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">//先把大王和小王存储到poker集合中</span></span><br><span class="line">        poker.add(<span class="string">"大王"</span>);</span><br><span class="line">        poker.add(<span class="string">"小王"</span>);</span><br><span class="line">        <span class="comment">//循环嵌套遍历两个数组,组装52张牌</span></span><br><span class="line">        <span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(color+number);</span></span><br><span class="line">                <span class="comment">//把组装好的牌存储到poker集合中</span></span><br><span class="line">                poker.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(poker);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2.洗牌</span></span><br><span class="line"><span class="comment">            使用集合的工具类Collections中的方法</span></span><br><span class="line"><span class="comment">            static void shuffle(List&lt;?&gt; list) 使用默认随机源对指定列表进行置换。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//System.out.println(poker);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            3.发牌</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义4个集合,存储玩家的牌和底牌</span></span><br><span class="line">        ArrayList&lt;String&gt; player01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; diPai = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            遍历poker集合,获取每一张牌</span></span><br><span class="line"><span class="comment">            使用poker集合的索引%3给3个玩家轮流发牌</span></span><br><span class="line"><span class="comment">            剩余3张牌给底牌</span></span><br><span class="line"><span class="comment">            注意:</span></span><br><span class="line"><span class="comment">                先判断底牌(i&gt;=51),否则牌就发没了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size() ; i++) &#123;</span><br><span class="line">            <span class="comment">//获取每一张牌</span></span><br><span class="line">            String p = poker.get(i);</span><br><span class="line">            <span class="comment">//轮流发牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                <span class="comment">//给底牌发牌</span></span><br><span class="line">                diPai.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家1发牌</span></span><br><span class="line">                player01.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家2发牌</span></span><br><span class="line">                player02.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家3发牌</span></span><br><span class="line">                player03.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.看牌</span></span><br><span class="line">        System.out.println(<span class="string">"刘德华:"</span>+player01);</span><br><span class="line">        System.out.println(<span class="string">"周润发:"</span>+player02);</span><br><span class="line">        System.out.println(<span class="string">"周星驰:"</span>+player03);</span><br><span class="line">        System.out.println(<span class="string">"底牌:"</span>+diPai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;斗地主案例的需求分析和代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#斗地主案例的需求分析和代码实现&quot;&gt;&lt;/a&gt; 斗地主案例的需求分析和代码实现&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/15843306
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java泛型通配符</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00162%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00162泛型通配符/</id>
    <published>2020-03-16T03:38:57.000Z</published>
    <updated>2020-03-16T03:47:24.883Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java泛型通配符"><a class="markdownIt-Anchor" href="#java泛型通配符"></a> java泛型通配符</h1><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a class="markdownIt-Anchor" href="#通配符基本使用"></a> 通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p><p>此时只能接受数据,不能往该集合中存储数据。</p><h3 id="泛型的通配符"><a class="markdownIt-Anchor" href="#泛型的通配符"></a> 泛型的通配符:</h3><p><code>?</code>:代表任意的数据类型</p><h3 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式:</h3><p>不能创建对象使用<br>只能作为方法的参数使用</p><h3 id="泛型的上限"><a class="markdownIt-Anchor" href="#泛型的上限"></a> <strong>泛型的上限</strong>：</h3><h5 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h5><p><code>类型名称 &lt;? extends 类 &gt; 对象名称</code></p><h5 id="意义"><a class="markdownIt-Anchor" href="#意义"></a> 意义：</h5><p><code>只能接收该类型及其子类</code></p><h3 id="泛型的下限"><a class="markdownIt-Anchor" href="#泛型的下限"></a> <strong>泛型的下限</strong>：</h3><ul><li><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></li><li><strong>意义</strong>： `只能接收该类型及其父类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">"a"</span>);</span><br><span class="line">        list02.add(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">        printArray(list01);</span><br><span class="line">        printArray(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;?&gt; list03 = new ArrayList&lt;?&gt;();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,能遍历所有类型的ArrayList集合</span></span><br><span class="line"><span class="comment">        这时候我们不知道ArrayList集合使用什么数据类型,可以泛型的通配符?来接收数据类型</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            泛型没有继承概念的</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用迭代器遍历集合</span></span><br><span class="line">        Iterator&lt;?&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//it.next()方法,取出的元素是Object,可以接收任意的数据类型</span></span><br><span class="line">            Object o = it.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    泛型的上限限定: ? extends E  代表使用的泛型只能是E类型的子类/本身</span></span><br><span class="line"><span class="comment">    泛型的下限限定: ? super E    代表使用的泛型只能是E类型的父类/本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        getElement1(list1);</span><br><span class="line">        <span class="comment">//getElement1(list2);//报错</span></span><br><span class="line">        getElement1(list3);</span><br><span class="line">        <span class="comment">//getElement1(list4);//报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getElement2(list1);//报错</span></span><br><span class="line">        <span class="comment">//getElement2(list2);//报错</span></span><br><span class="line">        getElement2(list3);</span><br><span class="line">        getElement2(list4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            类与类之间的继承关系</span></span><br><span class="line"><span class="comment">            Integer extends Number extends Object</span></span><br><span class="line"><span class="comment">            String extends Object</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java泛型通配符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java泛型通配符&quot;&gt;&lt;/a&gt; java泛型通配符&lt;/h1&gt;
&lt;p&gt;当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&amp;lt;?&amp;gt;表示。但是一旦使
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java定义和使用含有泛型的接口</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00161%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8%E5%90%AB%E6%9C%89%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00161定义和使用含有泛型的接口/</id>
    <published>2020-03-16T03:30:48.000Z</published>
    <updated>2020-03-16T03:36:58.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java定义和使用含有泛型的接口"><a class="markdownIt-Anchor" href="#java定义和使用含有泛型的接口"></a> java定义和使用含有泛型的接口</h1><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;代表泛型的变量&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl1对象</span></span><br><span class="line">        GenericInterfaceImpl1 gi1 = <span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        gi1.method(<span class="string">"字符串"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl2对象</span></span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; gi2 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi2.method(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        GenericInterfaceImpl2&lt;Double&gt; gi3 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi3.method(<span class="number">8.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口,第一种使用方式:定义接口的实现类,实现接口,指定接口的泛型</span></span><br><span class="line"><span class="comment">    public interface Iterator&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">        E next();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Scanner类实现了Iterator接口,并指定接口的泛型为String,所以重写的next方法泛型默认就是String</span></span><br><span class="line"><span class="comment">    public final class Scanner implements Iterator&lt;String&gt;&#123;</span></span><br><span class="line"><span class="comment">        public String next() &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口第二种使用方式:接口使用什么泛型,实现类就使用什么泛型,类跟着接口走</span></span><br><span class="line"><span class="comment">    就相当于定义了一个含有泛型的类,创建对象的时候确定泛型的类型</span></span><br><span class="line"><span class="comment">    public interface List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        boolean add(E e);</span></span><br><span class="line"><span class="comment">        E get(int index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        public boolean add(E e) &#123;&#125;</span></span><br><span class="line"><span class="comment">        public E get(int index) &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java定义和使用含有泛型的接口&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java定义和使用含有泛型的接口&quot;&gt;&lt;/a&gt; java定义和使用含有泛型的接口&lt;/h1&gt;
&lt;h3 id=&quot;定义格式&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java定义和使用含有泛型的方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00160%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8%E5%90%AB%E6%9C%89%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00160定义和使用含有泛型的方法/</id>
    <published>2020-03-16T03:24:53.000Z</published>
    <updated>2020-03-16T03:37:09.101Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java定义和使用含有泛型的方法"><a class="markdownIt-Anchor" href="#java定义和使用含有泛型的方法"></a> java定义和使用含有泛型的方法</h1><h3 id="定义含有泛型的方法"><a class="markdownIt-Anchor" href="#定义含有泛型的方法"></a> 定义含有泛型的方法:</h3><p>泛型定义在方法的修饰符和返回值类型之间</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表(使用泛型))&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>含有泛型的方法,在调用方法的时候确定泛型的数据类型<br>传递什么类型的参数,泛型就是什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericMethod对象</span></span><br><span class="line">        GenericMethod gm = <span class="keyword">new</span> GenericMethod();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            调用含有泛型的方法method01</span></span><br><span class="line"><span class="comment">            传递什么类型,泛型就是什么类型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        gm.method01(<span class="number">10</span>);</span><br><span class="line">        gm.method01(<span class="string">"abc"</span>);</span><br><span class="line">        gm.method01(<span class="number">8.8</span>);</span><br><span class="line">        gm.method01(<span class="keyword">true</span>);</span><br><span class="line"></span><br><span class="line">        gm.method02(<span class="string">"静态方法,不建议创建对象使用"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法,通过类名.方法名(参数)可以直接使用</span></span><br><span class="line">        GenericMethod.method02(<span class="string">"静态方法"</span>);</span><br><span class="line">        GenericMethod.method02(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericMethod</span> </span>&#123;</span><br><span class="line">    <span class="comment">//定义一个含有泛型的方法</span></span><br><span class="line">    <span class="keyword">public</span> &lt;M&gt; <span class="function"><span class="keyword">void</span> <span class="title">method01</span><span class="params">(M m)</span></span>&#123;</span><br><span class="line">        System.out.println(m);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个含有泛型的静态方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> &lt;S&gt; <span class="function"><span class="keyword">void</span> <span class="title">method02</span><span class="params">(S s)</span></span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java定义和使用含有泛型的方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java定义和使用含有泛型的方法&quot;&gt;&lt;/a&gt; java定义和使用含有泛型的方法&lt;/h1&gt;
&lt;h3 id=&quot;定义含有泛型的方法&quot;&gt;&lt;a class=&quot;mark
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java定义和使用含有泛型的类</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00159%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8%E5%90%AB%E6%9C%89%E6%B3%9B%E5%9E%8B%E7%9A%84%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00159定义和使用含有泛型的类/</id>
    <published>2020-03-16T03:17:49.000Z</published>
    <updated>2020-03-16T03:23:29.150Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java定义和使用含有泛型的类"><a class="markdownIt-Anchor" href="#java定义和使用含有泛型的类"></a> java定义和使用含有泛型的类</h1><pre><code>定义一个含有泛型的类,模拟ArrayList集合泛型是一个未知的数据类型,当我们不确定什么什么数据类型的时候,可以使用泛型泛型可以接收任意的数据类型,可以使用Integer,String,Student...创建对象的时候确定泛型的数据类型</code></pre><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt;</span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02GenericClass</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//不写泛型默认为Object类型</span></span><br><span class="line">        GenericClass gc = <span class="keyword">new</span> GenericClass();</span><br><span class="line">        gc.setName(<span class="string">"只能是字符串"</span>);</span><br><span class="line">        Object obj = gc.getName();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericClass对象,泛型使用Integer类型</span></span><br><span class="line">        GenericClass&lt;Integer&gt; gc2 = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        gc2.setName(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        Integer name = gc2.getName();</span><br><span class="line">        System.out.println(name);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericClass对象,泛型使用String类型</span></span><br><span class="line">        GenericClass&lt;String&gt; gc3 = <span class="keyword">new</span> GenericClass&lt;&gt;();</span><br><span class="line">        gc3.setName(<span class="string">"小明"</span>);</span><br><span class="line">        String name1 = gc3.getName();</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericClass</span>&lt;<span class="title">E</span>&gt; </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> E name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> E <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(E name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java定义和使用含有泛型的类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java定义和使用含有泛型的类&quot;&gt;&lt;/a&gt; java定义和使用含有泛型的类&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;定义一个含有泛型的类,模拟ArrayList集合

      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java使用泛型的好处</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00158%E4%BD%BF%E7%94%A8%E6%B3%9B%E5%9E%8B%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00158使用泛型的好处/</id>
    <published>2020-03-16T03:09:52.000Z</published>
    <updated>2020-03-16T03:16:18.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="java使用泛型的好处"><a class="markdownIt-Anchor" href="#java使用泛型的好处"></a> java使用泛型的好处</h2><p>创建集合对象,使用泛型</p><h3 id="好处"><a class="markdownIt-Anchor" href="#好处"></a> 好处:</h3><p>避免了类型转换的麻烦,存储的是什么类型,取出的就是什么类型<br>把运行期异常(代码运行之后会抛出的异常),提升到了编译期(写代码的时候会报错)</p><h3 id="弊端"><a class="markdownIt-Anchor" href="#弊端"></a> 弊端:</h3><p>泛型是什么类型,只能存储什么类型的数据</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        <span class="comment">//list.add(1);//add(java.lang.String)in ArrayList cannot be applied to (int)</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历list集合</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s+<span class="string">"-&gt;"</span>+s.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        创建集合对象,不使用泛型</span></span><br><span class="line"><span class="comment">        好处:</span></span><br><span class="line"><span class="comment">            集合不使用泛型,默认的类型就是Object类型,可以存储任意类型的数据</span></span><br><span class="line"><span class="comment">        弊端:</span></span><br><span class="line"><span class="comment">            不安全,会引发异常</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList list = <span class="keyword">new</span> ArrayList();</span><br><span class="line">        list.add(<span class="string">"abc"</span>);</span><br><span class="line">        list.add(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用迭代器遍历list集合</span></span><br><span class="line">        <span class="comment">//获取迭代器</span></span><br><span class="line">        Iterator it = list.iterator();</span><br><span class="line">        <span class="comment">//使用迭代器中的方法hasNext和next遍历集合</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//取出元素也是Object类型</span></span><br><span class="line">            Object obj = it.next();</span><br><span class="line">            System.out.println(obj);</span><br><span class="line"></span><br><span class="line">            <span class="comment">//想要使用String类特有的方法,length获取字符串的长度;不能使用  多态 Object obj = "abc";</span></span><br><span class="line">            <span class="comment">//需要向下转型</span></span><br><span class="line">            <span class="comment">//会抛出ClassCastException类型转换异常,不能把Integer类型转换为String类型</span></span><br><span class="line">            String s = (String)obj;</span><br><span class="line">            System.out.println(s.length());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;java使用泛型的好处&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java使用泛型的好处&quot;&gt;&lt;/a&gt; java使用泛型的好处&lt;/h2&gt;
&lt;p&gt;创建集合对象,使用泛型&lt;/p&gt;
&lt;h3 id=&quot;好处&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java泛型的概念</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00157%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00157泛型的概念/</id>
    <published>2020-03-16T03:04:45.000Z</published>
    <updated>2020-03-16T03:06:37.802Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java泛型的概念"><a class="markdownIt-Anchor" href="#java泛型的概念"></a> java泛型的概念</h1><p>在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成Object类型。当我们在取出每一个对象，并且进行相应的操作，这时必须采用类型转换。</p><p><img src="/images/javawz/1584327969075.png" alt="1584327969075"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java泛型的概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java泛型的概念&quot;&gt;&lt;/a&gt; java泛型的概念&lt;/h1&gt;
&lt;p&gt;在前面学习集合时，我们都知道集合中是可以存放任意对象的，只要把对象存储集合后，那么这时他们都会被提升成
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java增强for循环</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00156%E5%A2%9E%E5%BC%BAfor%E5%BE%AA%E7%8E%AF/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00156增强for循环/</id>
    <published>2020-03-16T01:55:15.000Z</published>
    <updated>2020-03-16T01:58:37.014Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java增强for循环"><a class="markdownIt-Anchor" href="#java增强for循环"></a> java增强for循环</h1><h3 id="增强for循环"><a class="markdownIt-Anchor" href="#增强for循环"></a> 增强for循环:</h3><p>底层使用的也是迭代器,使用for循环的格式,简化了迭代器的书写<br>是JDK1.5之后出现的新特性<br>Collection<e>extends Iterable<e>:所有的单列集合都可以使用增强for<br>public interface Iterable<t>实现这个接口允许对象成为 “foreach” 语句的目标。</t></e></e></p><h3 id="增强for循环-2"><a class="markdownIt-Anchor" href="#增强for循环-2"></a> 增强for循环:</h3><p>用来遍历集合和数组</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合/数组的数据类型 变量名: 集合名/数组名)&#123;</span><br><span class="line">sout(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Foreach</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        demo02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用增强for循环遍历集合</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list.add(<span class="string">"aaa"</span>);</span><br><span class="line">        list.add(<span class="string">"bbb"</span>);</span><br><span class="line">        list.add(<span class="string">"ccc"</span>);</span><br><span class="line">        list.add(<span class="string">"ddd"</span>);</span><br><span class="line">        <span class="keyword">for</span>(String s : list)&#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//使用增强for循环遍历数组</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">demo01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span>[] arr = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>&#125;;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i:arr)&#123;</span><br><span class="line">            System.out.println(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java增强for循环&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java增强for循环&quot;&gt;&lt;/a&gt; java增强for循环&lt;/h1&gt;
&lt;h3 id=&quot;增强for循环&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java迭代器的实现原理</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00155%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E5%AE%9E%E7%8E%B0%E5%8E%9F%E7%90%86/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00155迭代器的实现原理/</id>
    <published>2020-03-16T01:52:26.000Z</published>
    <updated>2020-03-16T01:53:01.867Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java迭代器的实现原理"><a class="markdownIt-Anchor" href="#java迭代器的实现原理"></a> java迭代器的实现原理</h1><p><img src="/images/javawz/1584323555155.png" alt="1584323555155"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java迭代器的实现原理&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java迭代器的实现原理&quot;&gt;&lt;/a&gt; java迭代器的实现原理&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584323555155.png
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java迭代器的代码实现</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00154%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00154迭代器的代码实现/</id>
    <published>2020-03-16T01:31:18.000Z</published>
    <updated>2020-03-16T01:33:26.732Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java迭代器的代码实现"><a class="markdownIt-Anchor" href="#java迭代器的代码实现"></a> java迭代器的代码实现</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Iterator</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个集合对象</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        coll.add(<span class="string">"姚明"</span>);</span><br><span class="line">        coll.add(<span class="string">"科比"</span>);</span><br><span class="line">        coll.add(<span class="string">"麦迪"</span>);</span><br><span class="line">        coll.add(<span class="string">"詹姆斯"</span>);</span><br><span class="line">        coll.add(<span class="string">"艾弗森"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            1.使用集合中的方法iterator()获取迭代器的实现类对象,使用Iterator接口接收(多态)</span></span><br><span class="line"><span class="comment">            注意:</span></span><br><span class="line"><span class="comment">                Iterator&lt;E&gt;接口也是有泛型的,迭代器的泛型跟着集合走,集合是什么泛型,迭代器就是什么泛型</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//多态  接口            实现类对象</span></span><br><span class="line">        Iterator&lt;String&gt; it = coll.iterator();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            发现使用迭代器取出集合中元素的代码,是一个重复的过程</span></span><br><span class="line"><span class="comment">            所以我们可以使用循环优化</span></span><br><span class="line"><span class="comment">            不知道集合中有多少元素,使用while循环</span></span><br><span class="line"><span class="comment">            循环结束的条件,hasNext方法返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String e = it.next();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"----------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Iterator&lt;String&gt; it2 = coll.iterator();it2.hasNext();)&#123;</span><br><span class="line">            String e = it2.next();</span><br><span class="line">            System.out.println(e);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="comment">/* //2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</span></span><br><span class="line"><span class="comment">        boolean b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);//true</span></span><br><span class="line"><span class="comment">        //3.使用Iterator接口中的方法next取出集合中的下一个元素</span></span><br><span class="line"><span class="comment">        String s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);//姚明</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);</span></span><br><span class="line"><span class="comment">        s = it.next();</span></span><br><span class="line"><span class="comment">        System.out.println(s);</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        b = it.hasNext();</span></span><br><span class="line"><span class="comment">        System.out.println(b);//没有元素,返回false</span></span><br><span class="line"><span class="comment">        s = it.next();//没有元素,在取出元素会抛出NoSuchElementException没有元素异常</span></span><br><span class="line"><span class="comment">        System.out.println(s);*/</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java迭代器的代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java迭代器的代码实现&quot;&gt;&lt;/a&gt; java迭代器的代码实现&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java Iterator接口介绍</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00153Iterator%E6%8E%A5%E5%8F%A3%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00153Iterator接口介绍/</id>
    <published>2020-03-16T01:25:33.000Z</published>
    <updated>2020-03-16T01:30:51.522Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-iterator接口介绍"><a class="markdownIt-Anchor" href="#java-iterator接口介绍"></a> java Iterator接口介绍</h1><h3 id="javautiliterator接口"><a class="markdownIt-Anchor" href="#javautiliterator接口"></a> java.util.Iterator接口:</h3><p>迭代器(对集合进行遍历)</p><h3 id="有两个常用的方法"><a class="markdownIt-Anchor" href="#有两个常用的方法"></a> 有两个常用的方法</h3><p>boolean hasNext() 如果仍有元素可以迭代，则返回 true。<br>判断集合中还有没有下一个元素,有就返回true,没有就返回false<br>E next() 返回迭代的下一个元素。<br>取出集合中的下一个元素<br>Iterator迭代器,是一个接口,我们无法直接使用,需要使用Iterator接口的实现类对象,获取实现类的方式比较特殊<br>Collection接口中有一个方法,叫iterator(),这个方法返回的就是迭代器的实现类对象<br>Iterator<e> iterator() 返回在此 collection 的元素上进行迭代的迭代器。</e></p><h3 id="迭代器的使用步骤重点"><a class="markdownIt-Anchor" href="#迭代器的使用步骤重点"></a> 迭代器的使用步骤(重点):</h3><p>1.使用集合中的方法iterator()获取迭代器的实现类对象,使用Iterator接口接收(多态)<br>2.使用Iterator接口中的方法hasNext判断还有没有下一个元素<br>3.使用Iterator接口中的方法next取出集合中的下一个元素</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-iterator接口介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-iterator接口介绍&quot;&gt;&lt;/a&gt; java Iterator接口介绍&lt;/h1&gt;
&lt;h3 id=&quot;javautiliterator接口&quot;&gt;&lt;a
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>javaCollection集合常用功能</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00152Collection%E9%9B%86%E5%90%88%E5%B8%B8%E7%94%A8%E5%8A%9F%E8%83%BD/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00152Collection集合常用功能/</id>
    <published>2020-03-16T01:15:46.000Z</published>
    <updated>2020-03-16T01:21:55.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-collection集合常用功能"><a class="markdownIt-Anchor" href="#java-collection集合常用功能"></a> java Collection集合常用功能</h1><h3 id="javautilcollection接口"><a class="markdownIt-Anchor" href="#javautilcollection接口"></a> java.util.Collection接口</h3><p>所有单列集合的最顶层的接口,里边定义了所有单列集合共性的方法<br>任意的单列集合都可以使用Collection接口中的方法</p><h3 id="共性的方法"><a class="markdownIt-Anchor" href="#共性的方法"></a> 共性的方法:</h3><p>public boolean add(E e)：把给定的对象添加到当前集合中 。<br>public void clear() :清空集合中所有的元素。<br>public boolean remove(E e): 把给定的对象在当前集合中删除。<br>public boolean contains(E e): 判断当前集合中是否包含给定的对象。<br>public boolean isEmpty(): 判断当前集合是否为空。<br>public int size(): 返回集合中元素的个数。<br>public Object[] toArray(): 把集合中的元素，存储到数组中。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Collection;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collection</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建集合对象,可以使用多态</span></span><br><span class="line">        <span class="comment">//Collection&lt;String&gt; coll = new ArrayList&lt;&gt;();</span></span><br><span class="line">        Collection&lt;String&gt; coll = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        System.out.println(coll);<span class="comment">//重写了toString方法  []</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean add(E e)：  把给定的对象添加到当前集合中 。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,一般都返回true,所以可以不用接收</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b1 = coll.add(<span class="string">"张三"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b1:"</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三]</span></span><br><span class="line">        coll.add(<span class="string">"李四"</span>);</span><br><span class="line">        coll.add(<span class="string">"李四"</span>);</span><br><span class="line">        coll.add(<span class="string">"赵六"</span>);</span><br><span class="line">        coll.add(<span class="string">"田七"</span>);</span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 赵六, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean remove(E e): 把给定的对象在当前集合中删除。</span></span><br><span class="line"><span class="comment">            返回值是一个boolean值,集合中存在元素,删除元素,返回true</span></span><br><span class="line"><span class="comment">                                集合中不存在元素,删除失败,返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b2 = coll.remove(<span class="string">"赵六"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b2:"</span>+b2);<span class="comment">//b2:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b3 = coll.remove(<span class="string">"赵四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b3:"</span>+b3);<span class="comment">//b3:false</span></span><br><span class="line">        System.out.println(coll);<span class="comment">//[张三, 李四, 田七]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            public boolean contains(E e): 判断当前集合中是否包含给定的对象。</span></span><br><span class="line"><span class="comment">            包含返回true</span></span><br><span class="line"><span class="comment">            不包含返回false</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">boolean</span> b4 = coll.contains(<span class="string">"李四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b4:"</span>+b4);<span class="comment">//b4:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b5 = coll.contains(<span class="string">"赵四"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b5:"</span>+b5);<span class="comment">//b5:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean isEmpty(): 判断当前集合是否为空。 集合为空返回true,集合不为空返回false</span></span><br><span class="line">        <span class="keyword">boolean</span> b6 = coll.isEmpty();</span><br><span class="line">        System.out.println(<span class="string">"b6:"</span>+b6);<span class="comment">//b6:false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public int size(): 返回集合中元素的个数。</span></span><br><span class="line">        <span class="keyword">int</span> size = coll.size();</span><br><span class="line">        System.out.println(<span class="string">"size:"</span>+size);<span class="comment">//size:3</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public Object[] toArray(): 把集合中的元素，存储到数组中。</span></span><br><span class="line">        Object[] arr = coll.toArray();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">            System.out.println(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void clear() :清空集合中所有的元素。但是不删除集合,集合还存在</span></span><br><span class="line">        coll.clear();</span><br><span class="line">        System.out.println(coll);<span class="comment">//[]</span></span><br><span class="line">        System.out.println(coll.isEmpty());<span class="comment">//true</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-collection集合常用功能&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-collection集合常用功能&quot;&gt;&lt;/a&gt; java Collection集合常用功能&lt;/h1&gt;
&lt;h3 id=&quot;javautilco
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>集合框架介绍</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00151%E9%9B%86%E5%90%88%E6%A1%86%E6%9E%B6%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00151集合框架介绍/</id>
    <published>2020-03-16T01:11:41.000Z</published>
    <updated>2020-03-16T01:49:00.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合框架介绍"><a class="markdownIt-Anchor" href="#集合框架介绍"></a> 集合框架介绍</h1><p>JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之间如何彼此合作，从而达到灵活应用。</p><p>集合按照其存储结构可以分为两大类，分别是单列集合<code>java.util.Collection</code>和双列集合<code>java.util.Map</code>，今天我们主要学习<code>Collection</code>集合，在day04时讲解<code>Map</code>集合。</p><ul><li><strong>Collection</strong>：单列集合类的根接口，用于存储一系列符合某种规则的元素，它有两个重要的子接口，分别是<code>java.util.List</code>和<code>java.util.Set</code>。其中，<code>List</code>的特点是元素有序、元素可重复。<code>Set</code>的特点是元素无序，而且不可重复。<code>List</code>接口的主要实现类有<code>java.util.ArrayList</code>和<code>java.util.LinkedList</code>，<code>Set</code>接口的主要实现类有<code>java.util.HashSet</code>和<code>java.util.TreeSet</code>。</li></ul><p>从上面的描述可以看出JDK中提供了丰富的集合类库，为了便于初学者进行系统地学习，接下来通过一张图来描述整个集合类的继承体系。</p><p><img src="/images/javawz/1584323328556.png" alt="1584323328556"></p><p>其中，橙色框里填写的都是接口类型，而蓝色框里填写的都是具体的实现类。这几天将针对图中所列举的集合类进行逐一地讲解。</p><p>集合本身是一个工具，它存放在java.util包中。在<code>Collection</code>接口定义着单列集合框架中最最共性的内容。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合框架介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#集合框架介绍&quot;&gt;&lt;/a&gt; 集合框架介绍&lt;/h1&gt;
&lt;p&gt;JAVASE提供了满足各种需求的API，在使用这些API前，先了解其继承与接口操作架构，才能了解何时采用哪个类，以及类之
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Coolection集合概述</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00150Coolection%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00150Coolection集合概述/</id>
    <published>2020-03-16T01:07:15.000Z</published>
    <updated>2020-03-16T01:09:27.835Z</updated>
    
    <content type="html"><![CDATA[<h1 id="coolection集合概述"><a class="markdownIt-Anchor" href="#coolection集合概述"></a> Coolection集合概述</h1><p>在前面基础班我们已经学习过并使用过集合ArrayList<e> ,那么集合到底是什么呢?</e></p><ul><li><strong>集合</strong>：集合是java中提供的一种容器，可以用来存储多个数据。</li></ul><p>集合和数组既然都是容器，它们有啥区别呢？</p><ul><li>数组的长度是固定的。集合的长度是可变的。</li><li>数组中存储的是同一类型的元素，可以存储基本数据类型值。集合存储的都是对象。而且对象的类型可以不一致。在开发中一般当对象多的时候，使用集合进行存储。</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;coolection集合概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#coolection集合概述&quot;&gt;&lt;/a&gt; Coolection集合概述&lt;/h1&gt;
&lt;p&gt;在前面基础班我们已经学习过并使用过集合ArrayList&lt;e&gt; ,那么集
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java包装类_基本类型与字符串类型之间的相互转</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00149%E5%8C%85%E8%A3%85%E7%B1%BB-%E5%9F%BA%E6%9C%AC%E7%B1%BB%E5%9E%8B%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%B1%BB%E5%9E%8B%E4%B9%8B%E9%97%B4%E7%9A%84%E7%9B%B8%E4%BA%92%E8%BD%AC/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00149包装类-基本类型与字符串类型之间的相互转/</id>
    <published>2020-03-15T01:26:47.000Z</published>
    <updated>2020-03-15T01:30:58.669Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-包装类_基本类型与字符串类型之间的相互转"><a class="markdownIt-Anchor" href="#java-包装类_基本类型与字符串类型之间的相互转"></a> java 包装类_基本类型与字符串类型之间的相互转</h1><p>​    基本类型与字符串类型之间的相互转换</p><h3 id="基本类型-字符串string"><a class="markdownIt-Anchor" href="#基本类型-字符串string"></a> 基本类型-&gt;字符串(String)</h3><p>​        1.基本类型的值+&quot;&quot;  最简单的方法(工作中常用)<br>​        2.包装类的静态方法toString(参数),不是Object类的toString() 重载<br>​            static String toString(int i) 返回一个表示指定整数的 String 对象。<br>​        3.String类的静态方法valueOf(参数)<br>​            static String valueOf(int i) 返回 int 参数的字符串表示形式。</p><h3 id="字符串string-基本类型"><a class="markdownIt-Anchor" href="#字符串string-基本类型"></a> 字符串(String)-&gt;基本类型</h3><ul><li><code>public static byte parseByte(String s)</code>：将字符串参数转换为对应的byte基本类型。</li><li><code>public static short parseShort(String s)</code>：将字符串参数转换为对应的short基本类型。</li><li><code>public static int parseInt(String s)</code>：将字符串参数转换为对应的int基本类型。</li><li><code>public static long parseLong(String s)</code>：将字符串参数转换为对应的long基本类型。</li><li><code>public static float parseFloat(String s)</code>：将字符串参数转换为对应的float基本类型。</li><li><code>public static double parseDouble(String s)</code>：将字符串参数转换为对应的double基本类型。</li><li><code>public static boolean parseBoolean(String s)</code>：将字符串参数转换为对应的boolean基本类型。</li></ul><p>​        使用包装类的静态方法parseXXX(“字符串”);<br>​            Integer类: static int parseInt(String s)<br>​            Double类: static double parseDouble(String s)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Integer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//基本类型-&gt;字符串(String)</span></span><br><span class="line">        <span class="keyword">int</span> i1 = <span class="number">100</span>;</span><br><span class="line">        String s1 = i1+<span class="string">""</span>;</span><br><span class="line">        System.out.println(s1+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        String s2 = Integer.toString(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s2+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        String s3 = String.valueOf(<span class="number">100</span>);</span><br><span class="line">        System.out.println(s3+<span class="number">200</span>);<span class="comment">//100200</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//字符串(String)-&gt;基本类型</span></span><br><span class="line">        <span class="keyword">int</span> i = Integer.parseInt(s1);</span><br><span class="line">        System.out.println(i-<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = Integer.parseInt(<span class="string">"a"</span>);<span class="comment">//NumberFormatException</span></span><br><span class="line">        System.out.println(a);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-包装类_基本类型与字符串类型之间的相互转&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-包装类_基本类型与字符串类型之间的相互转&quot;&gt;&lt;/a&gt; java 包装类_基本类型与字符串类型之间的相互转&lt;/h1&gt;
&lt;p&gt;​  
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java包装类_自动装箱与自动拆箱</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00148%E5%8C%85%E8%A3%85%E7%B1%BB-%E8%87%AA%E5%8A%A8%E8%A3%85%E7%AE%B1%E4%B8%8E%E8%87%AA%E5%8A%A8%E6%8B%86%E7%AE%B1/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00148包装类-自动装箱与自动拆箱/</id>
    <published>2020-03-15T01:24:06.000Z</published>
    <updated>2020-03-15T01:25:14.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java包装类_自动装箱与自动拆箱"><a class="markdownIt-Anchor" href="#java包装类_自动装箱与自动拆箱"></a> java包装类_自动装箱与自动拆箱</h1><pre><code>自动装箱与自动拆箱:基本类型的数据和包装类之间可以自动的相互转换JDK1.5之后出现的新特性</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Ineger</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自动装箱:直接把int类型的整数赋值包装类</span></span><br><span class="line"><span class="comment">            Integer in = 1; 就相当于 Integer in = new Integer(1);</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Integer in = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            自动拆箱:in是包装类,无法直接参与运算,可以自动转换为基本数据类型,在进行计算</span></span><br><span class="line"><span class="comment">            in+2;就相当于 in.intVale() + 2 = 3</span></span><br><span class="line"><span class="comment">            in = in.intVale() + 2 = 3 又是一个自动装箱</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        in = in+<span class="number">2</span>;</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            ArrayList集合无法直接存储整数,可以存储Integer包装类</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        list.add(<span class="number">1</span>); <span class="comment">//--&gt;自动装箱 list.add(new Integer(1));</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> a = list.get(<span class="number">0</span>); <span class="comment">//--&gt;自动拆箱  list.get(0).intValue();</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java包装类_自动装箱与自动拆箱&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java包装类_自动装箱与自动拆箱&quot;&gt;&lt;/a&gt; java包装类_自动装箱与自动拆箱&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;自动装箱与自动拆箱:基本类型的数据和包
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java包装类_装箱与拆箱</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00147%E5%8C%85%E8%A3%85%E7%B1%BB-%E8%A3%85%E7%AE%B1%E4%B8%8E%E6%8B%86%E7%AE%B1/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00147包装类-装箱与拆箱/</id>
    <published>2020-03-15T01:15:57.000Z</published>
    <updated>2020-03-15T01:22:51.786Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java包装类_装箱与拆箱"><a class="markdownIt-Anchor" href="#java包装类_装箱与拆箱"></a> java包装类_装箱与拆箱</h1><pre><code>装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</code></pre><h3 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法:</h3><p>​            Integer(int value) 构造一个新分配的 Integer 对象，它表示指定的 int 值。<br>​            Integer(String s) 构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。<br>​                传递的字符串,必须是基本类型的字符串,否则会抛出异常 “100” 正确  “a” 抛异常</p><h3 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法:</h3><p>​            static Integer valueOf(int i) 返回一个表示指定的 int 值的 Integer 实例。<br>​            static Integer valueOf(String s) 返回保存指定的 String 的值的 Integer 对象。<br>​    拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</p><h3 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法:</h3><p>​            int intValue() 以 int 类型返回该 Integer 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Integer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//方法上有横线,说明方法过时了</span></span><br><span class="line">        System.out.println(in1);<span class="comment">//1 重写了toString方法</span></span><br><span class="line"></span><br><span class="line">        Integer in2 = <span class="keyword">new</span> Integer(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in2);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        Integer in3 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Integer in4 = Integer.valueOf("a");//NumberFormatException数字格式化异常</span></span><br><span class="line">        Integer in4 = Integer.valueOf(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</span></span><br><span class="line">        <span class="keyword">int</span> i = in1.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java包装类_装箱与拆箱&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java包装类_装箱与拆箱&quot;&gt;&lt;/a&gt; java包装类_装箱与拆箱&lt;/h1&gt;
&lt;pre&gt;&lt;code&gt;装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&amp;gt
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java包装类的概念</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00146%E5%8C%85%E8%A3%85%E7%B1%BB%E7%9A%84%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00146包装类的概念/</id>
    <published>2020-03-15T01:09:51.000Z</published>
    <updated>2020-03-15T01:14:33.524Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java包装类的概念"><a class="markdownIt-Anchor" href="#java包装类的概念"></a> java包装类的概念</h1><h3 id="基本数据类型转包装类类型"><a class="markdownIt-Anchor" href="#基本数据类型转包装类类型"></a> 基本数据类型转包装类类型</h3><table><thead><tr><th>基本类型</th><th>对应的包装类（位于java.lang包中）</th></tr></thead><tbody><tr><td>byte</td><td>Byte</td></tr><tr><td>short</td><td>Short</td></tr><tr><td>int</td><td><strong>Integer</strong></td></tr><tr><td>long</td><td>Long</td></tr><tr><td>float</td><td>Float</td></tr><tr><td>double</td><td>Double</td></tr><tr><td>char</td><td><strong>Character</strong></td></tr><tr><td>boolean</td><td>Boolean</td></tr></tbody></table><p>​    装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</p><h3 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法:</h3><p>Integer(int value) 构造一个新分配的 Integer 对象，它表示指定的 int 值。<br>Integer(String s) 构造一个新分配的 Integer 对象，它表示 String 参数所指示的 int 值。<br>传递的字符串,必须是基本类型的字符串,否则会抛出异常 “100” 正确  “a” 抛异常</p><h3 id="静态方法"><a class="markdownIt-Anchor" href="#静态方法"></a> 静态方法:</h3><p>static Integer valueOf(int i) 返回一个表示指定的 int 值的 Integer 实例。<br>static Integer valueOf(String s) 返回保存指定的 String 的值的 Integer 对象。<br>拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</p><h3 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法:</h3><p>​            int intValue() 以 int 类型返回该 Integer 的值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo07Integer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Integer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//装箱:把基本类型的数据,包装到包装类中(基本类型的数据-&gt;包装类)</span></span><br><span class="line">        <span class="comment">//构造方法</span></span><br><span class="line">        Integer in1 = <span class="keyword">new</span> Integer(<span class="number">1</span>);<span class="comment">//方法上有横线,说明方法过时了</span></span><br><span class="line">        System.out.println(in1);<span class="comment">//1 重写了toString方法</span></span><br><span class="line"></span><br><span class="line">        Integer in2 = <span class="keyword">new</span> Integer(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in2);<span class="comment">//1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//静态方法</span></span><br><span class="line">        Integer in3 = Integer.valueOf(<span class="number">1</span>);</span><br><span class="line">        System.out.println(in3);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Integer in4 = Integer.valueOf("a");//NumberFormatException数字格式化异常</span></span><br><span class="line">        Integer in4 = Integer.valueOf(<span class="string">"1"</span>);</span><br><span class="line">        System.out.println(in4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//拆箱:在包装类中取出基本类型的数据(包装类-&gt;基本类型的数据)</span></span><br><span class="line">        <span class="keyword">int</span> i = in1.intValue();</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java包装类的概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java包装类的概念&quot;&gt;&lt;/a&gt; java包装类的概念&lt;/h1&gt;
&lt;h3 id=&quot;基本数据类型转包装类类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java StringBuilder的toString方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00145StringBuilder%E7%9A%84toString%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00145StringBuilder的toString方法/</id>
    <published>2020-03-15T00:33:49.000Z</published>
    <updated>2020-03-15T00:37:21.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-stringbuilder的tostring方法"><a class="markdownIt-Anchor" href="#java-stringbuilder的tostring方法"></a> java StringBuilder的toString方法</h1><h3 id="stringbuilder和string可以相互转换"><a class="markdownIt-Anchor" href="#stringbuilder和string可以相互转换"></a> StringBuilder和String可以相互转换:</h3><p>String-&gt;StringBuilder:可以使用StringBuilder的构造方法<br>StringBuilder(String str) 构造一个字符串生成器，并初始化为指定的字符串内容。<br>StringBuilder-&gt;String:可以使用StringBuilder中的toString方法<br>public String toString()：将当前StringBuilder对象转换为String对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//String-&gt;StringBuilder</span></span><br><span class="line">        String str = <span class="string">"hello"</span>;</span><br><span class="line">        System.out.println(<span class="string">"str:"</span>+str);</span><br><span class="line">        StringBuilder bu = <span class="keyword">new</span> StringBuilder(str);</span><br><span class="line">        <span class="comment">//往StringBuilder中添加数据</span></span><br><span class="line">        bu.append(<span class="string">"world"</span>);</span><br><span class="line">        System.out.println(<span class="string">"bu:"</span>+bu);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//StringBuilder-&gt;String</span></span><br><span class="line">        String s = bu.toString();</span><br><span class="line">        System.out.println(<span class="string">"s:"</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-stringbuilder的tostring方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-stringbuilder的tostring方法&quot;&gt;&lt;/a&gt; java StringBuilder的toString方法
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>javaStringBuilder的构造方法和append方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/15/java00144StringBuilder%E7%9A%84%E6%9E%84%E9%80%A0%E6%96%B9%E6%B3%95%E5%92%8Cappend%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/15/java00144StringBuilder的构造方法和append方法/</id>
    <published>2020-03-15T00:30:13.000Z</published>
    <updated>2020-03-15T00:32:56.966Z</updated>
    
    <content type="html"><![CDATA[<h1 id="javastringbuilder的构造方法和append方法"><a class="markdownIt-Anchor" href="#javastringbuilder的构造方法和append方法"></a> javaStringBuilder的构造方法和append方法</h1><pre><code>java.lang.StringBuilder类:字符串缓冲区,可以提高字符串的效率</code></pre><h3 id="构造方法"><a class="markdownIt-Anchor" href="#构造方法"></a> 构造方法:</h3><p>​        StringBuilder() 构造一个不带任何字符的字符串生成器，其初始容量为 16 个字符。<br>​        StringBuilder(String str) 构造一个字符串生成器，并初始化为指定的字符串内容。</p><h3 id="stringbuilder的常用方法"><a class="markdownIt-Anchor" href="#stringbuilder的常用方法"></a> StringBuilder的常用方法:</h3><p>​        public StringBuilder append(…)：添加任意类型数据的字符串形式，并返回当前对象自身。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//空参数构造方法</span></span><br><span class="line">        StringBuilder bu1 = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        System.out.println(<span class="string">"bu1:"</span>+bu1);<span class="comment">//bu1:""</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//带字符串的构造方法</span></span><br><span class="line">        StringBuilder bu2 = <span class="keyword">new</span> StringBuilder(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(<span class="string">"bu2:"</span>+bu2);<span class="comment">//bu2:abc</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06StringBuilder;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02StringBuilder</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建StringBuilder对象</span></span><br><span class="line">        StringBuilder bu = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">        <span class="comment">//使用append方法往StringBuilder中添加数据</span></span><br><span class="line">        <span class="comment">//append方法返回的是this,调用方法的对象bu,this==bu</span></span><br><span class="line">        <span class="comment">//StringBuilder bu2 = bu.append("abc");//把bu的地址赋值给了bu2</span></span><br><span class="line">        <span class="comment">//System.out.println(bu);//"abc"</span></span><br><span class="line">        <span class="comment">//System.out.println(bu2);//"abc"</span></span><br><span class="line">        <span class="comment">//System.out.println(bu==bu2);//比较的是地址 true</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用append方法无需接收返回值</span></span><br><span class="line"><span class="comment">//        bu.append("abc");</span></span><br><span class="line"><span class="comment">//        bu.append(1);</span></span><br><span class="line"><span class="comment">//        bu.append(true);</span></span><br><span class="line"><span class="comment">//        bu.append(8.8);</span></span><br><span class="line"><span class="comment">//        bu.append('中');</span></span><br><span class="line"><span class="comment">//        System.out.println(bu);//abc1true8.8中</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            链式编程:方法返回值是一个对象,可以继续调用方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(<span class="string">"abc"</span>.toUpperCase().toLowerCase().toUpperCase().toLowerCase());</span><br><span class="line">        bu.append(<span class="string">"abc"</span>).append(<span class="number">1</span>).append(<span class="keyword">true</span>).append(<span class="number">8.8</span>).append(<span class="string">'中'</span>);</span><br><span class="line">        System.out.println(bu);<span class="comment">//abc1true8.8中</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;javastringbuilder的构造方法和append方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#javastringbuilder的构造方法和append方法&quot;&gt;&lt;/a&gt; javaStringBuilder的构造方法和ap
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
