<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-05-11T14:26:12.853Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>等号操作符重载</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/11/cpp0035-%E7%AD%89%E5%8F%B7%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/11/cpp0035-等号操作符重载/</id>
    <published>2021-05-11T14:24:40.000Z</published>
    <updated>2021-05-11T14:26:12.853Z</updated>
    
    <content type="html"><![CDATA[<h1 id="等号操作符重载"><a class="markdownIt-Anchor" href="#等号操作符重载"></a> 等号操作符重载</h1><p><img src="/images/javawz/1620743144288.png" alt="1620743144288"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">Student(<span class="keyword">const</span> <span class="keyword">char</span> * tname);</span><br><span class="line">Student(<span class="keyword">const</span> Student &amp; s);</span><br><span class="line">~Student();</span><br><span class="line"></span><br><span class="line"><span class="comment">//重载赋值运算符</span></span><br><span class="line">Student &amp; <span class="keyword">operator</span>=(<span class="keyword">const</span> Student &amp; s);</span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span> ,<span class="keyword">const</span> Student &amp; s);</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">long</span> <span class="keyword">long</span> sid;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * name;</span><br><span class="line"><span class="keyword">int</span> nameLen;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">long</span> <span class="keyword">long</span> Student::sid = <span class="number">10000000</span>;</span><br><span class="line"><span class="comment">//操作赋值操作符</span></span><br><span class="line">Student &amp; Student::<span class="keyword">operator</span>=(<span class="keyword">const</span> Student &amp; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//首先判断是不是本身</span></span><br><span class="line"><span class="keyword">if</span> (&amp;s == <span class="keyword">this</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//判断是否为空,如果不为空,就将自身开辟的空间释放掉</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">this</span>-&gt;name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] <span class="keyword">this</span> -&gt; name;</span><br><span class="line"><span class="keyword">this</span> -&gt; name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//执行深拷贝</span></span><br><span class="line"><span class="keyword">this</span>-&gt;nameLen = s.nameLen;</span><br><span class="line"><span class="keyword">this</span> -&gt; name = <span class="keyword">new</span> <span class="keyword">char</span>[<span class="keyword">this</span>-&gt;nameLen + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name,s.name);</span><br><span class="line"><span class="keyword">this</span>-&gt;id = s.id;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">Student::Student(<span class="keyword">const</span> Student &amp; s)</span><br><span class="line">&#123;</span><br><span class="line">nameLen = s.nameLen;</span><br><span class="line">id = s.id;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Student::sid &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (s.name == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>[nameLen + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">strcpy</span>(name, s.name);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>, <span class="keyword">const</span> Student &amp; s)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s.name == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"学号为"</span>&lt;&lt;s.id&lt;&lt;<span class="string">"该学生无效"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"姓名:"</span> &lt;&lt; s.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"学号:"</span> &lt;&lt; s.id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"===================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="keyword">const</span> <span class="keyword">char</span> * tname)</span><br><span class="line">&#123;</span><br><span class="line">nameLen = <span class="built_in">strlen</span>(tname);</span><br><span class="line">id = ++sid;</span><br><span class="line"></span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>[nameLen + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(name,tname);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">nameLen = <span class="number">0</span>;</span><br><span class="line">id = ++sid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (sid &gt; <span class="number">10000000</span>)</span><br><span class="line">&#123;</span><br><span class="line">--sid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"  0x"</span> &lt;&lt; (<span class="keyword">int</span> *)name &lt;&lt; <span class="string">"   已被析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">delete</span>[] name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;<span class="keyword">else</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"NULL"</span> &lt;&lt; <span class="string">"  0x"</span> &lt;&lt; (<span class="keyword">int</span> *)name &lt;&lt; <span class="string">"   已被析构"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s1, s2(<span class="string">"XiaoMing"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; s2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">s1 = s2;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620743161702.png" alt="1620743161702"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;等号操作符重载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#等号操作符重载&quot;&gt;&lt;/a&gt; 等号操作符重载&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620743144288.png&quot; alt=&quot;16207431
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>左移右移操作符重载</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/11/cpp0034-%E5%B7%A6%E7%A7%BB%E5%8F%B3%E7%A7%BB%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/11/cpp0034-左移右移操作符重载/</id>
    <published>2021-05-11T12:30:59.000Z</published>
    <updated>2021-05-11T13:01:52.041Z</updated>
    
    <content type="html"><![CDATA[<h1 id="左移右移操作符重载"><a class="markdownIt-Anchor" href="#左移右移操作符重载"></a> 左移右移操作符重载</h1><h3 id="重载左移"><a class="markdownIt-Anchor" href="#重载左移"></a> 重载左移</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C();</span><br><span class="line">C(<span class="keyword">int</span> ta,<span class="keyword">int</span> tb);</span><br><span class="line">~C();</span><br><span class="line"><span class="comment">//友元重载左移&lt;&lt;运算符</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>, <span class="keyword">const</span> C &amp; another);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//友元重载左移&lt;&lt;运算符</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>, <span class="keyword">const</span> C &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; another.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; another.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::C(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span><br><span class="line">&#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::C()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::~C()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C a(1, 2),b(2,3);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载右移"><a class="markdownIt-Anchor" href="#重载右移"></a> 重载右移</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">C();</span><br><span class="line">C(<span class="keyword">int</span> ta,<span class="keyword">int</span> tb);</span><br><span class="line">~C();</span><br><span class="line"><span class="comment">//友元重载左移&lt;&lt;运算符</span></span><br><span class="line"><span class="keyword">friend</span> ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>, <span class="keyword">const</span> C &amp; another);</span><br><span class="line"><span class="comment">//友元重载左移&gt;&gt;运算符</span></span><br><span class="line"><span class="keyword">friend</span> istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp;<span class="built_in">cin</span> ,C &amp; another);</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//友元重载右移&gt;&gt;运算符</span></span><br><span class="line">istream &amp; <span class="keyword">operator</span>&gt;&gt;(istream &amp; <span class="built_in">cin</span>, C &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; another.a &gt;&gt; another.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cin</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//友元重载左移&lt;&lt;运算符</span></span><br><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>, <span class="keyword">const</span> C &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; another.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; another.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"=================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::C(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span><br><span class="line">&#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::C()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C::~C()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">C a(1, 2),b(2,3);</span><br><span class="line">C c;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt; c;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; c;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="只能用友元重载如果用成员函数重载会出现顺序错误"><a class="markdownIt-Anchor" href="#只能用友元重载如果用成员函数重载会出现顺序错误"></a> 只能用友元重载，如果用成员函数重载会出现顺序错误</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">ostream &amp; <span class="keyword">operator</span>&lt;&lt;(ostream &amp; <span class="built_in">cout</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">this</span>-&gt;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">cout</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    C a;</span><br><span class="line">    <span class="comment">//用成员重载&lt;&lt;或&gt;&gt; 会出现对象在左边的情况,所以不建议用成员函数来重载&lt;&lt;和&gt;&gt;运算符</span></span><br><span class="line">    a &lt;&lt; <span class="built_in">cout</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620738088001.png" alt="1620738088001"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;左移右移操作符重载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#左移右移操作符重载&quot;&gt;&lt;/a&gt; 左移右移操作符重载&lt;/h1&gt;
&lt;h3 id=&quot;重载左移&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#重载左移
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>单目和双目运算符重载</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/11/cpp0033-%E5%8D%95%E7%9B%AE%E5%92%8C%E5%8F%8C%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E9%87%8D%E8%BD%BD/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/11/cpp0033-单目和双目运算符重载/</id>
    <published>2021-05-11T11:26:00.000Z</published>
    <updated>2021-05-11T12:15:05.490Z</updated>
    
    <content type="html"><![CDATA[<h1 id="单目和双目运算符重载"><a class="markdownIt-Anchor" href="#单目和双目运算符重载"></a> 单目和双目运算符重载</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb);</span><br><span class="line"><span class="comment">//A  operator+(const A &amp; another);</span></span><br><span class="line"><span class="comment">//A &amp; operator+=(const A &amp; another);</span></span><br><span class="line"><span class="keyword">friend</span> A <span class="keyword">operator</span>+(A &amp; a1, A &amp; a2);</span><br><span class="line"><span class="keyword">friend</span> A&amp; <span class="keyword">operator</span>+=(A &amp; a1, A &amp; a2);</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">~A();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::print() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////重载双目操作符</span></span><br><span class="line"><span class="comment">//A &amp; A::operator+=(const A &amp; another)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//a += another.a;</span></span><br><span class="line"><span class="comment">//b += another.b;</span></span><br><span class="line"><span class="comment">//return *this;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//A  A::operator+(const A &amp; another)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return A(a + another.a,b + another.b);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">A::A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span><br><span class="line">&#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局重载运算符函数</span></span><br><span class="line">A <span class="keyword">operator</span>+(A &amp; a1,A &amp; a2) &#123;</span><br><span class="line"><span class="keyword">return</span> A(a1.a + a2.a ,a1.b + a2.b);</span><br><span class="line">&#125;</span><br><span class="line">A &amp; <span class="keyword">operator</span>+=(A &amp; a1, A &amp; a2) &#123;</span><br><span class="line"></span><br><span class="line">a1.a += a2.a;</span><br><span class="line">a1.b += a2.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a1(1, 1), a2(2, 2);</span><br><span class="line"></span><br><span class="line">A a3 = a1 + a2;</span><br><span class="line"></span><br><span class="line">a3.print();</span><br><span class="line"></span><br><span class="line">a3 += a1;</span><br><span class="line">a3.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前和后重载"><a class="markdownIt-Anchor" href="#前和后重载"></a> 前<ins>和后</ins>重载</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb);</span><br><span class="line"><span class="comment">//A  operator+(const A &amp; another);</span></span><br><span class="line"><span class="comment">//A &amp; operator+=(const A &amp; another);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//前++</span></span><br><span class="line">A &amp; <span class="keyword">operator</span>++();</span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="keyword">const</span> A <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">friend</span> A <span class="keyword">operator</span>+(A &amp; a1, A &amp; a2);</span><br><span class="line"><span class="keyword">friend</span> A&amp; <span class="keyword">operator</span>+=(A &amp; a1, A &amp; a2);</span><br><span class="line"></span><br><span class="line"><span class="comment">////前++</span></span><br><span class="line"><span class="comment">//friend A&amp; operator++(A &amp;a1);</span></span><br><span class="line"><span class="comment">////后++</span></span><br><span class="line"><span class="comment">//friend const A operator++(A &amp;a1, int);</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line">~A();</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局友元重载++函数</span></span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="comment">//const A operator++(A &amp; a1, int)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//A temp(a1.a, a1.b);</span></span><br><span class="line"><span class="comment">//a1.a++;</span></span><br><span class="line"><span class="comment">//a1.b++;</span></span><br><span class="line"><span class="comment">//return a1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">////前++</span></span><br><span class="line"><span class="comment">//A &amp; operator++(A &amp; a1)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//++a1.a;</span></span><br><span class="line"><span class="comment">//++a1.b;</span></span><br><span class="line"><span class="comment">//return a1;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员重载++运算符函数</span></span><br><span class="line"><span class="comment">//前++</span></span><br><span class="line">A &amp; A::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">++a;</span><br><span class="line">++b;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="keyword">const</span> A A::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">A <span class="title">temp</span><span class="params">(a, b)</span></span>;</span><br><span class="line">a++;</span><br><span class="line">b++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::print()<span class="keyword">const</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"========================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="comment">////重载双目操作符</span></span><br><span class="line"><span class="comment">//A &amp; A::operator+=(const A &amp; another)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//a += another.a;</span></span><br><span class="line"><span class="comment">//b += another.b;</span></span><br><span class="line"><span class="comment">//return *this;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//A  A::operator+(const A &amp; another)</span></span><br><span class="line"><span class="comment">//&#123;</span></span><br><span class="line"><span class="comment">//return A(a + another.a,b + another.b);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line">A::A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb)</span><br><span class="line">&#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">0</span>;</span><br><span class="line">b = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//全局重载运算符函数</span></span><br><span class="line">A <span class="keyword">operator</span>+(A &amp; a1,A &amp; a2) &#123;</span><br><span class="line"><span class="keyword">return</span> A(a1.a + a2.a ,a1.b + a2.b);</span><br><span class="line">&#125;</span><br><span class="line">A &amp; <span class="keyword">operator</span>+=(A &amp; a1, A &amp; a2) &#123;</span><br><span class="line"></span><br><span class="line">a1.a += a2.a;</span><br><span class="line">a1.b += a2.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a1(1, 1), a2(2, 2);</span><br><span class="line"></span><br><span class="line">A a3 = a1 + a2;</span><br><span class="line"></span><br><span class="line">a3.print();</span><br><span class="line"></span><br><span class="line">a3 += a1;</span><br><span class="line">a3.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span> </span>&#123;</span><br><span class="line">A a1(1, 1), a2(2, 2);</span><br><span class="line"></span><br><span class="line">++++a1;</span><br><span class="line">a1.print();</span><br><span class="line"></span><br><span class="line">(a1++).print();</span><br><span class="line"></span><br><span class="line">a1.print();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//test1();</span></span><br><span class="line">test2();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="友元重载前和后函数的区别"><a class="markdownIt-Anchor" href="#友元重载前和后函数的区别"></a> 友元重载前<ins>和后</ins>函数的区别</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//前++</span></span><br><span class="line"><span class="keyword">friend</span> A&amp; <span class="keyword">operator</span>++(A &amp;a1);</span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">const</span> A <span class="keyword">operator</span>++(A &amp;a1, <span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="keyword">const</span> A <span class="keyword">operator</span>++(A &amp; a1, <span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">A <span class="title">temp</span><span class="params">(a1.a, a1.b)</span></span>;</span><br><span class="line">a1.a++;</span><br><span class="line">a1.b++;</span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//前++</span></span><br><span class="line">A &amp; <span class="keyword">operator</span>++(A &amp; a1)</span><br><span class="line">&#123;</span><br><span class="line">++a1.a;</span><br><span class="line">++a1.b;</span><br><span class="line"><span class="keyword">return</span> a1;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类成员函数重载前和后函数的区别"><a class="markdownIt-Anchor" href="#类成员函数重载前和后函数的区别"></a> 类成员函数重载前<ins>和后</ins>函数的区别</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">前++</span><br><span class="line">A &amp; <span class="keyword">operator</span>++();</span><br><span class="line">后++</span><br><span class="line"><span class="keyword">const</span> A <span class="keyword">operator</span>++(<span class="keyword">int</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员重载++运算符函数</span></span><br><span class="line"><span class="comment">//前++</span></span><br><span class="line">A &amp; A::<span class="keyword">operator</span>++()</span><br><span class="line">&#123;</span><br><span class="line">++a;</span><br><span class="line">++b;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//后++</span></span><br><span class="line"><span class="keyword">const</span> A A::<span class="keyword">operator</span>++(<span class="keyword">int</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="function">A <span class="title">temp</span><span class="params">(a, b)</span></span>;</span><br><span class="line">a++;</span><br><span class="line">b++;</span><br><span class="line"><span class="keyword">return</span> temp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="后是不能连用的所以返回的是一个常对象"><a class="markdownIt-Anchor" href="#后是不能连用的所以返回的是一个常对象"></a> 后++是不能连用的,所以返回的是一个常对象</h3>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;单目和双目运算符重载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#单目和双目运算符重载&quot;&gt;&lt;/a&gt; 单目和双目运算符重载&lt;/h1&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>操作符重载的规则</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/11/cpp0032-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E7%9A%84%E8%A7%84%E5%88%99/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/11/cpp0032-操作符重载的规则/</id>
    <published>2021-05-11T10:49:30.000Z</published>
    <updated>2021-05-11T11:09:36.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符重载的规则"><a class="markdownIt-Anchor" href="#操作符重载的规则"></a> 操作符重载的规则</h1><p><img src="/images/javawz/1620730954026.png" alt="1620730954026"></p><p><img src="/images/javawz/1620730962924.png" alt="1620730962924"></p><h5 id="不能重载的运算符只有-4-个"><a class="markdownIt-Anchor" href="#不能重载的运算符只有-4-个"></a> 不能重载的运算符只有 4 个:</h5><p><img src="/images/javawz/1620730987931.png" alt="1620730987931"></p><p><img src="/images/javawz/1620731059622.png" alt="1620731059622"></p><p><img src="/images/javawz/1620731088870.png" alt="1620731088870"></p><p><img src="/images/javawz/1620731111807.png" alt="1620731111807"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作符重载的规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作符重载的规则&quot;&gt;&lt;/a&gt; 操作符重载的规则&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1620730954026.png&quot; alt=&quot;16207
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>操作符重载的基本语法</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/11/cpp0031-%E6%93%8D%E4%BD%9C%E7%AC%A6%E9%87%8D%E8%BD%BD%E7%9A%84%E5%9F%BA%E6%9C%AC%E8%AF%AD%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/11/cpp0031-操作符重载的基本语法/</id>
    <published>2021-05-10T16:24:14.000Z</published>
    <updated>2021-05-10T17:02:22.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="操作符重载的基本语法"><a class="markdownIt-Anchor" href="#操作符重载的基本语法"></a> 操作符重载的基本语法</h1><p>所谓重载，就是重新赋予新的含义。函数重载就是对一个已有的函数赋<br>予新的含义，使之实现新功能，因此，一个函数名就可以用来代表不同功能的<br>函数，也就是”一名多用”。<br></p><p>运算符也可以重载。实际上，我们已经在不知不觉之中使用了运算符重<br>载。例如，大家都已习惯于用加法运算符”+”对整数、单精度数和双精度数进行<br>加法运算，如5+8，5.8+3.67等，其实计算机对整数、单精度数和双精度数的<br>加法操作过程是很不相同的，但由于C++已经对运算符”+”进行了重载，所以就能适用于int,float,<br>double类型的运算。</p><p><br>又如”&lt;&lt;“是C<ins>的位运算中的位移运算符（左移），但在输出操作中又是与流对象cout配合使用的流插入运算符，”&gt;&gt;“也是位移运算符(右移），但在输入操作中又是与流对象cin配合使用的流提取运算符。这就是运算符重载(operator overloading)。C</ins>系统对”&lt;&lt;“和”&gt;&gt;“进行了重载，用户在不同的场合下<br>使用它们时，作用是不同的。对”&lt;&lt;“和”&gt;&gt;“的重载处理是放在头文件stream中的。因此，如果要在程序中用”&lt;&lt;“和”&gt;&gt;”作流插入运算符和流提取运算符，必须在本文件模块中包含头文件stream(当然还应当包括”using namespace std“)。<br>现在要讨论的问题是：用户能否根据自己的需要对C++已提供的运算符进行重载，赋予它们新的含义，使之一名多用.</p><p><code>运算符重载的本质是函数重载。</code></p><h3 id="重载函数的一般格式如下"><a class="markdownIt-Anchor" href="#重载函数的一般格式如下"></a> 重载函数的一般格式如下:</h3><p><img src="/images/javawz/1620664783011.png" alt="1620664783011"></p><p>operator 运算符名称 在一起构成了新的函数名。比如</p><p><img src="/images/javawz/1620664830303.png" alt="1620664830303"></p><p>我们会说,operator+ 重载了运算符+。</p><h3 id="友元重载"><a class="markdownIt-Anchor" href="#友元重载"></a> 友元重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">A(<span class="keyword">int</span> ta,<span class="keyword">int</span> tb);</span><br><span class="line">~A();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//友元重载(全局重载函数)</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">const</span> A &amp; <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;ta1, <span class="keyword">const</span> A &amp;ta2);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> A::print() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">A::A(<span class="keyword">int</span> ta,<span class="keyword">int</span> tb) &#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//友元重载(全局重载函数)</span></span><br><span class="line"><span class="keyword">const</span> A &amp; <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp;ta1,<span class="keyword">const</span> A &amp;ta2) &#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> A(ta1.a + ta2.a,ta1.b + ta2.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">a1</span><span class="params">(<span class="number">1</span>,<span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">a2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">A a3 = a1 + a2;</span><br><span class="line">    <span class="comment">//operator+(a1,a2);</span></span><br><span class="line">a3.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="成员重载"><a class="markdownIt-Anchor" href="#成员重载"></a> 成员重载</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb);</span><br><span class="line">~A();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//成员操作符重载函数</span></span><br><span class="line"><span class="keyword">const</span> A <span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp; anotherA);</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//成员操作符重载函数</span></span><br><span class="line"><span class="keyword">const</span> A A::<span class="keyword">operator</span>+(<span class="keyword">const</span> A &amp; anotherA)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> A(<span class="keyword">this</span>-&gt;a + anotherA.a, <span class="keyword">this</span>-&gt;b + anotherA.b);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">void</span> A::print() &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">A::A(<span class="keyword">int</span> ta, <span class="keyword">int</span> tb) &#123;</span><br><span class="line">a = ta;</span><br><span class="line">b = tb;</span><br><span class="line">&#125;</span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">a1</span><span class="params">(<span class="number">1</span>, <span class="number">2</span>)</span></span>;</span><br><span class="line"><span class="function">A <span class="title">a2</span><span class="params">(<span class="number">3</span>, <span class="number">4</span>)</span></span>;</span><br><span class="line">A a3 = a1 + a2;</span><br><span class="line"><span class="comment">//a3 = a1.operator+(a2);</span></span><br><span class="line">a3.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620666124186.png" alt="1620666124186"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;操作符重载的基本语法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#操作符重载的基本语法&quot;&gt;&lt;/a&gt; 操作符重载的基本语法&lt;/h1&gt;
&lt;p&gt;所谓重载，就是重新赋予新的含义。函数重载就是对一个已有的函数赋&lt;br&gt;
予新的含义，使之实现新功
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>友元类和友元的关系性质</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0030-%E5%8F%8B%E5%85%83%E7%B1%BB%E5%92%8C%E5%8F%8B%E5%85%83%E7%9A%84%E5%85%B3%E7%B3%BB%E6%80%A7%E8%B4%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0030-友元类和友元的关系性质/</id>
    <published>2021-05-10T15:59:59.000Z</published>
    <updated>2021-05-10T16:24:38.322Z</updated>
    
    <content type="html"><![CDATA[<h1 id="友元类和友元的关系性质"><a class="markdownIt-Anchor" href="#友元类和友元的关系性质"></a> 友元类和友元的关系性质</h1><p>友元类的所有成员函数都是另一个类的友元函数,都可以访问另一个类中<br>的隐藏信息(包括私有成员和保护成员)。<br>当希望一个类可以存取另一个类的私有成员时,可以将该类声明为另一类<br>的友元类。定义友元类的语句格式如下:</p><p><img src="/images/javawz/1620662507126.png" alt="1620662507126"></p><p>经过以上说明后,类 B 的所有成员函数都是类 A 的友元函数,能存取类 A的私有成员和保护成员。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A();</span><br><span class="line">~A();</span><br><span class="line"><span class="comment">//友元类,代表类B可以访问类A的私有成员和保护成员</span></span><br><span class="line"><span class="keyword">friend</span> <span class="class"><span class="keyword">class</span> <span class="title">B</span>;</span></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B();</span><br><span class="line">~B();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printCA</span><span class="params">(A &amp;a)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">B::B()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B::~B()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::A()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">A::~A()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">A a1;</span><br><span class="line">B b1;</span><br><span class="line">b1.printCA(a1);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="声明位置"><a class="markdownIt-Anchor" href="#声明位置"></a> 声明位置</h4><p>友元声明以关键字 friend 开始,它只能出现在类定义中。因为友元不是授<br>权类的 成员,所以它不受其所在类的声明区域 public private 和 protected 的影<br>响。通常我们 选择把所有友元声明组织在一起并放在类头之后.</p><h4 id="友元的利弊"><a class="markdownIt-Anchor" href="#友元的利弊"></a> 友元的利弊</h4><p>友元不是类成员,但是它可以访问类中的私有成员。友元的作用在于提高<br>程序的运 行效率,但是,它破坏了类的封装性和隐藏性,使得非成员函数可以访问<br>类的私有成员。 不过,类的访问权限确实在某些应用场合显得有些呆板,从而容<br>忍了友元这一特别语法 现象。</p><h4 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项</h4><p>(1) 友元关系不能被继承。<br>(2) 友元关系是单向的,不具有交换性。若类 B 是类 A 的友元,类 A 不一定是类B 的友元,要看在类中是否有相应的声明。<br>(3) 友元关系不具有传递性。若类 B 是类 A 的友元,类 C 是 B 的友元,类 C 不一定 是类 A 的友元,同样要看类中是否有相应的声明。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;友元类和友元的关系性质&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#友元类和友元的关系性质&quot;&gt;&lt;/a&gt; 友元类和友元的关系性质&lt;/h1&gt;
&lt;p&gt;友元类的所有成员函数都是另一个类的友元函数,都可以访问另一个类中&lt;br&gt;
的隐藏信息(包括
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>友元函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0029-%E5%8F%8B%E5%85%83%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0029-友元函数/</id>
    <published>2021-05-10T15:10:16.000Z</published>
    <updated>2021-05-10T16:24:46.934Z</updated>
    
    <content type="html"><![CDATA[<h1 id="友元函数"><a class="markdownIt-Anchor" href="#友元函数"></a> 友元函数</h1><p>采用类的机制后实现了数据的隐藏与封装,类的数据成员一般定义为私有成<br>员,成员函 数一般定义为公有的,依此提供类与外界间的通信接口。但是,有时需<br>要定义一些函数,这 些函数不是类的一部分,但又需要频繁地访问类的数据成员,<br>这时可以将这些函数定义为该 函数的友元函数。除了友元函数外,还有友元类,<br>两者统称为友元。友元的作用是提高了程 序的运行效率(即减少了类型检查和<br>安全性检查等都需要时间开销),但它破坏了类的封装 性和隐藏性,使得非成员函<br>数可以访问类的私有成员。<br>友元可以是一个函数,该函数被称为友元函数;友元也可以是一个类,该类被<br>称为友元 类。</p><p><img src="/images/javawz/1620659557510.png" alt="1620659557510"></p><p>友元函数是可以直接访问类的私有成员的非成员函数。它是定义在类外<br>的普通函 数,它不属于任何类,但需要在类的定义中加以声明,声明时只需在友元<br>的名称前加上 关键字 friend,其格式如下:</p><p><img src="/images/javawz/1620659630409.png" alt="1620659630409"></p><h5 id="一个函数可以是多个类的友元函数只需要在各个类中分别声明"><a class="markdownIt-Anchor" href="#一个函数可以是多个类的友元函数只需要在各个类中分别声明"></a> 一个函数可以是多个类的友元函数,只需要在各个类中分别声明。</h5><h3 id="全局函数作友元函数"><a class="markdownIt-Anchor" href="#全局函数作友元函数"></a> 全局函数作友元函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test();</span><br><span class="line">~Test();</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">getA</span><span class="params">(Test &amp; t1)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">int</span> <span class="title">getB</span><span class="params">(Test &amp; t1)</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test::Test()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test::~Test()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过友元函数访问对象私有成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getA</span><span class="params">(Test &amp; t1)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> t1.a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//通过友元函数访问对象私有成员</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getB</span><span class="params">(Test &amp; t1)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> t1.b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getA(t1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; getB(t1) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="类成员函数作友元函数"><a class="markdownIt-Anchor" href="#类成员函数作友元函数"></a> 类成员函数作友元函数</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="comment">//前向声明,是一种不完全型声明,即只需提供类名(无需提供类实现)即可。仅可⽤于声明指针和引用。</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher();</span><br><span class="line">~Teacher();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(Student &amp; s)</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">~Student();</span><br><span class="line"><span class="comment">//用Teacher类的成员函数做友元</span></span><br><span class="line"><span class="keyword">friend</span> <span class="keyword">void</span> Teacher::print(Student &amp; s)<span class="keyword">const</span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> xueHao;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Teacher::print(Student &amp; s) <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s.xueHao &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">Teacher::Teacher()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Teacher::~Teacher()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">strcpy</span>(name,<span class="string">"XiaoMing"</span>);</span><br><span class="line">xueHao = <span class="number">10001</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student s;</span><br><span class="line">Teacher t;</span><br><span class="line">t.print(s);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;友元函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#友元函数&quot;&gt;&lt;/a&gt; 友元函数&lt;/h1&gt;
&lt;p&gt;采用类的机制后实现了数据的隐藏与封装,类的数据成员一般定义为私有成&lt;br&gt;
员,成员函 数一般定义为公有的,依此提供类与外界间的通信
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>对象返回自身</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0028-%E5%AF%B9%E8%B1%A1%E8%BF%94%E5%9B%9E%E8%87%AA%E8%BA%AB/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0028-对象返回自身/</id>
    <published>2021-05-10T14:56:25.000Z</published>
    <updated>2021-05-10T15:03:26.283Z</updated>
    
    <content type="html"><![CDATA[<h1 id="对象返回自身"><a class="markdownIt-Anchor" href="#对象返回自身"></a> 对象返回自身</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Test();</span><br><span class="line">~Test();</span><br><span class="line"><span class="function"><span class="keyword">const</span> Test &amp; <span class="title">print</span><span class="params">()</span> <span class="keyword">const</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"===================="</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> *<span class="keyword">this</span>; <span class="comment">//返回自己本身</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> a;</span><br><span class="line"><span class="keyword">int</span> b;</span><br><span class="line"><span class="keyword">int</span> c;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Test::Test()</span><br><span class="line">&#123;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line">c = <span class="number">30</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Test::~Test()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1;</span><br><span class="line">t1.print().print();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;对象返回自身&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#对象返回自身&quot;&gt;&lt;/a&gt; 对象返回自身&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>this指针</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0027-this%E6%8C%87%E9%92%88/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0027-this指针/</id>
    <published>2021-05-10T14:22:10.000Z</published>
    <updated>2021-05-10T15:13:00.680Z</updated>
    
    <content type="html"><![CDATA[<p><img src="../../themes/pure/source/images/javawz/1620656678104.png" alt="1620656678104"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student();</span><br><span class="line">~Student();</span><br><span class="line">Student(<span class="keyword">const</span> <span class="keyword">char</span> * name,<span class="keyword">int</span> score);</span><br><span class="line"><span class="comment">//在成员函数后面加上const代表不能修改成员变量</span></span><br><span class="line"><span class="function"><span class="keyword">const</span> <span class="keyword">char</span> * <span class="title">getName</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span><span class="keyword">const</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * name;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="keyword">int</span> xueHao;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> jXueHao;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> Student::jXueHao = <span class="number">10000</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印类成员</span></span><br><span class="line"><span class="keyword">void</span> Student::print() <span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; xueHao &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//返回name</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> * Student::getName()<span class="keyword">const</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">this</span>-&gt;name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student(<span class="keyword">const</span> <span class="keyword">char</span> * name, <span class="keyword">int</span> score)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(name) + <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span>-&gt;name = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;name, name);</span><br><span class="line"></span><br><span class="line"><span class="keyword">this</span> -&gt; score = score;</span><br><span class="line"></span><br><span class="line">xueHao = jXueHao + <span class="number">1</span>;</span><br><span class="line">jXueHao++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::Student()</span><br><span class="line">&#123;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">xueHao = jXueHao + <span class="number">1</span>;</span><br><span class="line">jXueHao++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student::~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span>[] name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="function">Student <span class="title">s1</span><span class="params">(<span class="string">"XiaoMing"</span>, <span class="number">100</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">s1.print();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; s1.getName() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620656998746.png" alt="1620656998746"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;../../themes/pure/source/images/javawz/1620656678104.png&quot; alt=&quot;1620656678104&quot;&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>静态成员变量和静态成员函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0026-%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E5%92%8C%E9%9D%99%E6%80%81%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0026-静态成员变量和静态成员函数/</id>
    <published>2021-05-10T13:51:48.000Z</published>
    <updated>2021-05-10T14:21:33.679Z</updated>
    
    <content type="html"><![CDATA[<h1 id="静态成员变量和静态成员函数"><a class="markdownIt-Anchor" href="#静态成员变量和静态成员函数"></a> 静态成员变量和静态成员函数</h1><p>在 C++中,静态成员是属于整个类的而不是某个对象,静态成员变量只存储<br>一份供 所有对象共用。所以在所有对象中都可以共享它。使用静态成员变量实<br>现多个对象之间 的数据共享不会破坏隐藏的原则,保证了安全性还可以节省内<br>存。<br>类的静态成员,属于类,也属于对象,但终归属于类。</p><h3 id="静态成员变量"><a class="markdownIt-Anchor" href="#静态成员变量"></a> 静态成员变量</h3><p><img src="/images/javawz/1620654857571.png" alt="1620654857571"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Box();</span><br><span class="line">~Box();</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lenght;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只能在类外初始化</span></span><br><span class="line"><span class="keyword">int</span> Box::height = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Box::Box()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Box::~Box()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Box b;</span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.height &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//用对象访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Box::height &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//用类名访问</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620654912784.png" alt="1620654912784"></p><h3 id="静态成员函数"><a class="markdownIt-Anchor" href="#静态成员函数"></a> 静态成员函数</h3><p><img src="/images/javawz/1620655353829.png" alt="1620655353829"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Box</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line">Box();</span><br><span class="line">~Box();</span><br><span class="line"><span class="comment">//静态成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getHeight</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> height;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> height;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> lenght;</span><br><span class="line"><span class="keyword">int</span> width;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="comment">//只能在类外初始化</span></span><br><span class="line"><span class="keyword">int</span> Box::height = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Box::Box()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Box::~Box()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Box b;</span><br><span class="line"><span class="comment">//访问方式</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; b.height &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//用对象访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Box::height &lt;&lt; <span class="built_in">endl</span>;<span class="comment">//用类名访问</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; Box::getHeight() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1620655437909.png" alt="1620655437909"></p><p><img src="/images/javawz/1620655964957.png" alt="1620655964957"></p><p><img src="/images/javawz/1620656067332.png" alt="1620656067332"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;静态成员变量和静态成员函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#静态成员变量和静态成员函数&quot;&gt;&lt;/a&gt; 静态成员变量和静态成员函数&lt;/h1&gt;
&lt;p&gt;在 C++中,静态成员是属于整个类的而不是某个对象,静态成员变量只存储&lt;br&gt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>new和delete操作符</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/10/cpp0025-new%E5%92%8Cdelete%E6%93%8D%E4%BD%9C%E7%AC%A6/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/10/cpp0025-new和delete操作符/</id>
    <published>2021-05-10T12:08:40.000Z</published>
    <updated>2021-05-10T13:35:57.689Z</updated>
    
    <content type="html"><![CDATA[<h1 id="new和delete操作符"><a class="markdownIt-Anchor" href="#new和delete操作符"></a> new和delete操作符</h1><p>在软件开发过程中，常常需要动态地分配和撤销内存空间，例如对动态<br>链表中结点的插入与删除。在C语言中是利用库函数malloc和free来分配和撤<br>销内存空间的。C++提供了较简便而功能较强的运算符new和delete来取代<br>malloc和free函数。</p><p><code>new和delete是运算符，不是函数，因此执行效率高。</code></p><p>用new分配数组空间时不能指定初值。如果由于内存不足等原因而无法正<br>常分配空间，则new会返回一个空指针NULL，用户可以根据该指针的值判断分<br>配空间是否成功。<br><code>malloc不会调用类的构造函数,而new会调用类的构造函数</code><br><code>free不会调用类的析构函数，而delete会调用类的析构函数</code></p><p><img src="/images/javawz/1620648607782.png" alt="1620648607782"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//使用new开辟一个int类型变量空间</span></span><br><span class="line"><span class="keyword">int</span> * ip = <span class="keyword">new</span> <span class="keyword">int</span>;</span><br><span class="line"><span class="comment">//使用new开辟一个int类型数组空间</span></span><br><span class="line"><span class="keyword">int</span> * arrayP = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ip != <span class="literal">NULL</span>) &#123;</span><br><span class="line"></span><br><span class="line">*ip = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *ip &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//释放ip空间</span></span><br><span class="line"><span class="keyword">delete</span> ip;</span><br><span class="line">ip = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arrayP != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arrayP[i] = i + <span class="number">1</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; arrayP[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">//释放arrayP数组指针</span></span><br><span class="line"><span class="keyword">delete</span>[] arrayP;</span><br><span class="line">arrayP = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student()&#123;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Student(<span class="keyword">const</span> <span class="keyword">char</span> *tname,<span class="keyword">int</span> txueHao,<span class="keyword">float</span> tscore) &#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Student(char *tname,int txueHao,float tscore)"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> len = <span class="built_in">strlen</span>(tname) + <span class="number">1</span>;</span><br><span class="line">name = <span class="keyword">new</span> <span class="keyword">char</span>[len];</span><br><span class="line"><span class="built_in">strcpy</span>(name, tname);</span><br><span class="line">xueHao = txueHao;</span><br><span class="line">score = tscore;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">~Student()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Student()"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">if</span> (name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">delete</span> [] name;</span><br><span class="line">name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">char</span> * name;</span><br><span class="line"><span class="keyword">int</span> xueHao;</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span> </span>&#123;</span><br><span class="line">Student *s1 = <span class="keyword">new</span> Student();<span class="comment">//触发无参构造</span></span><br><span class="line">Student*s2 = <span class="keyword">new</span> Student(<span class="string">"XiaoMing"</span>, <span class="number">123</span>, <span class="number">100.0f</span>);<span class="comment">//触发有参构造</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *ip = <span class="keyword">new</span> <span class="keyword">int</span>(<span class="number">10</span>);<span class="comment">//new一个int类型存储空间并赋于10;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">delete</span> s1;<span class="comment">//触发析构函数</span></span><br><span class="line"><span class="keyword">delete</span> s2;<span class="comment">//触发析构函数</span></span><br><span class="line"><span class="keyword">delete</span> ip;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;new和delete操作符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#new和delete操作符&quot;&gt;&lt;/a&gt; new和delete操作符&lt;/h1&gt;
&lt;p&gt;在软件开发过程中，常常需要动态地分配和撤销内存空间，例如对动态&lt;br&gt;
链表中
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>构造函数初始化列表</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/08/cpp0024%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0%E5%88%9D%E5%A7%8B%E5%8C%96%E5%88%97%E8%A1%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/08/cpp0024构造函数初始化列表/</id>
    <published>2021-05-07T19:16:19.000Z</published>
    <updated>2021-05-07T22:29:29.553Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造函数初始化列表"><a class="markdownIt-Anchor" href="#构造函数初始化列表"></a> 构造函数初始化列表</h1><p>如果我们有一个类成员，它本身是一个类或者是一个结构，而且这个成员它只有一个带参数的构造函数，没有默认构造函数。这时要对这个类成员进行初始化，就必须调用这个类成员的带参数的构造函数，如果没有初始化列表，那么他将无法完成第一步，就会报错。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">m_a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">B(<span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">m_b = b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line">A obja;</span><br><span class="line"><span class="comment">//当A的对象是B类的⼀一个成员的时候，在初始化B对象的时候，</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//⽆无法给B分配空间，因为⽆无法初始化A类对象</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">obja</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"><span class="function">B <span class="title">objb</span><span class="params">(<span class="number">20</span>)</span></span>;<span class="comment">//error,</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="语法"><a class="markdownIt-Anchor" href="#语法"></a> 语法:</h3><p><code>构造函数名(参数1,...,参数n):本类成员名1(参数1),...,本类成员名n(参数n)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">A(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">m_a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//先初始化m_b,然后再初始化obja,初始化的顺序要看类的成员声明顺序,先声明谁就先初始化谁</span></span><br><span class="line">B(<span class="keyword">int</span> b, A &amp;tempA):m_b(b),obja(tempA)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">B(<span class="keyword">int</span> b) :m_b(b), obja(<span class="number">100</span>)<span class="comment">//调用obja的有参构造函数</span></span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line">A obja;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">obja</span><span class="params">(<span class="number">10</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">B <span class="title">objb</span><span class="params">(<span class="number">20</span>,obja)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">B <span class="title">objb2</span><span class="params">(<span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当类成员中含有一个<code>const</code>对象时，或者是一个引用时，他们也必须要通过成员初始化列表进行初始化，因为这两种对象要在声明后马上初始化，而在构造函数中，做的是对他们的赋值，这样是不被允许的。</p><p><code>初始化列表中的初始化顺序,与声明顺序有关,与前后赋值顺序无关。</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构造函数初始化列表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造函数初始化列表&quot;&gt;&lt;/a&gt; 构造函数初始化列表&lt;/h1&gt;
&lt;p&gt;如果我们有一个类成员，它本身是一个类或者是一个结构，而且这个成员它只有一个带参数的构造函数，没有默认构
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>starta-cmd命令</title>
    <link href="https://xiaowuyoucy.github.io/2021/05/06/win001starta-cmd%E5%91%BD%E4%BB%A4/"/>
    <id>https://xiaowuyoucy.github.io/2021/05/06/win001starta-cmd命令/</id>
    <published>2021-05-06T10:04:05.000Z</published>
    <updated>2021-05-06T10:10:08.384Z</updated>
    
    <content type="html"><![CDATA[<h1 id="starta-cmd命令"><a class="markdownIt-Anchor" href="#starta-cmd命令"></a> starta-cmd命令</h1><h2 id="start"><a class="markdownIt-Anchor" href="#start"></a> Start</h2><p>启动单独的“命令提示符”窗口来运行指定程序或命令。如果在没有参数的情况下使用，start 将打开第二个命令提示符窗口。</p><p>语法<br><code>start [&quot;title&quot;] [/dPath] [/i] [/min] [/max] [{/separate | /shared}] [{/low | /normal | /high | /realtime | /abovenormal | belownormal}] [/wait] [/b] [FileName] [parameters]</code></p><p>参数<br>“title” 指定在“命令提示符”窗口标题栏中显示的标题。<br>/dpatch 指定启动目录。<br>/i 将 Cmd.exe 启动环境传送到新的“命令提示符”窗口。<br>/min 启动新的最小化窗口。<br>/max 启动新的最大化窗口。<br>/separate 在单独的内存空间启动 16 位程序。<br>/shared 在共享的内存空间启动 16 位程序。<br>/low 以空闲优先级启动应用程序。<br>/normal 以一般优先级启动应用程序。<br>/high 以高优先级启动应用程序。<br>/realtime 以实时优先级启动应用程序。<br>/abovenormal 以超出常规优先级的方式启动应用程序。<br>/belownormal 以低出常规优先级的方式启动应用程序。<br>/wait 启动应用程序，并等待其结束。<br>/b 启动应用程序时不必打开新的“命令提示符”窗口。除非应用程序启用 CTRL+C，否则将忽略 CTRL+C 操作。使用 CTRL+BREAK 中断应用程序。<br>非执行文件只要将文件名作为命令键入，即可通过其文件关联运行该文件。有关使用 assoc 和 ftype 在命令脚本中创建这些关联的详细信息，请参阅“”。</p><p>在运行的命令的第一个标记为“CMD”字符串但不包括扩展名或路径限定符时，“CMD”将被 COMSPEC 变量的值取代。这样可以防止用户从当前目录选取 cmd。<br>当您运行 32 位图形用户界面 (GUI) 应用程序时，cmd  不会在返回到命令提示符之前等待应用程序退出。如果从命令脚本运行应用程序，则不会发生这种新情况。在运行的命令中第一个符号不包括扩展名的情况下，Cmd.exe 使用 PATHEXT 环境变量的值确定要查找的扩展名以及查找顺序。PATHEXT 变量的默认值为：COM;.EXE;.BAT;.CMD（语法与 PATH 变量相同，使用分号分开不同元素）。当您搜索可执行文件且在任何扩展名上都没有匹配项时，start 将搜索目录名。</p><p>具体例子：</p><p>说明：如果你所在程序的路径中带有空格，那么必须用“”把路径括起来，否则系统会提示找不到XX文件，另外，在运行某些程序时，需在路径的前面加一对空白的“”，表示创建一个空白的窗口，它指向的程序是XXXXXXXX。还有就是别忘了空格。</p><p>当我想运行位于“D:/draw/”的“photoshop.exe”使，应该使用以下命令：<br>start “”“D:/draw/photoshop.exe” 表示以常规窗口运行程序</p><p>如果想让程序以最大化窗口运行，则使用以下命令：</p><p>start /max“”“D:/draw/photoshop.exe” 表示以最大化窗口运行程序</p><p>最小化这是这样：</p><p>start /min “” “D:/draw/photoshop.exe” 表示以最小化窗口运行程序</p><p>等待某个程序允许完毕，也就是窗口关闭后，再打开下一个程序这可以这样：</p><p>start /w “” “D:/draw/photoshop.exe”<br>start “” cmd.exe</p><h2 id="cmd"><a class="markdownIt-Anchor" href="#cmd"></a> CMD</h2><p>cmd /c dir 是执行完dir命令后关闭命令窗口。</p><p>cmd /k dir 是执行完dir命令后不关闭命令窗口。</p><p>cmd /c start dir 会打开一个新窗口后执行dir指令，原窗口会关闭。</p><p>cmd /k start dir 会打开一个新窗口后执行dir指令，原窗口不会关闭。</p><ol><li>gpedit.msc-----组策略</li><li>sndrec32-------录音机</li><li>Nslookup-------IP地址侦测器</li><li>explorer-------打开资源管理器</li><li>logoff---------注销命令</li><li>tsshutdn-------60秒倒计时关机命令</li><li>lusrmgr.msc----本机用户和组</li><li>services.msc—本地服务设置</li><li>oobe/msoobe /a----检查XP是否激活</li><li>notepad--------打开记事本</li><li>cleanmgr-------垃圾整理</li><li>net start messenger----开始信使服务</li><li>compmgmt.msc—计算机管理</li><li>net stop messenger-----停止信使服务</li><li>conf-----------启动netmeeting</li><li>dvdplay--------DVD播放器</li><li>charmap--------启动字符映射表</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>calc-----------启动计算器</li><li>dfrg.msc-------磁盘碎片整理程序</li><li>chkdsk.exe-----Chkdsk磁盘检查</li><li>devmgmt.msc— 设备管理器</li><li>regsvr32 /u *.dll----停止dll文件运行</li><li>drwtsn32------ 系统医生</li><li>rononce -p ----15秒关机</li><li>dxdiag---------检查DirectX信息</li><li>regedt32-------注册表编辑器</li><li>Msconfig.exe—系统配置实用程序</li><li>rsop.msc-------组策略结果集</li><li>mem.exe--------显示内存使用情况</li><li>regedit.exe----注册表</li><li>winchat--------XP自带局域网聊天</li><li>progman--------程序管理器</li><li>winmsd---------系统信息</li><li>perfmon.msc----计算机性能监测程序</li><li><ol start="36"><li>winver---------检查Windows版本</li></ol></li><li>sfc /scannow-----扫描错误并复原</li><li>taskmgr-----任务管理器（2000／xp／2003</li><li>winver---------检查Windows版本</li><li>wmimgmt.msc----打开windows管理体系结构(WMI)</li><li>wupdmgr--------windows更新程序</li><li>wscript--------windows脚本宿主设置</li><li>write----------写字板</li><li>winmsd---------系统信息</li><li>wiaacmgr-------扫描仪和照相机向导</li><li>winchat--------XP自带局域网聊天</li><li>mem.exe--------显示内存使用情况</li><li>Msconfig.exe—系统配置实用程序</li><li>mplayer2-------简易widnows media player</li><li>mspaint--------画图板</li><li>mstsc----------远程桌面连接</li><li>mplayer2-------媒体播放机</li><li>magnify--------放大镜实用程序</li><li>mmc------------打开控制台</li><li>mobsync--------同步命令</li><li>dxdiag---------检查DirectX信息</li><li>drwtsn32------ 系统医生</li><li>devmgmt.msc— 设备管理器</li><li>dfrg.msc-------磁盘碎片整理程序</li><li>diskmgmt.msc—磁盘管理实用程序</li><li>dcomcnfg-------打开系统组件服务</li><li>ddeshare-------打开DDE共享设置</li><li>dvdplay--------DVD播放器</li><li>net stop messenger-----停止信使服务</li><li>net start messenger----开始信使服务</li><li>notepad--------打开记事本</li><li>nslookup-------网络管理的工具向导</li><li>ntbackup-------系统备份和还原</li><li>narrator-------屏幕“讲述人”</li><li>ntmsmgr.msc----移动存储管理器</li><li>ntmsoprq.msc—移动存储管理员操作请求</li><li>netstat -an----(TC)命令检查接口</li><li>syncapp--------创建一个公文包</li><li>sysedit--------系统配置编辑器</li><li>sigverif-------文件签名验证程序</li><li>sndrec32-------录音机</li><li>shrpubw--------创建共享文件夹</li><li>secpol.msc-----本地安全策略</li><li>syskey---------系统加密，一旦加密就不能解开，保护windows xp系统的双重密码</li><li>services.msc—本地服务设置</li><li>Sndvol32-------音量控制程序</li><li>sfc.exe--------系统文件检查器</li><li>sfc /scannow—windows文件保护</li><li>tsshutdn-------60秒倒计时关机命令</li><li><ol start="84"><li>tsshutdn-------60秒倒计时关机命令</li></ol></li><li>tourstart------xp简介（安装完成后出现的漫游xp程序）</li><li>taskmgr--------任务管理器</li><li>eventvwr-------事件查看器</li><li>eudcedit-------造字程序</li><li>explorer-------打开资源管理器</li><li>packager-------对象包装程序</li><li>perfmon.msc----计算机性能监测程序</li><li>progman--------程序管理器</li><li>regedit.exe----注册表</li><li>rsop.msc-------组策略结果集</li><li>regedt32-------注册表编辑器</li><li>rononce -p ----15秒关机</li><li>regsvr32 /u *.dll----停止dll文件运行</li><li>regsvr32 /u zipfldr.dll------取消ZIP支持</li><li>cmd.exe--------CMD命令提示符</li><li>chkdsk.exe-----Chkdsk磁盘检查</li><li>certmgr.msc----证书管理实用程序</li><li>calc-----------启动计算器</li><li>charmap--------启动字符映射表</li><li>cliconfg-------SQL SERVER 客户端网络实用程序</li><li>Clipbrd--------剪贴板查看器</li><li>conf-----------启动netmeeting</li><li>compmgmt.msc—计算机管理</li><li>cleanmgr-------垃圾整理</li><li>ciadv.msc------索引服务程序</li><li>osk------------打开屏幕键盘</li><li>odbcad32-------ODBC数据源管理器</li><li>oobe/msoobe /a----检查XP是否激活</li><li>lusrmgr.msc----本机用户和组</li><li>logoff---------注销命令</li><li>iexpress-------木马捆绑工具，系统自带</li><li>Nslookup-------IP地址侦测器</li><li>fsmgmt.msc-----共享文件夹管理器</li><li>utilman--------辅助工具管理器</li><li>gpedit.msc-----组策略</li><li>explorer-------打开资源管理器</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;starta-cmd命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#starta-cmd命令&quot;&gt;&lt;/a&gt; starta-cmd命令&lt;/h1&gt;
&lt;h2 id=&quot;start&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; h
      
    
    </summary>
    
      <category term="Windows命令" scheme="https://xiaowuyoucy.github.io/categories/Windows%E5%91%BD%E4%BB%A4/"/>
    
    
  </entry>
  
  <entry>
    <title>cpp单词</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/28/bcck01cpp%E5%8D%95%E8%AF%8D/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/28/bcck01cpp单词/</id>
    <published>2021-04-28T13:58:43.000Z</published>
    <updated>2021-04-28T15:19:07.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="day-1"><a class="markdownIt-Anchor" href="#day-1"></a> day 1</h1><p>asm</p><h3 id="auto"><a class="markdownIt-Anchor" href="#auto"></a> auto</h3><p><img src="/images/javawz/1619619876725.png" alt="1619619876725"></p><p><br><br>boolbreakcase<br><br></p><h3 id="catch"><a class="markdownIt-Anchor" href="#catch"></a> catch</h3><p><img src="/images/javawz/1619619952264.png" alt="1619619952264"></p><p>​<br><br>charclassoperatorconst</p><p>const_castcontinue<br><br></p><h3 id="default"><a class="markdownIt-Anchor" href="#default"></a> default</h3><p><img src="/images/javawz/1619620002159.png" alt="1619620002159"></p><p><br><br>deletedo</p><p>double<br><br></p><h3 id="dynamic_cast"><a class="markdownIt-Anchor" href="#dynamic_cast"></a> dynamic_cast</h3><p><img src="/images/javawz/1619620060785.png" alt="1619620060785"></p><p>​<br><br>elseenum<br><br></p><h3 id="explicit"><a class="markdownIt-Anchor" href="#explicit"></a> explicit</h3><p><img src="/images/javawz/1619620100751.png" alt="1619620100751"><br><br></p><h3 id="export"><a class="markdownIt-Anchor" href="#export"></a> export</h3><p><img src="/images/javawz/1619620129112.png" alt="1619620129112"><br><br></p><h3 id="extern"><a class="markdownIt-Anchor" href="#extern"></a> extern</h3><p><img src="/images/javawz/1619620172632.png" alt="1619620172632"><br><br>false</p><p><img src="/images/javawz/1619620201169.png" alt="1619620201169"><br><br></p><p>floatfor<br><br></p><h3 id="friend"><a class="markdownIt-Anchor" href="#friend"></a> friend</h3><p><img src="/images/javawz/1619620232782.png" alt="1619620232782"><br><br></p><p>​gotoifinlineintlong<br><br></p><h3 id="mutable"><a class="markdownIt-Anchor" href="#mutable"></a> mutable</h3><p><img src="/images/javawz/1619620269069.png" alt="1619620269069"><br><br></p><p>​namespacenew<br><br></p><h3 id="private"><a class="markdownIt-Anchor" href="#private"></a> private</h3><p><img src="/images/javawz/1619620314328.png" alt="1619620314328"><br><br></p><h3 id="protected"><a class="markdownIt-Anchor" href="#protected"></a> protected</h3><p><img src="/images/javawz/1619620340059.png" alt="1619620340059"><br><br></p><p>​public<br></p><h3 id="register"><a class="markdownIt-Anchor" href="#register"></a> register</h3><p><img src="/images/javawz/1619620380403.png" alt="1619620380403"><br><br></p><h3 id="reinterpret_cast"><a class="markdownIt-Anchor" href="#reinterpret_cast"></a> reinterpret_cast</h3><p><img src="/images/javawz/1619620417007.png" alt="1619620417007"><br><br></p><p>return</p><p>short<br><br></p><h3 id="signed"><a class="markdownIt-Anchor" href="#signed"></a> signed</h3><p><img src="/images/javawz/1619620448286.png" alt="1619620448286"><br><br></p><p>​sizeofstaticstatic_caststructswitch</p><h3 id="template"><a class="markdownIt-Anchor" href="#template"></a> template</h3><p><img src="/images/javawz/1619620493551.png" alt="1619620493551"><br><br></p><p>this</p><h3 id="throw"><a class="markdownIt-Anchor" href="#throw"></a> throw</h3><p><img src="/images/javawz/1619620527031.png" alt="1619620527031"><br><br></p><p>​truetrytypedeftypeidtypenameunionunsigned</p><p>using</p><h3 id="virtual"><a class="markdownIt-Anchor" href="#virtual"></a> virtual</h3><p><img src="/images/javawz/1619620595859.png" alt="1619620595859"><br><br></p><p>​void</p><h3 id="volatile"><a class="markdownIt-Anchor" href="#volatile"></a> volatile</h3><p><img src="/images/javawz/1619620621013.png" alt="1619620621013"><br><br></p><p>​wchar_t</p><p><strong>1. asm</strong></p><p>asm (指令字符串)：允许在 C++ 程序中嵌入汇编代码。</p><p><strong>2. auto</strong></p><p>auto（自动，automatic）是存储类型标识符，表明变量&quot;自动&quot;具有本地范围，块范围的变量声明（如for循环体内的变量声明）默认为auto存储类型。</p><p><strong>3. bool</strong></p><p>bool（布尔）类型，C++ 中的基本数据结构，其值可选为 true（真）或者 false（假）。C++ 中的 bool 类型可以和 int 混用，具体来说就是 0 代表 false，非 0 代表 true。bool 类型常用于条件判断和函数返回值。</p><p><strong>4. break</strong></p><p>break（中断、跳出），用在switch语句或者循环语句中。程序遇到 break 后，即跳过该程序段，继续后面的语句执行。</p><p><strong>5. case</strong></p><p>用于 switch 语句中，用于判断不同的条件类型。</p><p><strong>6. catch</strong></p><p>catch 和 try 语句一起用于异常处理。</p><p><strong>7. char</strong></p><p>char（字符，character）类型，C++ 中的基本数据结构，其值一般为 0~255 的 int。这 256 个字符对应着 256 个 ASCII 码。char 类型的数据需要用单引号 ’ 括起来。</p><p><strong>8.class</strong></p><p>class（类）是 C++ 面向对象设计的基础。使用 class 关键字声明一个类。</p><p><strong>9. const</strong></p><p>const（常量的，constant）所修饰的对象或变量不能被改变，修饰函数时，该函数不能改变在该函数外面声明的变量也不能调用任何非const函数。在函数的声明与定义时都要加上const，放在函数参数列表的最后一个括号后。在 C++ 中，用 const 声明一个变量，意味着该变量就是一个带类型的常量，可以代替 #define，且比 #define  多一个类型信息，且它执行内链接，可放在头文件中声明；但在 C 中，其声明则必须放在源文件（即 .C 文件）中，在 C 中 const  声明一个变量，除了不能改变其值外，它仍是一具变量。如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const double pi(3.14159);</span><br><span class="line">或 </span><br><span class="line">const double pi = 3.14159;</span><br></pre></td></tr></table></figure><p><strong>10. const_cast用法：</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">const_cast&lt;type_id&gt; (expression)</span><br></pre></td></tr></table></figure><p>该运算符用来修改类型的 const 或 volatile 属性。除了 const 或 volatile 修饰之外， type_id 和  expression  的类型是一样的。常量指针被转化成非常量指针，并且仍然指向原来的对象；常量引用被转换成非常量引用，并且仍然指向原来的对象；常量对象被转换成非常量对象。</p><p><strong>11. continue</strong></p><p>continue（继续）关键字用于循环结构。它使程序跳过代码段后部的部分，与 break 不同的是，continue 不是进入代码段后的部分执行，而是重新开始新的循环。因而它是&quot;继续循环&quot;之意，不是 break（跳出）。</p><p><strong>12. default</strong></p><p>default（默认、缺省）用于 switch 语句。当 switch 所有的 case 都不满足时，将进入 default 执行。default 只能放在 switch 语句所有的 case 之后，并且是可选的。</p><p><strong>13. delete</strong></p><p>delete（删除）释放程序动态申请的内存空间。delete 后面通常是一个指针或者数组 []，并且只能 delete 通过 new 关键字申请的指针，否则会发生段错误。</p><p><strong>14. do</strong></p><p>do-while是一类循环结构。与while循环不同，do-while循环保证至少要进入循环体一次。</p><p><strong>15. double</strong></p><p>double（双精度）类型，C++ 中的基本数据结构，以双精度形式存储一个浮点数。</p><p><strong>16. dynamic_cast</strong></p><p>dynamic_cast（动态转换），允许在运行时刻进行类型转换，从而使程序能够在一个类层次结构安全地转换类型。dynamic_cast 提供了两种转换方式，把基类指针转换成派生类指针，或者把指向基类的左值转换成派生类的引用。</p><p><strong>17. else</strong></p><p>else 紧跟在 if 后面，用于对 if 不成立的情况的选择。</p><p><strong>18. enum</strong></p><p>enum（枚举）类型，给出一系列固定的值，只能在这里面进行选择一个。</p><p><strong>19. explicit</strong></p><p>explicit（显式的）的作用是&quot;禁止单参数构造函数&quot;被用于自动型别转换，其中比较典型的例子就是容器类型。在这种类型的构造函数中你可以将初始长度作为参数传递给构造函数。</p><p><strong>20. export</strong></p><p>为了访问其他编译单元（如另一代码文件）中的变量或对象，对普通类型（包括基本数据类、结构和类），可以利用关键字  extern，来使用这些变量或对象时；但是对模板类型，则必须在定义这些模板类对象和模板函数时，使用标准 C++ 新增加的关键字  export（导出）。</p><p><strong>21. extern</strong></p><p>extern（外部的）声明变量或函数为外部链接，即该变量或函数名在其它文件中可见。被其修饰的变量（外部变量）是静态分配空间的，即程序开始时分配，结束时释放。用其声明的变量或函数应该在别的文件或同一文件的其它地方定义（实现）。在文件内声明一个变量或函数默认为可被外部使用。在 C++ 中，还可用来指定使用另一语言进行链接，这时需要与特定的转换符一起使用。目前仅支持 C 转换标记，来支持 C 编译器链接。使用这种情况有两种形式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">extern &quot;C&quot; 声明语句</span><br><span class="line"></span><br><span class="line">extern &quot;C&quot; &#123; 声明语句块 &#125;</span><br></pre></td></tr></table></figure><p><strong>22. false</strong></p><p>false（假的），C++ 的基本数据结构 bool 类型的值之一。等同于 int 的 0 值。</p><p><strong>23. float</strong></p><p>float（浮点数），C++ 中的基本数据结构，精度小于 double。</p><p><strong>24. for</strong></p><p>for 是 C++ 中的循环结构之一。</p><p><strong>25. friend</strong></p><p>friend（友元）声明友元关系。友元可以访问与其有 friend 关系的类中的 private/protected 成员，通过友元直接访问类中的 private/protected 成员的主要目的是提高效率。友元包括友元函数和友元类。</p><p><strong>26. goto</strong></p><p>goto（转到），用于无条件跳转到某一标号处开始执行。</p><p><strong>27. if</strong></p><p>if（如果），C++ 中的条件语句之一，可以根据后面的 bool 类型的值选择进入一个分支执行。</p><p><strong>28. inline</strong></p><p>inline（内联）函数的定义将在编译时在调用处展开。inline 函数一般由短小的语句组成，可以提高程序效率。</p><p><strong>29. int</strong></p><p>int（整型，integer），C++ 中的基本数据结构，用于表示整数，精度小于 long。</p><p><strong>30. long</strong></p><p>long（长整型，long integer），C++ 中的基本数据结构，用于表示长整数。</p><p><strong>31. mutable</strong></p><p>mutable（易变的）是 C++  中一个不常用的关键字。只能用于类的非静态和非常量数据成员。由于一个对象的状态由该对象的非静态数据成员决定，所以随着数据成员的改变，对像的状态也会随之发生变化。如果一个类的成员函数被声明为 const  类型，表示该函数不会改变对象的状态，也就是该函数不会修改类的非静态数据成员。但是有些时候需要在该类函数中对类的数据成员进行赋值，这个时候就需要用到 mutable 关键字。</p><p><strong>32. namespace</strong></p><p>namespace（命名空间）用于在逻辑上组织类，是一种比类大的结构。</p><p><strong>33. new</strong></p><p>new（新建）用于新建一个对象。new 运算符总是返回一个指针。由 new 创建</p><p><strong>34. operator</strong></p><p>operator（操作符）用于操作符重载。这是 C++ 中的一种特殊的函数。</p><p><strong>35. private</strong></p><p>private（私有的），C++ 中的访问控制符。被标明为 private 的字段只能在本类以及友元中访问。</p><p><strong>36. protected</strong></p><p>protected（受保护的），C++ 中的访问控制符。被标明为 protected 的字段只能在本类以及其继承类和友元中访问。</p><p><strong>37. public</strong></p><p>public（公有的），C++ 中的访问控制符。被标明为 public 的字段可以在任何类</p><p><strong>38.register</strong></p><p>register（寄存器）声明的变量称着寄存器变量，在可能的情况下会直接存放在机器的寄存器中；但对 32 位编译器不起作用，当 global  optimizations（全局优化）开的时候，它会做出选择是否放在自己的寄存器中；不过其它与 register  关键字有关的其它符号都对32位编译器有效。</p><p><strong>39. reinterpret_cast</strong></p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">reinpreter_cast&lt;type-id&gt; (expression)</span><br></pre></td></tr></table></figure><p>type-id 必须是一个指针、引用、算术类型、函数指针或者成员指针。它可以把一个指针转换成一个整数，也可以把一个整数转换成一个指针（先把一个指针转换成一个整数，在把该整数转换成原类型的指针，还可以得到原先的指针值）。</p><p><strong>40. return</strong></p><p>return（返回）用于在函数中返回值。程序在执行到 return 语句后立即返回，return 后面的语句无法执行到。</p><p><strong>41. short</strong></p><p>short（短整型，short integer），C++ 中的基本数据结构，用于表示整数，精度小于 int。</p><p><strong>42. signed</strong></p><p>signed（有符号），表明该类型是有符号数，和 unsigned 相反。数字类型（整型和浮点型）都可以用 signed 修饰。但默认就是 signed，所以一般不会显式使用。</p><p><strong>43. sizeof</strong></p><p>由于 C++ 每种类型的大小都是由编译器自行决定的，为了增加可移植性，可以用 sizeof 运算符获得该数据类型占用的字节数。</p><p><strong>44. static</strong></p><p>static（静态的）静态变量作用范围在一个文件内，程序开始时分配空间，结束时释放空间，默认初始化为  0，使用时可改变其值。静态变量或静态函数，只有本文件内的代码才可访问它，它的名字（变量名或函数名）在其它文件中不可见。因此也称为&quot;文件作用域&quot;。在 C++ 类的成员变量被声明为  static（称为静态成员变量），意味着它被该类的所有实例所共享，也就是说当某个类的实例修改了该静态成员变量，其修改值为该类的其它所有实例所见；而类的静态成员函数也只能访问静态成员（变量或函数）。类的静态成员变量必须在声明它的文件范围内进行初始化才能使用，private 类型的也不例外。</p><p><strong>45. static_cast</strong></p><p>用法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">static_cast &lt; type-id &gt; ( expression )</span><br></pre></td></tr></table></figure><p>该运算符把 expression 转换为 type-id 类型，但没有运行时类型检查来保证转换的安全性。它主要有如下几种用法：</p><ul><li>① 用于类层次结构中基类和子类之间指针或引用的转换。进行上行转换（把子类的指针或引用转换成基类表示）是安全的；进行下行转换（把基类指针或引用转换成子类表示）时，由于没有动态类型检查，所以是不安全的。</li><li>② 用于基本数据类型之间的转换，如把 int 转换成 char，把 int 转换成 enum。这种转换的安全性也要开发人员来保证。</li><li>③ 把空指针转换成目标类型的空指针。</li><li>④ 把任何类型的表达式转换成void类?</li></ul><p><strong>注意</strong> static_cast 不能转换掉 expression 的 const、volitale、或者 __unaligned 属性。</p><p><strong>46. struct</strong></p><p>struct（结构）类型，类似于 class 关键字，与 C 语言兼容（class 关键字是不与 C 语言兼容的），可以实现面向对象程序设计。</p><p><strong>47. switch</strong></p><p>switch（转换）类似于 if-else-if 语句，是一种多分枝语句。它提供了一种简洁的书写，并且能够生成效率更好的代码。但是，switch 后面的判断只能是int（char也可以，但char本质上也是一种int类型）。switch 语句最后的 default 分支是可选的。</p><p><strong>48. template</strong></p><p>template（模板），C++ 中泛型机制的实现。</p><p><strong>49. this</strong></p><p>this 返回调用者本身的指针。</p><p><strong>50. throw</strong></p><p>throw（抛出）用于实现 C++ 的异常处理机制，可以通过 throw 关键字&quot;抛出&quot;一个异常。</p><p><strong>51. true</strong></p><p>true（真的），C++ 的基本数据结构 bool 类型的值之一。等同于 int 的非 0 值。</p><p><strong>52. try</strong></p><p>try（尝试）用于实现 C++ 的异常处理机制。可以在 try 中调用可能抛出异常的函数，然后在 try 后面的 catch 中捕获并进行处理。</p><p><strong>53. typedef</strong></p><p>typedef（类型定义，type define），其格式为：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">typedef  类型 定义名;</span><br></pre></td></tr></table></figure><p>类型说明定义了一个数据类型的新名字而不是定义一种新的数据类型。定义名表示这个类型的新名字。</p><p><strong>54. typeid</strong></p><p>指出指针或引用指向的对象的实际派生类型。</p><p><strong>55. typename</strong></p><p>typename（类型名字）关键字告诉编译器把一个特殊的名字解释成一个类型。在下列情况下必须对一个 name 使用 typename 关键字：</p><ul><li>1．  一个唯一的name（可以作为类型理解），它嵌套在另一个类型中的。</li><li>2．  依赖于一个模板参数，就是说：模板参数在某种程度上包含这个name。当模板参数使编译器在指认一个类型时产生了误解。</li></ul><p><strong>56. union</strong></p><p>union（联合），类似于 enum。不同的是 enum 实质上是 int 类型的，而 union 可以用于所有类型，并且其占用空间是随着实际类型大小变化的。</p><p><strong>57. unsigned</strong></p><p>unsigned（无符号），表明该类型是无符号数，和 signed 相反。</p><p><strong>58. using</strong></p><p>表明使用 namespace。</p><p><strong>59. virtual</strong></p><p>virtual（虚的），C++ 中用来实现多态机制。</p><p><strong>60. void</strong></p><p>void（空的），可以作为函数返回值，表明不返回任何数据；可以作为参数，表明没有参数传入（C++中不是必须的）；可以作为指针使用。</p><p><strong>61. volatile</strong></p><p>volatile（不稳定的）限定一个对象可被外部进程（操作系统、硬件或并发线程等）改变，声明时的语法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">int volatile nVint;</span><br></pre></td></tr></table></figure><p>这样的声明是不能达到最高效的，因为它们的值随时会改变，系统在需要时会经常读写这个对象的值。因此常用于像中断处理程序之类的异步进程进行内存单元访问。</p><p><strong>62. wchar_t</strong></p><p>wchar_t 是宽字符类型，每个 wchar_t 类型占 2 个字节，16 位宽。汉字的表示就要用到 wchar_t。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;day-1&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#day-1&quot;&gt;&lt;/a&gt; day 1&lt;/h1&gt;
&lt;p&gt;asm&lt;/p&gt;
&lt;h3 id=&quot;auto&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#auto&quot;
      
    
    </summary>
    
      <category term="编程词汇" scheme="https://xiaowuyoucy.github.io/categories/%E7%BC%96%E7%A8%8B%E8%AF%8D%E6%B1%87/"/>
    
    
  </entry>
  
  <entry>
    <title>linux1-3</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/28/002linux1-3/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/28/002linux1-3/</id>
    <published>2021-04-28T13:17:57.000Z</published>
    <updated>2021-04-28T13:54:38.465Z</updated>
    
    <content type="html"><![CDATA[<ul><li><a href="#1">快捷键</a></li><li><a href="#2">目录</a></li><li><a href="#3">ls和tree的使用</a></li><li><a href="#4">文件目录和文件的创建</a></li><li><a href="#a5">删除目录和文件</a></li><li><a href="#6">文件和目录的拷贝</a></li><li><a href="#7">查看文件内容</a></li><li><a href="#8">mv命令</a></li><li><a href="#9">文件的检索</a></li><li><a href="#10">od 查看二进制文件</a></li><li><a href="#11">软件的安装和卸载</a></li><li><a href="#12">U盘挂载和卸载</a></li><li><a href="#13">ftp服务器配置 <code>vsftpd</code></a></li></ul><p>终端：(虚拟终端)  所有输入输出设备总称</p><p>shell： 命令解析器</p><p>bash： bore again shell 命令解析器。</p><p><span id="1"></span></p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键:</h3><p>命令和路径补齐: tab</p><h4 id="主键盘快捷键"><a class="markdownIt-Anchor" href="#主键盘快捷键"></a> 主键盘快捷键:</h4><p>​ 1).历史命令切换:<br>​     历史命令:history<br>​     向上遍历: ctrl + p<br>​     向下遍历: ctrl + n</p><h4 id="2光标移动"><a class="markdownIt-Anchor" href="#2光标移动"></a> 2).光标移动:</h4><p>   向左: ctrl + b<br>   向右: ctrl + f<br> 移动到头部: ctrl + a<br>  移动到尾部: ctrl + e</p><h4 id="3删除字符"><a class="markdownIt-Anchor" href="#3删除字符"></a> 3).删除字符:</h4><p>    删除光标后边的字符: ctrl + d<br>   删除光标前面的字符: ctrl + h<br> 删除光标前面的所有内容: ctrl + u</p><p><span id="2"></span></p><h3 id="目录"><a class="markdownIt-Anchor" href="#目录"></a> 目录</h3><p> / 根目录<br> ls /</p><p> /bin  常用的命令</p><p> cd /bin  进入bin目录</p><p> /boot 开机启动项文件</p><p> /dev  设备文件</p><p> /etc 配置文件</p><p> /home 主目录,存放用户</p><p> /lib  动态链接库(共享库)</p><p> /lost-found  存放文件碎片</p><p> /media  挂载外设 U盘或光盘等等</p><p> /mnt  手动挂载外设到这个目录</p><p> /opt 第三方软件</p><p> /root 超级用户目录</p><p> /sbin 管理员使用的系统管理程序</p><p> /usr 用户软件资源目录(用户的软件或文件)</p><p> /usr/bin 系统用户的应用程序</p><p> /usr/sbin 超级用户使用的管理程序和系统守护程序</p><p> /usr/src 内核源码默认的放置目录</p><p> ctrl + l 清屏,或clear</p><p>绝对路径 从/开始<br>相对路径<br> ./当前路径<br> …/上一级路径<br> cd -  两个相邻目录切换<br> cd ~  切换到当前用户目录<br> cd  切换到用户目录</p><h3 id="yxc19981cyc~"><a class="markdownIt-Anchor" href="#yxc19981cyc~"></a> yxc19981c@yc:~$</h3><p>  yxc19981c  用户名<br>  yc 主机名<br>  ~ 用户目录<br>  $普通用户</p><p>  超级用户root   切换到超级用户 sudo su  或 su root</p><table><thead><tr><th style="text-align:center">-</th><th style="text-align:center">rw-</th><th>r–</th><th>r–</th><th>1</th><th>root</th><th>root</th><th>1937</th><th>9月   2  2020</th><th style="text-align:center">ucontext.h</th></tr></thead><tbody><tr><td style="text-align:center">文件类型</td><td style="text-align:center">所有者</td><td>所属组</td><td>其他人</td><td>硬连接数</td><td>文件所有者</td><td>文件所属组</td><td>文件大小</td><td>日期</td><td style="text-align:center">文件名</td></tr></tbody></table><p>文件类型：</p><ol><li><p> 文件  “-”</p></li><li><p> 目录  “d”</p></li><li><p> 软连接 “l”  --快捷方式</p></li><li><p> 管道   “p”</p></li><li><p> 套接字 “s”</p></li><li><p> 字符设备 “c”</p></li><li><p> 块设备 “b”</p></li><li><p> 未知类型</p></li></ol><p><span id="3"></span></p><h3 id="ls和tree的使用"><a class="markdownIt-Anchor" href="#ls和tree的使用"></a> ls和tree的使用:</h3><p> ls -a 显示所有文件<br> ls -l 详细显示<br> ls -al<br> ls -h 人性化显示文件大小<br>  tree 目录</p><p> pwd 查看当前位置</p><p><span id="4"></span></p><h3 id="文件目录和文件的创建"><a class="markdownIt-Anchor" href="#文件目录和文件的创建"></a> 文件目录和文件的创建</h3><p> mkdir 目录名<br> mkdir dri/dir/dir -p  递归创建目录<br> mkdir -p dir/dir/dir<br> touch 文件名<br> touch 文件名1 文件名2 … 文件名n</p><p><span id="a5"></span></p><h3 id="删除目录和文件"><a class="markdownIt-Anchor" href="#删除目录和文件"></a> 删除目录和文件</h3><p>​ rmdir 空目录名<br> rm 目录名 -rf (f代表不提示)<br>​ rm 文件名 -f<br> rm 目录名 -ri (i代表提示)<br>​<span id="6"></span></p><h3 id="文件和目录的拷贝"><a class="markdownIt-Anchor" href="#文件和目录的拷贝"></a> 文件和目录的拷贝</h3><p> cp 源文件 目标文件名<br> cp h1 h2  将h1复制一份并命名为h2<br> 如果h2存在将原来内容覆盖<br> cp 源目录 目的目录 -r<br>如果目的目录不存在就将源码目拷贝一份并命名为目的目录<br>如果目的目录存在,就将源目录拷贝一份,复制到目的目录里面</p><p><span id="7"></span></p><h3 id="查看文件内容"><a class="markdownIt-Anchor" href="#查看文件内容"></a> 查看文件内容</h3><p> gedit 文件名</p><p> cat 文件名<br> cat 文件1 文件2 … 文件n   拼接查看文件<br> cat 文件1 | more</p><p> more 文件名<br>  回车  一行<br>  空格  一页<br> 只能往后看<br>  q 退出<br>  ctrl + c 退出</p><p> less 文件名<br>  回车  一行<br>  空格  一页<br> 可以往前后看<br>  q 退出<br>  ctrl + c 退出<br>  ctrl + p 向前一行<br>  ctrl + n 先后一行</p><p> head 文件名      显示文件前十行<br>  head -5 文件名   显示文件前五行</p><p> tail 文件名 显示文件后十行<br>  tail -5 文件名 显示文件后五行</p><p><span id="8"></span></p><h3 id="mv命令"><a class="markdownIt-Anchor" href="#mv命令"></a> mv命令</h3><h5 id="文件改名"><a class="markdownIt-Anchor" href="#文件改名"></a> 文件改名</h5><p> mv 源文件 改名后的文件</p><h5 id="移动"><a class="markdownIt-Anchor" href="#移动"></a>  移动</h5><p>​ mv 文件名 目录名    将文件移动到目录中</p><p><span id="9"></span></p><h3 id="文件的检索"><a class="markdownIt-Anchor" href="#文件的检索"></a> 文件的检索</h3><p> grep -r “文件内容” 路径    -r代表递归检索文件<br> grep -r “printf” /从根目录开始递归查找文件包含&quot;printf&quot;内容的文件</p><p> 文件和目录属性命令<br> wc 获取文本文件的信息<br> yxsdc19c@yscc:/usr/include$ wc time.h<br>  309  1515 10360 time.h<br> 309代表行数 1515代表单词个数 10360代表字节数</p><p><span id="10"></span></p><h3 id="od-查看二进制文件"><a class="markdownIt-Anchor" href="#od-查看二进制文件"></a> od 查看二进制文件</h3><p> od -t 文件名<br>  -t 指定数据的显示格式<br>  -tc ASCII字符<br>  -tx 十六进制数<br>  -td 有符号十进制数<br>  -tu 无符号十进制数<br>  -to 八进制数<br>  -tf 浮点数</p><p><span id="11"></span></p><h3 id="软件的安装和卸载"><a class="markdownIt-Anchor" href="#软件的安装和卸载"></a> 软件的安装和卸载</h3><h4 id="在线安装"><a class="markdownIt-Anchor" href="#在线安装"></a> 在线安装</h4><p> 安装 sudo apt-get install 软件名<br> 卸载 sudo apt-get remove  软件名<br> 更新 sudo apt-get update  更新软件列表<br> 软件列表存放的是软件名字和下载地址</p><p> 清理所有软件安装包 sudo apt-get clean<br> 实际清理的是: /var/cache/apt/archives目录下的.deb文件</p><h4 id="deb包安装"><a class="markdownIt-Anchor" href="#deb包安装"></a> deb包安装</h4><p> 安装 sudo dpkg -i xxx.deb</p><p> 卸载 sudo dpkg -r xxx</p><h4 id="源码安装"><a class="markdownIt-Anchor" href="#源码安装"></a> 源码安装</h4><p> 1.解压缩源代码包<br> 2.进入到安装目录</p><p> 3.检测文件是否缺失,创建Makefile,检测编译环境: ./configure<br> 4.编译源码 生成库和可以执行程序:make<br> 5.把库和可执行程序,安装到系统目录下: sudo make install<br> 6.删除和卸载软件:sudo make distclean<br> 7.上述安装步骤并不是绝对的,应该先查看附带的README文件</p><p><span id="12"></span></p><h3 id="u盘挂载和卸载"><a class="markdownIt-Anchor" href="#u盘挂载和卸载"></a> U盘挂载和卸载</h3><p> 卸载: umount 设备文件名<br> 挂载: mount 设备文件名 挂载路径<br> 将外设挂载到非mnt目录时,会临时覆盖原来内容,卸载之后会恢复</p><p><span id="13"></span></p><h3 id="ftp服务器配置-vsftpd"><a class="markdownIt-Anchor" href="#ftp服务器配置-vsftpd"></a> ftp服务器配置  <code>vsftpd</code></h3><p> 作用:文件上传和下载</p><p> ftp服务器配置<br> 配置文件在<code>/etc/vsftpd.conf</code></p><pre><code>anonymous_enable=YES  允许匿名用户登录write_enable=YES   实名登录用户拥有写的权限local_umask=022 设置本地掩码为022anon_upload_enable=YES  匿名用户拥有写的权限anon_mkdir_write_enable=YES  匿名用户可以在ftp服务器上创建目录</code></pre><h5 id="重启ftp服务"><a class="markdownIt-Anchor" href="#重启ftp服务"></a> 重启ftp服务</h5><p>​<code>sudo service vsftpd restart</code></p><p>实名登录ftp<br> <code>ftp ip地址</code><br> 输入用户<br> 输入密码<br> 退出<br>  <code>bye</code><br>  <code>quit</code><br>  <code>exit</code></p><p>文件上传和下载</p><p> 上传<br>  在什么目录登录的,文件默认从那里找<br>  <code>put 文件名</code></p><p> 下载<br>  <code>get 文件名</code><br>  不允许操作目录,可以打包处理</p><p> 匿名登录服务器<br>  <code>用户名 anonymous</code><br>  不允许匿名用户在任意目录直接切换<br>  只能在一个指定的目录范围内工作<br>  需要在ftp服务器上创建一个匿名用户的目录 --匿名用户的根目录<br>  在配置文件添加  <code>anon_root=/home/yxc19980620c/myFtp/</code><br>  匿名登录默认路径是在<code>/srv/ftp</code><br>  在配置文件<code>/etc/passwd</code>可以查看并修改<br> <code>ftp:x:123:127:ftp daemon,,,:/srv/ftp:/usr/sbin/nologin</code></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;#1&quot;&gt;快捷键&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#2&quot;&gt;目录&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#3&quot;&gt;ls和tree的使用&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;#4&quot;&gt;文件目录和文件的创建&lt;/a&gt;&lt;/li&gt;
&lt;l
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0023-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0023-深拷贝和浅拷贝/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T16:12:56.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝"><a class="markdownIt-Anchor" href="#深拷贝和浅拷贝"></a> 深拷贝和浅拷贝</h1><p>字符串如果进行浅拷贝会出现以下问题:</p><p>假设有两个char类型指针a,b指向同一个内存空间</p><p>当a被释放时,b还未修改,再次使用b时就会出现段错误(Linux)或内存中断(windows)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher() &#123;</span><br><span class="line">m_id = <span class="number">0</span>;</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数,开辟一个空间给m_name</span></span><br><span class="line">Teacher(<span class="keyword">int</span> id,<span class="keyword">const</span> <span class="keyword">char</span> * name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">m_id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数,开辟一个空间</span></span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; another).."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_name, another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_id = another.m_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印id 和name和name的地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放从堆区开辟的内存</span></span><br><span class="line">~Teacher()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">free</span>(m_name);</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"free"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_id;</span><br><span class="line"><span class="keyword">char</span> * m_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Teacher <span class="title">tc1</span><span class="params">(<span class="number">123</span>, <span class="string">"xiaoh"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">tc2</span><span class="params">(tc1)</span></span>;</span><br><span class="line"></span><br><span class="line">tc1.print();</span><br><span class="line">tc2.print();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深拷贝和浅拷贝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#深拷贝和浅拷贝&quot;&gt;&lt;/a&gt; 深拷贝和浅拷贝&lt;/h1&gt;
&lt;p&gt;字符串如果进行浅拷贝会出现以下问题:&lt;/p&gt;
&lt;p&gt;假设有两个char类型指针a,b指向同一个内存空间&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类中默认函数的隐藏条件</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0022-%E7%B1%BB%E4%B8%AD%E9%BB%98%E8%AE%A4%E5%87%BD%E6%95%B0%E7%9A%84%E9%9A%90%E8%97%8F%E6%9D%A1%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0022-类中默认函数的隐藏条件/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T13:27:28.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类中默认函数的隐藏条件"><a class="markdownIt-Anchor" href="#类中默认函数的隐藏条件"></a> 类中默认函数的隐藏条件</h1><h3 id="编译器不提供默认无参构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认无参构造函数的条件"></a> 编译器不提供默认无参构造函数的条件:</h3><p>1.显示的提供一个有参或无参构造函数</p><p>2.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供默认拷贝构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认拷贝构造函数的条件"></a> 编译器不提供默认拷贝构造函数的条件</h3><p>1.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供析构函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供析构函数的条件"></a> 编译器不提供析构函数的条件</h3><p>1.显示的提供了一个析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">默认提供的函数</span></span><br><span class="line"><span class="comment">B() &#123;</span></span><br><span class="line"><span class="comment">//默认的无惨构造函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">B(const B&amp; b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">m_b = b.m_b; //默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">p = b.p;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果显示的写了一个普通构造函数， 会隐藏默认的无惨构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个拷贝构造函数 ，会隐藏默认的无参构造函数和默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个析构函数， 会隐藏默认的析构函数</span></span><br><span class="line">B(<span class="keyword">const</span> B&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的构造函数</span></span><br><span class="line"><span class="comment">如果普通构造函数，提供了一个显示的构造， 那么这个无参的默认构造就会被隐藏。 不会把拷贝构造函数隐藏掉</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">A(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">m_a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">A(const A &amp; a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   m_a = a;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//显示的提供一个拷贝构造的函数的时候，默认的拷贝构造函数就会被隐藏</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"显示提供的拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_a = a.m_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 默认的析构函数</span></span><br><span class="line"><span class="comment"> ~A()</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有提供一个显示的析构函数，才会将默认的析构覆盖点</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A的析构函数 调用 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">aObj</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//当你不提供任何构造函数的时候， 系统会有一个默认的构造函数</span></span><br><span class="line">A aObj2 = aObj;  <span class="comment">//调用了aObj2的拷贝构造函数</span></span><br><span class="line"><span class="comment">//A aObj2(aObj);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类中默认函数的隐藏条件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类中默认函数的隐藏条件&quot;&gt;&lt;/a&gt; 类中默认函数的隐藏条件&lt;/h1&gt;
&lt;h3 id=&quot;编译器不提供默认无参构造函数的条件&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0021-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0021-拷贝构造函数/</id>
    <published>2021-04-26T12:41:44.000Z</published>
    <updated>2021-04-26T13:06:54.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拷贝构造函数"><a class="markdownIt-Anchor" href="#拷贝构造函数"></a> 拷贝构造函数</h1><p>编译器会默认提供一个浅拷贝的构造函数</p><p>一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(<span class="keyword">const</span> 类名 &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">拷⻉贝构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">test(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"><span class="comment">//赋值操作符函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::<span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是赋值操作符函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t3</span><span class="params">(t2)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">test t4 = t3;<span class="comment">//这里调用的是拷贝构造函数,因为是初始化</span></span><br><span class="line">t4 = t2;  <span class="comment">//这里是调用赋值操作符函数,因为不是初始化</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拷贝构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#拷贝构造函数&quot;&gt;&lt;/a&gt; 拷贝构造函数&lt;/h1&gt;
&lt;p&gt;编译器会默认提供一个浅拷贝的构造函数&lt;/p&gt;
&lt;p&gt;一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>默认的无参构造和析构函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0020-%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0020-默认的无参构造和析构函数/</id>
    <published>2021-04-26T12:32:36.000Z</published>
    <updated>2021-04-26T12:37:41.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认的无参构造和析构函数"><a class="markdownIt-Anchor" href="#默认的无参构造和析构函数"></a> 默认的无参构造和析构函数</h1><p>不写构造函数时,编译器会默认提供一个无参构造函数</p><p>如果显示的提供了一个构造函数,编译器将不再提供无参构造函数</p><p>如果显示提供了一个析构函数,编译器将不再提供构造函数</p><p>如果手动添加了一个有参构造函数,就需要根据情况添加一个无参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造函数。 就是一个无参数的构造函数，</span></span><br><span class="line"><span class="comment">//如果不显示提供构造函数，系统就是调用默认的构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test() &#123;&#125; 默认的构造函数，已经手动提供，默认就被隐藏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们提供了一个显示的构造函数，那么默认的构造函数就被隐藏掉了。</span></span><br><span class="line"><span class="comment">//构造函数一旦手动提供， 默认将不复存在。</span></span><br><span class="line">Test(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">m_x = x;</span><br><span class="line">m_y = y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了有参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数的构造函数</span></span><br><span class="line">Test()&#123;</span><br><span class="line">m_x = <span class="number">0</span>;</span><br><span class="line">m_y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了无参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数 ，想通过另一个Test对象 another 将本对象进行拷贝</span></span><br><span class="line">Test(<span class="keyword">const</span> Test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">m_x = another.m_x;</span><br><span class="line">m_y = another.m_y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等号操作符</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">m_x = t.m_x;</span><br><span class="line">m_y = t.m_y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x : "</span> &lt;&lt; m_x &lt;&lt; <span class="string">", y : "</span> &lt;&lt; m_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个析构函数</span></span><br><span class="line">~Test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Test（）析构函数被执行了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; m_x &lt;&lt; <span class="string">", "</span> &lt;&lt; m_y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">"被析构了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_x;</span><br><span class="line"><span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1; <span class="comment">//调用无参的构造函数</span></span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="comment">//Test t3(10, 20, 30);</span></span><br><span class="line">t2.printT();</span><br><span class="line"><span class="function">Test <span class="title">t3</span><span class="params">(t2)</span></span>; <span class="comment">//调用t3的拷贝构造函数  //调用拷贝构造函数的方式</span></span><br><span class="line">t3.printT();</span><br><span class="line"><span class="comment">//Test t4 = t2; // 依然是调用t4的拷贝构造函数，</span></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t4</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>; <span class="comment">//调用t4 的两个参数的构造函数</span></span><br><span class="line"></span><br><span class="line">Test t5; <span class="comment">//先调用无惨构造。</span></span><br><span class="line">t5 = t2; <span class="comment">//不会调用拷贝构造函数 //调用=号重载操作符  赋值操作符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数的调用顺序， 跟对象的构造顺序相反， 谁先构造，谁最后一个被析构。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;默认的无参构造和析构函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#默认的无参构造和析构函数&quot;&gt;&lt;/a&gt; 默认的无参构造和析构函数&lt;/h1&gt;
&lt;p&gt;不写构造函数时,编译器会默认提供一个无参构造函数&lt;/p&gt;
&lt;p&gt;如果显示的提供了一个
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>构造和析构</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0019-%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0019-构造和析构/</id>
    <published>2021-04-26T12:09:33.000Z</published>
    <updated>2021-04-26T12:26:06.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造和析构"><a class="markdownIt-Anchor" href="#构造和析构"></a> 构造和析构</h1><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>C++中的类可以定义与类名相同的特殊成员函数，这种与类名相同的成员函数叫做构造函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(形式参数)</span><br><span class="line">&#123;</span><br><span class="line">构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(形参)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用</h4><p><code>自动调用</code>：一般情况下C++编译器会自动调用构造函数.<br><code>手动调用</code>：在一些情况下则需要手工调用构造函数.</p><h4 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则:</h4><p>1 在对象创建时自动调用,完成初始化相关工作。<br>2 无返回值,与类名同,默认无参,可以重载,可默认参数。<br>3 一经实现,默认不复存在。</p><h3 id="析构函数"><a class="markdownIt-Anchor" href="#析构函数"></a> 析构函数</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>C++中的类可以定义一个特殊的成员函数清理对象，这个特殊的成员函数叫做析构函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~类名()</span><br><span class="line">&#123;</span><br><span class="line">析构体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规则-2"><a class="markdownIt-Anchor" href="#规则-2"></a> 规则:</h4><p>1 对象销毁时,自动调用。完成销毁的善后工作。<br>2 无返值 ,与类名同。无参。不可以重载与默认参数</p><p><code>析构函数的作用,并不是删除对象,而在对象销毁前完成的一些清理工作。</code></p><h4 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构造和析构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造和析构&quot;&gt;&lt;/a&gt; 构造和析构&lt;/h1&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造函数&quot;&gt;&lt;/a&gt; 构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
</feed>
