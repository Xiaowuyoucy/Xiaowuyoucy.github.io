<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2022-06-08T14:42:29.971Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>oracle_win和linux编程</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/08/oracle-win%E5%92%8Clinux%E7%BC%96%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/08/oracle-win和linux编程/</id>
    <published>2022-06-08T14:40:24.000Z</published>
    <updated>2022-06-08T14:42:29.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="windows"><a class="markdownIt-Anchor" href="#windows"></a> windows</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;occi.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace oracle::occi;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//初始化环境</span><br><span class="line">Environment *ev = Environment::createEnvironment();</span><br><span class="line">if (ev == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;createEnvironment failed&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//连接oracle数据库</span><br><span class="line">string user = &quot;scott&quot;;</span><br><span class="line">string passwd = &quot;tiger&quot;;</span><br><span class="line">string connstr = &quot;192.168.10.145:1521/orcl&quot;;</span><br><span class="line">Connection *conn = ev-&gt;createConnection(user, passwd, connstr);</span><br><span class="line">if (conn == NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;connect database failed&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;connect database OK&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//sql语句中不要有分号</span><br><span class="line">/*string sql = &quot;insert into dept values(109, &apos;lajiao&apos;, &apos;JYL_SC&apos;)&quot;;</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;execute();*/</span><br><span class="line"></span><br><span class="line">string sql = &quot;delete from dept where deptno=99&quot;;</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line"></span><br><span class="line">//关闭连接</span><br><span class="line">ev-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line">//释放环境资源</span><br><span class="line">Environment::terminateEnvironment(ev);</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linux"><a class="markdownIt-Anchor" href="#linux"></a> Linux</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;occi.h&gt;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">using namespace oracle::occi;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">//初始化环境</span><br><span class="line">Environment *env = Environment::createEnvironment();</span><br><span class="line">if(env==NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;create Environment error&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//Connection *Environment::createConnection( </span><br><span class="line">    //const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br><span class="line">string user=&quot;scott&quot;;</span><br><span class="line">string passwd=&quot;tiger&quot;;</span><br><span class="line">string connstr=&quot;192.168.10.145:1521/orcl&quot;;</span><br><span class="line">Connection *conn = env-&gt;createConnection(user, passwd, connstr);</span><br><span class="line">if(conn==NULL)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt;&quot;connect database error&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">cout &lt;&lt; &quot;connect database OK!&quot; &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">Statement *stmt = NULL;</span><br><span class="line">string sql = &quot;insert into dept values(11, &apos;training&apos;, &apos;changping&apos;)&quot;;</span><br><span class="line">//创建Statement对象</span><br><span class="line">//第一种方法</span><br><span class="line">/*stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;execute();*/</span><br><span class="line"></span><br><span class="line">//第二种方法</span><br><span class="line">/*sql = &quot;insert into dept values(21, &apos;sport&apos;, &apos;JYL&apos;)&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement();</span><br><span class="line">stmt-&gt;setSQL(sql);</span><br><span class="line">stmt-&gt;execute();*/</span><br><span class="line"></span><br><span class="line">//第三种方法</span><br><span class="line">/*sql = &quot;insert into dept values(31, &apos;SALES&apos;, &apos;JYL&apos;)&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement();</span><br><span class="line">stmt-&gt;execute(sql);*/</span><br><span class="line"></span><br><span class="line">//第四种方法</span><br><span class="line">/*sql = &quot;insert into dept values(41, &apos;XIANGLIAO&apos;, &apos;JYL&apos;)&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement();</span><br><span class="line">int num = stmt-&gt;executeUpdate(sql);</span><br><span class="line">cout &lt;&lt; &quot;num==&quot; &lt;&lt; num &lt;&lt; endl;*/</span><br><span class="line"></span><br><span class="line">//第五种方法</span><br><span class="line">/*sql = &quot;insert into dept values(51, &apos;huoguo&apos;, &apos;JYL&apos;)&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">int num = stmt-&gt;executeUpdate();</span><br><span class="line">cout &lt;&lt; &quot;num==&quot; &lt;&lt; num &lt;&lt; endl;*/</span><br><span class="line"></span><br><span class="line">//第六种方法</span><br><span class="line">/*sql = &quot;insert into dept values(:1, :2, :3)&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(1, 61);</span><br><span class="line">stmt-&gt;setString(2, &quot;huajiao&quot;);</span><br><span class="line">stmt-&gt;setString(3, &quot;JYL_SC&quot;);</span><br><span class="line">stmt-&gt;executeUpdate();*/</span><br><span class="line"></span><br><span class="line">//执行delete操作</span><br><span class="line">/*sql = &quot;delete from dept where deptno=11&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;executeUpdate();*/</span><br><span class="line"></span><br><span class="line">//使用占位符的删除操作</span><br><span class="line">/*sql = &quot;delete from dept where deptno=:1&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(1, 21);</span><br><span class="line">stmt-&gt;executeUpdate();*/</span><br><span class="line"></span><br><span class="line">//执行update操作</span><br><span class="line">/*sql = &quot;update dept set dname=&apos;xxxxx&apos; where deptno=31&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;executeUpdate();*/</span><br><span class="line"></span><br><span class="line">//使用占位符的update操作</span><br><span class="line">/*sql = &quot;update dept set dname=&apos;yyyy&apos; where deptno=:1&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(1, 41);</span><br><span class="line">stmt-&gt;executeUpdate();*/</span><br><span class="line"></span><br><span class="line">//执行select查询</span><br><span class="line">/*sql = &quot;select * from dept&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);*/</span><br><span class="line"></span><br><span class="line">sql = &quot;select * from dept where deptno&gt;:1&quot;;</span><br><span class="line">stmt = conn-&gt;createStatement(sql);</span><br><span class="line">stmt-&gt;setInt(1, 30);</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line"></span><br><span class="line">//循环获取结果集的每一行记录的值</span><br><span class="line">while(rs-&gt;next())</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; rs-&gt;getInt(1) &lt;&lt; &quot; &quot; &lt;&lt; rs-&gt;getString(2) &lt;&lt; &quot; &quot; &lt;&lt; rs-&gt;getString(3) &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">//关闭结果集</span><br><span class="line">stmt-&gt;closeResultSet(rs);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//端口数据库连接</span><br><span class="line">env-&gt;terminateConnection(conn);</span><br><span class="line"></span><br><span class="line">//关闭环境</span><br><span class="line">Environment::terminateEnvironment(env);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;windows&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#windows&quot;&gt;&lt;/a&gt; windows&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>保存配置信息的几种方式</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/%E4%BF%9D%E5%AD%98%E9%85%8D%E7%BD%AE%E4%BF%A1%E6%81%AF%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/保存配置信息的几种方式/</id>
    <published>2022-06-05T11:23:18.000Z</published>
    <updated>2022-06-05T11:25:10.003Z</updated>
    
    <content type="html"><![CDATA[<h2 id="保存配置信息的几种方式"><a class="markdownIt-Anchor" href="#保存配置信息的几种方式"></a> 保存配置信息的几种方式:</h2><h3 id="1-配置文件"><a class="markdownIt-Anchor" href="#1-配置文件"></a> 1 配置文件:</h3><p>​1.1 用户自定义的格式:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">user:scott</span><br><span class="line">passwd:tiger</span><br><span class="line">SID:orcl</span><br><span class="line">socott|tiger|orcl</span><br></pre></td></tr></table></figure><p>​1.2 xml格式的配置文件<br>​1.3 json格式的配置文件</p><h3 id="2-将配置信息设置成环境变量"><a class="markdownIt-Anchor" href="#2-将配置信息设置成环境变量"></a> 2 将配置信息设置成环境变量</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">char *p = getenv(&quot;HOME&quot;);//获取环境变量的值</span><br></pre></td></tr></table></figure><h3 id="3-存到数据库表中"><a class="markdownIt-Anchor" href="#3-存到数据库表中"></a> 3 存到数据库表中</h3><p>将配置信息写入配置文件有什么好处?<br> 省去编译源代码的麻烦,只要修改配置文件之后重启服务即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;保存配置信息的几种方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#保存配置信息的几种方式&quot;&gt;&lt;/a&gt; 保存配置信息的几种方式:&lt;/h2&gt;
&lt;h3 id=&quot;1-配置文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>OCCI</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/05/OCCI/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/05/OCCI/</id>
    <published>2022-06-05T00:38:09.000Z</published>
    <updated>2022-06-05T11:22:19.063Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编写服务端程序"><a class="markdownIt-Anchor" href="#编写服务端程序"></a> 编写服务端程序</h3><p>服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,<br>可以使用map完成线程ID和TcpSocket的映射关系, map&lt;pthread_t, TcpSocket *&gt;m_listSocket;</p><p>线程的回调函数需要访问到服务端操作类的成员变量, 所以应该将回调函数设置为类的友元函数.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">auto it = m_socketList.find(threadId);----&gt;自动类型推导</span><br><span class="line">但是如果it是先定义后赋值不行:</span><br><span class="line">auto it;</span><br><span class="line">it = m_socketList.find(threadId);</span><br></pre></td></tr></table></figure><p>在使用SHA1进行加密的时候, 函数参数是什么类型, 就提供什么类型的数据, 否则可能会有问题.</p><h3 id="守护进程"><a class="markdownIt-Anchor" href="#守护进程"></a> 守护进程</h3><ol><li>守护进程特点</li></ol><blockquote><ul><li>后台服务进程</li><li>独立于控制终端</li><li>周期性执行某任务</li><li>不受用户登录注销影响</li><li>一般采用以d结尾的名字(服务)</li></ul></blockquote><ol start="2"><li><p>创建守护进程的流程</p><ul><li>创建子进程, 杀死父进程 - 必须的<ul><li>创建子进程: fork();</li><li>守护进程是怎么来的?<ul><li>有一个没有任何职务的进程才可以被加官进爵, 守护进程是一个会话<ul><li>范围: 进程 -&gt; 进程组 -&gt; 会话<ul><li>进程组中的组长: 默认是进程组中的第一个进程</li></ul></li></ul></li></ul></li><li>如何杀死父进程<ul><li>exit(0)</li><li>kill()</li><li>raise() -&gt; 自己给自己发信号</li><li>abort() -&gt; 给自己发送SIGABRT信号</li></ul></li></ul></li><li>子进程提升为会话 - 必须的<ul><li>setsid()</li><li>提升成功之后, 进程就脱离了终端</li></ul></li><li>修改工作目录 - 可选<ul><li>chdir();</li><li>/mnt/U盘1/app<ul><li>在当前目录/mnt/U盘1/下 执行 ./app, 进程的工作路径: /mnt/U盘1/</li></ul></li><li>将工作目录切换到一个不能被卸载的路径下就可以了<ul><li>chdir(&quot;/home&quot;);</li></ul></li></ul></li><li>修改掩码 - 可选<ul><li>umask();</li></ul></li><li>关闭/重定向文件描述法 - 可选<ul><li>标准输入 -&gt; 0</li><li>标准输出 -&gt; 1</li><li>标准错误 -&gt; 2</li><li>如果的重定向, 对应的位置: /dev/null<ul><li>/dev/null是一个黑洞文件,不管放什么数据进去,文件大小都是0</li><li>重定向的目的: 排除干扰</li></ul></li></ul></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">int devFd = open(&quot;/dev/null&quot;, O_RDWR);</span><br><span class="line">int dup2(int oldfd, int newfd);</span><br><span class="line">dup2(devFd, 0);</span><br><span class="line">newfd 不管之前指向哪一个文件, 现在指向oldfd</span><br></pre></td></tr></table></figure><ul><li>核心处理动作 -&gt; 周期性的执行某些操作 - 必须</li><li>关闭守护进程 -&gt; 使用shell脚本管理 - 可选</li></ul></li></ol><h2 id="occi"><a class="markdownIt-Anchor" href="#occi"></a> OCCI</h2><blockquote><p>Oracle C<ins>调用接口 – OCCI 即 Oracle C</ins> Call Interface<br>OCCI 是Oracle 的C++ API, 允许你使用面向对象的特性、本地类、C++语言的方法来访问Oracle数据库</p></blockquote><h3 id="occi-介绍"><a class="markdownIt-Anchor" href="#occi-介绍"></a> OCCI 介绍</h3><ol><li><p>优势</p><blockquote><ol><li>基于标准C++和面向对象的设计；</li><li>效率较高；</li><li>适合开发C/S模式的程序，软件中间层；</li></ol></blockquote></li><li><p>特性</p><blockquote><ol><li>完整支持SQL/PLSQL</li><li>为不断增长的用户和请求提供了弹性选项</li><li>为使用用户自定义类型，如C中的类，提供了无缝接口</li><li>支持所有的Oracle数据类型以及LOB types（大对象）</li><li>可以访问数据库元数据</li></ol></blockquote></li></ol><p>OCCI 头文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;occi.h&gt; -- 程序中只需要包含这一个头文件</span><br><span class="line">#include &lt;occiCommon.h&gt;</span><br><span class="line">#include &lt;occiControl.h&gt;</span><br><span class="line">#include &lt;occiData.h&gt;</span><br><span class="line">#include &lt;occiObjects.h&gt;</span><br></pre></td></tr></table></figure><ol start="4"><li>OCCI 库</li></ol><ul><li><p>Windows</p><ul><li>oraocci11.lib/ oraocci11d.lib</li><li>oraocci11.dll/ oraocci11d.dll</li></ul></li><li><p>Linux</p><ul><li><a href="http://libnnz11.so" target="_blank" rel="noopener">libnnz11.so</a></li><li><a href="http://libocci.so" target="_blank" rel="noopener">libocci.so</a></li><li><a href="http://libclntsh.so" target="_blank" rel="noopener">libclntsh.so</a></li></ul></li></ul><p>linux下的环境配置-----root用户下进行配置</p><ul><li>将oracle_client_11gR2.tar.gz文件上传值linux操作系统的/opt目录下</li><li>执行tar -zxvf oracle_client_11gR2.tar.gz解压至当前目录下</li><li>进入到刚刚解压的目录, 打开&lt;&lt;Hi-看我,<a href="http://xn--wnuv08b.sh" target="_blank" rel="noopener">看我.sh</a>&gt;&gt;</li><li>将文件中的export导出的环境变量拷贝到root用户的.bashrc文件中<ul><li>注意: 若解压的目录不是/opt, 环境变量中的路径需要修改</li></ul></li><li>执行. .bashrc或者source .bashrc 或者退出再次登录使配置的环境变量生效<ul><li>可以执行echo $OCCI_HOME进行查看, 若看到内容则设置成功</li></ul></li><li>切换到/opt/instantclient_11_2/network/admin目录下<ul><li>打开tnsnames.ora文件, 修改其中的HOST部分, 将IP修改成实际的oracle服务的IP地址</li></ul></li><li>occi.cpp测试代码上传到root用户下<ul><li>然后执行: g++ -o a.out occi.cpp -locci -lclntsh, 编译通过表明设置的没有问题.</li><li>若执行报错, 查看一下代码中的oracle的用户名和密码是否正确.</li></ul></li></ul><p>常见的几个环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">PATH:命令或者可执行程序搜索的路径</span><br><span class="line"></span><br><span class="line">C_INCLUDE_PATH:gcc编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">CPLUS_INCLUDE_PATH: g++编译器查找头文件的路径</span><br><span class="line"></span><br><span class="line">LD_LIBRARY_PATH:查找动态链接库的路径</span><br><span class="line"></span><br><span class="line">LIBRARY_PATH: 查找静态库的路径</span><br><span class="line"></span><br><span class="line">若编译的时候使用静态库文件:</span><br><span class="line">则: gcc foo.c -L /home/itcast/lib -static -lfoo -o foo</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">oracle用户安装了oracle服务系统, 本身就有oracle编程需要的库文件和头文件:</span><br><span class="line">&gt; export OCCI_HOME=/u01/app/oracle/product/11.2.0/db_1</span><br><span class="line">&gt; export OCCI_INCLUDE_DIR=$OCCI_HOME/rdbms/public</span><br><span class="line">&gt; export OCCI_LIBRARY_PATH=$OCCI_HOME/lib</span><br><span class="line">&gt; export LD_LIBRARY_PATH=$$LD_LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的库目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export LIBRARY_PATH=$$LIBRARY_PATH:$OCCI_LIBRARY_PATH</span><br><span class="line">&gt;</span><br><span class="line">&gt; 程序编译时搜索的头文件目录</span><br><span class="line">&gt;</span><br><span class="line">&gt; export CPLUS_INCLUDE_PATH=$$CPLUS_INCLUDE_PATH:$OCCI_INCLUDE_DIR</span><br><span class="line">&gt;</span><br><span class="line">&gt; 上面的环境变量中OCCI_HOME和OCCI_INCLUDE_DIR与在root中的配置不同, 其余相同</span><br></pre></td></tr></table></figure><h2 id="occi使用"><a class="markdownIt-Anchor" href="#occi使用"></a> OCCI使用</h2><h3 id="初始化-environment-类"><a class="markdownIt-Anchor" href="#初始化-environment-类"></a> 初始化 - Environment 类</h3><blockquote><p>OCCI通过创建一个Environment的对象完成初始化工作。<br>可以通过Environment创建数据库连接，从而进行其它的操作<br>要创建Environment，应该调用Environment类的静态方法createEnvironment()</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 环境初始化</span><br><span class="line">Environment* env = Environment::createEnvironment();</span><br><span class="line">// 关闭, 释放资源</span><br><span class="line">Environment::terminateEnvironment(env);</span><br></pre></td></tr></table></figure><h3 id="连接数据库-connection-类"><a class="markdownIt-Anchor" href="#连接数据库-connection-类"></a> 连接数据库 - Connection 类</h3><blockquote><p>连接数据库通过Connection类的对象实例实现</p><p>调用Environment类的createConnection()方法可以创建一个Connection对象；</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">// 函数原型:</span><br><span class="line">Connection *Environment::createConnection(</span><br><span class="line">const string &amp;userName,const string &amp;password, const string &amp;connectString );</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 函数调用</span><br><span class="line">const string userName = &quot;scott&quot;; // 用户名</span><br><span class="line">const string passwd = &quot;tiger&quot;; // 密码</span><br><span class="line">const string connstr = &quot;192.168.247.129:1521/orcl&quot;; // 数据库连接串</span><br><span class="line">Connection* conn = env-&gt;createConnection(userName, passwd, connstr);</span><br></pre></td></tr></table></figure><blockquote><p>使用Environment::terminateConnection()断开连接</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 断开连接</span><br><span class="line">env-&gt;terminateConnection(conn);</span><br></pre></td></tr></table></figure><h3 id="执行sql"><a class="markdownIt-Anchor" href="#执行sql"></a> 执行SQL</h3><blockquote><p>Statement 类用于执行SQL语句,并获取返回结果。<br>ResultSet 类用于处理SELECT 查询的结果。<br>对于所有类型的数据的绑定或者获取，OCCI都提供了统一的方法<br>setXXX 方法用于Statement<br>getXXX 方法用于Statement &amp; ResultSet<br>OCCI会自动处理类型之间的转换。<br>使用方法：<br>使用Connection::createStatement()创建Statement对象, 指定 SQL 命令(DDL/DML/query)作为参数</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">// 操作函数</span><br><span class="line">Connection::createStatement(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::setSQL(string &amp;sql);</span><br><span class="line"></span><br><span class="line">Statement::execute(string &amp;sql); // can be used for any SQL, returns status</span><br><span class="line"></span><br><span class="line">Statement::executeUpdate(string &amp;sql); // returns Insert/Update/Delete count</span><br><span class="line"></span><br><span class="line">Statement::executeQuery(string &amp;sql); // returns ResultSet（结果集）</span><br></pre></td></tr></table></figure><blockquote><p>使用 setXXX 方法传递要绑定用于输入的值<br>使用合适的execute方法执行SQL<br>对于SELECT 查询, 使用ResultSet 对象处理返回结果</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">// 插入操作</span><br><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Dept(Deptno,Dname, Loc) values (1,</span><br><span class="line">‘ACCOUNTS’, ‘ZONE1’ ”);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br><span class="line">conn-&gt;terminateStatement(stmt); // 关闭查询, 释放资源</span><br></pre></td></tr></table></figure><blockquote><p>使用绑定参数的DML（数据操作语句）示例：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(“ insert into Emp(EmpNo,Ename) values(:1, :2) ”);</span><br><span class="line">//1 and 2 are bind placeholders</span><br><span class="line">int empno = 2;</span><br><span class="line">string empname = “JOHN W”;</span><br><span class="line">//first parameter is bind position, second is value</span><br><span class="line">stmt-&gt;setInt(1, empno);</span><br><span class="line">stmt-&gt;setString(2, empname);</span><br><span class="line">stmt-&gt;executeUpdate();</span><br></pre></td></tr></table></figure><blockquote><p>执行SELECT查询并处理结果：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">Statement *stmt = conn-&gt;createStatement(</span><br><span class="line">“select Empno, Ename, Sal from Emp where Hiredate &gt;= :1”);</span><br><span class="line">//automatically converted to Date</span><br><span class="line">stmt-&gt;setString(1, “01-JAN-1987”);</span><br><span class="line">//executeQuery returns a ResultSet</span><br><span class="line">ResultSet *rs = stmt-&gt;executeQuery();</span><br><span class="line">//ResultSet::next fetches rows and returns FALSE</span><br><span class="line">//when no more rows</span><br><span class="line">while (rs-&gt;next() == true)</span><br><span class="line">&#123;</span><br><span class="line">    //get values using the getXXX methods of ResultSet</span><br><span class="line">    empno = rs-&gt;getInt(1);</span><br><span class="line">    empname = rs-&gt;getString(2);</span><br><span class="line">    empsalary = rs-&gt;getFloat(3);</span><br><span class="line">&#125;</span><br><span class="line">stmt-&gt;closeResultSet(rs);//to free resources</span><br></pre></td></tr></table></figure><h2 id="window配置occi环境"><a class="markdownIt-Anchor" href="#window配置occi环境"></a> window配置occi环境</h2><p>包含头文件和库路径还有库名字</p><p><img src="/images/javawz/image-20220605190706609.png" alt="image-20220605190706609"></p><h3 id="1-linux如何查找动态库编译-运行"><a class="markdownIt-Anchor" href="#1-linux如何查找动态库编译-运行"></a> 1. Linux如何查找动态库(编译、运行) ?</h3><ol><li>编译和链接时，动态库的搜索路径顺序如下（注意不会递归性地在其子目录下搜索）：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">(1) gcc编译、链接命令中的-L选项；</span><br><span class="line">(2) gcc的环境变量的 LIBRARY_PATH（多个路径用冒号分割）；</span><br><span class="line">(3) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib。</span><br></pre></td></tr></table></figure><ol start="2"><li>运行时，动态库的搜索路径顺序如下：</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">(1) 编译目标代码时指定的动态库搜索路径：用选项-Wl,rpath和include指定的动态库的搜索路径，</span><br><span class="line">比如gcc -Wl,-rpath,include -L. -ldltest hello.c，在执行文件时会搜索路径`./include`;</span><br><span class="line"></span><br><span class="line">(2) 环境变量LD_LIBRARY_PATH（多个路径用冒号分割）;</span><br><span class="line"></span><br><span class="line">(3) 修改 /etc/ld.so.conf 配置文件指定的动态库绝对路径, /etc/ld.so.cache</span><br><span class="line">（通过sudo ldconfig生效，一般是非root用户时使用）;</span><br><span class="line"></span><br><span class="line">(4) gcc默认动态库目录：/lib:/usr/lib:usr/lib64:/usr/local/lib 等。</span><br></pre></td></tr></table></figure><h3 id="2-oracle解锁用户"><a class="markdownIt-Anchor" href="#2-oracle解锁用户"></a> 2. oracle解锁用户</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 解锁用户</span><br><span class="line">ALTER USER scott ACCOUNT UNLOCK;</span><br><span class="line">// 重写设置密码</span><br><span class="line">ALTER USER scott IDENTIFIED BY tiger;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编写服务端程序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编写服务端程序&quot;&gt;&lt;/a&gt; 编写服务端程序&lt;/h3&gt;
&lt;p&gt;服务端使用多线程处理多个客户端连接, 一个线程处理一个客户端连接, 一个客户端需要使用一个TcpSocket对象,
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>Shell脚本</title>
    <link href="https://xiaowuyoucy.github.io/2022/06/04/Shell%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2022/06/04/Shell脚本/</id>
    <published>2022-06-04T11:01:14.000Z</published>
    <updated>2022-06-05T00:37:49.592Z</updated>
    
    <content type="html"><![CDATA[<h2 id="shlle脚本介绍"><a class="markdownIt-Anchor" href="#shlle脚本介绍"></a> shlle脚本介绍</h2><ul><li><p>什么是shell脚本?</p><ul><li>一系列的shell命令的集合, 可以有函数, 条件判断/循环语句, 这样的一个文件叫做shell脚本</li></ul></li><li><p>基本格式?</p><ul><li>命名格式<ul><li>一般使用.sh为后缀命名文件 (这是一个约定, 不是必须的)</li></ul></li><li>书写格式</li></ul><p>cat /etc/shells  //查看解析器<br>echo $SHELL //查看当前默认的解析器</p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># - 注释</span><br><span class="line"></span><br><span class="line"># 第一行的内容</span><br><span class="line">#! /bin/bash - 解析当前脚本文件使用的命令解析器</span><br><span class="line">#! /bin/sh</span><br><span class="line">bourne shell -&gt;sh -&gt; unix</span><br><span class="line">bourne again shell -&gt; bash</span><br><span class="line"></span><br><span class="line"># 第二行开始</span><br><span class="line">shell命令 1</span><br><span class="line">shell命令 2</span><br><span class="line">shell命令 3</span><br><span class="line">......</span><br></pre></td></tr></table></figure><h3 id="执行脚本"><a class="markdownIt-Anchor" href="#执行脚本"></a> 执行脚本</h3><p>脚本创建出来之后是一个普通文件 -&gt; 没有执行权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod u+x xxx.sh</span><br><span class="line">./xxx.sh -&gt; 最常用的方式</span><br><span class="line">sh xxx.sh</span><br></pre></td></tr></table></figure><h3 id="shell中的变量"><a class="markdownIt-Anchor" href="#shell中的变量"></a> shell中的变量</h3><ol><li>如何定义变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># c</span><br><span class="line">int a;</span><br><span class="line">int number = 9;</span><br><span class="line"># shell - 变量没有数据类型, 新变量定义必须初始化</span><br><span class="line">value=123</span><br><span class="line">value1=&quot;123&quot;</span><br><span class="line">value1=&quot;hello,world&quot;</span><br><span class="line">赋值的时候=前后不能有空格</span><br></pre></td></tr></table></figure><ol start="2"><li>位置变量 - 执行shell脚本时候, 传递到内部的参数</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$0 - 脚本文件的名字</span><br><span class="line">$1 - 第一个参数</span><br><span class="line">$2 - 第二个参数</span><br><span class="line">$3 - 第三参数</span><br><span class="line">...</span><br><span class="line">$n - 第n个参数</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo $0</span><br><span class="line">echo $1</span><br><span class="line">echo $2</span><br><span class="line">echo $3</span><br><span class="line">echo $4</span><br><span class="line">echo $5</span><br><span class="line">echo $6</span><br><span class="line"># 执行脚本</span><br><span class="line">./test.sh 1 2 3 4 a b c d e f</span><br><span class="line"># 输出结果</span><br><span class="line">./test.sh</span><br><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><ol start="3"><li>特殊变量</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">$#: 表示参数的个数</span><br><span class="line">$@: 表示全部的参数</span><br><span class="line"></span><br><span class="line">$$ : 当前进程的PID</span><br><span class="line">$?: 程序执行完成之后的返回值</span><br><span class="line"></span><br><span class="line">4. 取普通变量的值</span><br><span class="line"></span><br><span class="line">第一种方式: $变量名</span><br><span class="line">$PATH</span><br><span class="line">$value</span><br><span class="line"></span><br><span class="line">第二种方式: $&#123;变量名&#125;</span><br><span class="line">$&#123;PATH&#125;</span><br><span class="line">$&#123;value&#125;</span><br><span class="line"></span><br><span class="line">5. 取命令执行之后的得到的值</span><br><span class="line">第一种方式</span><br><span class="line">value=$(shell命令)</span><br><span class="line"></span><br><span class="line">第二种方式:</span><br><span class="line">value=`shell命令`</span><br></pre></td></tr></table></figure><h5 id="使用和的区别对于中的变量会直接展开-而对于当做普通字符串对待"><a class="markdownIt-Anchor" href="#使用和的区别对于中的变量会直接展开-而对于当做普通字符串对待"></a> <code>使用&quot;&quot;和''的区别:对于&quot;&quot;中的变量会直接展开, 而对于''当做普通字符串对待</code></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">例如: echo &quot;$HOME&quot;  和echo &apos;$HOME&apos;</span><br></pre></td></tr></table></figure><h3 id="条件判断语法-if"><a class="markdownIt-Anchor" href="#条件判断语法-if"></a> 条件判断语法 - if</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 条件判断语句和[ 判断语句 ]左右必须要有空格间隔</span><br><span class="line">if[ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br><span class="line"># 或者</span><br><span class="line">if[ 判断语句 ]</span><br><span class="line">then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">if [ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">elif [ 判断语句 ];then</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">else</span><br><span class="line">处理语句</span><br><span class="line">处理语句</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><ol><li>文件状态测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">-b filename 当filename 存在并且是块文件时返回真(返回0)</span><br><span class="line">-c filename 当filename 存在并且是字符文件时返回真</span><br><span class="line">-d pathname 当pathname 存在并且是一个目录时返回真</span><br><span class="line">-e pathname 当由pathname 指定的文件或目录存在时返回真</span><br><span class="line">-f filename 当filename 存在并且是正规(普通)文件时返回真</span><br><span class="line">-g pathname 当由pathname 指定的文件或目录存在并且设置了SGID 位时返回真</span><br><span class="line">-h/-L filename当filename 存在并且是符号链接文件时返回真 (或 filename)</span><br><span class="line">-k pathname 当由pathname 指定的文件或目录存在并且设置了&quot;粘滞&quot;位时返回真</span><br><span class="line">-p filename 当filename 存在并且是命名管道时返回真</span><br><span class="line">-r pathname 当由pathname 指定的文件或目录存在并且可读时返回真</span><br><span class="line">-s filename 当filename 存在并且文件大小大于0 时返回真</span><br><span class="line">-S filename 当filename 存在并且是socket 时返回真</span><br><span class="line">-t fd 当fd 是与终端设备相关联的文件描述符时返回真</span><br><span class="line">-u pathname 当由pathname 指定的文件或目录存在并且设置了SUID 位时返回真</span><br><span class="line">-w pathname 当由pathname 指定的文件或目录存在并且可写时返回真</span><br><span class="line">-x pathname 当由pathname 指定的文件或目录存在并且可执行时返回真</span><br><span class="line">-O pathname</span><br><span class="line">当由pathname 存在并且被当前进程的有效用户id 的用户拥有时返回真(字母O 大写)</span><br><span class="line">-G pathname 当由pathname 存在并且属于当前进程的有效用户id 的用户的用户组时返回真</span><br><span class="line">file1 -nt file2 file1 比file2 新时返回真</span><br><span class="line">file1 -ot file2 file1 比file2 旧时返回真</span><br><span class="line">f1 -ef f2 files f1 and f2 are hard links to the same file</span><br></pre></td></tr></table></figure><ol start="2"><li>常见字符串测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">-z string 字符串string 为空串(长度为0)时返回真</span><br><span class="line">-n string 字符串string 为非空串时返回真</span><br><span class="line">str1 = str2 字符串str1 和字符串str2 相等时返回真</span><br><span class="line">str1 == str2 同 =</span><br><span class="line">str1 != str2 字符串str1 和字符串str2 不相等时返回真</span><br><span class="line">str1 &lt; str2 按字典顺序排序，字符串str1 在字符串str2 之前</span><br><span class="line">str1 &gt; str2 按字典顺序排序，字符串str1 在字符串str2 之后</span><br></pre></td></tr></table></figure><ol start="3"><li>常见数值测试</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">nt1 -eq int2 如果int1 等于int2，则返回真</span><br><span class="line">int1 -ne int2 如果int1 不等于int2，则返回真</span><br><span class="line">int1 -lt int2 如果int1 小于int2，则返回真</span><br><span class="line">int1 -le int2 如果int1 小于等于int2，则返回真</span><br><span class="line">int1 -gt int2 如果int1 大于int2，则返回真</span><br><span class="line">int1 -ge int2 如果int1 大于等于int2，则返回真</span><br></pre></td></tr></table></figure><ol start="4"><li>测试时使用的逻辑操作符</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-a 逻辑与，操作符两边均为真，结果为真，否则为假。</span><br><span class="line">-o 逻辑或，操作符两边一边为真，结果为真，否则为假。</span><br><span class="line">! 逻辑否，条件为假，结果为真。</span><br></pre></td></tr></table></figure><h3 id="循环控制"><a class="markdownIt-Anchor" href="#循环控制"></a> 循环控制</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">循环:</span><br><span class="line">    for语句和while</span><br><span class="line">    例1:</span><br><span class="line">    for var in apple pear banana</span><br><span class="line">    do</span><br><span class="line">    echo $var</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    例2:打印当前所有的文件</span><br><span class="line">    for file in `ls`</span><br><span class="line">    do</span><br><span class="line">    echo $file</span><br><span class="line">    done</span><br><span class="line">    </span><br><span class="line">    例3:求1-100的和</span><br><span class="line">    sum=0</span><br><span class="line">    for i in &#123;1..100&#125;</span><br><span class="line">    do</span><br><span class="line">    sum=$[$sum+$i]</span><br><span class="line">    done</span><br><span class="line">    echo &quot;sum==[$sum]&quot;</span><br><span class="line">    如果一个文件名字为: file.xxx, 想去掉~~得到file可以: basename file.xxx &quot;.xxx&quot;</span><br><span class="line">    </span><br><span class="line">    使用这种方法可以获得文件名字去掉扩展名后的名字: 如: basename test.sh .sh</span><br><span class="line">    案例: 某个目录下有a.bak b.bak c.bak d.bak, 要求把扩展名去掉, 变成a b c d</span><br><span class="line">    mv a.bak $(basename a.bak .bak)</span><br><span class="line">    </span><br><span class="line">    while的用法:</span><br><span class="line">    案例: 求1-10的和</span><br><span class="line">    sum=0</span><br><span class="line">    i=0</span><br><span class="line">    while [ $i -le 10 ]</span><br><span class="line">    do</span><br><span class="line">    sum=$[$sum+$i]</span><br><span class="line">    i=$[$i+1]</span><br><span class="line">    done</span><br><span class="line">    echo &quot;sum==[$sum]&quot;</span><br></pre></td></tr></table></figure><p>整数的运算要用$[]括起来</p><h3 id="awk介绍"><a class="markdownIt-Anchor" href="#awk介绍"></a> awk介绍</h3><p>awk 可以将文件拆分成功若干行, 根据指定的分隔符, 再将每一行拆分成若干列, 默认按照空格或tab进行拆分</p><ol><li>基本语法格式</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk 参数 &apos;条件&#123;处理动作&#125;&apos; 操作的文件或数据</span><br><span class="line">awk 参数 &apos;/正则表达式&#123;处理动作&#125;&apos; 操作的文件或数据</span><br></pre></td></tr></table></figure><ol start="2"><li>指定分隔符的参数: -F<ul><li>-F分隔符</li><li>如果不指定分隔符, 默认是按照空格或者tab进行拆分</li></ul></li><li>如何使用变量取出某一列?<ul><li>$0 - 当前行</li><li>$1 - 拆分的第一列</li><li>$2 - 拆分的第二列</li><li>$3 - 拆分的第三列</li><li>…</li><li>打印某一列的值<ul><li>print $n</li></ul></li></ul></li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">awk -F &apos;:&apos; &apos;&#123;print $0&#125;&apos; /etc/passwd</span><br><span class="line">代表/etc/passwd文件中的内容以:分割,然后打印当前行数据</span><br></pre></td></tr></table></figure><h3 id="使用shell脚本结束某个进程"><a class="markdownIt-Anchor" href="#使用shell脚本结束某个进程"></a> 使用shell脚本结束某个进程</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#! /bin/bash</span><br><span class="line">PID=`ps -ef|grep xxx|grep -v grep|awk &apos;&#123;print $2&#125;&apos;`</span><br><span class="line">#grep -v grep 代表去除最后的grep</span><br><span class="line"></span><br><span class="line">#如果PID不为空 则结束进程</span><br><span class="line">if [-n $PID]</span><br><span class="line">then</span><br><span class="line">kill -9 $PID</span><br><span class="line">else</span><br><span class="line">echo &quot;没有可结束的进程&quot;</span><br><span class="line">fi</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;shlle脚本介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#shlle脚本介绍&quot;&gt;&lt;/a&gt; shlle脚本介绍&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;什么是shell脚本?&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一系列的shell命令的集合, 
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>服务端类实现</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/服务端类实现/</id>
    <published>2022-05-31T00:20:21.000Z</published>
    <updated>2022-05-31T00:31:55.526Z</updated>
    
    <content type="html"><![CDATA[<h3 id="serveroperationh"><a class="markdownIt-Anchor" href="#serveroperationh"></a> ServerOperation.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SecKeyShm.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpServer.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"OCCIOP.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span>serverID[<span class="number">12</span>];<span class="comment">// 服务器端编号</span></span><br><span class="line"><span class="keyword">char</span>dbUse[<span class="number">24</span>]; <span class="comment">// 数据库用户名</span></span><br><span class="line"><span class="keyword">char</span>dbPasswd[<span class="number">24</span>]; <span class="comment">// 数据库密码</span></span><br><span class="line"><span class="keyword">char</span>dbSID[<span class="number">24</span>]; <span class="comment">// 数据库sid</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> sPort;<span class="comment">// 服务器绑定的端口</span></span><br><span class="line"><span class="keyword">int</span>maxnode;<span class="comment">// 共享内存最大网点树 客户端默认1个</span></span><br><span class="line"><span class="keyword">int</span> shmkey;<span class="comment">// 共享内存keyid 创建共享内存时使用 </span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ServerOperation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ServerOperation(ServerInfo *info);</span><br><span class="line">~ServerOperation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 服务器开始工作</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">startWork</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥协商</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyAgree</span><span class="params">(RequestMsg* reqmsg, <span class="keyword">char</span>** outData, <span class="keyword">int</span>&amp; outLen)</span></span>;</span><br><span class="line"><span class="comment">// 秘钥校验</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyCheck</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥注销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyRevoke</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥查看</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyView</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">friend</span> <span class="keyword">void</span>* <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span>;</span><br><span class="line"><span class="comment">// 线程回调也可使用静态成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span>* <span class="title">wrokingHard</span><span class="params">(<span class="keyword">void</span>* arg)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title">catchSignal</span><span class="params">(<span class="keyword">int</span> num)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span>* randBuf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ServerInfo m_info;</span><br><span class="line">SecKeyShm* m_shm;</span><br><span class="line">TcpServer m_server;</span><br><span class="line">TcpSocket* m_client;</span><br><span class="line">OCCIOP m_occi;</span><br><span class="line"><span class="built_in">std</span>::<span class="built_in">map</span>&lt;<span class="keyword">pthread_t</span>, TcpSocket*&gt; m_listSocket;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">bool</span> m_stop;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span>;</span><br></pre></td></tr></table></figure><h3 id="serveroperationcpp"><a class="markdownIt-Anchor" href="#serveroperationcpp"></a> ServerOperation.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ServerOperation.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RespondFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/hmac.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sha.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;signal.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> ServerOperation::m_stop = <span class="literal">false</span>;<span class="comment">// 静态变量初始化</span></span><br><span class="line"></span><br><span class="line">ServerOperation::ServerOperation(ServerInfo * info)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_info, info, <span class="keyword">sizeof</span>(ServerInfo));</span><br><span class="line">m_shm = <span class="keyword">new</span> SecKeyShm(m_info.shmkey, m_info.maxnode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ServerOperation::~ServerOperation()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ServerOperation::startWork()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//socket-setsockopt-bind-listen</span></span><br><span class="line">m_server.setListen(m_info.sPort);</span><br><span class="line"><span class="keyword">pthread_t</span> threadID;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//accept新的客户端连接</span></span><br><span class="line">m_client = m_server.acceptConn();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个子线程</span></span><br><span class="line">pthread_create(&amp;threadID, <span class="literal">NULL</span>, working, <span class="keyword">this</span>);</span><br><span class="line"><span class="comment">//设置子线程为分离属性</span></span><br><span class="line">pthread_detach(threadID);</span><br><span class="line">m_listSocket.insert(make_pair(threadID, m_client));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ServerOperation::secKeyAgree(RequestMsg * reqMsg, <span class="keyword">char</span> ** outData, <span class="keyword">int</span> &amp; outLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//验证消息认证码</span></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md[SHA256_DIGEST_LENGTH];</span><br><span class="line"><span class="keyword">char</span> authCode[SHA256_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"></span><br><span class="line"><span class="built_in">memset</span>(key, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line"><span class="built_in">sprintf</span>(key, <span class="string">"@%s+%s@"</span>, reqMsg-&gt;serverId, reqMsg-&gt;clientId);</span><br><span class="line">HMAC(EVP_sha256(), key, <span class="built_in">strlen</span>(key), (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)reqMsg-&gt;r1, <span class="built_in">strlen</span>(reqMsg-&gt;r1), md, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHA256_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;authCode[<span class="number">2</span> * i], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//将生成的消息认证码和客户端的r1的消息认证做比对</span></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(authCode, reqMsg-&gt;authCode) != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"消息认证码错误"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//生成随机字符串r2</span></span><br><span class="line">RespondMsg rspMsg;</span><br><span class="line"><span class="built_in">memset</span>(&amp;rspMsg, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(rspMsg));</span><br><span class="line">getRandString(<span class="keyword">sizeof</span>(rspMsg.r2), rspMsg.r2);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将随机字符串r2和r1进行拼接, 然后生成秘钥</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> md[SHA_DIGEST_LENGTH];</span><br><span class="line"><span class="keyword">char</span> seckey[SHA_DIGEST_LENGTH * <span class="number">2</span> + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(seckey, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(seckey));</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"%s%s"</span>, reqMsg-&gt;r1, rspMsg.r2);</span><br><span class="line">SHA1((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)buf), md);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;SHA_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;seckey[i * <span class="number">2</span>], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给应答结构体赋值</span></span><br><span class="line">rspMsg.seckeyid = <span class="number">1</span>;  <span class="comment">//获取秘钥ID</span></span><br><span class="line">rspMsg.rv = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(rspMsg.serverId, m_info.serverID);</span><br><span class="line"><span class="built_in">strcpy</span>(rspMsg.clientId, reqMsg-&gt;clientId);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将要发送给客户端的应答结构体进行编码</span></span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line"><span class="keyword">char</span> *sendData = <span class="literal">NULL</span>;</span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RespondFactory(&amp;rspMsg);</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">pCodec-&gt;msgEncode(&amp;sendData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送数据给客户端</span></span><br><span class="line"><span class="keyword">pthread_t</span> thread = pthread_self();</span><br><span class="line">TcpSocket* socket = m_listSocket[thread];</span><br><span class="line">socket-&gt;sendMsg(sendData, dataLen);</span><br><span class="line"><span class="built_in">free</span>(sendData);</span><br><span class="line"></span><br><span class="line"><span class="comment">//写秘钥信息到共享内存</span></span><br><span class="line">NodeSHMInfo node;</span><br><span class="line"><span class="built_in">memset</span>(&amp;node, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(NodeSHMInfo));</span><br><span class="line">node.status = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(node.seckey, seckey);</span><br><span class="line"><span class="built_in">strcpy</span>(node.clientID, rspMsg.clientId);</span><br><span class="line"><span class="built_in">strcpy</span>(node.serverID, m_info.serverID);</span><br><span class="line">node.seckeyID = rspMsg.seckeyid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将秘钥信息写入共享内存</span></span><br><span class="line">m_shm-&gt;shmWrite(&amp;node);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭连接</span></span><br><span class="line">socket-&gt;disConnect();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ServerOperation::getRandString(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = <span class="string">'Z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = <span class="string">'z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 友元函数, 可以在该友元函数中通过对应的类对象调用期私有成员函数或者私有变量</span></span><br><span class="line"><span class="comment">// 子线程 - 进行业务流程处理</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> * <span class="title">working</span><span class="params">(<span class="keyword">void</span> * arg)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//接收数据</span></span><br><span class="line"><span class="keyword">pthread_t</span> thread = pthread_self();</span><br><span class="line">ServerOperation *op = (ServerOperation *)arg;</span><br><span class="line">TcpSocket* socket = op-&gt;m_listSocket[thread];</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span> *inData;</span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line">socket-&gt;recvMsg(&amp;inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RequestFactory();</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">RequestMsg *pMsg = (RequestMsg *)pCodec-&gt;msgDecode(inData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="comment">//delete pCodec;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断clientID是否合法</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//判断客户端要请求什么服务</span></span><br><span class="line"><span class="keyword">char</span> *outData;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(pMsg-&gt;cmdType)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::NewOrUpdate:</span><br><span class="line">op-&gt;secKeyAgree(pMsg, &amp;outData, dataLen);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> RequestCodec::Check:</span><br><span class="line">op-&gt;secKeyCheck();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::Revoke:</span><br><span class="line">op-&gt;secKeyRevoke();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> RequestCodec::View:</span><br><span class="line">op-&gt;secKeyView();</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;serveroperationh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#serveroperationh&quot;&gt;&lt;/a&gt; ServerOperation.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端类实现</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%AE%A2%E6%88%B7%E7%AB%AF%E7%B1%BB%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/客户端类实现/</id>
    <published>2022-05-31T00:16:28.000Z</published>
    <updated>2022-05-31T00:19:16.555Z</updated>
    
    <content type="html"><![CDATA[<h3 id="clientoperationh"><a class="markdownIt-Anchor" href="#clientoperationh"></a> ClientOperation.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SecKeyShm.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientInfo</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> clinetID[<span class="number">12</span>];<span class="comment">// 客户端ID</span></span><br><span class="line"><span class="keyword">char</span> serverID[<span class="number">12</span>];<span class="comment">// 服务器ID</span></span><br><span class="line"><span class="comment">//char authCode[65];// 消息认证码</span></span><br><span class="line"><span class="keyword">char</span> serverIP[<span class="number">32</span>];<span class="comment">// 服务器IP</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> serverPort;<span class="comment">// 服务器端口</span></span><br><span class="line"><span class="keyword">int</span> maxNode;<span class="comment">// 共享内存节点个数</span></span><br><span class="line"><span class="keyword">int</span> shmKey;<span class="comment">// 共享内存的Key</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ClientOperation</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ClientOperation(ClientInfo *info);</span><br><span class="line">~ClientOperation();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 秘钥协商</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyAgree</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 秘钥校验</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyCheck</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 秘钥注销</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyRevoke</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"><span class="comment">// 秘钥查看</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">secKeyView</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span>* randBuf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">ClientInfo m_info;</span><br><span class="line">TcpSocket m_socket;</span><br><span class="line">SecKeyShm* m_shm;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="clientoperationcpp"><a class="markdownIt-Anchor" href="#clientoperationcpp"></a> ClientOperation.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ClientOperation.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/hmac.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/sha.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CodecFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RespondFactory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">ClientOperation::ClientOperation(ClientInfo * info)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_info, info, <span class="keyword">sizeof</span>(ClientInfo));</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建共享内存</span></span><br><span class="line">m_shm = <span class="keyword">new</span> SecKeyShm(m_info.shmKey, m_info.maxNode);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ClientOperation::~ClientOperation()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ClientOperation::secKeyAgree()</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//准备请求数据 </span></span><br><span class="line">RequestMsg req;</span><br><span class="line"><span class="built_in">memset</span>(&amp;req, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(RequestMsg));</span><br><span class="line">req.cmdType = RequestCodec::NewOrUpdate;</span><br><span class="line"><span class="built_in">strcpy</span>(req.clientId, m_info.clinetID);</span><br><span class="line"><span class="built_in">strcpy</span>(req.serverId, m_info.serverID);</span><br><span class="line">getRandString(<span class="keyword">sizeof</span>(req.r1), req.r1);</span><br><span class="line"><span class="comment">//使用hmac函数生成哈希值----消息认证码</span></span><br><span class="line"><span class="keyword">char</span> key[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> len;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md[SHA256_DIGEST_LENGTH];</span><br><span class="line"><span class="built_in">memset</span>(key, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(key));</span><br><span class="line"><span class="built_in">sprintf</span>(key, <span class="string">"@%s+%s@"</span>, req.serverId, req.clientId);</span><br><span class="line">HMAC(EVP_sha256(), key, <span class="built_in">strlen</span>(key), (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)req.r1, <span class="built_in">strlen</span>(req.r1), md, &amp;len);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; SHA256_DIGEST_LENGTH; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;req.authCode[<span class="number">2</span> * i], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"key:"</span> &lt;&lt; key &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1:"</span> &lt;&lt; req.r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"authCode:"</span> &lt;&lt; req.authCode &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//将要发送的数据进行编码</span></span><br><span class="line"><span class="keyword">int</span> dataLen;</span><br><span class="line"><span class="keyword">char</span> *outData = <span class="literal">NULL</span>;</span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RequestFactory(&amp;req);</span><br><span class="line">Codec *pCodec = factory-&gt;createCodec();</span><br><span class="line">pCodec-&gt;msgEncode(&amp;outData, dataLen);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接服务端</span></span><br><span class="line">m_socket.connectToHost(m_info.serverIP, m_info.serverPort);</span><br><span class="line"></span><br><span class="line"><span class="comment">//发送请求数据给服务端</span></span><br><span class="line">m_socket.sendMsg(outData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//等待接收服务端的应答</span></span><br><span class="line"><span class="keyword">char</span> *inData;</span><br><span class="line">m_socket.recvMsg(&amp;inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码</span></span><br><span class="line">factory = <span class="keyword">new</span> RespondFactory();</span><br><span class="line">pCodec = factory-&gt;createCodec();</span><br><span class="line">RespondMsg *pMsg = (RespondMsg *)pCodec-&gt;msgDecode(inData, dataLen);</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断服务端是否成功</span></span><br><span class="line"><span class="keyword">if</span> (pMsg-&gt;rv == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥协商失败"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥协商成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将服务端的r2和客户端的r1拼接生成秘钥</span></span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md1[SHA_DIGEST_LENGTH];</span><br><span class="line"><span class="built_in">memset</span>(md1, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(md1));</span><br><span class="line"><span class="keyword">char</span> seckey[SHA_DIGEST_LENGTH*<span class="number">2</span>+<span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"><span class="built_in">memset</span>(seckey, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(seckey));</span><br><span class="line"><span class="built_in">sprintf</span>(buf, <span class="string">"%s%s"</span>, req.r1, pMsg-&gt;r2);</span><br><span class="line">SHA1((<span class="keyword">unsigned</span> <span class="keyword">char</span> *)buf, <span class="built_in">strlen</span>((<span class="keyword">char</span> *)buf), md1);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;SHA_DIGEST_LENGTH; i++)</span><br><span class="line">&#123; </span><br><span class="line"><span class="built_in">sprintf</span>(&amp;seckey[i*<span class="number">2</span>], <span class="string">"%02x"</span>, md1[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"秘钥: "</span> &lt;&lt; seckey &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//给秘钥结构体赋值</span></span><br><span class="line">NodeSHMInfo node;</span><br><span class="line"><span class="built_in">memset</span>(&amp;node, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(NodeSHMInfo));</span><br><span class="line">node.status = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(node.seckey, seckey);</span><br><span class="line"><span class="built_in">strcpy</span>(node.clientID, m_info.clinetID);</span><br><span class="line"><span class="built_in">strcpy</span>(node.serverID, m_info.serverID);</span><br><span class="line">node.seckeyID = pMsg-&gt;seckeyid;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将秘钥信息写入共享内存</span></span><br><span class="line">m_shm-&gt;shmWrite(&amp;node);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭网络连接</span></span><br><span class="line">m_socket.disConnect();</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放资源</span></span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> pCodec;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// char randBuf[64]; , 参数 64, randBuf</span></span><br><span class="line"><span class="keyword">void</span> ClientOperation::getRandString(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len<span class="number">-1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">26</span> + <span class="string">'A'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">26</span> + <span class="string">'a'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;clientoperationh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#clientoperationh&quot;&gt;&lt;/a&gt; ClientOperation.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="多端安全协议传输平台" scheme="https://xiaowuyoucy.github.io/categories/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/"/>
    
    
  </entry>
  
  <entry>
    <title>哈希算法hmac的使用方法</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95hmac%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/哈希算法hmac的使用方法/</id>
    <published>2022-05-30T23:58:39.000Z</published>
    <updated>2022-05-31T00:08:23.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>HMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成<br>一个消息摘要作为输出。<br>Hash-based Message Authentication Code - HMAC</p></blockquote><h3 id="需要包含头文件"><a class="markdownIt-Anchor" href="#需要包含头文件"></a> 需要包含头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hmac.h</span><br></pre></td></tr></table></figure><ul><li>第一种方式</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">// 适合处理少量数据</span><br><span class="line">unsigned char *HMAC(const EVP_MD *evp_md, const void *key, int key_len,</span><br><span class="line">const unsigned char *d, size_t n, unsigned char *md,</span><br><span class="line">unsigned int *md_len);</span><br><span class="line">- 参数evp_md:</span><br><span class="line">- EVP_md5()</span><br><span class="line">- EVP_sha1()</span><br><span class="line">- EVP_sha224()</span><br><span class="line">- EVP_sha256()</span><br><span class="line">........</span><br><span class="line">- 参数key: 传入, 秘钥, 需要将其和原始数据组合进行哈希运算</span><br><span class="line">- 参数key_len: 秘钥的长度</span><br><span class="line">- 参数d: 原始数据</span><br><span class="line">- 参数n: 原始数据d的长度</span><br><span class="line">- 参数md: 传出, 保存的是生成的散列值</span><br><span class="line">- 参数md_len: 传出, md的长度</span><br></pre></td></tr></table></figure><p>evp_md 参数在evp.h头文件中记录着,使用什么加密方式可以去查</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># include &lt;openssl/evp.h&gt;</span><br></pre></td></tr></table></figure><ul><li>第二种方式:</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">// 适合处理数据量比较大的情况</span><br><span class="line">HMAC_CTX *HMAC_CTX_new(void);</span><br><span class="line">int HMAC_Init_ex(HMAC_CTX *ctx, const void *key, int len,</span><br><span class="line">const EVP_MD *md, ENGINE *impl)</span><br><span class="line">int HMAC_Init(HMAC_CTX *ctx, const void *key, int len,</span><br><span class="line">const EVP_MD *md))</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- key: 秘钥</span><br><span class="line">- len: 秘钥长度</span><br><span class="line">- md:</span><br><span class="line">- EVP_md5();</span><br><span class="line">- EVP_sha1();</span><br><span class="line">- EVP_sha256();</span><br><span class="line">- ...</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 添加数据</span><br><span class="line">int HMAC_Update(HMAC_CTX *ctx, const unsigned char *data,</span><br><span class="line">size_t len);</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- data: 原始数据</span><br><span class="line">- len: 原始数据长度</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 计算结果</span><br><span class="line">int HMAC_Final(HMAC_CTX *ctx, unsigned char *md,</span><br><span class="line">unsigned int *len);</span><br><span class="line">- ctx: 通过调用HMAC_CTX_new(void)得到的指针</span><br><span class="line">- md: 传出参数, 存储得到的散列值</span><br><span class="line">- len: 传出, md散列值的长度</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;HMAC是密钥相关的哈希运算消息认证码，HMAC运算利用哈希算法，以一个密钥和一个消息为输入，生成&lt;br&gt;
一个消息摘要作为输出。&lt;br&gt;
Hash-based Message Authentication Code - HMAC&lt;/p&gt;
&lt;/bl
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>生成随机字符串</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E7%94%9F%E6%88%90%E9%9A%8F%E6%9C%BA%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/生成随机字符串/</id>
    <published>2022-05-30T23:56:43.000Z</published>
    <updated>2022-05-30T23:57:19.485Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getRandString</span><span class="params">(<span class="keyword">int</span> len, <span class="keyword">char</span> * randBuf)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>;</span><br><span class="line"><span class="comment">// 设置随机种子</span></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"><span class="comment">// 随机字符串: A-Z, a-z, 0-9, 特殊字符(!@#$%^&amp;*()_+=)</span></span><br><span class="line"><span class="keyword">char</span> chars[] = <span class="string">"!@#$%^&amp;*()_+="</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len - <span class="number">1</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line">flag = rand() % <span class="number">4</span>;</span><br><span class="line"><span class="keyword">switch</span> (flag)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">randBuf[i] = <span class="string">'Z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">randBuf[i] = <span class="string">'z'</span> - rand() % <span class="number">26</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">randBuf[i] = rand() % <span class="number">10</span> + <span class="string">'0'</span>;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">randBuf[i] = chars[rand() % <span class="built_in">strlen</span>(chars)];</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">randBuf[len - <span class="number">1</span>] = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>VS2017编译linux程序时出错的解决办法</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/VS2017%E7%BC%96%E8%AF%91linux%E7%A8%8B%E5%BA%8F%E6%97%B6%E5%87%BA%E9%94%99%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/VS2017编译linux程序时出错的解决办法/</id>
    <published>2022-05-30T23:53:34.000Z</published>
    <updated>2022-05-30T23:55:01.661Z</updated>
    
    <content type="html"><![CDATA[<p>VS2017编译linux程序时，如果出错，一般会出现下面的错误提示信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">g++ exited with code 1, please see the Output Window - Build output for more details (NOTE:</span><br><span class="line">the build output verbosity might need to be changed in Tools Options to see more information in</span><br><span class="line">the Output Window).</span><br></pre></td></tr></table></figure><p>解决办法如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">VS2017 -&gt; 工具 -&gt; 选项 -&gt; 项目和解决方案 -&gt; 生成并运行，将“MSBuild项目生成输出详细级别”和“MSBuild项目</span><br><span class="line">生成日志文件详细级别”调整为“普通”，这样在编译linux程序时如果编译出错，可以看到详细的错误信息。</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220531075434776.png" alt="image-20220531075434776"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;VS2017编译linux程序时，如果出错，一般会出现下面的错误提示信息：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>秘钥协商服务整体流程描述</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E7%A7%98%E9%92%A5%E5%8D%8F%E5%95%86%E6%9C%8D%E5%8A%A1%E6%95%B4%E4%BD%93%E6%B5%81%E7%A8%8B%E6%8F%8F%E8%BF%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/秘钥协商服务整体流程描述/</id>
    <published>2022-05-30T23:32:56.000Z</published>
    <updated>2022-05-30T23:49:39.869Z</updated>
    
    <content type="html"><![CDATA[<p>关于共享内存:<br>使用共享内存的时候, 如果想记录共享内存的相关信息, 可以<br>在共享内存的头部来记录信息, 比如设计一个结构体</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">struct Head</span><br><span class="line">&#123;</span><br><span class="line">int total;//最多可以存放多少个</span><br><span class="line">int useNum;//当前可用的个数</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220531073654443.png" alt="image-20220531073654443"></p><h3 id="1秘钥协商的流程"><a class="markdownIt-Anchor" href="#1秘钥协商的流程"></a> 1.秘钥协商的流程</h3><ul><li>在秘钥协商客户端生成一随机字符串 - rand1</li><li>客户端将rand1发送给秘钥协商服务器</li><li>服务器接收客户端发送的rand1, 在服务器端生成一另外一个随机字符串rand2</li><li>服务器将rand1和rand2进行混合运算生成一个新的字符串 - seckey1<ul><li>通过哈希函数</li></ul></li><li>服务器将生成的rand2发送给客户端</li><li>客户端接收数据, 客户端有rand1和rand2<ul><li>通过哈希函数进行运算 - seckey2</li></ul></li><li>可以将seckey1和seckey2作为秘钥</li></ul><h3 id="2秘钥校验"><a class="markdownIt-Anchor" href="#2秘钥校验"></a> 2.秘钥校验</h3><ul><li>当秘钥协商成功之后, 需要再次校验客户端和服务器生成的秘钥是否相同<ul><li>如何校验:<ul><li>将秘钥进行哈希运算, 比较散列值</li></ul></li></ul></li></ul><h3 id="3秘钥注销"><a class="markdownIt-Anchor" href="#3秘钥注销"></a> 3.秘钥注销</h3><ul><li>不再继续使用的秘钥需要注销<ul><li>需要标记秘钥的状态:<ul><li>bool status<ul><li>status == 1: 可用</li><li>status == 0: 不可用</li></ul></li></ul></li></ul></li></ul><h3 id="4秘钥查看"><a class="markdownIt-Anchor" href="#4秘钥查看"></a> 4.秘钥查看</h3><ul><li>查看不是当前秘钥的信息</li><li>查看的是历史秘钥<ul><li>根据网点查看</li><li>根据日期查看</li></ul></li></ul><h3 id="5使用的数据结构"><a class="markdownIt-Anchor" href="#5使用的数据结构"></a> 5.使用的数据结构</h3><ul><li>秘钥协商客户端</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 客户端给服务器发送数据的时候用到的数据结构</span><br><span class="line">struct RequestMsg</span><br><span class="line">&#123;</span><br><span class="line">//1 密钥协商 //2 密钥校验; // 3 密钥注销</span><br><span class="line">int cmdType; // 报文类型</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char authCode[65]; // 认证码 - openssl hmac</span><br><span class="line">char serverId[12]; // 服务器端编号</span><br><span class="line">char r1[64]; // 客户端随机数</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- cmdType: 客户端请求的类型, 服务器根据这个变量做不同的处理</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- authCode: 消息认证码, 判定消息是否被篡改过</span><br><span class="line">- (原始数据 + 秘钥) * 哈希运算 = 散列值</span><br><span class="line">- r1: 客户端生成的随机字符串, 生成秘钥其中的一部分原材料</span><br></pre></td></tr></table></figure><ul><li>秘钥协商服务器</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// 服务器给客户端回复的时候用的到结构</span><br><span class="line">struct RespondMsg</span><br><span class="line">&#123;</span><br><span class="line">int rv; // 返回值</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char serverId[12]; // 服务器编号</span><br><span class="line">char r2[64]; // 服务器端随机数</span><br><span class="line">int seckeyid; // 对称密钥编号 keysn</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">- rv: return value - &gt; 服务器对客户端请求的处理结果</span><br><span class="line">- 0: 正确</span><br><span class="line">- -1: 错误</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- r2: 服务器生成的随机字符串, 生成秘钥其中的一部分原材料</span><br><span class="line">- seckeyid: 生成的新的秘钥之后, 需要编号, 该动作是有秘钥协商服务器完成的</span><br></pre></td></tr></table></figure><ol><li>写一个人机交互程序</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">printf(&quot;0-退出, 1-协商, 2-校验, 3-注销\n&quot;);</span><br><span class="line">while(1)</span><br><span class="line">&#123;</span><br><span class="line">// 键盘捕捉</span><br><span class="line">cin &gt;&gt; sel;</span><br><span class="line">switch(sel)</span><br><span class="line">&#123;</span><br><span class="line">case 1:</span><br><span class="line">// 秘钥协商</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li>用户输入1, 进入秘钥协商</li></ol><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">创建一个 RequestMsg对象, 并初始化</span><br><span class="line">将要发送的数据序列化 - 得到一个字符串</span><br><span class="line">创建通信的套接字, 并且连接到秘钥协商服务器</span><br><span class="line">发送序列化之后的字符串</span><br><span class="line">阻塞等待接收服务器回发的数据 - &gt; 字符串</span><br><span class="line">服务器序列化之后得到的字符串</span><br><span class="line">需要接接收的字符串解码, 数据还原得到RespondMsg对象</span><br><span class="line">查看服务器处理结果 - &gt; rv的值</span><br><span class="line">// 服务器给客户端回复的时候用的到结构</span><br><span class="line">struct RespondMsg</span><br><span class="line">&#123;</span><br><span class="line">int rv; // 返回值</span><br><span class="line">char clientId[12]; // 客户端编号</span><br><span class="line">char serverId[12]; // 服务器编号</span><br><span class="line">char r2[64]; // 服务器端随机数</span><br><span class="line">int seckeyid; // 对称密钥编号 keysn</span><br><span class="line">&#125;;</span><br><span class="line">- rv: return value - &gt; 服务器对客户端请求的处理结果</span><br><span class="line">- 0: 正确</span><br><span class="line">- -1: 错误</span><br><span class="line">- clientId: 客户端的编号, 是唯一的</span><br><span class="line">- serverId: 服务器的编号, 是唯一的</span><br><span class="line">- r2: 服务器生成的随机字符串, 生成秘钥其中的一部分原材料</span><br><span class="line">- seckeyid: 生成的新的秘钥之后, 需要编号, 该动作是有秘钥协商服务器完成的</span><br><span class="line">失败 - &gt; 直接退出, 通过用户</span><br><span class="line">成功 -&gt; 继续</span><br><span class="line">通过服务器发送过来的r2和自己 的r1组合</span><br><span class="line">进行哈希运算 -&gt; 散列值 -&gt; 秘钥</span><br><span class="line">将生成的秘钥写入共享内存</span><br><span class="line">class NodeSHMInfo &#123; </span><br><span class="line">public: </span><br><span class="line">int status;</span><br><span class="line">int seckeyID;</span><br><span class="line">char clientID[12];</span><br><span class="line">char serverID[12];</span><br><span class="line">char seckey[128]; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>NodeSHMInfo 类型的变量可以从配置文件或者是环境变量中获取;</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于共享内存:&lt;br&gt;
使用共享内存的时候, 如果想记录共享内存的相关信息, 可以&lt;br&gt;
在共享内存的头部来记录信息, 比如设计一个结构体&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存类的测试</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E7%B1%BB%E7%9A%84%E6%B5%8B%E8%AF%95/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/共享内存类的测试/</id>
    <published>2022-05-30T16:26:10.000Z</published>
    <updated>2022-05-30T16:26:39.889Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;SecKeyShm.h&quot;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">char clientID[16] = &#123;0&#125;;</span><br><span class="line">char serverID[16] = &#123;0&#125;;</span><br><span class="line">strcpy(clientID, argv[1]);</span><br><span class="line">strcpy(serverID, argv[2]);</span><br><span class="line"></span><br><span class="line">//SecKeyShm shm(0x1234, 10);</span><br><span class="line">SecKeyShm shm(0x1234);</span><br><span class="line"></span><br><span class="line">NodeSHMInfo info;</span><br><span class="line">memset(&amp;info, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">info.status = 199;</span><br><span class="line">info.seckeyID = 11;</span><br><span class="line">strcpy(info.clientID, clientID);</span><br><span class="line">strcpy(info.serverID, serverID);</span><br><span class="line">strcpy(info.seckey, &quot;0001&quot;);</span><br><span class="line">shm.shmWrite(&amp;info);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;----------------&quot; &lt;&lt; endl;</span><br><span class="line">SecKeyShm shm1(0x1234);</span><br><span class="line">memset(&amp;info, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">shm1.shmRead(clientID, serverID, &amp;info);</span><br><span class="line"></span><br><span class="line">cout &lt;&lt; &quot;status:&quot; &lt;&lt; info.status &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckeyID:&quot; &lt;&lt; info.seckeyID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;clientID:&quot; &lt;&lt; info.clientID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;serverID:&quot; &lt;&lt; info.serverID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckey:&quot; &lt;&lt; info.seckey &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">shm1.printShm();</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存业务类代码编写</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/31/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E4%B8%9A%E5%8A%A1%E7%B1%BB%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/31/共享内存业务类代码编写/</id>
    <published>2022-05-30T16:21:24.000Z</published>
    <updated>2022-05-30T16:22:55.356Z</updated>
    
    <content type="html"><![CDATA[<h3 id="seckeyshmh"><a class="markdownIt-Anchor" href="#seckeyshmh"></a> SecKeyShm.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;ShareMemory.h&quot;</span><br><span class="line"></span><br><span class="line">class NodeSHMInfo</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">int status;</span><br><span class="line">int seckeyID;</span><br><span class="line">char clientID[12];</span><br><span class="line">char serverID[12];</span><br><span class="line">char seckey[128];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class SecKeyShm : public ShareMemory</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">SecKeyShm(int key);</span><br><span class="line">SecKeyShm(int key, int maxNode);</span><br><span class="line">SecKeyShm(const char* pathName);</span><br><span class="line">SecKeyShm(const char* pathName, int maxNode);</span><br><span class="line">~SecKeyShm();</span><br><span class="line"></span><br><span class="line">int shmWrite(NodeSHMInfo* pNodeInfo);</span><br><span class="line">int shmRead(const char* clientID, const char* serverID, NodeSHMInfo* pNodeInfo);</span><br><span class="line"></span><br><span class="line">//for test</span><br><span class="line">void printShm();</span><br><span class="line">private:</span><br><span class="line">int m_maxNode;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="seckeyshmcpp"><a class="markdownIt-Anchor" href="#seckeyshmcpp"></a> SecKeyShm.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &quot;SecKeyShm.h&quot;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(int key):ShareMemory(key)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(int key, int maxNode):</span><br><span class="line">ShareMemory(key, sizeof(int) + maxNode*sizeof(NodeSHMInfo)), m_maxNode(maxNode)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//初始化共享内存</span><br><span class="line">memset(p, 0x00, sizeof(int) + maxNode*sizeof(NodeSHMInfo));</span><br><span class="line"></span><br><span class="line">//将maxNode写入共享内存的头4个字节</span><br><span class="line">memcpy(p, &amp;m_maxNode, sizeof(int));</span><br><span class="line"></span><br><span class="line">//断开与共享内存的连接</span><br><span class="line">unmapShm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(const char* pathName): ShareMemory(pathName)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::SecKeyShm(const char* pathName, int maxNode):</span><br><span class="line">ShareMemory(pathName, sizeof(int) + maxNode*sizeof(NodeSHMInfo)), m_maxNode(maxNode)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//初始化共享内存</span><br><span class="line">memset(p, 0x00, sizeof(int) + maxNode*sizeof(NodeSHMInfo));</span><br><span class="line"></span><br><span class="line">//将maxNode写入共享内存的头4个字节</span><br><span class="line">memcpy(p, &amp;m_maxNode, sizeof(int));</span><br><span class="line"></span><br><span class="line">//断开与共享内存的连接</span><br><span class="line">unmapShm();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">SecKeyShm::~SecKeyShm()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SecKeyShm::shmWrite(NodeSHMInfo* pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">//先查找原有的</span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strcmp(pNodeInfo-&gt;clientID, pNode[i].clientID)==0 &amp;&amp;</span><br><span class="line">   strcmp(pNodeInfo-&gt;serverID, pNode[i].serverID)==0)</span><br><span class="line">&#123;</span><br><span class="line">memcpy(&amp;pNode[i], pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//没找到原有的, 找一个空闲可用的</span><br><span class="line">NodeSHMInfo tmp;</span><br><span class="line">memset(&amp;tmp, 0x00, sizeof(NodeSHMInfo));</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">if(memcmp(&amp;pNode[i], &amp;tmp, sizeof(NodeSHMInfo))==0) </span><br><span class="line">&#123;</span><br><span class="line">memcpy(&amp;pNode[i], pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//断开与共享内存的关联</span><br><span class="line">unmapShm();</span><br><span class="line"></span><br><span class="line">//没有空闲位置可用</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;no space to use&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int SecKeyShm::shmRead(const char* clientID, const char* serverID, NodeSHMInfo* pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">if(strcmp(clientID, pNode[i].clientID)==0 &amp;&amp;</span><br><span class="line">   strcmp(serverID, pNode[i].serverID)==0)</span><br><span class="line">&#123;</span><br><span class="line">memcpy(pNodeInfo, &amp;pNode[i], sizeof(NodeSHMInfo));</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//断开与共享内存的关联</span><br><span class="line">unmapShm();</span><br><span class="line"></span><br><span class="line">//没有找到节点</span><br><span class="line">if(i==m_maxNode)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;not found&quot; &lt;&lt; endl;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void SecKeyShm::printShm()</span><br><span class="line">&#123;</span><br><span class="line">//连接共享内存</span><br><span class="line">void *p = mapShm();</span><br><span class="line"></span><br><span class="line">//从头4个字节获取maxNode</span><br><span class="line">memcpy(&amp;m_maxNode, p, sizeof(int));</span><br><span class="line">cout &lt;&lt; &quot;maxNode:&quot; &lt;&lt; m_maxNode &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">NodeSHMInfo *pNode = (NodeSHMInfo *)((char *)p+sizeof(int));</span><br><span class="line"></span><br><span class="line">int i = 0;</span><br><span class="line">for(i=0; i&lt;m_maxNode; i++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;-------&quot; &lt;&lt; i &lt;&lt; &quot;-------&quot; &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;status:&quot; &lt;&lt; pNode[i].status &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckeyID:&quot; &lt;&lt; pNode[i].seckeyID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;clientID:&quot; &lt;&lt; pNode[i].clientID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;serverID:&quot; &lt;&lt; pNode[i].serverID &lt;&lt; endl;</span><br><span class="line">cout &lt;&lt; &quot;seckey:&quot; &lt;&lt; pNode[i].seckey &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;seckeyshmh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#seckeyshmh&quot;&gt;&lt;/a&gt; SecKeyShm.h&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存基础类的代码编写</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/30/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98%E5%9F%BA%E7%A1%80%E7%B1%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E7%BC%96%E5%86%99/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/30/共享内存基础类的代码编写/</id>
    <published>2022-05-30T15:22:19.000Z</published>
    <updated>2022-05-30T16:20:02.955Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/image-20220530233334564.png" alt="image-20220530233334564"></p><h3 id="sharememoryh"><a class="markdownIt-Anchor" href="#sharememoryh"></a> ShareMemory.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">char</span> RandX = <span class="string">'x'</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ShareMemory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">ShareMemory(<span class="keyword">int</span> key);</span><br><span class="line">ShareMemory(<span class="keyword">int</span> key, <span class="keyword">int</span> size);</span><br><span class="line">ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name);</span><br><span class="line">ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> size);</span><br><span class="line"><span class="keyword">virtual</span> ~ShareMemory();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">mapShm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">unmapShm</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">delShm</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getShmID</span><span class="params">(<span class="keyword">key_t</span> key, <span class="keyword">int</span> shmSize, <span class="keyword">int</span> flag)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_shmID;</span><br><span class="line"><span class="keyword">void</span>* m_shmAddr = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="sharememorycpp"><a class="markdownIt-Anchor" href="#sharememorycpp"></a> ShareMemory.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/ipc.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/shm.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ShareMemory.h"</span></span></span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">int</span> key)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = getShmID(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">int</span> key, <span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = getShmID(key, size, IPC_CREAT | <span class="number">0755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">key_t</span> key = ftok(name, RandX);</span><br><span class="line">m_shmID = getShmID(key, <span class="number">0</span>, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::ShareMemory(<span class="keyword">const</span> <span class="keyword">char</span>* name, <span class="keyword">int</span> size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">key_t</span> key = ftok(name, RandX);</span><br><span class="line">m_shmID = getShmID(key, size, IPC_CREAT | <span class="number">0755</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::getShmID(<span class="keyword">key_t</span> key, <span class="keyword">int</span> shmSize, <span class="keyword">int</span> flag)</span><br><span class="line">&#123;</span><br><span class="line">m_shmID = shmget(key, shmSize, flag);</span><br><span class="line"><span class="keyword">if</span>(m_shmID&lt;<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印日志</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_shmID;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ShareMemory::~ShareMemory()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> *ShareMemory::mapShm()</span><br><span class="line">&#123;</span><br><span class="line">m_shmAddr = shmat(m_shmID, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(m_shmAddr==(<span class="keyword">void</span> *)<span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//日志</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> m_shmAddr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::unmapShm()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = shmdt(m_shmAddr);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ShareMemory::delShm()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = shmctl(m_shmID, IPC_RMID, <span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/image-20220530233334564.png&quot; alt=&quot;image-20220530233334564&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;sharememoryh&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>共享内存</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/24/%E5%85%B1%E4%BA%AB%E5%86%85%E5%AD%98/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/24/共享内存/</id>
    <published>2022-05-24T00:16:14.000Z</published>
    <updated>2022-05-24T01:13:51.758Z</updated>
    
    <content type="html"><![CDATA[<h1 id="共享内存"><a class="markdownIt-Anchor" href="#共享内存"></a> 共享内存</h1><p>共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，当一个进程改</p><p>变了这块地址中的内容的时候，其它进程都会察觉到这个更改。</p><h3 id="共享内存头文件"><a class="markdownIt-Anchor" href="#共享内存头文件"></a> 共享内存头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;sys/ipc.h&gt;</span><br><span class="line">#include &lt;sys/shm.h&gt;</span><br></pre></td></tr></table></figure><h3 id="共享内存操作函数"><a class="markdownIt-Anchor" href="#共享内存操作函数"></a> 共享内存操作函数</h3><p>创建或打开一块共享内存区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">int shmget(key_t key, size_t size, int shmflg);</span><br><span class="line">- 参数key: 创建出的共享内存的键值, 每块共享内存的键值是唯一的 </span><br><span class="line">- 看做一个32位整形数, 一般指定的数据格式是16进制形式的</span><br><span class="line">- 参数size: 创建的共享内存的大小, 分配的时候实际大小是是4k的倍数</span><br><span class="line">- 参数shmflag: 共享内存的属性, 与创建文件相同 </span><br><span class="line">- open(name, flag, mode); - 与flag相同 </span><br><span class="line">- shmflag的取值 </span><br><span class="line">- IPC_CREAT: 创建共享内存 </span><br><span class="line">- 创建文件并指定权限: IPC_CREAT|0664 </span><br><span class="line">- IPC_EXCL: 必须和IPC_CREAT一起使用, 检测共享内存是否存在 </span><br><span class="line">- 返回值: 返回创建的共享内存的描述符, 理解为共享内存的ID, ID也是唯一的 </span><br><span class="line">   成功: 返回共享内存的ID值</span><br><span class="line">   失败: 返回-1, 并设置errno</span><br><span class="line"></span><br><span class="line">// 1. 创建一块不存在的共享内存 </span><br><span class="line">// 如果检测到key值为0x12的共享内存已经存在, 该函数调用失败 </span><br><span class="line">shmget(0x12, 4096, IPC_CREAT|IPC_EXCL|0664) </span><br><span class="line"></span><br><span class="line">// 2. 打开一块已经存在的共享内存, 共享内存的key 0x12 </span><br><span class="line">shmget(0x12, 0, 0) </span><br><span class="line"></span><br><span class="line">// 3. 操作一块内存, 存在打开, 不存在创建 </span><br><span class="line">shmget(0x12, 4096, IPC_CREAT|0664)</span><br></pre></td></tr></table></figure><h3 id="将当前进程和共享内存关联到一起"><a class="markdownIt-Anchor" href="#将当前进程和共享内存关联到一起"></a> 将当前进程和共享内存关联到一起</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">void *shmat(int shmid, const void *shmaddr, int shmflg);</span><br><span class="line">- 参数shmid: shmget函数的返回值 </span><br><span class="line">- 参数shmaddr: 共享内存和进程关联, 指定的内存位置 </span><br><span class="line">- 赋值为NULL, 内核会自动分配 </span><br><span class="line">- 参数shmflg: </span><br><span class="line">- SHM_RDONLY: 对共享内存只读 </span><br><span class="line">- 0: 可以对共享内存读写 </span><br><span class="line">- 返回值: 关联成功之后, 内核分配的可进行读写的内存块的首地址</span><br><span class="line">  成功: 内存地址</span><br><span class="line">   失败: (void *) -1</span><br></pre></td></tr></table></figure><h3 id="将共享内存和当前进程分离"><a class="markdownIt-Anchor" href="#将共享内存和当前进程分离"></a> 将共享内存和当前进程分离</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">int shmdt(const void *shmaddr); </span><br><span class="line">- 参数shmaddr: shmat函数的返回值 </span><br><span class="line">- 返回值: </span><br><span class="line">成功: 返回0</span><br><span class="line">   失败: 返回-1, 并设置errno</span><br></pre></td></tr></table></figure><h3 id="共享内存操作-删除共享内存"><a class="markdownIt-Anchor" href="#共享内存操作-删除共享内存"></a> 共享内存操作 -（删除共享内存 ）</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">int shmctl(int shmid, int cmd, struct shmid_ds *buf); </span><br><span class="line">- 参数shmid: shmget函数的返回值 </span><br><span class="line">- 参数cmd: </span><br><span class="line">- IPC_STAT: 查看共享内存状态 </span><br><span class="line">- IPC_SET: 设置共享内存状态 </span><br><span class="line">- IPC_RMID: 删除共享内存 </span><br><span class="line">- 参数buf: </span><br><span class="line">- IPC_STAT: 传出参数, 记录共享内存信息 </span><br><span class="line">- IPC_SET: 传入参数 </span><br><span class="line">- IPC_RMID: 用不到, 赋值为NULL</span><br></pre></td></tr></table></figure><ul><li>问题1: 是不是可以对共享内存进行多次删除<ul><li>可以</li><li>共享内存被删除一次之后, 如果还有进程和共享内存关联着, 共享内存的key会发生变化变成0<ul><li>如果共享内存key是&gt;0的数: 共享内存状态正常, 任意进程都可以和当前共享内存进行关联</li><li>key == 0:<ul><li>共享内存标记为被删除, 没有被马上删除是因为还有进程没有和它解除关联</li><li>不相干的进程是没有权限和key为0的共享内存进行关联的</li></ul></li></ul></li></ul></li></ul><p><img src="/images/javawz/image-20220524083153140.png" alt="image-20220524083153140"></p><ul><li>问题2: 如果多个进程都和同一共享内存进行关联, 其中一个进程将共享内存删除, 共享内存什么时候被删除?<ul><li>共享内存的引用计数为0 的时候, 共享内存被删除</li></ul></li></ul><p>shm和mmap的区别</p><ol><li>shm不需要磁盘文件, mmap需要磁盘文件</li><li>shm效率高</li><li>mmap操作的数据量比shm大 4. shm内存位置在内核只有一块, mmap内存在用户区, 每个进程都有各自的内存映射区</li><li>shm和mmap的数据谁更安全?</li></ol><ul><li>mmap会通过映射的文件做备份</li></ul><ol start="5"><li>进程退出, 共享内存依然存在, 进程退出,内存映射区就不存在了</li></ol><h2 id="ftok函数"><a class="markdownIt-Anchor" href="#ftok函数"></a> ftok函数</h2><h3 id="函数原型"><a class="markdownIt-Anchor" href="#函数原型"></a> 函数原型</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">key_t ftok(const char *pathname, int proj_id); </span><br><span class="line">- pathname: 路径或文件名, 必须存在, 对文件的权限没有要求</span><br><span class="line">- /home/kevin/a.txt - /home/kevin/hello - 目录 </span><br><span class="line"></span><br><span class="line">- proj_id: 只用到了一个字节, 取值范围: 0-255, 也可以传递一字符</span><br><span class="line">- 88</span><br><span class="line">- &apos;a</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="思考"><a class="markdownIt-Anchor" href="#思考"></a> 思考:</h3><p>pathname 是目录还是文件的具体路径，是否可以随便设置？<br>可以</p><p>pathname 指定的目录或文件的权限是否有要求?<br>没有</p><p>proj_id 是否可以随便设定，有什么限制条件?<br>取值范围 0-255</p><h3 id="陷阱"><a class="markdownIt-Anchor" href="#陷阱"></a> 陷阱：</h3><p>误解:<br>只要文件的路径，名称和子序列号不变，那么得到的key值永远就不会变。<br>正解:<br>如果pathname指向的文件或者目录被删除而且又重新创建，那么文件系统会赋予这个同名文件新<br>的inode 节点信息，于是这些进程调用的 ftok() 都能正常返回，但键值key却不一定相同了。</p><p><br><br><br><br></p><h3 id="共享内存操作命令"><a class="markdownIt-Anchor" href="#共享内存操作命令"></a> 共享内存操作命令</h3><h4 id="ipcs-用法"><a class="markdownIt-Anchor" href="#ipcs-用法"></a> ipcs 用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ipcs -a // 打印当前系统中所有的进程间通信方式的信息 </span><br><span class="line">ipcs -m // 打印出使用共享内存进行进程间通信的信息 == 常用 ==</span><br><span class="line">============= 以下为了解内容 ================ </span><br><span class="line">ipcs -q // 打印出使用消息队列进行进程间通信的信息 </span><br><span class="line">ipcs -s // 打印出使用信号进行进程间通信的信息</span><br></pre></td></tr></table></figure><p>man msgget//消息队列相关函数<br>man semget//信号量数组相关函数</p><p><br><br><br><br></p><h4 id="ipcrm-用法"><a class="markdownIt-Anchor" href="#ipcrm-用法"></a> ipcrm 用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">ipcrm -M shmkey // 移除用shmkey创建的共享内存段 </span><br><span class="line">ipcrm -m shmid // 移除用shmid标识的共享内存段</span><br><span class="line">================ 以下为了解内容 ================ </span><br><span class="line">ipcrm -Q msgkey // 移除用msqkey创建的消息队列 </span><br><span class="line">ipcrm -q msqid // 移除用msqid标识的消息队列 </span><br><span class="line">ipcrm -S semkey // 移除用semkey创建的信号 </span><br><span class="line">ipcrm -s semid // 移除用semid标识的信号</span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="共享内存在项目中的使用"><a class="markdownIt-Anchor" href="#共享内存在项目中的使用"></a> 共享内存在项目中的使用</h3><p><img src="/images/javawz/image-20220524083853111.png" alt="image-20220524083853111"></p><p>与业务相关的共享内存结构图:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">struct NodeSHMInfo &#123; </span><br><span class="line">int status; //密匙状态</span><br><span class="line">int seckeyID; </span><br><span class="line">char clientID[12]; </span><br><span class="line">char serverID[12];</span><br><span class="line">char seckey[128]; //密匙</span><br><span class="line">&#125; NODE;</span><br></pre></td></tr></table></figure><p>共享内存结构图: 头4个字节存放最大节点个数, 后面一共存放maxNode个秘钥信息</p><p><img src="/images/javawz/image-20220524084019939.png" alt="image-20220524084019939"></p><p>在遍历共享内存的时候, 首先获得共享内存的头4个字节内容, 也就是最大节点个数, 可以作为遍历的最大次数.</p><p>遍历的时候查找共享内存根据clientID和serverID来进行查找.</p><p><br><br><br><br></p><h3 id="myipc_shmh"><a class="markdownIt-Anchor" href="#myipc_shmh"></a> myipc_shm.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">// myipc_shm.h</span><br><span class="line">#ifndef _WBM_MY_SHM_H_</span><br><span class="line">#define _WBM_MY_SHM_H_</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus </span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">//共享内存错误码</span><br><span class="line">#defineMYIPC_OK0//正确</span><br><span class="line">#defineMYIPC_ParamErr301//输入参数失败</span><br><span class="line">#defineMYIPC_NotEXISTErr302//共享内存不存在错误</span><br><span class="line">#defineMYIPC_CreateErr303//创建共享内存错误</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//创建共享内存 若共享内存不存在，则创建</span><br><span class="line">int IPC_CreatShm(int key, int shmsize, int *shmhdl);</span><br><span class="line"></span><br><span class="line">//打开共享内存 若共享内存不存在，返回错误</span><br><span class="line">int IPC_OpenShm(int key, int shmsize, int *shmhdl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    创建共享内存 通过种子文件</span><br><span class="line">  参数说明：    shmname  [in]  是共享内存名,系统中唯一标志</span><br><span class="line">                shmsize  [in]  是要创建的共享内存的大小；</span><br><span class="line">                shmhdl   [out] 共享内存的句柄.</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_CreatShmBySeedName(char *shmname, int shmsize, int *shmhdl);</span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    关联共享内存</span><br><span class="line">  参数说明：    shmhdl[in]  共享的句柄</span><br><span class="line">                mapaddr [out] 共享内存首地址</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_MapShm(int shmhdl, void **mapaddr);</span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    取消共享内存关联</span><br><span class="line">  参数说明：    unmapaddr   [in] 共享内存首地址</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_UnMapShm(void *unmapaddr);</span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    删除共享内存</span><br><span class="line">  参数说明：    shmhdl[in]  共享的句柄</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_DelShm(int shmhdl);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="myipc_shmc"><a class="markdownIt-Anchor" href="#myipc_shmc"></a> myipc_shm.c</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#define_OS_LINUX_</span><br><span class="line"></span><br><span class="line">#if defined _OS_LINUX_</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;memory.h&gt;</span><br><span class="line">#include &lt;sys/ipc.h&gt;</span><br><span class="line">#include &lt;sys/shm.h&gt;</span><br><span class="line">#include &lt;sys/sem.h&gt;</span><br><span class="line">#include &lt;sys/msg.h&gt;</span><br><span class="line">#include &quot;myipc_shm.h&quot; </span><br><span class="line"></span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">static int shmflag = 0;</span><br><span class="line">static int shmkey;</span><br><span class="line"></span><br><span class="line">//创建共享内存 若共享内存不存在，则创建 若存在使用原来的</span><br><span class="line">int IPC_CreatShm(int key, int shmsize, int *shmhdl)</span><br><span class="line">&#123;</span><br><span class="line">inttmpshmhdl = 0;</span><br><span class="line">int ret = 0;</span><br><span class="line">//创建共享内存 </span><br><span class="line">//若共享内存不存在则创建 </span><br><span class="line">//若共享内存已存在使用原来的</span><br><span class="line">tmpshmhdl = shmget(key, shmsize, IPC_CREAT | IPC_EXCL | 0666);</span><br><span class="line">if (tmpshmhdl == -1)//创建失败</span><br><span class="line">&#123;</span><br><span class="line">ret = MYIPC_ParamErr;</span><br><span class="line">printf(&quot;func shmget() err :%d &quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">*shmhdl = tmpshmhdl;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//打开共享内存 若共享内存不存在，返回错误</span><br><span class="line">//参数 无意义 可填写0</span><br><span class="line">int IPC_OpenShm(int key, int shmsize, int *shmhdl)</span><br><span class="line">&#123;</span><br><span class="line">inttmpshmhdl = 0;</span><br><span class="line">int ret = 0;</span><br><span class="line">//创建共享内存 </span><br><span class="line">//若共享内存不存在则创建 </span><br><span class="line">//若共享内存已存在使用原来的</span><br><span class="line">tmpshmhdl = shmget(key, 0, 0);</span><br><span class="line">if (tmpshmhdl == -1)//打开失败</span><br><span class="line">&#123;</span><br><span class="line">ret = MYIPC_NotEXISTErr;</span><br><span class="line">//printf(&quot;func shmget() err :%d &quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">*shmhdl = tmpshmhdl;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    创建共享内存</span><br><span class="line">  参数说明：    shmname  [in]  是共享内存名,系统中唯一标志</span><br><span class="line">shmsize  [in]  是要创建的共享内存的大小；</span><br><span class="line">shmhdl   [out] 共享内存的句柄.</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_CreatShmBySeedName(char *shmseedfile, int shmsize, int *shmhdl)</span><br><span class="line">&#123;</span><br><span class="line">if (shmflag == 0)//判断接口中共享内存key是否已经存在</span><br><span class="line">&#123;</span><br><span class="line">shmkey = ftok(shmseedfile, &apos;c&apos;);</span><br><span class="line">if (shmkey == -1)</span><br><span class="line">&#123;</span><br><span class="line">perror(&quot;ftok&quot;);</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">shmflag = 1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//创建共享内存</span><br><span class="line">*shmhdl = shmget(shmkey, shmsize, IPC_CREAT | 0666);</span><br><span class="line">if (*shmhdl == -1)//创建失败</span><br><span class="line">return -2;</span><br><span class="line">return 0;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    关联共享内存</span><br><span class="line">  参数说明：    shmhdl[in]  共享的句柄</span><br><span class="line">mapaddr [out] 共享内存首地址</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_MapShm(int  shmhdl, void  **mapaddr)</span><br><span class="line">&#123;</span><br><span class="line">void *tempptr = NULL;</span><br><span class="line"></span><br><span class="line">//连接共享内存</span><br><span class="line">tempptr = (void *)shmat(shmhdl, 0, 0);</span><br><span class="line">if (tempptr == (void*)-1)//共享内存连接失败</span><br><span class="line">return -1;</span><br><span class="line">*mapaddr = tempptr;//导出共享内存首指针</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    取消共享内存关联</span><br><span class="line">  参数说明：    unmapaddr   [in] 共享内存首地址</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_UnMapShm(void *unmapaddr)</span><br><span class="line">&#123;</span><br><span class="line">int  rv;</span><br><span class="line">//取消连接共享内存 </span><br><span class="line">rv = shmdt((char *)unmapaddr);</span><br><span class="line">if (rv == -1)//取消连接失败</span><br><span class="line">return -1;</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line">/***********************************************************************</span><br><span class="line">  功能描述：    删除共享内存</span><br><span class="line">  参数说明：    shmhdl[in]  共享的句柄</span><br><span class="line">  返回值：      返回0函数执行成功；非0返回错误码</span><br><span class="line">************************************************************************/</span><br><span class="line">int IPC_DelShm(int shmhdl)</span><br><span class="line">&#123;</span><br><span class="line">int  rv;</span><br><span class="line">//删除共享内存</span><br><span class="line">rv = shmctl(shmhdl, IPC_RMID, NULL);</span><br><span class="line">if (rv &lt; 0)//删除共享内存失败</span><br><span class="line">return -1;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="keymng_shmoph"><a class="markdownIt-Anchor" href="#keymng_shmoph"></a> keymng_shmop.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">// keymng_shmop.h</span><br><span class="line"></span><br><span class="line">#ifndef _KEYMNG_SHMOP_H_</span><br><span class="line">#define _KEYMNG_SHMOP_H_</span><br><span class="line"></span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus </span><br><span class="line">extern &quot;C&quot; &#123;</span><br><span class="line">#endif</span><br><span class="line"></span><br><span class="line">//将网点密钥信息写共享内存， 网点共享内存结构体</span><br><span class="line">typedef struct _NodeSHMInfo</span><br><span class="line">&#123;</span><br><span class="line">int status;//密钥状态 0-有效 1无效</span><br><span class="line">charclientId[12];//客户端id</span><br><span class="line">charserverId[12];//服务器端id</span><br><span class="line">intseckeyid;//对称密钥id</span><br><span class="line">unsigned charseckey[128];//对称密钥 //hash1 hash256 md5</span><br><span class="line">&#125;NodeSHMInfo;</span><br><span class="line"></span><br><span class="line">//int KeyMng_ShmInit(int keyid, int keysize, void *shmid )</span><br><span class="line">//打开共享内存 共享内存存在则使用 不存在则创建</span><br><span class="line">int KeyMng_ShmInit(int key, int maxnodenum, int *shmhdl);</span><br><span class="line"></span><br><span class="line">// 客户端已经存储了一个秘钥 - 覆盖</span><br><span class="line">// ......还没有存储秘钥     - 找一个位置存储秘钥</span><br><span class="line">int KeyMng_ShmWrite(int shmhdl, int maxnodenum, NodeSHMInfo *pNodeInfo);</span><br><span class="line"></span><br><span class="line">int KeyMng_ShmRead(int shmhdl, char *clientId, char *serverId,  int maxnodenum, NodeSHMInfo *pNodeInfo);</span><br><span class="line"></span><br><span class="line">#ifdef __cplusplus</span><br><span class="line">&#125;</span><br><span class="line">#endif</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="keymng_shmopc"><a class="markdownIt-Anchor" href="#keymng_shmopc"></a> keymng_shmop.c</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">//#include &lt;sys/socket.h&gt;</span><br><span class="line">//#include &lt;netinet/in.h&gt;</span><br><span class="line">//#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;signal.h&gt;</span><br><span class="line">#include &lt;sys/wait.h&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">#include &quot;itcastlog.h&quot;</span><br><span class="line">#include &quot;keymng_shmop.h&quot;</span><br><span class="line">#include &quot;myipc_shm.h&quot;</span><br><span class="line"></span><br><span class="line">//#include &quot;keymngclientop.h&quot;</span><br><span class="line">//#include &quot;poolsocket.h&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//看共享内存是否存在</span><br><span class="line">//若 存在使用旧 </span><br><span class="line">//若 不存在创建</span><br><span class="line">int KeyMng_ShmInit(int key, int maxnodenum, int *shmhdl)</span><br><span class="line">&#123;</span><br><span class="line">intret = 0;</span><br><span class="line"></span><br><span class="line">//打开共享内存</span><br><span class="line">ret = IPC_OpenShm(key, maxnodenum * sizeof(NodeSHMInfo), shmhdl);</span><br><span class="line">if (ret == MYIPC_NotEXISTErr)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;keymng监测到共享内存不存在 正在创建共享内存...\n&quot;);</span><br><span class="line">ret = IPC_CreatShm(key, maxnodenum * sizeof(NodeSHMInfo), shmhdl);</span><br><span class="line">if (ret != 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;keymng创建共享内存 err:%d \n&quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">void *mapaddr = NULL;</span><br><span class="line">printf(&quot;keymng创建共享内存 ok...\n&quot;);</span><br><span class="line"></span><br><span class="line">ret = IPC_MapShm(*shmhdl, (void **)&amp;mapaddr);</span><br><span class="line">if (ret != 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;fun IPC_MapShm() err:%d 清空共享内存失败\n&quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">memset(mapaddr, 0, maxnodenum * sizeof(NodeSHMInfo));</span><br><span class="line">IPC_UnMapShm(mapaddr);</span><br><span class="line">printf(&quot;keymng清空共享内存ok\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;keymng监测到共享内存存在 使用旧的共享内存...\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;fun IPC_OpenShm() err:%d\n&quot;, ret);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//写网点密钥 </span><br><span class="line">//若存在 则修改 </span><br><span class="line">//若不存在 则找一个空的位置写入</span><br><span class="line">int KeyMng_ShmWrite(int shmhdl, int maxnodenum, NodeSHMInfo *pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">intret = 0, i = 0;</span><br><span class="line">NodeSHMInfo  tmpNodeInfo; //空结点</span><br><span class="line">NodeSHMInfo*pNode = NULL;</span><br><span class="line">        bool flag = false;</span><br><span class="line">        void *mapaddr = NULL;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">memset(&amp;tmpNodeInfo, 0, sizeof(NodeSHMInfo));</span><br><span class="line">//连接共享内存</span><br><span class="line">ret = IPC_MapShm(shmhdl, (void **)&amp;mapaddr);</span><br><span class="line">if (ret != 0)</span><br><span class="line">&#123;</span><br><span class="line">                flag = true;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_ERROR_LEVEL, ret, &quot;func IPC_MapShm() err&quot;);</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line">        if(flag) break;</span><br><span class="line"></span><br><span class="line">//判断传入的网点密钥 是否已经 存在</span><br><span class="line">for (i = 0; i &lt; maxnodenum; i++)</span><br><span class="line">&#123;</span><br><span class="line">pNode = mapaddr + sizeof(NodeSHMInfo)*i;</span><br><span class="line">if (strcmp(pNode-&gt;clientId, pNodeInfo-&gt;clientId) == 0 &amp;&amp;</span><br><span class="line">strcmp(pNode-&gt;serverId, pNodeInfo-&gt;serverId) == 0)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_WARNING_LEVEL, ret, &quot;系统检测到 共享内存中已经存在网点信息cliented:%s serverid%s&quot;, pNode-&gt;clientId, pNode-&gt;serverId);</span><br><span class="line">memcpy(pNode, pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//若不存在</span><br><span class="line">for (i = 0; i &lt; maxnodenum; i++)</span><br><span class="line">&#123;</span><br><span class="line">pNode = mapaddr + sizeof(NodeSHMInfo)*i;</span><br><span class="line">if (memcmp(&amp;tmpNodeInfo, pNode, sizeof(NodeSHMInfo)) == 0)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_WARNING_LEVEL, ret, &quot;系统检测到 有一个空的位置 &quot;);</span><br><span class="line">memcpy(pNode, pNodeInfo, sizeof(NodeSHMInfo));</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (i == maxnodenum)</span><br><span class="line">&#123;</span><br><span class="line">ret = 1111;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_ERROR_LEVEL, ret, &quot;系统检测到共享内存已满 &quot;);</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">End:</span><br><span class="line">IPC_UnMapShm(mapaddr);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//根据clientid和serverid 去读网点信息</span><br><span class="line">int KeyMng_ShmRead(int shmhdl, char *clientId, char *serverId, int maxnodenum, NodeSHMInfo *pNodeInfo)</span><br><span class="line">&#123;</span><br><span class="line">intret = 0, i = 0;</span><br><span class="line">NodeSHMInfo  tmpNodeInfo; //空结点</span><br><span class="line">NodeSHMInfo*pNode = NULL;</span><br><span class="line"></span><br><span class="line">void *mapaddr = NULL;</span><br><span class="line"></span><br><span class="line">memset(&amp;tmpNodeInfo, 0, sizeof(NodeSHMInfo));</span><br><span class="line">//连接共享内存</span><br><span class="line">ret = IPC_MapShm(shmhdl, (void **)&amp;mapaddr);</span><br><span class="line">if (ret != 0)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_ERROR_LEVEL, ret, &quot;func IPC_MapShm() err&quot;);</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//遍历网点信息</span><br><span class="line">for (i = 0; i &lt; maxnodenum; i++)</span><br><span class="line">&#123;</span><br><span class="line">pNode = mapaddr + sizeof(NodeSHMInfo)*i;</span><br><span class="line"></span><br><span class="line">if (strcmp(pNode-&gt;clientId, clientId) == 0 &amp;&amp;</span><br><span class="line">strcmp(pNode-&gt;serverId, serverId) == 0)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_WARNING_LEVEL, ret, &quot;系统检测到 有一个空的位置 &quot;);</span><br><span class="line">memcpy(pNodeInfo, pNode, sizeof(NodeSHMInfo));</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (i == maxnodenum)</span><br><span class="line">&#123;</span><br><span class="line">ret = 1111;</span><br><span class="line">ITCAST_LOG(__FILE__, __LINE__, IC_WARNING_LEVEL, ret, &quot;系统检测到共享内存已满 &quot;);</span><br><span class="line">goto End;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">End:</span><br><span class="line">IPC_UnMapShm(mapaddr);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><br><h2 id="进程间通讯的几种方式"><a class="markdownIt-Anchor" href="#进程间通讯的几种方式"></a> 进程间通讯的几种方式:</h2><h3 id="1-匿名管道pipe"><a class="markdownIt-Anchor" href="#1-匿名管道pipe"></a> 1 匿名管道pipe:</h3><h4 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点:</h4><pre><code>1 只能用于有血缘关系的进程间通信2 管道有两端, 管道的数据流向是从管道的写端到管道的读端3 管道的本质是一块内核缓冲区4 数据从管道中读走之后就不存在了5 管道的实现实际上是环形队列6 默认情况下管道的读端和写端都是阻塞的</code></pre><h3 id="2-命名管道-fifo"><a class="markdownIt-Anchor" href="#2-命名管道-fifo"></a> 2 命名管道: fifo</h3><h4 id="特点-2"><a class="markdownIt-Anchor" href="#特点-2"></a> 特点:</h4><pre><code>1 有无血缘关系的进程间通信都可以2 创建的fifo文件大小为0, 是linux文件类型之一3 使用fifo需要先创建一个fifo文件4 使用fifo完成通信两个进程必须打开相同的fifo文件5 效率比pipe低</code></pre><h3 id="3-mmap"><a class="markdownIt-Anchor" href="#3-mmap"></a> 3 mmap</h3><p>​共享映射区本质是将文件内容映射到内存.</p><h4 id="特点-3"><a class="markdownIt-Anchor" href="#特点-3"></a> 特点:</h4><p>​1 有无血缘关系都可以完成进程间通信<br>​2 如果完成没有血缘关系的进程间通信必须使用文件.<br>​3 若使用的是MAP_SHARED, 则对内存的修改会反映到文件中去<br>​4 需要注意mmap可能存在调用失败的情况<br>​5 匿名映射只能用于有血缘关系的进程间通信</p><h3 id="4-信号"><a class="markdownIt-Anchor" href="#4-信号"></a> 4 信号</h3><p>​进程A给进程B发送信号的实现机制: 本质上是进程A先给内核发送信号, 然后内核给进程B发送</p><p>​通signal或者sigaction注册信号<br>​通过kill函数给指定进程发送信号</p><h4 id="特点-4"><a class="markdownIt-Anchor" href="#特点-4"></a> 特点:</h4><p>​1 信号不能携带大量信息<br>​2 信号的优先级高, 产生信号之后会打断程序的执行<br>​3 不建议使用信号完成进程间通信.<br>​4 一般使用kill命令给一个进程发送信号, 进程收到信号之后调用信号处理函数完成操作.</p><h4 id="信号的处理动作"><a class="markdownIt-Anchor" href="#信号的处理动作"></a> 信号的处理动作:</h4><p>​1 忽略信号<br>​2 执行默认处理动作<br>​3 执行用户自定义的函数</p><h3 id="5-本地socket通信"><a class="markdownIt-Anchor" href="#5-本地socket通信"></a> 5 本地socket通信</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unix_socket = socket(AF_UNIX, SOCK_STREAM, 0);</span><br><span class="line">unix_socket = socket(AF_UNIX, SOCK_DGRAM, 0);</span><br></pre></td></tr></table></figure><p>​1 本地socket通信既可以使用TCP也可以使用UDP<br>​2 如果使用TCP通信, bind的时候需要指定一个文件, 若文件存在会保存, unlink删除.<br>​3 读或者写其实是通过文件描述符去操作内核的缓冲区<br>​4 编写流程, 可以直接参考TCP或者UDP开发流程.</p><h3 id="6-共享内存"><a class="markdownIt-Anchor" href="#6-共享内存"></a> 6 共享内存</h3><p>​共享内存的实质是将内核的一块内存映射到进程中的内存, 操作本地内存就相当于操作共享内存.</p><h4 id="使用共享内存的步骤"><a class="markdownIt-Anchor" href="#使用共享内存的步骤"></a> 使用共享内存的步骤:</h4><p>​1 创建共享内存<br>​2 关联共享内存<br>​3 使用共享内存–读写共享内存<br>​4 断开与共享内存的关联<br>​5 删除共享内存</p><p>共享内存和以上的管道, mmap和本地socket通信比较起来, 共享内存不需要文件描述符,<br>后者需要.<br>共享内存是进程间通信方式中效率最高的.</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;共享内存&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#共享内存&quot;&gt;&lt;/a&gt; 共享内存&lt;/h1&gt;
&lt;p&gt;共享内存是进程间通信中最简单的方式之一。共享内存允许两个或更多进程访问同一块内存，当一个进程改&lt;/p&gt;
&lt;p&gt;变了这块地址中的内容的
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>socket类</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/24/socket%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/24/socket类/</id>
    <published>2022-05-24T00:11:22.000Z</published>
    <updated>2022-05-24T00:14:41.817Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tcpsocketh"><a class="markdownIt-Anchor" href="#tcpsocketh"></a> TcpSocket.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;ItcastLog.h&quot;</span><br><span class="line"></span><br><span class="line">/* 用于通信的套接字类 */</span><br><span class="line">// 超时的时间</span><br><span class="line">static const int TIMEOUT = 1000;</span><br><span class="line">class TcpSocket</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">enum ErrorType &#123;ParamError = 3001, TimeoutError, PeerCloseError, MallocError&#125;;</span><br><span class="line">TcpSocket();</span><br><span class="line">// 使用一个可以用于通信的套接字实例化套接字对象</span><br><span class="line">TcpSocket(int connfd);</span><br><span class="line">~TcpSocket();</span><br><span class="line"></span><br><span class="line">// 连接服务器</span><br><span class="line">int connectToHost(char* ip, unsigned short port, int timeout = TIMEOUT);</span><br><span class="line">// 发送数据</span><br><span class="line">int sendMsg(char* sendData, int dataLen, int timeout = TIMEOUT);</span><br><span class="line">// 接收数据</span><br><span class="line">int recvMsg(char** recvData, int &amp;recvLen, int timeout = TIMEOUT);</span><br><span class="line">// 断开连接</span><br><span class="line">void disConnect();</span><br><span class="line">// 释放内存</span><br><span class="line">void freeMemory(char** buf);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">// 设置I/O为非阻塞模式</span><br><span class="line">int blockIO(int fd);</span><br><span class="line">// 设置I/O为阻塞模式</span><br><span class="line">int noBlockIO(int fd);</span><br><span class="line">// 读超时检测函数，不含读操作</span><br><span class="line">int readTimeout(unsigned int wait_seconds);</span><br><span class="line">// 写超时检测函数, 不包含写操作</span><br><span class="line">int writeTimeout(unsigned int wait_seconds);</span><br><span class="line">// 带连接超时的connect函数</span><br><span class="line">int connectTimeout(struct sockaddr_in *addr, unsigned int wait_seconds);</span><br><span class="line">// 每次从缓冲区中读取n个字符</span><br><span class="line">int readn(void *buf, int count);</span><br><span class="line">// 每次往缓冲区写入n个字符</span><br><span class="line">int writen(const void *buf, int count);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int m_socket;// 用于通信的套接字</span><br><span class="line">ItcastLog m_log;// log对象</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="tcpsocketcpp"><a class="markdownIt-Anchor" href="#tcpsocketcpp"></a> TcpSocket.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;TcpSocket.h&quot;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line">#include &lt;sys/types.h&gt;</span><br><span class="line">#include &lt;fcntl.h&gt;</span><br><span class="line">#include &lt;sys/select.h&gt;</span><br><span class="line">#include &lt;sys/time.h&gt;</span><br><span class="line">#include &lt;sys/socket.h&gt;</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &lt;netdb.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">TcpSocket::TcpSocket()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TcpSocket::TcpSocket(int connfd)</span><br><span class="line">&#123;</span><br><span class="line">m_socket = connfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::~TcpSocket()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int TcpSocket::connectToHost(char * ip, unsigned short port, int timeout)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (ip == NULL || port &lt;= 0 || port &gt; 65535 || timeout &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func sckClient_connect() err, check  (ip==NULL || connfd==NULL || port&lt;=0 || port&gt;65537 || connecttime &lt; 0)&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line">if (m_socket &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">printf(&quot;func socket() err:  %d\n&quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(port);</span><br><span class="line">servaddr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line"></span><br><span class="line">ret = connectTimeout((struct sockaddr_in*) (&amp;servaddr), (unsigned int)timeout);</span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if (ret == -1 &amp;&amp; errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;func connect_timeout() err:  %d\n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func connect_timeout() err&quot;);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int TcpSocket::sendMsg(char * sendData, int dataLen, int timeout)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line"></span><br><span class="line">if (sendData == NULL || dataLen &lt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func sckClient_send() err, check (data == NULL || datalen &lt;= 0)&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = writeTimeout(timeout);</span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">int writed = 0;</span><br><span class="line">unsigned char *netdata = (unsigned char *)malloc(dataLen + 4);</span><br><span class="line">if (netdata == NULL)</span><br><span class="line">&#123;</span><br><span class="line">ret = MallocError;</span><br><span class="line">printf(&quot;func sckClient_send() mlloc Err:%d\n &quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">int netlen = htonl(dataLen);</span><br><span class="line">memcpy(netdata, &amp;netlen, 4);</span><br><span class="line">memcpy(netdata + 4, sendData, dataLen);</span><br><span class="line"></span><br><span class="line">writed = writen(netdata, dataLen + 4);</span><br><span class="line">if (writed &lt; (dataLen + 4))</span><br><span class="line">&#123;</span><br><span class="line">if (netdata != NULL)</span><br><span class="line">&#123;</span><br><span class="line">free(netdata);</span><br><span class="line">netdata = NULL;</span><br><span class="line">&#125;</span><br><span class="line">return writed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (netdata != NULL)  //wangbaoming 20150630 modify bug</span><br><span class="line">&#123;</span><br><span class="line">free(netdata);</span><br><span class="line">netdata = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">//失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">if (ret == -1 &amp;&amp; errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line">printf(&quot;func sckClient_send() mlloc Err:%d\n &quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int TcpSocket::recvMsg(char ** recvData, int &amp; recvLen, int timeout)</span><br><span class="line">&#123;</span><br><span class="line">intret = 0;</span><br><span class="line"></span><br><span class="line">if (recvData == NULL || recvLen == NULL)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line">printf(&quot;func sckClient_rev() timeout , err:%d \n&quot;, TimeoutError);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = readTimeout(timeout); //bugs modify bombing</span><br><span class="line">if (ret != 0)</span><br><span class="line">&#123;</span><br><span class="line">if (ret == -1 || errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func read_timeout() timeout&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func read_timeout() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int netdatalen = 0;</span><br><span class="line">ret = readn(&amp;netdatalen, 4); //读包头 4个字节</span><br><span class="line">if (ret == -1)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;func readn() err:%d \n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func readn() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret &lt; 4)</span><br><span class="line">&#123;</span><br><span class="line">ret = PeerCloseError;</span><br><span class="line">//printf(&quot;func readn() err peer closed:%d \n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func readn() err, peer closed&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int n;</span><br><span class="line">n = ntohl(netdatalen);</span><br><span class="line">char* tmpBuf = (char *)malloc(n + 1);</span><br><span class="line">if (tmpBuf == NULL)</span><br><span class="line">&#123;</span><br><span class="line">ret = MallocError;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;malloc() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = readn(tmpBuf, n); //根据长度读数据</span><br><span class="line">if (ret == -1)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;func readn() err:%d \n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;readn() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">ret = PeerCloseError;</span><br><span class="line">//printf(&quot;func readn() err peer closed:%d \n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func readn() err,  peer closed&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*recvData = tmpBuf;</span><br><span class="line">recvLen = n;</span><br><span class="line">tmpBuf[n] = &apos;\0&apos;; //多分配一个字节内容，兼容可见字符串 字符串的真实长度仍然为n</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TcpSocket::disConnect()</span><br><span class="line">&#123;</span><br><span class="line">if (m_socket &gt;= 0)</span><br><span class="line">&#123;</span><br><span class="line">close(m_socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TcpSocket::freeMemory(char ** buf)</span><br><span class="line">&#123;</span><br><span class="line">if (*buf != NULL)</span><br><span class="line">&#123;</span><br><span class="line">free(*buf);</span><br><span class="line">*buf = NULL;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/////////////////////////////////////////////////</span><br><span class="line">//////             子函数                   //////</span><br><span class="line">/////////////////////////////////////////////////</span><br><span class="line">/*</span><br><span class="line">* blockIO - 设置I/O为非阻塞模式</span><br><span class="line">* @fd: 文件描符符</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::blockIO(int fd)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">int flags = fcntl(fd, F_GETFL);</span><br><span class="line">if (flags == -1)</span><br><span class="line">&#123;</span><br><span class="line">ret = flags;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func activate_nonblock() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flags |= O_NONBLOCK;</span><br><span class="line">ret = fcntl(fd, F_SETFL, flags);</span><br><span class="line">if (ret == -1)</span><br><span class="line">&#123;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func activate_nonblock() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* noBlockIO - 设置I/O为阻塞模式</span><br><span class="line">* @fd: 文件描符符</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::noBlockIO(int fd)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">int flags = fcntl(fd, F_GETFL);</span><br><span class="line">if (flags == -1)</span><br><span class="line">&#123;</span><br><span class="line">ret = flags;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func deactivate_nonblock() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flags &amp;= ~O_NONBLOCK;</span><br><span class="line">ret = fcntl(fd, F_SETFL, flags);</span><br><span class="line">if (ret == -1)</span><br><span class="line">&#123;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func deactivate_nonblock() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* readTimeout - 读超时检测函数，不含读操作</span><br><span class="line">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span><br><span class="line">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::readTimeout(unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">fd_set read_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;read_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;read_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line"></span><br><span class="line">//select返回值三态</span><br><span class="line">//1 若timeout时间到（超时），没有检测到读事件 ret返回=0</span><br><span class="line">//2 若ret返回&lt;0 &amp;&amp;  errno == EINTR 说明select的过程中被别的信号中断（可中断睡眠原理）</span><br><span class="line">//2-1 若返回-1，select出错</span><br><span class="line">//3 若ret返回值&gt;0 表示有read事件发生，返回事件发生的个数</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + 1, &amp;read_fdset, NULL, NULL, &amp;timeout);</span><br><span class="line"></span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* writeTimeout - 写超时检测函数，不含写操作</span><br><span class="line">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span><br><span class="line">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::writeTimeout(unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">fd_set write_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;write_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;write_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + 1, NULL, &amp;write_fdset, NULL, &amp;timeout);</span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* connectTimeout - connect</span><br><span class="line">* @addr: 要连接的对方地址</span><br><span class="line">* @wait_seconds: 等待超时秒数，如果为0表示正常模式</span><br><span class="line">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::connectTimeout(sockaddr_in *addr, unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret;</span><br><span class="line">socklen_t addrlen = sizeof(struct sockaddr_in);</span><br><span class="line"></span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">blockIO(m_socket);</span><br><span class="line"></span><br><span class="line">ret = connect(m_socket, (struct sockaddr*)addr, addrlen);</span><br><span class="line">if (ret &lt; 0 &amp;&amp; errno == EINPROGRESS)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;11111111111111111111\n&quot;);</span><br><span class="line">fd_set connect_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line">FD_ZERO(&amp;connect_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;connect_fdset);</span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">// 一但连接建立，则套接字就可写  所以connect_fdset放在了写集合中</span><br><span class="line">ret = select(m_socket + 1, NULL, &amp;connect_fdset, NULL, &amp;timeout);</span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret &lt; 0)</span><br><span class="line">return -1;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;22222222222222222\n&quot;);</span><br><span class="line">/* ret返回为1（表示套接字可写），可能有两种情况，一种是连接建立成功，一种是套接字产生错误，*/</span><br><span class="line">/* 此时错误信息不会保存至errno变量中，因此，需要调用getsockopt来获取。 */</span><br><span class="line">int err;</span><br><span class="line">socklen_t socklen = sizeof(err);</span><br><span class="line">int sockoptret = getsockopt(m_socket, SOL_SOCKET, SO_ERROR, &amp;err, &amp;socklen);</span><br><span class="line">if (sockoptret == -1)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">if (err == 0)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;3333333333333\n&quot;);</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;4444444444444444:%d\n&quot;, err);</span><br><span class="line">errno = err;</span><br><span class="line">ret = -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">noBlockIO(m_socket);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* readn - 读取固定字节数</span><br><span class="line">* @fd: 文件描述符</span><br><span class="line">* @buf: 接收缓冲区</span><br><span class="line">* @count: 要读取的字节数</span><br><span class="line">* 成功返回count，失败返回-1，读到EOF返回&lt;count</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::readn(void *buf, int count)</span><br><span class="line">&#123;</span><br><span class="line">size_t nleft = count;</span><br><span class="line">ssize_t nread;</span><br><span class="line">char *bufp = (char*)buf;</span><br><span class="line"></span><br><span class="line">while (nleft &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if ((nread = read(m_socket, bufp, nleft)) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if (errno == EINTR)</span><br><span class="line">continue;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if (nread == 0)</span><br><span class="line">return count - nleft;</span><br><span class="line"></span><br><span class="line">bufp += nread;</span><br><span class="line">nleft -= nread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">* writen - 发送固定字节数</span><br><span class="line">* @buf: 发送缓冲区</span><br><span class="line">* @count: 要读取的字节数</span><br><span class="line">* 成功返回count，失败返回-1</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::writen(const void *buf, int count)</span><br><span class="line">&#123;</span><br><span class="line">size_t nleft = count;</span><br><span class="line">ssize_t nwritten;</span><br><span class="line">char *bufp = (char*)buf;</span><br><span class="line"></span><br><span class="line">while (nleft &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if ((nwritten = write(m_socket, bufp, nleft)) &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if (errno == EINTR)</span><br><span class="line">continue;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">else if (nwritten == 0)</span><br><span class="line">continue;</span><br><span class="line"></span><br><span class="line">bufp += nwritten;</span><br><span class="line">nleft -= nwritten;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><p><br><br><br></p><h2 id="服务端类"><a class="markdownIt-Anchor" href="#服务端类"></a> 服务端类</h2><h3 id="tcpserverh"><a class="markdownIt-Anchor" href="#tcpserverh"></a> TcpServer.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &lt;netinet/in.h&gt;</span><br><span class="line">#include &lt;arpa/inet.h&gt;</span><br><span class="line">#include &quot;ItcastLog.h&quot;</span><br><span class="line">#include &quot;TcpSocket.h&quot;</span><br><span class="line">// 超时的时间</span><br><span class="line">// static const int TIMEOUT = 10000;</span><br><span class="line"></span><br><span class="line">class TcpServer</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">TcpServer();</span><br><span class="line">~TcpServer();</span><br><span class="line"></span><br><span class="line">// 服务器设置监听</span><br><span class="line">int setListen(unsigned short port);</span><br><span class="line">// 等待并接受客户端连接请求, 默认连接超时时间为10000s</span><br><span class="line">TcpSocket* acceptConn(int timeout = 10000);</span><br><span class="line">void closefd();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int acceptTimeout(int wait_seconds);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">int m_lfd;// 用于监听的文件描述符</span><br><span class="line">struct sockaddr_in m_addrCli;</span><br><span class="line">ItcastLog m_log;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="tcpservercpp"><a class="markdownIt-Anchor" href="#tcpservercpp"></a> TcpServer.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;TcpServer.h&quot;</span><br><span class="line">#include &lt;errno.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;unistd.h&gt;</span><br><span class="line"></span><br><span class="line">TcpServer::TcpServer()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TcpServer::~TcpServer()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int TcpServer::setListen(unsigned short port)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">struct sockaddr_in servaddr;</span><br><span class="line">memset(&amp;servaddr, 0, sizeof(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(port);</span><br><span class="line">servaddr.sin_addr.s_addr = htonl(INADDR_ANY);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m_lfd = socket(PF_INET, SOCK_STREAM, 0);</span><br><span class="line">if (m_lfd &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func socket() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int on = 1;</span><br><span class="line">ret = setsockopt(m_lfd, SOL_SOCKET, SO_REUSEADDR, &amp;on, sizeof(on));</span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func setsockopt() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = bind(m_lfd, (struct sockaddr*)&amp;servaddr, sizeof(servaddr));</span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func bind() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = listen(m_lfd, SOMAXCONN);</span><br><span class="line">if (ret &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func listen() err&quot;);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket* TcpServer::acceptConn(int timeout)</span><br><span class="line">&#123;</span><br><span class="line">int connfd = acceptTimeout(timeout);</span><br><span class="line">if (connfd &lt; 0)</span><br><span class="line">&#123;</span><br><span class="line">if (connfd == -1 &amp;&amp; errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;func accept_timeout() timeout err:%d \n&quot;, ret);</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, connfd, &quot;func acceptConn() TimeOutError&quot;);</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, connfd, &quot;func acceptConn() OtherError&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return new TcpSocket(connfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void TcpServer::closefd()</span><br><span class="line">&#123;</span><br><span class="line">close(m_lfd);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int TcpServer::acceptTimeout(int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret;</span><br><span class="line">socklen_t addrlen = sizeof(struct sockaddr_in);</span><br><span class="line"></span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">fd_set accept_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line">FD_ZERO(&amp;accept_fdset);</span><br><span class="line">FD_SET(m_lfd, &amp;accept_fdset);</span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_lfd + 1, &amp;accept_fdset, NULL, NULL, &amp;timeout);</span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line">if (ret == -1)</span><br><span class="line">return -1;</span><br><span class="line">else if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//一但检测出 有select事件发生，表示对等方完成了三次握手，客户端有新连接建立</span><br><span class="line">//此时再调用accept将不会堵塞</span><br><span class="line">ret = accept(m_lfd, (struct sockaddr*)&amp;m_addrCli, &amp;addrlen); //返回已连接套接字</span><br><span class="line">if (ret == -1)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line">m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, ret, &quot;func accept() err&quot;);</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tcpsocketh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcpsocketh&quot;&gt;&lt;/a&gt; TcpSocket.h&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td cla
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用select函数实现超时控制</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/24/%E4%BD%BF%E7%94%A8select%E5%87%BD%E6%95%B0%E5%AE%9E%E7%8E%B0%E8%B6%85%E6%97%B6%E6%8E%A7%E5%88%B6/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/24/使用select函数实现超时控制/</id>
    <published>2022-05-23T23:54:43.000Z</published>
    <updated>2022-05-24T00:10:19.711Z</updated>
    
    <content type="html"><![CDATA[<h3 id="recv"><a class="markdownIt-Anchor" href="#recv"></a> recv</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">recv(sockfd,buf,len,MSG_PEEK);</span><br></pre></td></tr></table></figure><p>MSG_PEEK代表从缓冲区提取数据之后,缓冲区原来的数据不会丢失</p><p>相当于复制一份</p><p><br><br></p><h3 id="实现sleep10的功能"><a class="markdownIt-Anchor" href="#实现sleep10的功能"></a> 实现sleep(10)的功能:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select(fd + 1, &amp;NULL, NULL, NULL, &amp;timeout);</span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="超时"><a class="markdownIt-Anchor" href="#超时"></a> 超时</h3><ul><li>接受客户端连接请求超时(accept)</li><li>建立连接请求超时(connect)</li><li>发送请求超时(write，send或sendto)</li><li>接收请求超时(recv或read)</li><li><br><br><br><br></li></ul><h3 id="连接服务端超时实现"><a class="markdownIt-Anchor" href="#连接服务端超时实现"></a> 连接服务端超时实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">int TcpSocket::connectTimeout(sockaddr_in *addr, unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret;</span><br><span class="line">socklen_t addrlen = sizeof(struct sockaddr_in);</span><br><span class="line"></span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">blockIO(m_socket);</span><br><span class="line"></span><br><span class="line">ret = connect(m_socket, (struct sockaddr*)addr, addrlen);</span><br><span class="line">if (ret &lt; 0 &amp;&amp; errno == EINPROGRESS)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;11111111111111111111\n&quot;);</span><br><span class="line">fd_set connect_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line">FD_ZERO(&amp;connect_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;connect_fdset);</span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">// 一但连接建立，则套接字就可写  所以connect_fdset放在了写集合中</span><br><span class="line">ret = select(m_socket + 1, NULL, &amp;connect_fdset, NULL, &amp;timeout);</span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret &lt; 0)</span><br><span class="line">return -1;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;22222222222222222\n&quot;);</span><br><span class="line">/* ret返回为1（表示套接字可写），可能有两种情况，一种是连接建立成功，一种是套接字产生错误，*/</span><br><span class="line">/* 此时错误信息不会保存至errno变量中，因此，需要调用getsockopt来获取。 */</span><br><span class="line">int err;</span><br><span class="line">socklen_t socklen = sizeof(err);</span><br><span class="line">int sockoptret = getsockopt(m_socket, SOL_SOCKET, SO_ERROR, &amp;err, &amp;socklen);</span><br><span class="line">if (sockoptret == -1)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line">if (err == 0)</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;3333333333333\n&quot;);</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line">else</span><br><span class="line">&#123;</span><br><span class="line">//printf(&quot;4444444444444444:%d\n&quot;, err);</span><br><span class="line">errno = err;</span><br><span class="line">ret = -1;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">noBlockIO(m_socket);</span><br><span class="line">&#125;</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br><br><br></p><h3 id="发送数据超时检测实现"><a class="markdownIt-Anchor" href="#发送数据超时检测实现"></a> 发送数据超时检测实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* writeTimeout - 写超时检测函数，不含写操作</span><br><span class="line">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span><br><span class="line">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::writeTimeout(unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">fd_set write_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;write_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;write_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + 1, NULL, &amp;write_fdset, NULL, &amp;timeout);</span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="读超时检测实现"><a class="markdownIt-Anchor" href="#读超时检测实现"></a> 读超时检测实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">/*</span><br><span class="line">* readTimeout - 读超时检测函数，不含读操作</span><br><span class="line">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span><br><span class="line">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span><br><span class="line">*/</span><br><span class="line">int TcpSocket::readTimeout(unsigned int wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line">int ret = 0;</span><br><span class="line">if (wait_seconds &gt; 0)</span><br><span class="line">&#123;</span><br><span class="line">fd_set read_fdset;</span><br><span class="line">struct timeval timeout;</span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;read_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;read_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = 0;</span><br><span class="line"></span><br><span class="line">//select返回值三态</span><br><span class="line">//1 若timeout时间到（超时），没有检测到读事件 ret返回=0</span><br><span class="line">//2 若ret返回&lt;0 &amp;&amp;  errno == EINTR 说明select的过程中被别的信号中断（可中断睡眠原理）</span><br><span class="line">//2-1 若返回-1，select出错</span><br><span class="line">//3 若ret返回值&gt;0 表示有read事件发生，返回事件发生的个数</span><br><span class="line"></span><br><span class="line">do</span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + 1, &amp;read_fdset, NULL, NULL, &amp;timeout);</span><br><span class="line"></span><br><span class="line">&#125; while (ret &lt; 0 &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line">if (ret == 0)</span><br><span class="line">&#123;</span><br><span class="line">ret = -1;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line">else if (ret == 1)</span><br><span class="line">ret = 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;recv&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#recv&quot;&gt;&lt;/a&gt; recv&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>客户端连接池</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/24/%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5%E6%B1%A0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/24/客户端连接池/</id>
    <published>2022-05-23T23:47:47.000Z</published>
    <updated>2022-05-23T23:53:19.109Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tcpsocketh"><a class="markdownIt-Anchor" href="#tcpsocketh"></a> TcpSocket.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化连接池的结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PoolParam</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> bounds; <span class="comment">//池容量</span></span><br><span class="line"><span class="keyword">int</span> connecttime;</span><br><span class="line"><span class="keyword">int</span> sendtime;</span><br><span class="line"><span class="keyword">int</span> revtime;</span><br><span class="line"><span class="built_in">string</span> serverip;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> serverport;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PoolSocket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> ErrorType &#123;</span><br><span class="line">ParamErr = <span class="number">3000</span> + <span class="number">1</span>,</span><br><span class="line">TimeOut,</span><br><span class="line">PeerClose,</span><br><span class="line">MallocErr,</span><br><span class="line">CreateConnErr,<span class="comment">// 创建连接池 （没有达到最大连接数）</span></span><br><span class="line">terminated,<span class="comment">// 已终止</span></span><br><span class="line">ValidIsZero,<span class="comment">// 有效连接数是零</span></span><br><span class="line">HaveExist,<span class="comment">// 连接已经在池中</span></span><br><span class="line">ValidBounds<span class="comment">// 有效连接数目超过了最大连接数</span></span><br><span class="line">&#125;;</span><br><span class="line">PoolSocket();</span><br><span class="line">~PoolSocket();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">poolInit</span><span class="params">(PoolParam *param)</span></span>;</span><br><span class="line"><span class="comment">// 从连接池中获取一条连接</span></span><br><span class="line"><span class="function">TcpSocket* <span class="title">getConnect</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 将连接放回到连接池</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">putConnect</span><span class="params">(TcpSocket* sock, <span class="keyword">bool</span> isValid)</span></span>;</span><br><span class="line"><span class="comment">// 释放连接池资源</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">poolDestory</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">curConnSize</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">connectServer</span><span class="params">(<span class="keyword">bool</span> recursion = <span class="literal">true</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">void</span>* m_handle;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="tcpsocketcpp"><a class="markdownIt-Anchor" href="#tcpsocketcpp"></a> TcpSocket.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PoolSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;pthread.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Socket连接池结构PoolHandle</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">PoolHandle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="built_in">queue</span>&lt;TcpSocket*&gt; sockList;<span class="comment">// 存储可以通信的套接字对象</span></span><br><span class="line"><span class="keyword">int</span>bounds;<span class="comment">// Socket连接池的容量</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> serverip;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">short</span> serverport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> connecttime;</span><br><span class="line"><span class="keyword">int</span>sTimeout; <span class="comment">// 没有连接时，等待之间</span></span><br><span class="line"><span class="keyword">pthread_mutex_t</span> foo_mutex;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">PoolSocket::PoolSocket()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">PoolSocket::~PoolSocket()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PoolSocket::poolInit(PoolParam * param)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">new</span> PoolHandle;</span><br><span class="line">m_handle = hdl;</span><br><span class="line"><span class="comment">//初始化 句柄</span></span><br><span class="line"><span class="keyword">if</span> (hdl == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = MallocErr;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据初始化</span></span><br><span class="line">hdl-&gt;serverip = param-&gt;serverip;</span><br><span class="line">hdl-&gt;serverport = param-&gt;serverport;</span><br><span class="line">hdl-&gt;connecttime = param-&gt;connecttime;</span><br><span class="line"><span class="comment">//处理连接数</span></span><br><span class="line">hdl-&gt;bounds = param-&gt;bounds;</span><br><span class="line">hdl-&gt;sTimeout = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_init(&amp;(hdl-&gt;foo_mutex), <span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">pthread_mutex_lock(&amp;(hdl-&gt;foo_mutex)); <span class="comment">//流程加锁</span></span><br><span class="line"><span class="comment">// 创建用于通信的套接字对象</span></span><br><span class="line">connectServer();</span><br><span class="line">pthread_mutex_unlock(&amp;(hdl-&gt;foo_mutex)); <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket* PoolSocket::getConnect()</span><br><span class="line">&#123;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">static_cast</span>&lt;PoolHandle*&gt;(m_handle);</span><br><span class="line"><span class="comment">// 流程加锁 pthread_mutex_unlock(&amp; (hdl-&gt;foo_mutex) ); //解锁</span></span><br><span class="line">pthread_mutex_lock(&amp;(hdl-&gt;foo_mutex)); </span><br><span class="line"></span><br><span class="line"><span class="comment">// 若 有效连数 = 0</span></span><br><span class="line"><span class="keyword">if</span> (hdl-&gt;sockList.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">usleep(hdl-&gt;sTimeout); <span class="comment">//等上几微妙</span></span><br><span class="line"><span class="comment">// 还是没有可用的连接</span></span><br><span class="line"><span class="keyword">if</span> (hdl-&gt;sockList.size() == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 从对头取出一条连接, 并将该节点弹出</span></span><br><span class="line">TcpSocket* sock = hdl-&gt;sockList.front();</span><br><span class="line">hdl-&gt;sockList.pop();</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"取出一条连接, 剩余连接数: "</span> &lt;&lt; curConnSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">pthread_mutex_unlock(&amp;(hdl-&gt;foo_mutex)); <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PoolSocket::putConnect(TcpSocket* sock, <span class="keyword">bool</span> isValid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">static_cast</span>&lt;PoolHandle*&gt;(m_handle);</span><br><span class="line">pthread_mutex_lock(&amp;(hdl-&gt;foo_mutex)); <span class="comment">//流程加锁 </span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 判断连接是否已经被 放进来 </span></span><br><span class="line"><span class="comment">// 判断该连接是否已经被释放</span></span><br><span class="line"><span class="keyword">if</span> (isValid)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 连接可用, 放入队列</span></span><br><span class="line">hdl-&gt;sockList.push(sock);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"放回一条连接, 剩余连接数: "</span> &lt;&lt; curConnSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 套接字不可用, 析构对象, 在创建一个新的连接</span></span><br><span class="line">sock-&gt;disConnect();</span><br><span class="line"><span class="keyword">delete</span> sock;</span><br><span class="line">connectServer(<span class="literal">false</span>);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"修复一条连接, 剩余连接数: "</span> &lt;&lt; curConnSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">pthread_mutex_unlock(&amp;(hdl-&gt;foo_mutex)); <span class="comment">//解锁</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PoolSocket::poolDestory()</span><br><span class="line">&#123;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">static_cast</span>&lt;PoolHandle*&gt;(m_handle);</span><br><span class="line"><span class="comment">// 遍历队列</span></span><br><span class="line"><span class="keyword">while</span> (hdl-&gt;sockList.size() != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 取出对头元素</span></span><br><span class="line">TcpSocket* sock = hdl-&gt;sockList.front();</span><br><span class="line"><span class="comment">// 弹出对头原始</span></span><br><span class="line">hdl-&gt;sockList.pop();</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="keyword">delete</span> sock;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">delete</span> hdl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> PoolSocket::curConnSize()</span><br><span class="line">&#123;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">static_cast</span>&lt;PoolHandle*&gt;(m_handle);</span><br><span class="line"><span class="keyword">return</span> hdl-&gt;sockList.size();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> PoolSocket::connectServer(<span class="keyword">bool</span> recursion)</span><br><span class="line">&#123;</span><br><span class="line">PoolHandle *hdl = <span class="keyword">static_cast</span>&lt;PoolHandle*&gt;(m_handle);</span><br><span class="line"><span class="keyword">if</span> ((<span class="keyword">int</span>)hdl-&gt;sockList.size() == hdl-&gt;bounds)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"连接池对象初始化完毕, ^_^ ..."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Poll Size: "</span> &lt;&lt; hdl-&gt;sockList.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Poll bounds: "</span> &lt;&lt; hdl-&gt;bounds &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">TcpSocket* socket = <span class="keyword">new</span> TcpSocket;</span><br><span class="line"><span class="keyword">char</span>* ip = <span class="keyword">const_cast</span>&lt;<span class="keyword">char</span>*&gt;(hdl-&gt;serverip.data());</span><br><span class="line"><span class="keyword">int</span> ret = socket-&gt;connectToHost(ip, hdl-&gt;serverport, hdl-&gt;connecttime);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 成功连接服务器</span></span><br><span class="line">hdl-&gt;sockList.push(socket);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Connect count: "</span> &lt;&lt; hdl-&gt;sockList.size() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 失败</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"连接服务器失败 - index: "</span> &lt;&lt; hdl-&gt;sockList.size()+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="comment">// 释放对象</span></span><br><span class="line"><span class="keyword">delete</span> socket;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (recursion)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 递归调用</span></span><br><span class="line">connectServer();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"PoolSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">PoolSocket pool;</span><br><span class="line"><span class="comment">// 连接池的结构体</span></span><br><span class="line">PoolParam param;</span><br><span class="line">param.bounds = <span class="number">10</span>;</span><br><span class="line">param.connecttime = <span class="number">100</span>;</span><br><span class="line">param.revtime = <span class="number">100</span>;</span><br><span class="line">param.sendtime = <span class="number">100</span>;</span><br><span class="line">param.serverip = <span class="string">"127.0.0.1"</span>;</span><br><span class="line">param.serverport = <span class="number">9999</span>;</span><br><span class="line">pool.poolInit(&amp;param);</span><br><span class="line"><span class="built_in">queue</span>&lt;TcpSocket*&gt; <span class="built_in">list</span>;</span><br><span class="line"><span class="keyword">while</span> (pool.curConnSize())</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">TcpSocket* sock = pool.getConnect();</span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"hello, server ... "</span> + to_string(i++);</span><br><span class="line">sock-&gt;sendMsg((<span class="keyword">char</span>*)str.c_str(), str.size());</span><br><span class="line"><span class="built_in">list</span>.push(sock);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span> (!<span class="built_in">list</span>.empty())</span><br><span class="line">&#123;</span><br><span class="line">TcpSocket* t = <span class="built_in">list</span>.front();</span><br><span class="line">pool.putConnect(t, <span class="literal">false</span>);</span><br><span class="line"><span class="built_in">list</span>.pop();</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"max value: "</span> &lt;&lt; pool.curConnSize() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">while</span> (<span class="number">1</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tcpsocketh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcpsocketh&quot;&gt;&lt;/a&gt; TcpSocket.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>通信的套接字类</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/24/%E9%80%9A%E4%BF%A1%E7%9A%84%E5%A5%97%E6%8E%A5%E5%AD%97%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/24/通信的套接字类/</id>
    <published>2022-05-23T23:44:47.000Z</published>
    <updated>2022-05-23T23:46:52.081Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tcpsocketh"><a class="markdownIt-Anchor" href="#tcpsocketh"></a> TcpSocket.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/* 用于通信的套接字类 */</span></span><br><span class="line"><span class="comment">// 超时的时间</span></span><br><span class="line"><span class="keyword">static</span> <span class="keyword">const</span> <span class="keyword">int</span> TIMEOUT = <span class="number">1000</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TcpSocket</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">enum</span> ErrorType &#123;ParamError = <span class="number">3001</span>, TimeoutError, PeerCloseError, MallocError&#125;;</span><br><span class="line">TcpSocket();</span><br><span class="line"><span class="comment">// 使用一个可以用于通信的套接字实例化套接字对象</span></span><br><span class="line">TcpSocket(<span class="keyword">int</span> connfd);</span><br><span class="line">~TcpSocket();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 连接服务器</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connectToHost</span><span class="params">(<span class="keyword">char</span>* ip, <span class="keyword">unsigned</span> <span class="keyword">short</span> port, <span class="keyword">int</span> timeout = TIMEOUT)</span></span>;</span><br><span class="line"><span class="comment">// 发送数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sendMsg</span><span class="params">(<span class="keyword">char</span>* sendData, <span class="keyword">int</span> dataLen, <span class="keyword">int</span> timeout = TIMEOUT)</span></span>;</span><br><span class="line"><span class="comment">// 接收数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">recvMsg</span><span class="params">(<span class="keyword">char</span>** recvData, <span class="keyword">int</span> &amp;recvLen, <span class="keyword">int</span> timeout = TIMEOUT)</span></span>;</span><br><span class="line"><span class="comment">// 断开连接</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">disConnect</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">// 释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">freeMemory</span><span class="params">(<span class="keyword">char</span>** buf)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="comment">// 设置I/O为非阻塞模式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">blockIO</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="comment">// 设置I/O为阻塞模式</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">noBlockIO</span><span class="params">(<span class="keyword">int</span> fd)</span></span>;</span><br><span class="line"><span class="comment">// 读超时检测函数，不含读操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readTimeout</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span></span>;</span><br><span class="line"><span class="comment">// 写超时检测函数, 不包含写操作</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writeTimeout</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span></span>;</span><br><span class="line"><span class="comment">// 带连接超时的connect函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">connectTimeout</span><span class="params">(struct sockaddr_in *addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span></span>;</span><br><span class="line"><span class="comment">// 每次从缓冲区中读取n个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">readn</span><span class="params">(<span class="keyword">void</span> *buf, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"><span class="comment">// 每次往缓冲区写入n个字符</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">writen</span><span class="params">(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">int</span> count)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_socket;<span class="comment">// 用于通信的套接字</span></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br><h3 id="tcpsocketcpp"><a class="markdownIt-Anchor" href="#tcpsocketcpp"></a> TcpSocket.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"TcpSocket.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/select.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/time.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/socket.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netinet/in.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;arpa/inet.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;netdb.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;errno.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line">TcpSocket::TcpSocket()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">TcpSocket::TcpSocket(<span class="keyword">int</span> connfd)</span><br><span class="line">&#123;</span><br><span class="line">m_socket = connfd;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">TcpSocket::~TcpSocket()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TcpSocket 被析构...\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> TcpSocket::connectToHost(<span class="keyword">char</span> * ip, <span class="keyword">unsigned</span> <span class="keyword">short</span> port, <span class="keyword">int</span> timeout)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (ip == <span class="literal">NULL</span> || port &lt;= <span class="number">0</span> || port &gt; <span class="number">65535</span> || timeout &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">m_socket = socket(PF_INET, SOCK_STREAM, IPPROTO_TCP);</span><br><span class="line"><span class="keyword">if</span> (m_socket &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = errno;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func socket() err:  %d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">sockaddr_in</span> <span class="title">servaddr</span>;</span></span><br><span class="line"><span class="built_in">memset</span>(&amp;servaddr, <span class="number">0</span>, <span class="keyword">sizeof</span>(servaddr));</span><br><span class="line">servaddr.sin_family = AF_INET;</span><br><span class="line">servaddr.sin_port = htons(port);</span><br><span class="line">servaddr.sin_addr.s_addr = inet_addr(ip);</span><br><span class="line"></span><br><span class="line">ret = connectTimeout((struct sockaddr_in*) (&amp;servaddr), (<span class="keyword">unsigned</span> <span class="keyword">int</span>)timeout);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span> &amp;&amp; errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("func connect_timeout() err:  %d\n", ret);</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> TcpSocket::sendMsg(<span class="keyword">char</span> * sendData, <span class="keyword">int</span> dataLen, <span class="keyword">int</span> timeout)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (sendData == <span class="literal">NULL</span> || dataLen &lt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = writeTimeout(timeout);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> writed = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> *netdata = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(dataLen + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (netdata == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = MallocError;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func sckClient_send() mlloc Err:%d\n "</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> netlen = htonl(dataLen);</span><br><span class="line"><span class="built_in">memcpy</span>(netdata, &amp;netlen, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(netdata + <span class="number">4</span>, sendData, dataLen);</span><br><span class="line"></span><br><span class="line">writed = writen(netdata, dataLen + <span class="number">4</span>);</span><br><span class="line"><span class="keyword">if</span> (writed &lt; (dataLen + <span class="number">4</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (netdata != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(netdata);</span><br><span class="line">netdata = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> writed;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (netdata != <span class="literal">NULL</span>)  <span class="comment">//wangbaoming 20150630 modify bug</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(netdata);</span><br><span class="line">netdata = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//失败返回-1，超时返回-1并且errno = ETIMEDOUT</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span> &amp;&amp; errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func sckClient_send() mlloc Err:%d\n "</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> TcpSocket::recvMsg(<span class="keyword">char</span> ** recvData, <span class="keyword">int</span> &amp; recvLen, <span class="keyword">int</span> timeout)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span>ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (recvData == <span class="literal">NULL</span> || recvLen == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = ParamError;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func sckClient_rev() timeout , err:%d \n"</span>, TimeoutError);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = readTimeout(timeout); <span class="comment">//bugs modify bombing</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span> || errno == ETIMEDOUT)</span><br><span class="line">&#123;</span><br><span class="line">ret = TimeoutError;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> netdatalen = <span class="number">0</span>;</span><br><span class="line">ret = readn(&amp;netdatalen, <span class="number">4</span>); <span class="comment">//读包头 4个字节</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("func readn() err:%d \n", ret);</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">4</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = PeerCloseError;</span><br><span class="line"><span class="comment">//printf("func readn() err peer closed:%d \n", ret);</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line">n = ntohl(netdatalen);</span><br><span class="line"><span class="keyword">char</span>* tmpBuf = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(n + <span class="number">1</span>);</span><br><span class="line"><span class="keyword">if</span> (tmpBuf == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = MallocError;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ret = readn(tmpBuf, n); <span class="comment">//根据长度读数据</span></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("func readn() err:%d \n", ret);</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; n)</span><br><span class="line">&#123;</span><br><span class="line">ret = PeerCloseError;</span><br><span class="line"><span class="comment">//printf("func readn() err peer closed:%d \n", ret);</span></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*recvData = tmpBuf;</span><br><span class="line">recvLen = n;</span><br><span class="line">tmpBuf[n] = <span class="string">'\0'</span>; <span class="comment">//多分配一个字节内容，兼容可见字符串 字符串的真实长度仍然为n</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TcpSocket::disConnect()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_socket &gt;= <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">close(m_socket);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> TcpSocket::freeMemory(<span class="keyword">char</span> ** buf)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (*buf != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(*buf);</span><br><span class="line">*buf = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">//////             子函数                   //////</span></span><br><span class="line"><span class="comment">/////////////////////////////////////////////////</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* blockIO - 设置I/O为非阻塞模式</span></span><br><span class="line"><span class="comment">* @fd: 文件描符符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::blockIO(<span class="keyword">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flags = fcntl(fd, F_GETFL);</span><br><span class="line"><span class="keyword">if</span> (flags == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = flags;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flags |= O_NONBLOCK;</span><br><span class="line">ret = fcntl(fd, F_SETFL, flags);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* noBlockIO - 设置I/O为阻塞模式</span></span><br><span class="line"><span class="comment">* @fd: 文件描符符</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::noBlockIO(<span class="keyword">int</span> fd)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> flags = fcntl(fd, F_GETFL);</span><br><span class="line"><span class="keyword">if</span> (flags == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = flags;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">flags &amp;= ~O_NONBLOCK;</span><br><span class="line">ret = fcntl(fd, F_SETFL, flags);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* readTimeout - 读超时检测函数，不含读操作</span></span><br><span class="line"><span class="comment">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span></span><br><span class="line"><span class="comment">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::readTimeout(<span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (wait_seconds &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">fd_set read_fdset;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;read_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;read_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//select返回值三态</span></span><br><span class="line"><span class="comment">//1 若timeout时间到（超时），没有检测到读事件 ret返回=0</span></span><br><span class="line"><span class="comment">//2 若ret返回&lt;0 &amp;&amp;  errno == EINTR 说明select的过程中被别的信号中断（可中断睡眠原理）</span></span><br><span class="line"><span class="comment">//2-1 若返回-1，select出错</span></span><br><span class="line"><span class="comment">//3 若ret返回值&gt;0 表示有read事件发生，返回事件发生的个数</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + <span class="number">1</span>, &amp;read_fdset, <span class="literal">NULL</span>, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line"></span><br><span class="line">&#125; <span class="keyword">while</span> (ret &lt; <span class="number">0</span> &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* writeTimeout - 写超时检测函数，不含写操作</span></span><br><span class="line"><span class="comment">* @wait_seconds: 等待超时秒数，如果为0表示不检测超时</span></span><br><span class="line"><span class="comment">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::writeTimeout(<span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">if</span> (wait_seconds &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">fd_set write_fdset;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line"></span><br><span class="line">FD_ZERO(&amp;write_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;write_fdset);</span><br><span class="line"></span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line">ret = select(m_socket + <span class="number">1</span>, <span class="literal">NULL</span>, &amp;write_fdset, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">&#125; <span class="keyword">while</span> (ret &lt; <span class="number">0</span> &amp;&amp; errno == EINTR);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* connectTimeout - connect</span></span><br><span class="line"><span class="comment">* @addr: 要连接的对方地址</span></span><br><span class="line"><span class="comment">* @wait_seconds: 等待超时秒数，如果为0表示正常模式</span></span><br><span class="line"><span class="comment">* 成功（未超时）返回0，失败返回-1，超时返回-1并且errno = ETIMEDOUT</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::connectTimeout(sockaddr_in *addr, <span class="keyword">unsigned</span> <span class="keyword">int</span> wait_seconds)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">socklen_t</span> addrlen = <span class="keyword">sizeof</span>(struct sockaddr_in);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (wait_seconds &gt; <span class="number">0</span>)</span><br><span class="line">blockIO(m_socket);</span><br><span class="line"></span><br><span class="line">ret = connect(m_socket, (struct sockaddr*)addr, addrlen);</span><br><span class="line"><span class="keyword">if</span> (ret &lt; <span class="number">0</span> &amp;&amp; errno == EINPROGRESS)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("11111111111111111111\n");</span></span><br><span class="line">fd_set connect_fdset;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">timeval</span> <span class="title">timeout</span>;</span></span><br><span class="line">FD_ZERO(&amp;connect_fdset);</span><br><span class="line">FD_SET(m_socket, &amp;connect_fdset);</span><br><span class="line">timeout.tv_sec = wait_seconds;</span><br><span class="line">timeout.tv_usec = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">do</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 一但连接建立，则套接字就可写  所以connect_fdset放在了写集合中</span></span><br><span class="line">ret = select(m_socket + <span class="number">1</span>, <span class="literal">NULL</span>, &amp;connect_fdset, <span class="literal">NULL</span>, &amp;timeout);</span><br><span class="line">&#125; <span class="keyword">while</span> (ret &lt; <span class="number">0</span> &amp;&amp; errno == EINTR);</span><br><span class="line"><span class="keyword">if</span> (ret == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line">errno = ETIMEDOUT;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret &lt; <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (ret == <span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("22222222222222222\n");</span></span><br><span class="line"><span class="comment">/* ret返回为1（表示套接字可写），可能有两种情况，一种是连接建立成功，一种是套接字产生错误，*/</span></span><br><span class="line"><span class="comment">/* 此时错误信息不会保存至errno变量中，因此，需要调用getsockopt来获取。 */</span></span><br><span class="line"><span class="keyword">int</span> err;</span><br><span class="line"><span class="keyword">socklen_t</span> socklen = <span class="keyword">sizeof</span>(err);</span><br><span class="line"><span class="keyword">int</span> sockoptret = getsockopt(m_socket, SOL_SOCKET, SO_ERROR, &amp;err, &amp;socklen);</span><br><span class="line"><span class="keyword">if</span> (sockoptret == <span class="number">-1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (err == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("3333333333333\n");</span></span><br><span class="line">ret = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//printf("4444444444444444:%d\n", err);</span></span><br><span class="line">errno = err;</span><br><span class="line">ret = <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (wait_seconds &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">noBlockIO(m_socket);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* readn - 读取固定字节数</span></span><br><span class="line"><span class="comment">* @fd: 文件描述符</span></span><br><span class="line"><span class="comment">* @buf: 接收缓冲区</span></span><br><span class="line"><span class="comment">* @count: 要读取的字节数</span></span><br><span class="line"><span class="comment">* 成功返回count，失败返回-1，读到EOF返回&lt;count</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::readn(<span class="keyword">void</span> *buf, <span class="keyword">int</span> count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> nleft = count;</span><br><span class="line"><span class="keyword">ssize_t</span> nread;</span><br><span class="line"><span class="keyword">char</span> *bufp = (<span class="keyword">char</span>*)buf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (nleft &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((nread = read(m_socket, bufp, nleft)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nread == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">return</span> count - nleft;</span><br><span class="line"></span><br><span class="line">bufp += nread;</span><br><span class="line">nleft -= nread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">* writen - 发送固定字节数</span></span><br><span class="line"><span class="comment">* @buf: 发送缓冲区</span></span><br><span class="line"><span class="comment">* @count: 要读取的字节数</span></span><br><span class="line"><span class="comment">* 成功返回count，失败返回-1</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> TcpSocket::writen(<span class="keyword">const</span> <span class="keyword">void</span> *buf, <span class="keyword">int</span> count)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">size_t</span> nleft = count;</span><br><span class="line"><span class="keyword">ssize_t</span> nwritten;</span><br><span class="line"><span class="keyword">char</span> *bufp = (<span class="keyword">char</span>*)buf;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (nleft &gt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> ((nwritten = write(m_socket, bufp, nleft)) &lt; <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (errno == EINTR)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span> (nwritten == <span class="number">0</span>)</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">bufp += nwritten;</span><br><span class="line">nleft -= nwritten;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> count;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;tcpsocketh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#tcpsocketh&quot;&gt;&lt;/a&gt; TcpSocket.h&lt;/h3&gt;
&lt;figure class=&quot;highlight cpp&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>封装ASN1类、工厂模式和单向散列函数</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/23/%E5%B0%81%E8%A3%85ASN1%E7%B1%BB-%E5%B7%A5%E5%8E%82%E6%A8%A1%E5%BC%8F%E5%92%8C%E5%8D%95%E5%90%91%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/23/封装ASN1类-工厂模式和单向散列函数/</id>
    <published>2022-05-22T18:01:12.000Z</published>
    <updated>2022-05-22T20:46:29.897Z</updated>
    
    <content type="html"><![CDATA[<p>下载地址:</p><p><a href="https://gitee.com/xiaochenyan/mypro/tree/master/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/%E5%B7%A5%E5%8E%82%E7%B1%BB%E5%92%8Chash" target="_blank" rel="noopener">https://gitee.com/xiaochenyan/mypro/tree/master/多端安全协议传输平台/工厂类和hash</a></p><br><br><br><p><img src="/images/javawz/image-20220523020138351.png" alt="image-20220523020138351"></p><br><br><br><h3 id="baseasn1类是asn1中的api进行封装"><a class="markdownIt-Anchor" href="#baseasn1类是asn1中的api进行封装"></a> BaseASN1类是ASN1中的API进行封装</h3><h3 id="baseasn1h"><a class="markdownIt-Anchor" href="#baseasn1h"></a> BaseASN1.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> BASEASN1_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> BASEASN1_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ItcastLog.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// #define ITCASTDER_NoErr 0</span></span><br><span class="line"><span class="comment">// 自定义基础数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">int</span>              ITCAST_INT;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>    ITCAST_UINT8;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">short</span>   ITCAST_UINT16;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">long</span>    ITCAST_UINT32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">signed</span> <span class="keyword">long</span>      ITCAST_SINT32;</span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">unsigned</span> <span class="keyword">char</span>    ITASN1_BOOLEAN;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 数据节点结构体(类)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    ITCAST_UINT8   *pData;</span><br><span class="line">    ITCAST_UINT32     dataLen;</span><br><span class="line"></span><br><span class="line">    ITCAST_UINT32     unusedBits;<span class="comment">/* for bit string */</span></span><br><span class="line">    ITCAST_UINT32     memoryType;</span><br><span class="line">    ITCAST_UINT32     dataType;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">next</span>;</span>    <span class="comment">/* for sequence and set */</span></span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">prev</span>;</span></span><br><span class="line">&#125;ITCAST_ANYBUF;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 自定义复合数据类型</span></span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_INTEGER;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_OCTETSTRING;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_BITSTRING;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_PRINTABLESTRING;</span><br><span class="line"><span class="comment">/*begin of bmpstring*/</span></span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF ITASN1_BMPSTRING;</span><br><span class="line"><span class="comment">/*end of bmpstring*/</span></span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_ENUMERATED;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_IA5STRING;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_SEQUENCE;</span><br><span class="line"><span class="keyword">typedef</span> ITCAST_ANYBUF    ITASN1_SET;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BaseASN1</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">// 标记内存类型</span></span><br><span class="line">    <span class="keyword">enum</span> MemoryType&#123;StaticMemory=<span class="number">1</span>, MallocMemory=<span class="number">2</span>&#125;;</span><br><span class="line">    <span class="comment">// 错误描述</span></span><br><span class="line">    <span class="keyword">enum</span> DerErrType&#123;</span><br><span class="line">        NoErr=<span class="number">0</span>,</span><br><span class="line">        MemoryErr=<span class="number">200</span>,</span><br><span class="line">        LengthErr,</span><br><span class="line">        LengthNotEqual,</span><br><span class="line">        DataRangeErr,</span><br><span class="line">        InvalidTag</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="comment">// 整形数的每一位代表不同的数据类型0-31, 即: tag的值对应的数据类型</span></span><br><span class="line">    <span class="keyword">enum</span> DerTag&#123;</span><br><span class="line">        ITCAST_DER_ID_RESERVED,</span><br><span class="line">        ITCAST_DER_ID_BOOLEAN,</span><br><span class="line">        ITCAST_DER_ID_INTEGER,</span><br><span class="line">        ITCAST_DER_ID_BITSTRING,</span><br><span class="line">        ITCAST_DER_ID_OCTETSTRING,</span><br><span class="line">        ITCAST_DER_ID_NULL,</span><br><span class="line">        ITCAST_DER_ID_OBJECT_IDENTIFIER,</span><br><span class="line">        ITCAST_DER_ID_OBJECT_DESCRIPTOR,</span><br><span class="line">        ITCAST_DER_ID_EXTERNAL,</span><br><span class="line">        ITCAST_DER_ID_REAL,</span><br><span class="line">        ITCAST_DER_ID_ENUMERATED,</span><br><span class="line">        ITCAST_DER_ID_EMBEDDED_PDV,</span><br><span class="line">        ITCAST_DER_ID_STRING_UTF8,</span><br><span class="line">        ITCAST_DER_ID_13,</span><br><span class="line">        ITCAST_DER_ID_14,</span><br><span class="line">        ITCAST_DER_ID_15,</span><br><span class="line">        ITCAST_DER_ID_SEQUENCE,</span><br><span class="line">        ITCAST_DER_ID_SET,</span><br><span class="line">        ITCAST_DER_ID_STRING_NUMERIC,</span><br><span class="line">        ITCAST_DER_ID_STRING_PRINTABLE,</span><br><span class="line">        ITCAST_DER_ID_STRING_T61,</span><br><span class="line">        ITCAST_DER_ID_STRING_VIDEOTEX,</span><br><span class="line">        ITCAST_DER_ID_STRING_IA5,</span><br><span class="line">        ITCAST_DER_ID_TIME_UTC,</span><br><span class="line">        ITCAST_DER_ID_TIME_GENERALIZED,</span><br><span class="line">        ITCAST_DER_ID_STRING_GRAPHIC,</span><br><span class="line">        ITCAST_DER_ID_STRING_ISO646,</span><br><span class="line">        ITCAST_DER_ID_STRING_GENERAL,</span><br><span class="line">        ITCAST_DER_ID_STRING_UNIVERSAL,</span><br><span class="line">        ITCAST_DER_ID_29,</span><br><span class="line">        ITCAST_DER_ID_STRING_BMP</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 构造函数</span></span><br><span class="line">    BaseASN1();</span><br><span class="line">    </span><br><span class="line"><span class="comment">//DER编码整数数据</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteInteger</span><span class="params">(ITCAST_UINT32 integer, ITASN1_INTEGER **ppDerInteger)</span></span>;</span><br><span class="line">    </span><br><span class="line"><span class="comment">//DER解码整数数据</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadInteger</span><span class="params">(ITASN1_INTEGER *pDerInteger, ITCAST_UINT32 *pInteger)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DER编码BitString类型数据</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteBitString</span><span class="params">(ITASN1_BITSTRING *pBitString, ITASN1_BITSTRING **ppDerBitString)</span></span>;</span><br><span class="line"></span><br><span class="line">   </span><br><span class="line">    <span class="comment">//DER解码BitString类型数据</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadBitString</span><span class="params">(ITASN1_BITSTRING *pDerBitString, ITASN1_BITSTRING **ppBitString)</span></span>;</span><br><span class="line">       </span><br><span class="line"><span class="comment">//DER编码CharString类型数据</span></span><br><span class="line"></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WritePrintableString</span><span class="params">(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//DER解码PrintableString类型数据</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadPrintableString</span><span class="params">(ITASN1_PRINTABLESTRING *pDerPrintString, ITASN1_PRINTABLESTRING **ppPrintString)</span></span>;</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteSequence</span><span class="params">(ITASN1_SEQUENCE *pSequence, ITCAST_ANYBUF **ppDerSequence)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadSequence</span><span class="params">(ITCAST_ANYBUF *pDerSequence, ITASN1_SEQUENCE **ppSequence)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteNull</span><span class="params">(ITCAST_ANYBUF ** ppDerNull)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadNull</span><span class="params">(ITCAST_ANYBUF * ppDerNull, ITCAST_UINT8 * pInt)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 释放一个序列(链表), pAnyBuf为链表的头结点</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ITCAST_FreeQueue</span><span class="params">(ITCAST_ANYBUF *pAnyBuf)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 创建ITCAST_ANYBUF, 将strOrigin写入创建的ITCAST_ANYBUF内存中, 通过pOriginBuf将内存地址传出</span></span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ITCAST_String_To_AnyBuf</span><span class="params">(ITCAST_ANYBUF **pOriginBuf, <span class="keyword">unsigned</span> <span class="keyword">char</span> * strOrigin, <span class="keyword">int</span> strOriginLen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">WriteNullSequence</span><span class="params">(ITCAST_ANYBUF **pOutData)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 同 EncodeChar 函数</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">EncodeUnsignedChar</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">int</span> dataLen, ITCAST_ANYBUF **outBuf)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DecodeUnsignedChar</span><span class="params">(ITCAST_ANYBUF *inBuf, <span class="keyword">unsigned</span> <span class="keyword">char</span> **Data, <span class="keyword">int</span> *pDataLen)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// pData编码为ITCAST_ANYBUF(有malloc动作), 将新的ITCAST_ANYBUF节点地址赋值给outBuf</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">EncodeChar</span><span class="params">(<span class="keyword">char</span> *pData, <span class="keyword">int</span> dataLen, ITCAST_ANYBUF **outBuf)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 解析节点inBuf中的字符串数据, 通过第二个参数Data指针传出</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DecodeChar</span><span class="params">(ITCAST_ANYBUF *inBuf, <span class="keyword">char</span> **Data, <span class="keyword">int</span> *pDataLen)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_GetTagInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppDerData,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppTagValue,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppTagSize)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_UINT32 <span class="title">DER_ItAsn1_Low_Count_LengthOfSize</span><span class="params">(ITCAST_UINT32 iLength)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_GetLengthInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF *pDerData,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> *pLengthValue,</span></span></span><br><span class="line"><span class="function"><span class="params">            <span class="keyword">int</span> *pLengthSize)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_GetLengthInfo</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppDerData,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppLengthValue,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppLengthSize)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_IntToChar</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 integer,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppData,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppLength)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_CharToInt</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 *aData,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 lLength,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT32 **ppInteger)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_WriteTagAndLength</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF *pAnyIn,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 cTag,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF **ppAnyOut,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppUint8Value)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_Low_ReadTagAndLength</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF *pAnyIn,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppUint8Data,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF **ppAnyOut,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_UINT8 **ppUint8Value)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteCharString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF *pCharString,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF **ppDerCharString)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadCharString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF *pDerCharString,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITCAST_ANYBUF **ppCharString)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_WriteBmpString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITASN1_BMPSTRING *pBmpString,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITASN1_BMPSTRING **ppDerBmpString)</span></span>;</span><br><span class="line">    <span class="function">ITCAST_INT <span class="title">DER_ItAsn1_ReadBmpString</span><span class="params">(</span></span></span><br><span class="line"><span class="function"><span class="params">            ITASN1_BMPSTRING *pDerBmpString,</span></span></span><br><span class="line"><span class="function"><span class="params">            ITASN1_BMPSTRING **ppBmpString)</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">DER_DI_FreeAnybuf</span><span class="params">(ITCAST_ANYBUF  * pAnyBuf)</span></span>;</span><br><span class="line">    <span class="comment">// 给一个ITCAST_ANYBUF类型空节点指针分配存储空间</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DER_CREATE_LOW_ITCAST_ANYBUF</span><span class="params">(ITCAST_ANYBUF *&amp;point)</span></span>;</span><br><span class="line">    <span class="comment">// 内联函数</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DER_ITCAST_Free</span><span class="params">(<span class="keyword">void</span> *memblock)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(memblock)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="built_in">free</span>(memblock);</span><br><span class="line">            memblock = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 计算数据类型对应的tag</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> ITCAST_UINT32 <span class="title">DER_ITASN1_LOW_IDENTIFIER</span><span class="params">(ITCAST_UINT8 &amp;cTag)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cTag &amp; ITCAST_DER_SHORT_ID_MASK;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在堆上创建一个指定大小的数组, 使用指针的引用 == 使用指针的指针</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">DER_ITASN1_LOW_CREATEUINT8</span><span class="params">(ITCAST_UINT8* &amp;point, ITCAST_UINT32 size)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        point = (ITCAST_UINT8*)<span class="built_in">malloc</span>(size);</span><br><span class="line">        <span class="keyword">if</span> (point==<span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7002</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//memset(point,0,size)</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 在堆上创建一个 ITCAST_UINT32 大小的内存</span></span><br><span class="line">    <span class="comment">// 原来的宏参数是指针, 所以此次应该使用指针的引用</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">DER_ITASN1_LOW_CREATEUINT32</span><span class="params">(ITCAST_UINT32* &amp;point)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        point = (ITCAST_UINT32*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ITCAST_UINT32));</span><br><span class="line">        <span class="keyword">if</span> (point==<span class="literal">NULL</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="number">7002</span>;</span><br><span class="line">        <span class="built_in">memset</span>(point, <span class="number">0</span>, <span class="keyword">sizeof</span>(ITCAST_UINT32));</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 通过检测iResult的值, 返回错误类型</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> DerErrType <span class="title">DER_ITASN1_LOW_CHECKERR</span><span class="params">(ITCAST_INT iResult, DerErrType iErrNumber)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (iResult == iErrNumber)</span><br><span class="line">            <span class="keyword">return</span> iErrNumber;</span><br><span class="line">        <span class="keyword">return</span> NoErr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 释放节点内存</span></span><br><span class="line">    <span class="function"><span class="keyword">inline</span> <span class="keyword">void</span> <span class="title">DER_DACERT_LOW_FREE_ANYBUF</span><span class="params">(ITCAST_ANYBUF *point)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        DER_ITCAST_Free(point-&gt;pData);</span><br><span class="line">        DER_ITCAST_Free(point);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">    ItcastLog m_log;       <span class="comment">// log类</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT8 TRUE = <span class="number">1</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT8 FALSE = <span class="number">0</span>;</span><br><span class="line"><span class="comment">/* 标记当前数据是原始数据还是编码数据 */</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_CONSTRUCTED = <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_PRIMITIVE = <span class="number">0x00</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* The encodings for the universal types */</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_UNIVERSAL = <span class="number">0x00</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_APPLICATION = <span class="number">0x40</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_CONTEXT_SPECIFIC = <span class="number">0x80</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_PRIVATE = <span class="number">0xC0</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_RESERVED = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_RESERVED);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_BOOLEAN = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_BOOLEAN);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_INTEGER = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_INTEGER);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_BITSTRING = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_BITSTRING);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_OCTETSTRING = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_OCTETSTRING);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_NULL = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_NULL);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_OBJECT_IDENTIFIER = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_OBJECT_IDENTIFIER);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_OBJECT_DESCRIPTOR = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_OBJECT_DESCRIPTOR);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_EXTERNAL = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_EXTERNAL);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_REAL = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_REAL);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_ENUMERATED = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_ENUMERATED);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_EMBEDDED_PDV = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_EMBEDDED_PDV);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_UTF8 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_UTF8);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_13 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_13);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_14 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_14);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_15 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_15);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_SEQUENCE = (ITCAST_DER_UNIVERSAL | ITCAST_DER_CONSTRUCTED | ITCAST_DER_ID_SEQUENCE);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_SET = (ITCAST_DER_UNIVERSAL | ITCAST_DER_CONSTRUCTED | ITCAST_DER_ID_SET);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_NUMERIC = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_NUMERIC);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_PRINTABLE = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_PRINTABLE);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_T61 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_T61);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_VIDEOTEX = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_VIDEOTEX);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_IA5 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_IA5);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_TIME_UTC = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_TIME_UTC);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_TIME_GENERALIZED = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_TIME_GENERALIZED);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_GRAPHIC = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_GRAPHIC);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_ISO646 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_ISO646);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_GENERAL = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_GENERAL);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_UNIVERSAL = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_UNIVERSAL);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_29 = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_29);</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_STRING_BMP = (ITCAST_DER_UNIVERSAL | ITCAST_DER_PRIMITIVE | ITCAST_DER_ID_STRING_BMP);</span><br><span class="line"></span><br><span class="line"><span class="comment">/* Masks to extract information from a tag number */</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_CLASS_MASK = <span class="number">0xC0</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_CONSTRUCTED_MASK = <span class="number">0x20</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_SHORT_ID_MASK = <span class="number">0x1F</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_FIRST_NOT_ID_MASK = <span class="number">0x7F</span>;     <span class="comment">//xia</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_FIRST_YES_ID_MASK = <span class="number">0x80</span>;     <span class="comment">//xia</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITCAST_DER_ALL_YES_ID_MASK = <span class="number">0xFF</span>;     <span class="comment">//xia</span></span><br><span class="line">   <span class="comment">/* The maximum size for the short tag number encoding, and the magic value</span></span><br><span class="line"><span class="comment">   which indicates that a long encoding of the number is being used */</span></span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITASN1_MAX_SHORT_BER_ID = <span class="number">30</span>;</span><br><span class="line"><span class="keyword">const</span> ITCAST_UINT32 ITASN1_LONG_BER_ID = <span class="number">0x1F</span>;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span> <span class="comment">// BASEASN1_H</span></span></span><br></pre></td></tr></table></figure><br><br><br><h3 id="baseasn1cpp"><a class="markdownIt-Anchor" href="#baseasn1cpp"></a> BaseASN1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br><span class="line">342</span><br><span class="line">343</span><br><span class="line">344</span><br><span class="line">345</span><br><span class="line">346</span><br><span class="line">347</span><br><span class="line">348</span><br><span class="line">349</span><br><span class="line">350</span><br><span class="line">351</span><br><span class="line">352</span><br><span class="line">353</span><br><span class="line">354</span><br><span class="line">355</span><br><span class="line">356</span><br><span class="line">357</span><br><span class="line">358</span><br><span class="line">359</span><br><span class="line">360</span><br><span class="line">361</span><br><span class="line">362</span><br><span class="line">363</span><br><span class="line">364</span><br><span class="line">365</span><br><span class="line">366</span><br><span class="line">367</span><br><span class="line">368</span><br><span class="line">369</span><br><span class="line">370</span><br><span class="line">371</span><br><span class="line">372</span><br><span class="line">373</span><br><span class="line">374</span><br><span class="line">375</span><br><span class="line">376</span><br><span class="line">377</span><br><span class="line">378</span><br><span class="line">379</span><br><span class="line">380</span><br><span class="line">381</span><br><span class="line">382</span><br><span class="line">383</span><br><span class="line">384</span><br><span class="line">385</span><br><span class="line">386</span><br><span class="line">387</span><br><span class="line">388</span><br><span class="line">389</span><br><span class="line">390</span><br><span class="line">391</span><br><span class="line">392</span><br><span class="line">393</span><br><span class="line">394</span><br><span class="line">395</span><br><span class="line">396</span><br><span class="line">397</span><br><span class="line">398</span><br><span class="line">399</span><br><span class="line">400</span><br><span class="line">401</span><br><span class="line">402</span><br><span class="line">403</span><br><span class="line">404</span><br><span class="line">405</span><br><span class="line">406</span><br><span class="line">407</span><br><span class="line">408</span><br><span class="line">409</span><br><span class="line">410</span><br><span class="line">411</span><br><span class="line">412</span><br><span class="line">413</span><br><span class="line">414</span><br><span class="line">415</span><br><span class="line">416</span><br><span class="line">417</span><br><span class="line">418</span><br><span class="line">419</span><br><span class="line">420</span><br><span class="line">421</span><br><span class="line">422</span><br><span class="line">423</span><br><span class="line">424</span><br><span class="line">425</span><br><span class="line">426</span><br><span class="line">427</span><br><span class="line">428</span><br><span class="line">429</span><br><span class="line">430</span><br><span class="line">431</span><br><span class="line">432</span><br><span class="line">433</span><br><span class="line">434</span><br><span class="line">435</span><br><span class="line">436</span><br><span class="line">437</span><br><span class="line">438</span><br><span class="line">439</span><br><span class="line">440</span><br><span class="line">441</span><br><span class="line">442</span><br><span class="line">443</span><br><span class="line">444</span><br><span class="line">445</span><br><span class="line">446</span><br><span class="line">447</span><br><span class="line">448</span><br><span class="line">449</span><br><span class="line">450</span><br><span class="line">451</span><br><span class="line">452</span><br><span class="line">453</span><br><span class="line">454</span><br><span class="line">455</span><br><span class="line">456</span><br><span class="line">457</span><br><span class="line">458</span><br><span class="line">459</span><br><span class="line">460</span><br><span class="line">461</span><br><span class="line">462</span><br><span class="line">463</span><br><span class="line">464</span><br><span class="line">465</span><br><span class="line">466</span><br><span class="line">467</span><br><span class="line">468</span><br><span class="line">469</span><br><span class="line">470</span><br><span class="line">471</span><br><span class="line">472</span><br><span class="line">473</span><br><span class="line">474</span><br><span class="line">475</span><br><span class="line">476</span><br><span class="line">477</span><br><span class="line">478</span><br><span class="line">479</span><br><span class="line">480</span><br><span class="line">481</span><br><span class="line">482</span><br><span class="line">483</span><br><span class="line">484</span><br><span class="line">485</span><br><span class="line">486</span><br><span class="line">487</span><br><span class="line">488</span><br><span class="line">489</span><br><span class="line">490</span><br><span class="line">491</span><br><span class="line">492</span><br><span class="line">493</span><br><span class="line">494</span><br><span class="line">495</span><br><span class="line">496</span><br><span class="line">497</span><br><span class="line">498</span><br><span class="line">499</span><br><span class="line">500</span><br><span class="line">501</span><br><span class="line">502</span><br><span class="line">503</span><br><span class="line">504</span><br><span class="line">505</span><br><span class="line">506</span><br><span class="line">507</span><br><span class="line">508</span><br><span class="line">509</span><br><span class="line">510</span><br><span class="line">511</span><br><span class="line">512</span><br><span class="line">513</span><br><span class="line">514</span><br><span class="line">515</span><br><span class="line">516</span><br><span class="line">517</span><br><span class="line">518</span><br><span class="line">519</span><br><span class="line">520</span><br><span class="line">521</span><br><span class="line">522</span><br><span class="line">523</span><br><span class="line">524</span><br><span class="line">525</span><br><span class="line">526</span><br><span class="line">527</span><br><span class="line">528</span><br><span class="line">529</span><br><span class="line">530</span><br><span class="line">531</span><br><span class="line">532</span><br><span class="line">533</span><br><span class="line">534</span><br><span class="line">535</span><br><span class="line">536</span><br><span class="line">537</span><br><span class="line">538</span><br><span class="line">539</span><br><span class="line">540</span><br><span class="line">541</span><br><span class="line">542</span><br><span class="line">543</span><br><span class="line">544</span><br><span class="line">545</span><br><span class="line">546</span><br><span class="line">547</span><br><span class="line">548</span><br><span class="line">549</span><br><span class="line">550</span><br><span class="line">551</span><br><span class="line">552</span><br><span class="line">553</span><br><span class="line">554</span><br><span class="line">555</span><br><span class="line">556</span><br><span class="line">557</span><br><span class="line">558</span><br><span class="line">559</span><br><span class="line">560</span><br><span class="line">561</span><br><span class="line">562</span><br><span class="line">563</span><br><span class="line">564</span><br><span class="line">565</span><br><span class="line">566</span><br><span class="line">567</span><br><span class="line">568</span><br><span class="line">569</span><br><span class="line">570</span><br><span class="line">571</span><br><span class="line">572</span><br><span class="line">573</span><br><span class="line">574</span><br><span class="line">575</span><br><span class="line">576</span><br><span class="line">577</span><br><span class="line">578</span><br><span class="line">579</span><br><span class="line">580</span><br><span class="line">581</span><br><span class="line">582</span><br><span class="line">583</span><br><span class="line">584</span><br><span class="line">585</span><br><span class="line">586</span><br><span class="line">587</span><br><span class="line">588</span><br><span class="line">589</span><br><span class="line">590</span><br><span class="line">591</span><br><span class="line">592</span><br><span class="line">593</span><br><span class="line">594</span><br><span class="line">595</span><br><span class="line">596</span><br><span class="line">597</span><br><span class="line">598</span><br><span class="line">599</span><br><span class="line">600</span><br><span class="line">601</span><br><span class="line">602</span><br><span class="line">603</span><br><span class="line">604</span><br><span class="line">605</span><br><span class="line">606</span><br><span class="line">607</span><br><span class="line">608</span><br><span class="line">609</span><br><span class="line">610</span><br><span class="line">611</span><br><span class="line">612</span><br><span class="line">613</span><br><span class="line">614</span><br><span class="line">615</span><br><span class="line">616</span><br><span class="line">617</span><br><span class="line">618</span><br><span class="line">619</span><br><span class="line">620</span><br><span class="line">621</span><br><span class="line">622</span><br><span class="line">623</span><br><span class="line">624</span><br><span class="line">625</span><br><span class="line">626</span><br><span class="line">627</span><br><span class="line">628</span><br><span class="line">629</span><br><span class="line">630</span><br><span class="line">631</span><br><span class="line">632</span><br><span class="line">633</span><br><span class="line">634</span><br><span class="line">635</span><br><span class="line">636</span><br><span class="line">637</span><br><span class="line">638</span><br><span class="line">639</span><br><span class="line">640</span><br><span class="line">641</span><br><span class="line">642</span><br><span class="line">643</span><br><span class="line">644</span><br><span class="line">645</span><br><span class="line">646</span><br><span class="line">647</span><br><span class="line">648</span><br><span class="line">649</span><br><span class="line">650</span><br><span class="line">651</span><br><span class="line">652</span><br><span class="line">653</span><br><span class="line">654</span><br><span class="line">655</span><br><span class="line">656</span><br><span class="line">657</span><br><span class="line">658</span><br><span class="line">659</span><br><span class="line">660</span><br><span class="line">661</span><br><span class="line">662</span><br><span class="line">663</span><br><span class="line">664</span><br><span class="line">665</span><br><span class="line">666</span><br><span class="line">667</span><br><span class="line">668</span><br><span class="line">669</span><br><span class="line">670</span><br><span class="line">671</span><br><span class="line">672</span><br><span class="line">673</span><br><span class="line">674</span><br><span class="line">675</span><br><span class="line">676</span><br><span class="line">677</span><br><span class="line">678</span><br><span class="line">679</span><br><span class="line">680</span><br><span class="line">681</span><br><span class="line">682</span><br><span class="line">683</span><br><span class="line">684</span><br><span class="line">685</span><br><span class="line">686</span><br><span class="line">687</span><br><span class="line">688</span><br><span class="line">689</span><br><span class="line">690</span><br><span class="line">691</span><br><span class="line">692</span><br><span class="line">693</span><br><span class="line">694</span><br><span class="line">695</span><br><span class="line">696</span><br><span class="line">697</span><br><span class="line">698</span><br><span class="line">699</span><br><span class="line">700</span><br><span class="line">701</span><br><span class="line">702</span><br><span class="line">703</span><br><span class="line">704</span><br><span class="line">705</span><br><span class="line">706</span><br><span class="line">707</span><br><span class="line">708</span><br><span class="line">709</span><br><span class="line">710</span><br><span class="line">711</span><br><span class="line">712</span><br><span class="line">713</span><br><span class="line">714</span><br><span class="line">715</span><br><span class="line">716</span><br><span class="line">717</span><br><span class="line">718</span><br><span class="line">719</span><br><span class="line">720</span><br><span class="line">721</span><br><span class="line">722</span><br><span class="line">723</span><br><span class="line">724</span><br><span class="line">725</span><br><span class="line">726</span><br><span class="line">727</span><br><span class="line">728</span><br><span class="line">729</span><br><span class="line">730</span><br><span class="line">731</span><br><span class="line">732</span><br><span class="line">733</span><br><span class="line">734</span><br><span class="line">735</span><br><span class="line">736</span><br><span class="line">737</span><br><span class="line">738</span><br><span class="line">739</span><br><span class="line">740</span><br><span class="line">741</span><br><span class="line">742</span><br><span class="line">743</span><br><span class="line">744</span><br><span class="line">745</span><br><span class="line">746</span><br><span class="line">747</span><br><span class="line">748</span><br><span class="line">749</span><br><span class="line">750</span><br><span class="line">751</span><br><span class="line">752</span><br><span class="line">753</span><br><span class="line">754</span><br><span class="line">755</span><br><span class="line">756</span><br><span class="line">757</span><br><span class="line">758</span><br><span class="line">759</span><br><span class="line">760</span><br><span class="line">761</span><br><span class="line">762</span><br><span class="line">763</span><br><span class="line">764</span><br><span class="line">765</span><br><span class="line">766</span><br><span class="line">767</span><br><span class="line">768</span><br><span class="line">769</span><br><span class="line">770</span><br><span class="line">771</span><br><span class="line">772</span><br><span class="line">773</span><br><span class="line">774</span><br><span class="line">775</span><br><span class="line">776</span><br><span class="line">777</span><br><span class="line">778</span><br><span class="line">779</span><br><span class="line">780</span><br><span class="line">781</span><br><span class="line">782</span><br><span class="line">783</span><br><span class="line">784</span><br><span class="line">785</span><br><span class="line">786</span><br><span class="line">787</span><br><span class="line">788</span><br><span class="line">789</span><br><span class="line">790</span><br><span class="line">791</span><br><span class="line">792</span><br><span class="line">793</span><br><span class="line">794</span><br><span class="line">795</span><br><span class="line">796</span><br><span class="line">797</span><br><span class="line">798</span><br><span class="line">799</span><br><span class="line">800</span><br><span class="line">801</span><br><span class="line">802</span><br><span class="line">803</span><br><span class="line">804</span><br><span class="line">805</span><br><span class="line">806</span><br><span class="line">807</span><br><span class="line">808</span><br><span class="line">809</span><br><span class="line">810</span><br><span class="line">811</span><br><span class="line">812</span><br><span class="line">813</span><br><span class="line">814</span><br><span class="line">815</span><br><span class="line">816</span><br><span class="line">817</span><br><span class="line">818</span><br><span class="line">819</span><br><span class="line">820</span><br><span class="line">821</span><br><span class="line">822</span><br><span class="line">823</span><br><span class="line">824</span><br><span class="line">825</span><br><span class="line">826</span><br><span class="line">827</span><br><span class="line">828</span><br><span class="line">829</span><br><span class="line">830</span><br><span class="line">831</span><br><span class="line">832</span><br><span class="line">833</span><br><span class="line">834</span><br><span class="line">835</span><br><span class="line">836</span><br><span class="line">837</span><br><span class="line">838</span><br><span class="line">839</span><br><span class="line">840</span><br><span class="line">841</span><br><span class="line">842</span><br><span class="line">843</span><br><span class="line">844</span><br><span class="line">845</span><br><span class="line">846</span><br><span class="line">847</span><br><span class="line">848</span><br><span class="line">849</span><br><span class="line">850</span><br><span class="line">851</span><br><span class="line">852</span><br><span class="line">853</span><br><span class="line">854</span><br><span class="line">855</span><br><span class="line">856</span><br><span class="line">857</span><br><span class="line">858</span><br><span class="line">859</span><br><span class="line">860</span><br><span class="line">861</span><br><span class="line">862</span><br><span class="line">863</span><br><span class="line">864</span><br><span class="line">865</span><br><span class="line">866</span><br><span class="line">867</span><br><span class="line">868</span><br><span class="line">869</span><br><span class="line">870</span><br><span class="line">871</span><br><span class="line">872</span><br><span class="line">873</span><br><span class="line">874</span><br><span class="line">875</span><br><span class="line">876</span><br><span class="line">877</span><br><span class="line">878</span><br><span class="line">879</span><br><span class="line">880</span><br><span class="line">881</span><br><span class="line">882</span><br><span class="line">883</span><br><span class="line">884</span><br><span class="line">885</span><br><span class="line">886</span><br><span class="line">887</span><br><span class="line">888</span><br><span class="line">889</span><br><span class="line">890</span><br><span class="line">891</span><br><span class="line">892</span><br><span class="line">893</span><br><span class="line">894</span><br><span class="line">895</span><br><span class="line">896</span><br><span class="line">897</span><br><span class="line">898</span><br><span class="line">899</span><br><span class="line">900</span><br><span class="line">901</span><br><span class="line">902</span><br><span class="line">903</span><br><span class="line">904</span><br><span class="line">905</span><br><span class="line">906</span><br><span class="line">907</span><br><span class="line">908</span><br><span class="line">909</span><br><span class="line">910</span><br><span class="line">911</span><br><span class="line">912</span><br><span class="line">913</span><br><span class="line">914</span><br><span class="line">915</span><br><span class="line">916</span><br><span class="line">917</span><br><span class="line">918</span><br><span class="line">919</span><br><span class="line">920</span><br><span class="line">921</span><br><span class="line">922</span><br><span class="line">923</span><br><span class="line">924</span><br><span class="line">925</span><br><span class="line">926</span><br><span class="line">927</span><br><span class="line">928</span><br><span class="line">929</span><br><span class="line">930</span><br><span class="line">931</span><br><span class="line">932</span><br><span class="line">933</span><br><span class="line">934</span><br><span class="line">935</span><br><span class="line">936</span><br><span class="line">937</span><br><span class="line">938</span><br><span class="line">939</span><br><span class="line">940</span><br><span class="line">941</span><br><span class="line">942</span><br><span class="line">943</span><br><span class="line">944</span><br><span class="line">945</span><br><span class="line">946</span><br><span class="line">947</span><br><span class="line">948</span><br><span class="line">949</span><br><span class="line">950</span><br><span class="line">951</span><br><span class="line">952</span><br><span class="line">953</span><br><span class="line">954</span><br><span class="line">955</span><br><span class="line">956</span><br><span class="line">957</span><br><span class="line">958</span><br><span class="line">959</span><br><span class="line">960</span><br><span class="line">961</span><br><span class="line">962</span><br><span class="line">963</span><br><span class="line">964</span><br><span class="line">965</span><br><span class="line">966</span><br><span class="line">967</span><br><span class="line">968</span><br><span class="line">969</span><br><span class="line">970</span><br><span class="line">971</span><br><span class="line">972</span><br><span class="line">973</span><br><span class="line">974</span><br><span class="line">975</span><br><span class="line">976</span><br><span class="line">977</span><br><span class="line">978</span><br><span class="line">979</span><br><span class="line">980</span><br><span class="line">981</span><br><span class="line">982</span><br><span class="line">983</span><br><span class="line">984</span><br><span class="line">985</span><br><span class="line">986</span><br><span class="line">987</span><br><span class="line">988</span><br><span class="line">989</span><br><span class="line">990</span><br><span class="line">991</span><br><span class="line">992</span><br><span class="line">993</span><br><span class="line">994</span><br><span class="line">995</span><br><span class="line">996</span><br><span class="line">997</span><br><span class="line">998</span><br><span class="line">999</span><br><span class="line">1000</span><br><span class="line">1001</span><br><span class="line">1002</span><br><span class="line">1003</span><br><span class="line">1004</span><br><span class="line">1005</span><br><span class="line">1006</span><br><span class="line">1007</span><br><span class="line">1008</span><br><span class="line">1009</span><br><span class="line">1010</span><br><span class="line">1011</span><br><span class="line">1012</span><br><span class="line">1013</span><br><span class="line">1014</span><br><span class="line">1015</span><br><span class="line">1016</span><br><span class="line">1017</span><br><span class="line">1018</span><br><span class="line">1019</span><br><span class="line">1020</span><br><span class="line">1021</span><br><span class="line">1022</span><br><span class="line">1023</span><br><span class="line">1024</span><br><span class="line">1025</span><br><span class="line">1026</span><br><span class="line">1027</span><br><span class="line">1028</span><br><span class="line">1029</span><br><span class="line">1030</span><br><span class="line">1031</span><br><span class="line">1032</span><br><span class="line">1033</span><br><span class="line">1034</span><br><span class="line">1035</span><br><span class="line">1036</span><br><span class="line">1037</span><br><span class="line">1038</span><br><span class="line">1039</span><br><span class="line">1040</span><br><span class="line">1041</span><br><span class="line">1042</span><br><span class="line">1043</span><br><span class="line">1044</span><br><span class="line">1045</span><br><span class="line">1046</span><br><span class="line">1047</span><br><span class="line">1048</span><br><span class="line">1049</span><br><span class="line">1050</span><br><span class="line">1051</span><br><span class="line">1052</span><br><span class="line">1053</span><br><span class="line">1054</span><br><span class="line">1055</span><br><span class="line">1056</span><br><span class="line">1057</span><br><span class="line">1058</span><br><span class="line">1059</span><br><span class="line">1060</span><br><span class="line">1061</span><br><span class="line">1062</span><br><span class="line">1063</span><br><span class="line">1064</span><br><span class="line">1065</span><br><span class="line">1066</span><br><span class="line">1067</span><br><span class="line">1068</span><br><span class="line">1069</span><br><span class="line">1070</span><br><span class="line">1071</span><br><span class="line">1072</span><br><span class="line">1073</span><br><span class="line">1074</span><br><span class="line">1075</span><br><span class="line">1076</span><br><span class="line">1077</span><br><span class="line">1078</span><br><span class="line">1079</span><br><span class="line">1080</span><br><span class="line">1081</span><br><span class="line">1082</span><br><span class="line">1083</span><br><span class="line">1084</span><br><span class="line">1085</span><br><span class="line">1086</span><br><span class="line">1087</span><br><span class="line">1088</span><br><span class="line">1089</span><br><span class="line">1090</span><br><span class="line">1091</span><br><span class="line">1092</span><br><span class="line">1093</span><br><span class="line">1094</span><br><span class="line">1095</span><br><span class="line">1096</span><br><span class="line">1097</span><br><span class="line">1098</span><br><span class="line">1099</span><br><span class="line">1100</span><br><span class="line">1101</span><br><span class="line">1102</span><br><span class="line">1103</span><br><span class="line">1104</span><br><span class="line">1105</span><br><span class="line">1106</span><br><span class="line">1107</span><br><span class="line">1108</span><br><span class="line">1109</span><br><span class="line">1110</span><br><span class="line">1111</span><br><span class="line">1112</span><br><span class="line">1113</span><br><span class="line">1114</span><br><span class="line">1115</span><br><span class="line">1116</span><br><span class="line">1117</span><br><span class="line">1118</span><br><span class="line">1119</span><br><span class="line">1120</span><br><span class="line">1121</span><br><span class="line">1122</span><br><span class="line">1123</span><br><span class="line">1124</span><br><span class="line">1125</span><br><span class="line">1126</span><br><span class="line">1127</span><br><span class="line">1128</span><br><span class="line">1129</span><br><span class="line">1130</span><br><span class="line">1131</span><br><span class="line">1132</span><br><span class="line">1133</span><br><span class="line">1134</span><br><span class="line">1135</span><br><span class="line">1136</span><br><span class="line">1137</span><br><span class="line">1138</span><br><span class="line">1139</span><br><span class="line">1140</span><br><span class="line">1141</span><br><span class="line">1142</span><br><span class="line">1143</span><br><span class="line">1144</span><br><span class="line">1145</span><br><span class="line">1146</span><br><span class="line">1147</span><br><span class="line">1148</span><br><span class="line">1149</span><br><span class="line">1150</span><br><span class="line">1151</span><br><span class="line">1152</span><br><span class="line">1153</span><br><span class="line">1154</span><br><span class="line">1155</span><br><span class="line">1156</span><br><span class="line">1157</span><br><span class="line">1158</span><br><span class="line">1159</span><br><span class="line">1160</span><br><span class="line">1161</span><br><span class="line">1162</span><br><span class="line">1163</span><br><span class="line">1164</span><br><span class="line">1165</span><br><span class="line">1166</span><br><span class="line">1167</span><br><span class="line">1168</span><br><span class="line">1169</span><br><span class="line">1170</span><br><span class="line">1171</span><br><span class="line">1172</span><br><span class="line">1173</span><br><span class="line">1174</span><br><span class="line">1175</span><br><span class="line">1176</span><br><span class="line">1177</span><br><span class="line">1178</span><br><span class="line">1179</span><br><span class="line">1180</span><br><span class="line">1181</span><br><span class="line">1182</span><br><span class="line">1183</span><br><span class="line">1184</span><br><span class="line">1185</span><br><span class="line">1186</span><br><span class="line">1187</span><br><span class="line">1188</span><br><span class="line">1189</span><br><span class="line">1190</span><br><span class="line">1191</span><br><span class="line">1192</span><br><span class="line">1193</span><br><span class="line">1194</span><br><span class="line">1195</span><br><span class="line">1196</span><br><span class="line">1197</span><br><span class="line">1198</span><br><span class="line">1199</span><br><span class="line">1200</span><br><span class="line">1201</span><br><span class="line">1202</span><br><span class="line">1203</span><br><span class="line">1204</span><br><span class="line">1205</span><br><span class="line">1206</span><br><span class="line">1207</span><br><span class="line">1208</span><br><span class="line">1209</span><br><span class="line">1210</span><br><span class="line">1211</span><br><span class="line">1212</span><br><span class="line">1213</span><br><span class="line">1214</span><br><span class="line">1215</span><br><span class="line">1216</span><br><span class="line">1217</span><br><span class="line">1218</span><br><span class="line">1219</span><br><span class="line">1220</span><br><span class="line">1221</span><br><span class="line">1222</span><br><span class="line">1223</span><br><span class="line">1224</span><br><span class="line">1225</span><br><span class="line">1226</span><br><span class="line">1227</span><br><span class="line">1228</span><br><span class="line">1229</span><br><span class="line">1230</span><br><span class="line">1231</span><br><span class="line">1232</span><br><span class="line">1233</span><br><span class="line">1234</span><br><span class="line">1235</span><br><span class="line">1236</span><br><span class="line">1237</span><br><span class="line">1238</span><br><span class="line">1239</span><br><span class="line">1240</span><br><span class="line">1241</span><br><span class="line">1242</span><br><span class="line">1243</span><br><span class="line">1244</span><br><span class="line">1245</span><br><span class="line">1246</span><br><span class="line">1247</span><br><span class="line">1248</span><br><span class="line">1249</span><br><span class="line">1250</span><br><span class="line">1251</span><br><span class="line">1252</span><br><span class="line">1253</span><br><span class="line">1254</span><br><span class="line">1255</span><br><span class="line">1256</span><br><span class="line">1257</span><br><span class="line">1258</span><br><span class="line">1259</span><br><span class="line">1260</span><br><span class="line">1261</span><br><span class="line">1262</span><br><span class="line">1263</span><br><span class="line">1264</span><br><span class="line">1265</span><br><span class="line">1266</span><br><span class="line">1267</span><br><span class="line">1268</span><br><span class="line">1269</span><br><span class="line">1270</span><br><span class="line">1271</span><br><span class="line">1272</span><br><span class="line">1273</span><br><span class="line">1274</span><br><span class="line">1275</span><br><span class="line">1276</span><br><span class="line">1277</span><br><span class="line">1278</span><br><span class="line">1279</span><br><span class="line">1280</span><br><span class="line">1281</span><br><span class="line">1282</span><br><span class="line">1283</span><br><span class="line">1284</span><br><span class="line">1285</span><br><span class="line">1286</span><br><span class="line">1287</span><br><span class="line">1288</span><br><span class="line">1289</span><br><span class="line">1290</span><br><span class="line">1291</span><br><span class="line">1292</span><br><span class="line">1293</span><br><span class="line">1294</span><br><span class="line">1295</span><br><span class="line">1296</span><br><span class="line">1297</span><br><span class="line">1298</span><br><span class="line">1299</span><br><span class="line">1300</span><br><span class="line">1301</span><br><span class="line">1302</span><br><span class="line">1303</span><br><span class="line">1304</span><br><span class="line">1305</span><br><span class="line">1306</span><br><span class="line">1307</span><br><span class="line">1308</span><br><span class="line">1309</span><br><span class="line">1310</span><br><span class="line">1311</span><br><span class="line">1312</span><br><span class="line">1313</span><br><span class="line">1314</span><br><span class="line">1315</span><br><span class="line">1316</span><br><span class="line">1317</span><br><span class="line">1318</span><br><span class="line">1319</span><br><span class="line">1320</span><br><span class="line">1321</span><br><span class="line">1322</span><br><span class="line">1323</span><br><span class="line">1324</span><br><span class="line">1325</span><br><span class="line">1326</span><br><span class="line">1327</span><br><span class="line">1328</span><br><span class="line">1329</span><br><span class="line">1330</span><br><span class="line">1331</span><br><span class="line">1332</span><br><span class="line">1333</span><br><span class="line">1334</span><br><span class="line">1335</span><br><span class="line">1336</span><br><span class="line">1337</span><br><span class="line">1338</span><br><span class="line">1339</span><br><span class="line">1340</span><br><span class="line">1341</span><br><span class="line">1342</span><br><span class="line">1343</span><br><span class="line">1344</span><br><span class="line">1345</span><br><span class="line">1346</span><br><span class="line">1347</span><br><span class="line">1348</span><br><span class="line">1349</span><br><span class="line">1350</span><br><span class="line">1351</span><br><span class="line">1352</span><br><span class="line">1353</span><br><span class="line">1354</span><br><span class="line">1355</span><br><span class="line">1356</span><br><span class="line">1357</span><br><span class="line">1358</span><br><span class="line">1359</span><br><span class="line">1360</span><br><span class="line">1361</span><br><span class="line">1362</span><br><span class="line">1363</span><br><span class="line">1364</span><br><span class="line">1365</span><br><span class="line">1366</span><br><span class="line">1367</span><br><span class="line">1368</span><br><span class="line">1369</span><br><span class="line">1370</span><br><span class="line">1371</span><br><span class="line">1372</span><br><span class="line">1373</span><br><span class="line">1374</span><br><span class="line">1375</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"BaseASN1.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line">BaseASN1::BaseASN1()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不知道干什么的一个宏, 尼玛...</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> OIDDEF(tag, oidValue) &#123;tag, &#123;oidValue,sizeof(oidValue),0,1,0,0,0&#125; &#125;</span></span><br><span class="line"></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_GetTagInfo(ITCAST_UINT8 **ppDerData, ITCAST_UINT32 **ppTagValue, ITCAST_UINT32 **ppTagSize)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pMidSize = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    pMidValue = (ITCAST_UINT32*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ITCAST_UINT32));</span><br><span class="line">    <span class="comment">// pMidValue = new ITCAST_UINT32;</span></span><br><span class="line">    <span class="keyword">if</span> (pMidValue == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, MemoryErr, <span class="string">"func DER_ItAsn1_Low_GetTagInfo() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> MemoryErr;</span><br><span class="line">    &#125;</span><br><span class="line">    pMidSize = (ITCAST_UINT32*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ITCAST_UINT32));</span><br><span class="line">    <span class="comment">// pMidSize = new ITCAST_UINT32;</span></span><br><span class="line">    <span class="keyword">if</span> (pMidSize == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (pMidValue) &#123; <span class="built_in">free</span>(pMidValue); pMidValue = <span class="literal">NULL</span>; &#125;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, MemoryErr, <span class="string">"func DER_ItAsn1_Low_GetTagInfo() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> MemoryErr;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pMidSize = <span class="number">0</span>;</span><br><span class="line">    *pMidValue = <span class="number">0</span>;</span><br><span class="line">    pMidData = *ppDerData;</span><br><span class="line">    <span class="comment">//读Tag</span></span><br><span class="line">    <span class="keyword">if</span> ((*pMidData &amp; ITCAST_DER_SHORT_ID_MASK) != ITCAST_DER_SHORT_ID_MASK)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*pMidData &amp; ITCAST_DER_CONTEXT_SPECIFIC)</span><br><span class="line">            *pMidValue = *(pMidData++);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            *pMidValue = *(pMidData++) &amp; ITCAST_DER_SHORT_ID_MASK;</span><br><span class="line">        (*pMidSize)++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            *pMidValue = *pMidValue | (*(++pMidData) &amp; ITCAST_DER_FIRST_NOT_ID_MASK);</span><br><span class="line">            *pMidValue &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            (*pMidSize)++;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!(*pMidData &amp; ITCAST_DER_FIRST_YES_ID_MASK));</span><br><span class="line">        *pMidValue |= *(pMidData++);</span><br><span class="line">        (*pMidSize)++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出变量</span></span><br><span class="line">    *ppTagValue = pMidValue;</span><br><span class="line">    *ppTagSize = pMidSize;</span><br><span class="line">    *ppDerData = pMidData;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    pMidSize = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITCAST_UINT32 BaseASN1::DER_ItAsn1_Low_Count_LengthOfSize(ITCAST_UINT32 iLength)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (iLength &lt;= <span class="number">0x7F</span>)</span><br><span class="line">        <span class="keyword">return</span> (<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (iLength &lt;= <span class="number">0xFF</span>)</span><br><span class="line">            <span class="keyword">return</span> (<span class="number">2</span>);</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (iLength &lt; <span class="number">0xFFFF</span>)</span><br><span class="line">                <span class="keyword">return</span> (<span class="number">3</span>);</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (iLength &lt;= <span class="number">0xFFFFFF</span>)</span><br><span class="line">                    <span class="keyword">return</span> (<span class="number">4</span>);</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                    <span class="keyword">if</span> (iLength &lt;= <span class="number">0xFFFFFFFF</span>)</span><br><span class="line">                        <span class="keyword">return</span> (<span class="number">5</span>);</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthErr, <span class="string">"func DER_ItAsn1_Low_Count_LengthOfSize() err"</span>);</span><br><span class="line">                        <span class="keyword">return</span> LengthErr;</span><br><span class="line">                    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_GetLengthInfo(ITCAST_ANYBUF *pDerData, <span class="keyword">int</span> *pLengthValue, <span class="keyword">int</span> *pLengthSize)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pData;</span><br><span class="line">    <span class="keyword">int</span> iSizeOf, iSize = <span class="number">0</span>, i;</span><br><span class="line">    pData = pDerData-&gt;pData;</span><br><span class="line">    <span class="keyword">if</span> ((*pData &amp; ITCAST_DER_SHORT_ID_MASK) != ITCAST_DER_SHORT_ID_MASK)</span><br><span class="line">        pData++;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        ++pData;</span><br><span class="line">        <span class="keyword">do</span></span><br><span class="line">        &#123;</span><br><span class="line">            ++pData;</span><br><span class="line">        &#125; <span class="keyword">while</span> (!(*pData &amp; <span class="number">80</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    ++pData;</span><br><span class="line">    iSizeOf = *pData &amp; ITCAST_DER_FIRST_NOT_ID_MASK;</span><br><span class="line">    <span class="keyword">if</span> (!(*pData &amp; <span class="number">80</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        *pLengthSize = <span class="number">1</span>;</span><br><span class="line">        *pLengthValue = iSizeOf;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt;= iSizeOf; i++)</span><br><span class="line">        &#123;</span><br><span class="line">            iSize |= *(++pData);</span><br><span class="line">            iSize &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        *pLengthSize = iSizeOf;</span><br><span class="line">        *pLengthValue = iSize;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_GetLengthInfo(ITCAST_UINT8 **ppDerData, ITCAST_UINT32 **ppLengthValue, ITCAST_UINT32 **ppLengthSize)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pMidData, cSizeOf;</span><br><span class="line">    ITCAST_UINT32 lMidLength = <span class="number">0</span>, *pMidLength, *pSizeOf, i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT32(pSizeOf);</span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT32(pMidLength);</span><br><span class="line">    pMidData = *ppDerData;</span><br><span class="line">    <span class="comment">//读长度</span></span><br><span class="line">    <span class="keyword">if</span> (!(*pMidData &amp; ITCAST_DER_FIRST_YES_ID_MASK))<span class="comment">//short</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSizeOf = <span class="number">1</span>;</span><br><span class="line">        lMidLength = (ITCAST_UINT32)(*(pMidData++) &amp; ITCAST_DER_FIRST_NOT_ID_MASK);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>                                <span class="comment">//long</span></span><br><span class="line">    &#123;</span><br><span class="line">        cSizeOf = *(pMidData++) &amp; ITCAST_DER_FIRST_NOT_ID_MASK;</span><br><span class="line">        <span class="keyword">if</span> (cSizeOf &gt; <span class="number">4</span><span class="comment">/* ||cSizeOf &lt;0*/</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (pSizeOf) &#123; <span class="built_in">free</span>(pSizeOf); pSizeOf = <span class="literal">NULL</span>; &#125;</span><br><span class="line">            <span class="keyword">if</span> (pMidLength)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="built_in">free</span>(pMidLength);</span><br><span class="line">            &#125;</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthErr, <span class="string">"func DER_ItAsn1_Low_GetLengthInfo() err"</span>);</span><br><span class="line">            <span class="keyword">return</span> LengthErr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; cSizeOf; i++)</span><br><span class="line">            &#123;</span><br><span class="line">                lMidLength |= (ITCAST_UINT32)*(pMidData++);</span><br><span class="line">                lMidLength &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            lMidLength |= (ITCAST_UINT32)*(pMidData++);</span><br><span class="line">            cSizeOf++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出信息</span></span><br><span class="line">    *pMidLength = lMidLength;</span><br><span class="line">    *pSizeOf = cSizeOf;</span><br><span class="line">    *ppLengthValue = pMidLength;</span><br><span class="line">    *ppLengthSize = pSizeOf;</span><br><span class="line">    *ppDerData = pMidData;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidLength = <span class="literal">NULL</span>;</span><br><span class="line">    pSizeOf = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个ITCAST_UINT32类型的整数转换成字符表示形式</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_IntToChar(ITCAST_UINT32 integer, ITCAST_UINT8 **ppData, ITCAST_UINT32 **ppLength)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidSite = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pMidLength = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32  iValue;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    iValue = integer;</span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT32(pMidLength);</span><br><span class="line">    <span class="keyword">if</span> (iValue &gt; <span class="number">0xFFFFFFFF</span>)<span class="comment">//检测整数值</span></span><br><span class="line">        <span class="keyword">return</span> DataRangeErr;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (iValue &gt; <span class="number">0xFFFFFF</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">if</span> (iValue &gt;= <span class="number">0x80000000</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">5</span>);</span><br><span class="line">                pMidSite = pMidData;</span><br><span class="line">                *(pMidData++) = <span class="number">0</span>;</span><br><span class="line">                *pMidLength = <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">4</span>);</span><br><span class="line">                pMidSite = pMidData;</span><br><span class="line">            &#125;</span><br><span class="line">            *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">24</span>);</span><br><span class="line">            *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">16</span>);</span><br><span class="line">            *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">8</span>);</span><br><span class="line">            *(pMidData++) = (ITCAST_UINT8)(iValue);</span><br><span class="line">            (*pMidLength) += <span class="number">4</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">if</span> (iValue &gt; <span class="number">0xFFFF</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">if</span> (iValue &gt;= <span class="number">0x800000</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">4</span>);</span><br><span class="line">                    pMidSite = pMidData;</span><br><span class="line">                    *(pMidData++) = <span class="number">0</span>;</span><br><span class="line">                    *pMidLength = <span class="number">1</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">                    DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">3</span>);</span><br><span class="line">                    pMidSite = pMidData;</span><br><span class="line">                &#125;</span><br><span class="line">                *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">16</span>);</span><br><span class="line">                *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">8</span>);</span><br><span class="line">                *(pMidData++) = (ITCAST_UINT8)(iValue);</span><br><span class="line">                (*pMidLength) += <span class="number">3</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                <span class="keyword">if</span> (iValue &gt; <span class="number">0xFF</span>)</span><br><span class="line">                &#123;</span><br><span class="line">                    <span class="keyword">if</span> (iValue &gt;= <span class="number">0x8000</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">                        DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">3</span>);</span><br><span class="line">                        pMidSite = pMidData;</span><br><span class="line">                        *(pMidData++) = <span class="number">0</span>;</span><br><span class="line">                        *pMidLength = <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">else</span></span><br><span class="line">                    &#123;</span><br><span class="line">                        DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">2</span>);</span><br><span class="line">                        pMidSite = pMidData;</span><br><span class="line">                    &#125;</span><br><span class="line">                    *(pMidData++) = (ITCAST_UINT8)(iValue &gt;&gt; <span class="number">8</span>);</span><br><span class="line">                    *(pMidData++) = (ITCAST_UINT8)(iValue);</span><br><span class="line">                    (*pMidLength) += <span class="number">2</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span></span><br><span class="line">                &#123;</span><br><span class="line">#<span class="keyword">if</span> <span class="number">0</span>   <span class="comment">// 尼玛iValue是unsigned int 这个条件永远成立</span></span><br><span class="line">                    <span class="keyword">if</span> (iValue &gt;= <span class="number">0x0</span>)</span><br><span class="line">                    &#123;</span><br><span class="line">#endif</span><br><span class="line">                        <span class="keyword">if</span> (iValue &gt;= <span class="number">0x80</span>)</span><br><span class="line">                        &#123;</span><br><span class="line">                            DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">2</span>);</span><br><span class="line">                            pMidSite = pMidData;</span><br><span class="line">                            *(pMidData++) = <span class="number">0</span>;</span><br><span class="line">                            *pMidLength = <span class="number">1</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                        <span class="keyword">else</span></span><br><span class="line">                        &#123;</span><br><span class="line">                            DER_ITASN1_LOW_CREATEUINT8(pMidData, <span class="number">1</span>);</span><br><span class="line">                            pMidSite = pMidData;</span><br><span class="line">                        &#125;</span><br><span class="line">                        *pMidData = (ITCAST_UINT8)(iValue);</span><br><span class="line">                        (*pMidLength) += <span class="number">1</span>;</span><br><span class="line">                    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">                &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//信息输出</span></span><br><span class="line">    *ppData = pMidSite;</span><br><span class="line">    *ppLength = pMidLength;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidSite = <span class="literal">NULL</span>;</span><br><span class="line">    pMidLength = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//将一个用字符表示的整数转换成ITCAST_UINT32型整数</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_CharToInt(ITCAST_UINT8 *aData, ITCAST_UINT32 lLength, ITCAST_UINT32 **ppInteger)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT32 lIntMid = <span class="number">0</span>, i;</span><br><span class="line">    ITCAST_UINT32 *pIntMid = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT32(pIntMid);</span><br><span class="line">    <span class="comment">//转换</span></span><br><span class="line">    <span class="keyword">if</span> ((*aData == <span class="number">0</span>) &amp;&amp; (lLength &gt; <span class="number">1</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        aData++;</span><br><span class="line">        lLength--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">1</span>; i &lt; lLength; i++)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        lIntMid |= *aData++;</span><br><span class="line">        lIntMid &lt;&lt;= <span class="number">8</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    lIntMid |= *aData++;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *pIntMid = lIntMid;</span><br><span class="line">    *ppInteger = pIntMid;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pIntMid = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//写Tag和Length值</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_WriteTagAndLength(ITCAST_ANYBUF *pAnyIn, ITCAST_UINT8 cTag, ITCAST_ANYBUF **ppAnyOut, ITCAST_UINT8 **ppUint8Value)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidAny = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidValue = <span class="literal">NULL</span>, cIdentifier;</span><br><span class="line">    ITCAST_UINT32 iMidSize, iMidSizeOf, iMidLength, i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算长度,Bitstring和Integer类型与其他类型分开处理</span></span><br><span class="line">    <span class="keyword">if</span> ((cTag != ITCAST_DER_ID_BITSTRING) &amp;&amp; (cTag != ITCAST_DER_ID_INTEGER))</span><br><span class="line">        iMidSize = pAnyIn-&gt;dataLen;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">if</span> (cTag == ITCAST_DER_ID_INTEGER)</span><br><span class="line">            <span class="keyword">if</span> (!(*(pAnyIn-&gt;pData) &amp; ITCAST_DER_FIRST_YES_ID_MASK))</span><br><span class="line">                iMidSize = pAnyIn-&gt;dataLen;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                iMidSize = pAnyIn-&gt;dataLen + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            iMidSize = pAnyIn-&gt;dataLen + <span class="number">1</span>;</span><br><span class="line">    iMidLength = iMidSize;</span><br><span class="line">    iMidSizeOf = DER_ItAsn1_Low_Count_LengthOfSize(iMidSize);</span><br><span class="line">    <span class="keyword">if</span> (<span class="comment">/*iMidSizeOf &lt; 0 || */</span>iMidSizeOf &gt; <span class="number">5</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthErr, <span class="string">"func DER_ItAsn1_Low_WriteTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> LengthErr;</span><br><span class="line">    &#125;</span><br><span class="line">    iMidSize += <span class="number">1</span> + iMidSizeOf;</span><br><span class="line">    DER_CREATE_LOW_ITCAST_ANYBUF(pMidAny);</span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT8(pMidValue, iMidSize);</span><br><span class="line">    <span class="keyword">if</span> (iMidSize == <span class="number">11</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        iMidSize = <span class="number">11</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    pMidAny-&gt;pData = pMidValue;</span><br><span class="line">    <span class="comment">//检测Tag值</span></span><br><span class="line">    <span class="keyword">if</span> (cTag &amp; ITCAST_DER_CONTEXT_SPECIFIC)</span><br><span class="line">        cIdentifier = cTag;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        cIdentifier = DER_ITASN1_LOW_IDENTIFIER(cTag);</span><br><span class="line">        <span class="comment">//if (cIdentifier != pAnyIn -&gt;dataType)</span></span><br><span class="line">        <span class="comment">//    return MemoryErr;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *(pMidValue++) = cTag;</span><br><span class="line">    pMidAny-&gt;dataType = (ITCAST_UINT32)cIdentifier;</span><br><span class="line">    pMidAny-&gt;dataLen = iMidSize;</span><br><span class="line">    <span class="keyword">if</span> (iMidSizeOf == <span class="number">1</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        *(pMidValue++) = (ITCAST_UINT8)(iMidLength);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *(pMidValue++) = ITCAST_DER_FIRST_YES_ID_MASK | (ITCAST_UINT8)(iMidSizeOf - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span> (i = iMidSizeOf - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">        &#123;</span><br><span class="line">            *(pMidValue++) = (ITCAST_UINT8)(iMidLength &gt;&gt; <span class="number">8</span> * (i - <span class="number">1</span>));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pMidAny-&gt;dataType == ITCAST_DER_ID_BITSTRING)</span><br><span class="line">    &#123;</span><br><span class="line">        pMidAny-&gt;unusedBits = pAnyIn-&gt;unusedBits;</span><br><span class="line">        *(pMidValue++) = (ITCAST_UINT8)(pAnyIn-&gt;unusedBits);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pMidAny-&gt;dataType == ITCAST_DER_ID_INTEGER)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> (*(pAnyIn-&gt;pData) &amp; ITCAST_DER_FIRST_YES_ID_MASK)</span><br><span class="line">            *(pMidValue++) = <span class="number">0x0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出信息</span></span><br><span class="line">    *ppUint8Value = pMidValue;</span><br><span class="line">    *ppAnyOut = pMidAny;</span><br><span class="line"></span><br><span class="line">    pMidAny = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//读Tag和Length值</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_Low_ReadTagAndLength(ITCAST_ANYBUF *pAnyIn, ITCAST_UINT8 **ppUint8Data, ITCAST_ANYBUF **ppAnyOut, ITCAST_UINT8 **ppUint8Value)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidAny = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pMidTag = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pMidSize = <span class="literal">NULL</span>, *pMidSizeOf = <span class="literal">NULL</span>, iMidLength = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    DER_CREATE_LOW_ITCAST_ANYBUF(pMidAny);</span><br><span class="line">    DER_ItAsn1_Low_GetTagInfo(ppUint8Data, &amp;pMidTag, &amp;pMidSize);</span><br><span class="line">    <span class="comment">//检测Tag值是否正确</span></span><br><span class="line">    <span class="keyword">if</span> (!(*pMidTag == ITCAST_DER_ID_STRING_PRINTABLE) || (*pMidTag == ITCAST_DER_ID_STRING_BMP))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="comment">/***************************************</span></span><br><span class="line"><span class="comment">            *****  if (*pMidTag != pAnyIn -&gt;dataType)</span></span><br><span class="line"><span class="comment">            ****    return MemoryErr;</span></span><br><span class="line"><span class="comment">            ***************************************wyy*/</span></span><br><span class="line">    &#125;</span><br><span class="line">    pMidAny-&gt;dataType = *pMidTag;</span><br><span class="line">    iMidLength += *pMidSize;</span><br><span class="line">    DER_ITCAST_Free(pMidSize);</span><br><span class="line">    DER_ItAsn1_Low_GetLengthInfo(ppUint8Data, &amp;pMidSize, &amp;pMidSizeOf);</span><br><span class="line">    <span class="comment">//检测总长度是否正确</span></span><br><span class="line">    iMidLength += *pMidSize + *pMidSizeOf;</span><br><span class="line">    <span class="keyword">if</span> (iMidLength != pAnyIn-&gt;dataLen)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pMidSize);</span><br><span class="line">        DER_ITCAST_Free(pMidSizeOf);</span><br><span class="line">        DER_ITCAST_Free(pMidTag);</span><br><span class="line">        DER_ITCAST_Free(pMidAny);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthNotEqual, <span class="string">"func DER_ItAsn1_Low_ReadTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> LengthNotEqual;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Bitstring和Integer类型与其他类型不同</span></span><br><span class="line">    <span class="keyword">if</span> (pAnyIn-&gt;dataType == ITCAST_DER_ID_BITSTRING)</span><br><span class="line">    &#123;</span><br><span class="line">        pMidAny-&gt;unusedBits = pAnyIn-&gt;unusedBits;</span><br><span class="line">        <span class="comment">//检测unusedBits值是否正确</span></span><br><span class="line">        <span class="comment">//if ((ITCAST_UINT8)(pMidAny -&gt;unusedBits) != **ppUint8Data)</span></span><br><span class="line">        <span class="comment">//return MemoryErr;</span></span><br><span class="line">        (*ppUint8Data)++;</span><br><span class="line">        (*pMidSize)--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (*pMidTag == ITCAST_DER_ID_INTEGER)</span><br><span class="line">    &#123;</span><br><span class="line">        pMidValue = *ppUint8Data;</span><br><span class="line">        <span class="keyword">if</span> ((*pMidValue == <span class="number">0x0</span>) &amp;&amp; (*(++pMidValue) &amp; ITCAST_DER_FIRST_YES_ID_MASK))</span><br><span class="line">        &#123;</span><br><span class="line">            (*ppUint8Data)++;</span><br><span class="line">            (*pMidSize)--;</span><br><span class="line">        &#125;</span><br><span class="line">        pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_Free(pMidTag);</span><br><span class="line">    <span class="comment">//创建pMidAny的pData空间</span></span><br><span class="line">    <span class="keyword">if</span> (*pMidSize &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITASN1_LOW_CREATEUINT8(pMidValue, *pMidSize);</span><br><span class="line">        <span class="keyword">if</span> (pMidValue == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pMidSize);</span><br><span class="line">            DER_ITCAST_Free(pMidSizeOf);</span><br><span class="line">            DER_ITCAST_Free(pMidAny);</span><br><span class="line">            <span class="keyword">return</span> MemoryErr;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppUint8Value = pMidValue;</span><br><span class="line">    pMidAny-&gt;dataLen = *pMidSize;</span><br><span class="line">    pMidAny-&gt;pData = *ppUint8Value;</span><br><span class="line">    *ppAnyOut = pMidAny;</span><br><span class="line">    DER_ITCAST_Free(pMidSize);</span><br><span class="line">    DER_ITCAST_Free(pMidSizeOf);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidAny = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码整数数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteInteger(ITCAST_UINT32 integer, ITASN1_INTEGER **ppDerInteger)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pData, *pMidSite;</span><br><span class="line">    ITCAST_UINT32 *pLength;</span><br><span class="line">    ITASN1_INTEGER *pInteger = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidUint8 = <span class="literal">NULL</span>, cTag = ITCAST_DER_INTEGER;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码pData域</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_IntToChar(integer, &amp;pData, &amp;pLength);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_IntToChar() err != NoErr"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT8(pMidUint8, *pLength + <span class="number">2</span>);</span><br><span class="line">    pMidSite = pMidUint8;</span><br><span class="line">    *(pMidUint8++) = cTag;</span><br><span class="line">    *(pMidUint8++) = (ITCAST_UINT8)*pLength;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidUint8, pData, *pLength);</span><br><span class="line">    <span class="comment">//形成ITASN1_INTEGER结构</span></span><br><span class="line">    DER_CREATE_LOW_ITCAST_ANYBUF(pInteger);</span><br><span class="line">    DER_ITASN1_LOW_CHECKERR(iResult, MemoryErr);</span><br><span class="line">    pInteger-&gt;pData = pMidSite;</span><br><span class="line">    pInteger-&gt;unusedBits = <span class="number">0</span>;</span><br><span class="line">    pInteger-&gt;dataType = DER_ITASN1_LOW_IDENTIFIER(cTag);</span><br><span class="line">    pInteger-&gt;memoryType = MallocMemory;</span><br><span class="line">    pInteger-&gt;dataLen = *pLength + <span class="number">2</span>;</span><br><span class="line">    pInteger-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    pInteger-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerInteger = pInteger;</span><br><span class="line">    DER_ITCAST_Free(pData);</span><br><span class="line">    DER_ITCAST_Free(pLength);</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidSite = <span class="literal">NULL</span>;</span><br><span class="line">    pInteger = <span class="literal">NULL</span>;</span><br><span class="line">    pMidUint8 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码整数数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadInteger(ITASN1_INTEGER *pDerInteger, ITCAST_UINT32 *pInteger)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 *pTag = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32 lMidLength, *pMidSize = <span class="literal">NULL</span>, *pMidSizeOf = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    pMidData = pDerInteger-&gt;pData;</span><br><span class="line">    iResult = DER_ItAsn1_Low_GetTagInfo(&amp;pMidData, &amp;pTag, &amp;pMidSize);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_ReadInteger() err check iResult != NoErr"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_Free(pTag);</span><br><span class="line">    DER_ITCAST_Free(pMidSize);</span><br><span class="line">    iResult = DER_ItAsn1_Low_GetLengthInfo(&amp;pMidData, &amp;pMidSize, &amp;pMidSizeOf);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_GetLengthInfo() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    lMidLength = *pMidSize;</span><br><span class="line">    DER_ITCAST_Free(pMidSize);</span><br><span class="line">    DER_ITCAST_Free(pMidSizeOf);</span><br><span class="line">    iResult = DER_ItAsn1_Low_CharToInt(pMidData, lMidLength, &amp;pMidSize);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_CharToInt() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *pInteger = *pMidSize;</span><br><span class="line">    DER_ITCAST_Free(pMidSize);</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码BitString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteBitString(ITASN1_BITSTRING *pBitString, ITASN1_BITSTRING **ppDerBitString)</span><br><span class="line">&#123;</span><br><span class="line">    ITASN1_BITSTRING *pMidBitString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 cTag = ITCAST_DER_BITSTRING;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_WriteTagAndLength(pBitString, cTag, &amp;pMidBitString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_WriteTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pMidData = pBitString-&gt;pData;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pBitString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerBitString = pMidBitString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidBitString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码BitString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadBitString(ITASN1_BITSTRING *pDerBitString, ITASN1_BITSTRING **ppBitString)</span><br><span class="line">&#123;</span><br><span class="line">    ITASN1_BITSTRING *pMidBitString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    pMidData = pDerBitString-&gt;pData;</span><br><span class="line">    iResult = DER_ItAsn1_Low_ReadTagAndLength(pDerBitString, &amp;pMidData, &amp;pMidBitString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_ReadTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pMidBitString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppBitString = pMidBitString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidBitString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码CharString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteCharString(ITCAST_ANYBUF *pCharString, ITCAST_ANYBUF **ppDerCharString)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidCharString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 cTag = ITCAST_DER_ID_STRING_PRINTABLE;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_WriteTagAndLength(pCharString, cTag, &amp;pMidCharString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_WriteTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pMidData = pCharString-&gt;pData;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pCharString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerCharString = pMidCharString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidCharString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码PrintableString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadCharString(ITCAST_ANYBUF *pDerCharString, ITCAST_ANYBUF **ppCharString)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidCharString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    pMidData = pDerCharString-&gt;pData;</span><br><span class="line">    iResult = DER_ItAsn1_Low_ReadTagAndLength(pDerCharString, &amp;pMidData, &amp;pMidCharString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_ReadTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pMidCharString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppCharString = pMidCharString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidCharString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码BmpString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteBmpString(ITASN1_BMPSTRING *pBmpString, ITASN1_BMPSTRING **ppDerBmpString)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidBmpString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 cTag = ITCAST_DER_ID_STRING_BMP;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_WriteTagAndLength(pBmpString, cTag, &amp;pMidBmpString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_WriteTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    pMidData = pBmpString-&gt;pData;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pBmpString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerBmpString = pMidBmpString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidBmpString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码BmpString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadBmpString(ITASN1_BMPSTRING *pDerBmpString, ITASN1_BMPSTRING **ppBmpString)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidBmpString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    pMidData = pDerBmpString-&gt;pData;</span><br><span class="line">    iResult = DER_ItAsn1_Low_ReadTagAndLength(pDerBmpString, &amp;pMidData, &amp;pMidBmpString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_ReadTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pMidBmpString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppBmpString = pMidBmpString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidBmpString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码PrintableString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WritePrintableString(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pPrintString-&gt;dataType == ITCAST_DER_STRING_BMP)</span><br><span class="line">    &#123;</span><br><span class="line">        iResult = DER_ItAsn1_WriteBmpString(pPrintString, ppDerPrintString);</span><br><span class="line">        <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_WriteBmpString() err"</span>);</span><br><span class="line">            <span class="keyword">return</span>  iResult;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        iResult = DER_ItAsn1_WriteCharString(pPrintString, ppDerPrintString);</span><br><span class="line">        <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">        &#123;</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_WriteCharString() err"</span>);</span><br><span class="line">            <span class="keyword">return</span>  iResult;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码PrintableString类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadPrintableString(ITASN1_PRINTABLESTRING *pDerPrintString, ITASN1_PRINTABLESTRING **ppPrintString)</span><br><span class="line">&#123;</span><br><span class="line">    ITASN1_PRINTABLESTRING *pMidPrintString = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//解码</span></span><br><span class="line">    pMidData = pDerPrintString-&gt;pData;</span><br><span class="line">    iResult = DER_ItAsn1_Low_ReadTagAndLength(pDerPrintString, &amp;pMidData, &amp;pMidPrintString, &amp;pMidValue);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_ReadTagAndLength() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memcpy</span>(pMidValue, pMidData, pMidPrintString-&gt;dataLen);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppPrintString = pMidPrintString;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidPrintString = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码Sequence类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteSequence(ITASN1_SEQUENCE *pSequence, ITCAST_ANYBUF **ppDerSequence)</span><br><span class="line">&#123;</span><br><span class="line">    ITASN1_SEQUENCE *pMidSequence = <span class="literal">NULL</span>, *pMidNext1 = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidValue = <span class="literal">NULL</span>, *pMidSite;</span><br><span class="line">    ITCAST_UINT32 lSizeOf = <span class="number">0</span>, i, lMidLength = <span class="number">0</span>;</span><br><span class="line">    ITCAST_UINT8 cTag = ITCAST_DER_SEQUENCE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">//计算Sequence数据长度</span></span><br><span class="line">    pMidNext1 = pSequence;</span><br><span class="line">    <span class="keyword">while</span> (pMidNext1 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        lMidLength += pMidNext1-&gt;dataLen;</span><br><span class="line">        pMidNext1 = pMidNext1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    lSizeOf = DER_ItAsn1_Low_Count_LengthOfSize(lMidLength);</span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT8(pMidValue, lMidLength + <span class="number">1</span> + lSizeOf);</span><br><span class="line"></span><br><span class="line">    pMidSite = pMidValue;</span><br><span class="line">    <span class="comment">//写Tag值</span></span><br><span class="line">    *(pMidValue++) = cTag;</span><br><span class="line">    <span class="comment">//写长度</span></span><br><span class="line">    <span class="keyword">if</span> (lSizeOf == <span class="number">1</span>)</span><br><span class="line">        *(pMidValue++) = (ITCAST_UINT8)lMidLength;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        *(pMidValue++) = ITCAST_DER_FIRST_YES_ID_MASK | ((ITCAST_UINT8)(lSizeOf - <span class="number">1</span>));</span><br><span class="line">        <span class="keyword">for</span> (i = lSizeOf - <span class="number">1</span>; i &gt; <span class="number">0</span>; i--)</span><br><span class="line">            *(pMidValue++) = (ITCAST_UINT8)(lMidLength &gt;&gt; <span class="number">8</span> * (i - <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    pMidNext1 = pSequence;</span><br><span class="line">    <span class="comment">//copy数据</span></span><br><span class="line">    <span class="keyword">while</span> (pMidNext1 != <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">memcpy</span>(pMidValue, pMidNext1-&gt;pData, pMidNext1-&gt;dataLen);</span><br><span class="line"></span><br><span class="line">        pMidValue += pMidNext1-&gt;dataLen;</span><br><span class="line">        pMidNext1 = pMidNext1-&gt;next;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//创建ITCAST_ANYBUF结构</span></span><br><span class="line">    DER_CREATE_LOW_ITCAST_ANYBUF(pMidSequence);</span><br><span class="line">    pMidSequence-&gt;dataLen = lMidLength + <span class="number">1</span> + lSizeOf;</span><br><span class="line">    pMidSequence-&gt;pData = pMidSite;</span><br><span class="line">    pMidSequence-&gt;dataType = DER_ITASN1_LOW_IDENTIFIER(cTag);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerSequence = pMidSequence;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidSequence = <span class="literal">NULL</span>;</span><br><span class="line">    pMidNext1 = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    pMidSite = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> BaseASN1::DER_DI_FreeAnybuf(ITCAST_ANYBUF  * pAnyBuf)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF * pTmp;</span><br><span class="line">    pTmp = pAnyBuf;</span><br><span class="line">    <span class="keyword">if</span> (pAnyBuf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pAnyBuf-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        pTmp = pAnyBuf-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (pAnyBuf-&gt;pData)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pAnyBuf-&gt;pData);</span><br><span class="line">        &#125;</span><br><span class="line">        DER_ITCAST_Free(pAnyBuf);</span><br><span class="line">        pAnyBuf = pTmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pAnyBuf-&gt;pData)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pAnyBuf-&gt;pData);</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_Free(pAnyBuf);</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码Sequence类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadSequence(ITCAST_ANYBUF *pDerSequence, ITASN1_SEQUENCE **ppSequence)</span><br><span class="line">&#123;</span><br><span class="line">    ITASN1_SEQUENCE *pMidNext1 = <span class="literal">NULL</span>, *pMidNext2 = <span class="literal">NULL</span>, *pMidSequence = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8   *pMidData = <span class="literal">NULL</span>, *pMidItemData = <span class="literal">NULL</span>, *pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32  lMidLength = <span class="number">0</span>, *pTagValue = <span class="literal">NULL</span>, *pLengthValue = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT32  *pTagSize = <span class="literal">NULL</span>, *pLengthSize = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>        lTotalLength = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> iResult;</span><br><span class="line">    ITCAST_UINT8 firstTag = TRUE;</span><br><span class="line">    <span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    pMidData = pDerSequence-&gt;pData;</span><br><span class="line">    <span class="comment">//检测Tag值</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_GetTagInfo(&amp;pMidData, &amp;pTagValue, &amp;pTagSize);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"func DER_ItAsn1_Low_GetTagInfo() err"</span>);</span><br><span class="line">        <span class="keyword">return</span>  iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> ((ITCAST_UINT8)*pTagValue != ITCAST_DER_ID_SEQUENCE)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pTagValue);</span><br><span class="line">        DER_ITCAST_Free(pTagSize);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, InvalidTag, <span class="string">"check pTagValue != ITCAST_DER_ID_SEQUENCE err"</span>);</span><br><span class="line">        <span class="keyword">return</span> InvalidTag;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//检测长度值</span></span><br><span class="line">    iResult = DER_ItAsn1_Low_GetLengthInfo(&amp;pMidData, &amp;pLengthValue, &amp;pLengthSize);</span><br><span class="line">    <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pTagValue);</span><br><span class="line">        DER_ITCAST_Free(pTagSize);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"fun DER_ItAsn1_Low_GetLengthInfo() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> iResult;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pDerSequence-&gt;dataLen != *pTagSize + *pLengthSize + *pLengthValue)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pLengthValue);</span><br><span class="line">        DER_ITCAST_Free(pLengthSize);</span><br><span class="line">        DER_ITCAST_Free(pTagValue);</span><br><span class="line">        DER_ITCAST_Free(pTagSize);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthNotEqual, <span class="string">"fun check length  err"</span>);</span><br><span class="line">        <span class="keyword">return</span> LengthNotEqual;</span><br><span class="line">    &#125;</span><br><span class="line">    lTotalLength = *pLengthValue;</span><br><span class="line">    DER_ITCAST_Free(pTagValue);</span><br><span class="line">    DER_ITCAST_Free(pTagSize);</span><br><span class="line">    DER_ITCAST_Free(pLengthValue);</span><br><span class="line">    DER_ITCAST_Free(pLengthSize);</span><br><span class="line">    <span class="comment">//创建Sequence链,头及其余元素</span></span><br><span class="line">    <span class="keyword">while</span> (lTotalLength &gt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pMidItemData = pMidData;</span><br><span class="line">        iResult = DER_ItAsn1_Low_GetTagInfo(&amp;pMidItemData, &amp;pTagValue, &amp;pTagSize);</span><br><span class="line">        <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pTagValue);</span><br><span class="line">            DER_ITCAST_Free(pTagSize);</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"fun DER_ItAsn1_Low_GetTagInfo() err"</span>);</span><br><span class="line">            <span class="keyword">return</span> iResult;</span><br><span class="line">        &#125;</span><br><span class="line">        iResult = DER_ItAsn1_Low_GetLengthInfo(&amp;pMidItemData, &amp;pLengthValue, &amp;pLengthSize);</span><br><span class="line">        <span class="keyword">if</span> (iResult != NoErr)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pLengthValue);</span><br><span class="line">            DER_ITCAST_Free(pLengthSize);</span><br><span class="line">            DER_ITCAST_Free(pTagValue);</span><br><span class="line">            DER_ITCAST_Free(pTagSize);</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, iResult, <span class="string">"fun DER_ItAsn1_Low_GetLengthInfo() err"</span>);</span><br><span class="line">            <span class="keyword">return</span> iResult;</span><br><span class="line">        &#125;</span><br><span class="line">        lMidLength = *pTagSize + *pLengthSize + *pLengthValue;</span><br><span class="line"></span><br><span class="line">        DER_ITASN1_LOW_CREATEUINT8(pMidValue, lMidLength);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (pMidValue == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pLengthValue);</span><br><span class="line">            DER_ITCAST_Free(pLengthSize);</span><br><span class="line">            DER_ITCAST_Free(pTagValue);</span><br><span class="line">            DER_ITCAST_Free(pTagSize);</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, MemoryErr, <span class="string">"pMidValue is null err"</span>);</span><br><span class="line">            <span class="keyword">return</span> MemoryErr;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="built_in">memcpy</span>(pMidValue, pMidData, lMidLength);</span><br><span class="line">        <span class="keyword">if</span> (firstTag)</span><br><span class="line">        &#123;</span><br><span class="line">            firstTag = FALSE;</span><br><span class="line">            DER_CREATE_LOW_ITCAST_ANYBUF(pMidSequence);</span><br><span class="line">            pMidSequence-&gt;pData = pMidValue;</span><br><span class="line">            pMidSequence-&gt;dataType = *pTagValue;</span><br><span class="line">            pMidSequence-&gt;dataLen = lMidLength;</span><br><span class="line">            pMidNext2 = pMidSequence;</span><br><span class="line">            pMidNext2-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">            pMidNext2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            DER_CREATE_LOW_ITCAST_ANYBUF(pMidNext1);</span><br><span class="line">            pMidNext1-&gt;pData = pMidValue;</span><br><span class="line">            pMidNext1-&gt;dataType = *pTagValue;</span><br><span class="line">            pMidNext1-&gt;dataLen = lMidLength;</span><br><span class="line">            pMidNext1-&gt;prev = pMidNext2;</span><br><span class="line">            pMidNext2-&gt;next = pMidNext1;</span><br><span class="line">            pMidNext2 = pMidNext2-&gt;next;</span><br><span class="line">            pMidNext2-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        pMidData += lMidLength;</span><br><span class="line">        lTotalLength -= lMidLength;</span><br><span class="line">        DER_ITCAST_Free(pTagValue);</span><br><span class="line">        DER_ITCAST_Free(pTagSize);</span><br><span class="line">        DER_ITCAST_Free(pLengthValue);</span><br><span class="line">        DER_ITCAST_Free(pLengthSize);</span><br><span class="line">        i++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (lTotalLength != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthErr, <span class="string">"lTotalLength != 0 err"</span>);</span><br><span class="line">        DER_DI_FreeAnybuf(pMidSequence);</span><br><span class="line">        <span class="keyword">return</span> LengthErr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//信息返回</span></span><br><span class="line">    *ppSequence = pMidSequence;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidNext1 = <span class="literal">NULL</span>;</span><br><span class="line">    pMidNext2 = <span class="literal">NULL</span>;</span><br><span class="line">    pMidSequence = <span class="literal">NULL</span>;</span><br><span class="line">    pMidData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidItemData = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER编码Null类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_WriteNull(ITCAST_ANYBUF **ppDerNull)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pMidNull = <span class="literal">NULL</span>;</span><br><span class="line">    ITCAST_UINT8 *pMidValue = <span class="literal">NULL</span>, *pMidSite, cTag = ITCAST_DER_NULL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编码</span></span><br><span class="line">    DER_ITASN1_LOW_CREATEUINT8(pMidValue, <span class="number">2</span>);</span><br><span class="line">    pMidSite = pMidValue;</span><br><span class="line">    *(pMidValue++) = cTag;</span><br><span class="line">    *pMidValue = <span class="number">0x0</span>;</span><br><span class="line">    <span class="comment">//创建ITCAST_ANYBUF类型结构</span></span><br><span class="line">    DER_CREATE_LOW_ITCAST_ANYBUF(pMidNull);</span><br><span class="line">    pMidNull-&gt;pData = pMidSite;</span><br><span class="line">    pMidNull-&gt;dataLen = <span class="number">2</span>;</span><br><span class="line">    pMidNull-&gt;dataType = DER_ITASN1_LOW_IDENTIFIER(cTag);</span><br><span class="line">    <span class="comment">//输出</span></span><br><span class="line">    *ppDerNull = pMidNull;</span><br><span class="line">    <span class="comment">//中间变量赋空</span></span><br><span class="line">    pMidNull = <span class="literal">NULL</span>;</span><br><span class="line">    pMidValue = <span class="literal">NULL</span>;</span><br><span class="line">    pMidSite = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//DER解码Null类型数据</span></span><br><span class="line">ITCAST_INT BaseASN1::DER_ItAsn1_ReadNull(ITCAST_ANYBUF *pDerNull, ITCAST_UINT8 *pInt)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>  temp[<span class="number">2</span>];</span><br><span class="line">    <span class="keyword">unsigned</span> <span class="keyword">char</span>  derNULL[<span class="number">2</span>];</span><br><span class="line">    <span class="built_in">memcpy</span>(temp, pDerNull-&gt;pData, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(temp + <span class="number">1</span>, pDerNull-&gt;pData + <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(derNULL, <span class="number">5</span>, <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memset</span>(derNULL + <span class="number">1</span>, <span class="number">0</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">memcmp</span>(temp, derNULL, <span class="number">2</span>))</span><br><span class="line">    &#123;</span><br><span class="line">        *pInt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *pInt = <span class="number">5</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITCAST_INT BaseASN1::DER_ITCAST_FreeQueue(ITCAST_ANYBUF *pAnyBuf)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF * pTmp;</span><br><span class="line">    pTmp = pAnyBuf;</span><br><span class="line">    <span class="keyword">if</span> (pAnyBuf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> NoErr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span> (pAnyBuf-&gt;next)</span><br><span class="line">    &#123;</span><br><span class="line">        pTmp = pAnyBuf-&gt;next;</span><br><span class="line">        <span class="keyword">if</span> (pAnyBuf-&gt;pData)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pAnyBuf-&gt;pData);</span><br><span class="line">        &#125;</span><br><span class="line">        DER_ITCAST_Free(pAnyBuf);</span><br><span class="line">        pAnyBuf = pTmp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (pAnyBuf-&gt;pData)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_Free(pAnyBuf-&gt;pData);</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_Free(pAnyBuf);</span><br><span class="line">    <span class="keyword">return</span> NoErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ITCAST_INT BaseASN1::DER_ITCAST_String_To_AnyBuf(ITCAST_ANYBUF **pOriginBuf, <span class="keyword">unsigned</span> <span class="keyword">char</span> *strOrigin, <span class="keyword">int</span> strOriginLen)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF *pValueBuf;</span><br><span class="line"></span><br><span class="line">    pValueBuf = (ITCAST_ANYBUF*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ITCAST_ANYBUF));</span><br><span class="line">    <span class="keyword">if</span> (pValueBuf == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, MemoryErr, <span class="string">"malloc err"</span>);</span><br><span class="line">        <span class="keyword">return</span> MemoryErr;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(pValueBuf, <span class="number">0</span>, <span class="keyword">sizeof</span>(ITCAST_ANYBUF));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (strOriginLen &lt;= <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        pValueBuf-&gt;pData = <span class="literal">NULL</span>;</span><br><span class="line">        strOriginLen = <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        pValueBuf-&gt;pData = (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)<span class="built_in">malloc</span>(strOriginLen);</span><br><span class="line">        <span class="keyword">if</span> (pValueBuf-&gt;pData == <span class="literal">NULL</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_Free(pValueBuf);</span><br><span class="line">            m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, LengthErr, <span class="string">"malloc err"</span>);</span><br><span class="line">            <span class="keyword">return</span> MemoryErr;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">memcpy</span>(pValueBuf-&gt;pData, strOrigin, strOriginLen);</span><br><span class="line">    &#125;</span><br><span class="line">    pValueBuf-&gt;dataLen = strOriginLen;</span><br><span class="line">    pValueBuf-&gt;dataType = ITCAST_DER_ID_STRING_PRINTABLE;</span><br><span class="line">    pValueBuf-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    pValueBuf-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line">    pValueBuf-&gt;unusedBits = (strOriginLen % <span class="number">8</span>);</span><br><span class="line">    pValueBuf-&gt;memoryType = <span class="number">0</span>;</span><br><span class="line">    *pOriginBuf = pValueBuf;</span><br><span class="line">    <span class="keyword">return</span> NoErr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  DER_INPUTDATA_ERR 106</span></span><br><span class="line"><span class="comment">//对空指针进行编码</span></span><br><span class="line"><span class="keyword">int</span> BaseASN1::WriteNullSequence(ITCAST_ANYBUF **pOutData)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">int</span>rv = <span class="number">0</span>;</span><br><span class="line">    ITCAST_ANYBUF*pTmp = <span class="literal">NULL</span>, *pHead = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    rv = DER_ItAsn1_WriteNull(&amp;pTmp);</span><br><span class="line">    <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, rv, <span class="string">"func DER_ItAsn1_WriteNull() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> rv;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    rv = DER_ItAsn1_WriteSequence(pTmp, &amp;pHead);</span><br><span class="line">    <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        DER_ITCAST_FreeQueue(pHead);</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, rv, <span class="string">"func DER_ItAsn1_WriteSequence() err"</span>);</span><br><span class="line">        <span class="keyword">return</span> rv;</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">    <span class="keyword">if</span> (pHead == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        m_log.Log(__FILE__, __LINE__, ItcastLog::ERROR, <span class="number">-1</span>, <span class="string">" check (pHead == NULL) err"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    *pOutData = pHead;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BaseASN1::EncodeUnsignedChar(<span class="keyword">unsigned</span> <span class="keyword">char</span> *pData, <span class="keyword">int</span> dataLen, ITCAST_ANYBUF **outBuf)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF*pHeadBuf = <span class="literal">NULL</span>, *pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>rv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入值不合法</span></span><br><span class="line">    <span class="keyword">if</span> (pData == <span class="literal">NULL</span> &amp;&amp; dataLen != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> DER_INPUTDATA_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入值不合法</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pData != <span class="literal">NULL</span> &amp;&amp; dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DER_INPUTDATA_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pData == <span class="literal">NULL</span> &amp;&amp; dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rv = DER_ITCAST_String_To_AnyBuf(&amp;pTmp, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> rv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rv = DER_ItAsn1_WriteBitString(pTmp, &amp;pHeadBuf);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            DER_ITCAST_FreeQueue(pHeadBuf);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line">            <span class="keyword">return</span> rv;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rv = DER_ITCAST_String_To_AnyBuf(&amp;pTmp, pData, dataLen);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rv = DER_ItAsn1_WriteBitString(pTmp, &amp;pHeadBuf);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pHeadBuf);</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line"></span><br><span class="line">    *outBuf = pHeadBuf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BaseASN1::DecodeUnsignedChar(ITCAST_ANYBUF *inBuf, <span class="keyword">unsigned</span> <span class="keyword">char</span> **Data, <span class="keyword">int</span> *pDataLen)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF*pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>rv;</span><br><span class="line"></span><br><span class="line">    rv = DER_ItAsn1_ReadBitString(inBuf, &amp;pTmp);</span><br><span class="line">    <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"DecodeUnsignedChar  error");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pTmp-&gt;dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        *Data = <span class="literal">NULL</span>;</span><br><span class="line">        *pDataLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *Data = (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)<span class="built_in">malloc</span>(pTmp-&gt;dataLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (*Data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"DecodeUnsignedChar_an Mallco *Data Malloc  error");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(*Data, <span class="number">0</span>, pTmp-&gt;dataLen + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(*Data, pTmp-&gt;pData, pTmp-&gt;dataLen);</span><br><span class="line">    *pDataLen = pTmp-&gt;dataLen;</span><br><span class="line"></span><br><span class="line">    DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BaseASN1::EncodeChar(<span class="keyword">char</span> *pData, <span class="keyword">int</span> dataLen, ITCAST_ANYBUF **outBuf)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF*pHeadBuf = <span class="literal">NULL</span>, *pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>rv;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//输入值不合法</span></span><br><span class="line">    <span class="keyword">if</span> (pData == <span class="literal">NULL</span> &amp;&amp; dataLen != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DER_INPUTDATA_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//输入值不合法</span></span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pData != <span class="literal">NULL</span> &amp;&amp; dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> DER_INPUTDATA_ERR;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (pData == <span class="literal">NULL</span> &amp;&amp; dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        rv = DER_ITCAST_String_To_AnyBuf(&amp;pTmp, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        rv = DER_ItAsn1_WritePrintableString(pTmp, &amp;pHeadBuf);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            DER_ITCAST_FreeQueue(pHeadBuf);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        rv = DER_ITCAST_String_To_AnyBuf(&amp;pTmp, (<span class="keyword">unsigned</span> <span class="keyword">char</span>*)pData, dataLen);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        rv = DER_ItAsn1_WritePrintableString(pTmp, &amp;pHeadBuf);</span><br><span class="line">        <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            DER_ITCAST_FreeQueue(pHeadBuf);</span><br><span class="line">            DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">            <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"unsigned char*编码   error");</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line"></span><br><span class="line">    *outBuf = pHeadBuf;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BaseASN1::DecodeChar(ITCAST_ANYBUF *inBuf, <span class="keyword">char</span> **Data, <span class="keyword">int</span> *pDataLen)</span><br><span class="line">&#123;</span><br><span class="line">    ITCAST_ANYBUF*pTmp = <span class="literal">NULL</span>;</span><br><span class="line">    <span class="keyword">int</span>rv;</span><br><span class="line"></span><br><span class="line">    rv = DER_ItAsn1_ReadPrintableString(inBuf, &amp;pTmp);</span><br><span class="line">    <span class="keyword">if</span> (rv != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"DecodeUnsignedChar  error");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (pTmp-&gt;dataLen == <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        *Data = <span class="literal">NULL</span>;</span><br><span class="line">        *pDataLen = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    *Data = (<span class="keyword">char</span>*)<span class="built_in">malloc</span>(pTmp-&gt;dataLen + <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (*Data == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line">        <span class="comment">//DER_DAPR_DebugMessage(_DEBUG_FILE_,__FILE__,__LINE__,"DecodeChar_an Mallco *Data Malloc  error");</span></span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(*Data, <span class="number">0</span>, pTmp-&gt;dataLen + <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">memcpy</span>(*Data, pTmp-&gt;pData, pTmp-&gt;dataLen);</span><br><span class="line">    *pDataLen = pTmp-&gt;dataLen;</span><br><span class="line"></span><br><span class="line">    DER_ITCAST_FreeQueue(pTmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> BaseASN1::DER_CREATE_LOW_ITCAST_ANYBUF(ITCAST_ANYBUF *&amp;point)</span><br><span class="line">&#123;</span><br><span class="line">    point = (ITCAST_ANYBUF *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(ITCAST_ANYBUF));</span><br><span class="line">    <span class="keyword">if</span> (point == <span class="literal">NULL</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">7002</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">memset</span>(point, <span class="number">0</span>, <span class="keyword">sizeof</span>(ITCAST_ANYBUF));</span><br><span class="line">    point-&gt;dataLen = <span class="number">0</span>;</span><br><span class="line">    point-&gt;dataType = <span class="number">0</span>;</span><br><span class="line">    point-&gt;memoryType = MallocMemory;</span><br><span class="line">    point-&gt;pData = <span class="literal">NULL</span>;</span><br><span class="line">    point-&gt;unusedBits = <span class="number">0</span>;</span><br><span class="line">    point-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line">    point-&gt;prev = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="sequenceasn1类是对baseasn1进行二次封装变得更容易使用"><a class="markdownIt-Anchor" href="#sequenceasn1类是对baseasn1进行二次封装变得更容易使用"></a> SequenceASN1类是对BaseASN1进行二次封装,变得更容易使用</h3><h3 id="sequenceasn1h"><a class="markdownIt-Anchor" href="#sequenceasn1h"></a> SequenceASN1.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">#ifndef ASN1DER_H</span><br><span class="line">#define ASN1DER_H</span><br><span class="line">#include &quot;BaseASN1.h&quot;</span><br><span class="line">#include &lt;string&gt;</span><br><span class="line"></span><br><span class="line">class SequenceASN1  : public BaseASN1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    SequenceASN1();</span><br><span class="line"></span><br><span class="line">    // 添加头结点</span><br><span class="line">    int writeHeadNode(int iValue);</span><br><span class="line">    int writeHeadNode(char* sValue, int len);</span><br><span class="line">    // 添加后继结点</span><br><span class="line">    int writeNextNode(int iValue);</span><br><span class="line">    int writeNextNode(char* sValue, int len);</span><br><span class="line"></span><br><span class="line">    // 读头结点数据</span><br><span class="line">    int readHeadNode(int &amp;iValue);</span><br><span class="line">    int readHeadNode(char* sValue);</span><br><span class="line">    // 读后继结点数据</span><br><span class="line">    int readNextNode(int &amp;iValue);</span><br><span class="line">    int readNextNode(char* sValue);</span><br><span class="line"></span><br><span class="line">    // 打包链表</span><br><span class="line">    int packSequence(char** outData, int &amp;outLen);</span><br><span class="line">    // 解包链表</span><br><span class="line">    int unpackSequence(char* inData, int inLen);</span><br><span class="line"></span><br><span class="line">    // 释放链表</span><br><span class="line">    void freeSequence(ITCAST_ANYBUF* node = NULL);</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    ITCAST_ANYBUF* m_header = NULL;</span><br><span class="line">ITCAST_ANYBUF* m_next   = NULL;</span><br><span class="line">ITCAST_ANYBUF* m_temp   = NULL;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif // ASN1DER_H</span><br></pre></td></tr></table></figure><br><br><br><h3 id="sequenceasn1cpp"><a class="markdownIt-Anchor" href="#sequenceasn1cpp"></a> SequenceASN1.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"SequenceASN1.h"</span></span></span><br><span class="line"></span><br><span class="line">SequenceASN1::SequenceASN1()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::writeHeadNode(<span class="keyword">int</span> iValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_WriteInteger(iValue, &amp;m_header);</span><br><span class="line">m_next = m_header;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::writeHeadNode(<span class="keyword">char</span> * sValue, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">EncodeChar(sValue, len, &amp;m_header);</span><br><span class="line">m_next = m_header;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::writeNextNode(<span class="keyword">int</span> iValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_WriteInteger(iValue, &amp;m_next-&gt;next);</span><br><span class="line">m_next = m_next-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::writeNextNode(<span class="keyword">char</span> * sValue, <span class="keyword">int</span> len)</span><br><span class="line">&#123;</span><br><span class="line">EncodeChar(sValue, len, &amp;m_next-&gt;next);</span><br><span class="line">m_next = m_next-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::readHeadNode(<span class="keyword">int</span> &amp; iValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_ReadInteger(m_header, (ITCAST_UINT32 *)&amp;iValue);</span><br><span class="line">m_next = m_header-&gt;next;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::readHeadNode(<span class="keyword">char</span> * sValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_ReadPrintableString(m_header, &amp;m_temp);</span><br><span class="line"><span class="built_in">memcpy</span>(sValue, m_temp-&gt;pData, m_temp-&gt;dataLen);</span><br><span class="line">DER_ITCAST_FreeQueue(m_temp);</span><br><span class="line">m_next = m_header-&gt;next;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::readNextNode(<span class="keyword">int</span> &amp; iValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_ReadInteger(m_next, (ITCAST_UINT32 *)&amp;iValue);</span><br><span class="line">m_next = m_next-&gt;next;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::readNextNode(<span class="keyword">char</span> * sValue)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_ReadPrintableString(m_next, &amp;m_temp);</span><br><span class="line"><span class="built_in">memcpy</span>(sValue, m_temp-&gt;pData, m_temp-&gt;dataLen);</span><br><span class="line">DER_ITCAST_FreeQueue(m_temp);</span><br><span class="line">m_next = m_next-&gt;next;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::packSequence(<span class="keyword">char</span> ** outData, <span class="keyword">int</span> &amp; outLen)</span><br><span class="line">&#123;</span><br><span class="line">DER_ItAsn1_WriteSequence(m_header, &amp;m_temp);</span><br><span class="line"><span class="comment">//传输参数赋值</span></span><br><span class="line">*outData = (<span class="keyword">char</span> *)m_temp-&gt;pData;</span><br><span class="line">outLen = m_temp-&gt;dataLen;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放整个链表</span></span><br><span class="line">DER_ITCAST_FreeQueue(m_header);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> SequenceASN1::unpackSequence(<span class="keyword">char</span> * inData, <span class="keyword">int</span> inLen)</span><br><span class="line">&#123;</span><br><span class="line">DER_ITCAST_String_To_AnyBuf(&amp;m_temp, (<span class="keyword">unsigned</span> <span class="keyword">char</span> *)inData, inLen);</span><br><span class="line">DER_ItAsn1_ReadSequence(m_temp, &amp;m_header);</span><br><span class="line"></span><br><span class="line">DER_ITCAST_FreeQueue(m_temp);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> SequenceASN1::freeSequence(ITCAST_ANYBUF * node)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h2 id="业务逻辑类"><a class="markdownIt-Anchor" href="#业务逻辑类"></a> 业务逻辑类</h2><h3 id="业务逻辑类父类"><a class="markdownIt-Anchor" href="#业务逻辑类父类"></a> 业务逻辑类父类</h3><p>使用多态的方式去调用子类的具体业务方法</p><h3 id="codech"><a class="markdownIt-Anchor" href="#codech"></a> Codec.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;SequenceASN1.h&quot;</span><br><span class="line"></span><br><span class="line">// 编解码的父类</span><br><span class="line">class Codec : public SequenceASN1</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">Codec();</span><br><span class="line">virtual ~Codec();</span><br><span class="line"></span><br><span class="line">// 数据编码</span><br><span class="line">virtual int msgEncode(char** outData, int &amp;len);</span><br><span class="line">// 数据解码</span><br><span class="line">virtual void* msgDecode(char *inData, int inLen);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="codeccpp"><a class="markdownIt-Anchor" href="#codeccpp"></a> Codec.cpp</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;Codec.h&quot;</span><br><span class="line"></span><br><span class="line">Codec::Codec()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Codec::~Codec()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int Codec::msgEncode(char ** outData, int &amp; len)</span><br><span class="line">&#123;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void * Codec::msgDecode(char * inData, int inLen)</span><br><span class="line">&#123;</span><br><span class="line">return NULL;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="业务逻辑子类"><a class="markdownIt-Anchor" href="#业务逻辑子类"></a> 业务逻辑子类</h3><h3 id="respondcodech"><a class="markdownIt-Anchor" href="#respondcodech"></a> RespondCodec.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#pragma once</span><br><span class="line">#include &quot;Codec.h&quot;</span><br><span class="line"></span><br><span class="line">struct  RespondMsg</span><br><span class="line">&#123;</span><br><span class="line">    intrv;// 返回值</span><br><span class="line">charclientId[12];// 客户端编号</span><br><span class="line">charserverId[12];// 服务器编号</span><br><span class="line">    charr2[64];// 服务器端随机数</span><br><span class="line">    intseckeyid;// 对称密钥编号    keysn</span><br><span class="line">RespondMsg() &#123;&#125;</span><br><span class="line">RespondMsg(char* clientID, char* serverID, char* r2, int rv, int seckeyID)</span><br><span class="line">&#123;</span><br><span class="line">this-&gt;rv = rv;</span><br><span class="line">this-&gt;seckeyid = seckeyid;</span><br><span class="line">strcpy(this-&gt;clientId, clientID);</span><br><span class="line">strcpy(this-&gt;serverId, serverID);</span><br><span class="line">strcpy(this-&gt;r2, r2);</span><br><span class="line">&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class RespondCodec : public Codec</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">RespondCodec();</span><br><span class="line">RespondCodec(RespondMsg *msg);</span><br><span class="line">~RespondCodec();</span><br><span class="line"></span><br><span class="line">// 函数重载</span><br><span class="line">int msgEncode(char** outData, int &amp;len);</span><br><span class="line">void* msgDecode(char *inData, int inLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">RespondMsg m_msg;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="requestcodeccpp"><a class="markdownIt-Anchor" href="#requestcodeccpp"></a> RequestCodec.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//解码的时候使用</span></span><br><span class="line">RequestCodec::RequestCodec() : Codec()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//编码的时候调用</span></span><br><span class="line">RequestCodec::RequestCodec(RequestMsg * msg)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">// 赋值操作</span></span><br><span class="line"><span class="built_in">memcpy</span>(&amp;m_msg, msg, <span class="keyword">sizeof</span>(RequestMsg));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestCodec::~RequestCodec()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">struct RequestMsg</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//1 密钥协商  //2 密钥校验; // 3 密钥注销</span></span><br><span class="line"><span class="comment">intcmdType;// 报文类型</span></span><br><span class="line"><span class="comment">charclientId[12];// 客户端编号</span></span><br><span class="line"><span class="comment">charauthCode[65];// 认证码</span></span><br><span class="line"><span class="comment">charserverId[12];// 服务器端编号 </span></span><br><span class="line"><span class="comment">charr1[64];// 客户端随机数</span></span><br><span class="line"><span class="comment">&#125;;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">int</span> RequestCodec::msgEncode(<span class="keyword">char</span> ** outData, <span class="keyword">int</span> &amp; len)</span><br><span class="line">&#123;</span><br><span class="line">writeHeadNode(m_msg.cmdType);</span><br><span class="line">writeNextNode(m_msg.clientId, <span class="built_in">strlen</span>(m_msg.clientId)+<span class="number">1</span>);</span><br><span class="line">writeNextNode(m_msg.authCode, <span class="built_in">strlen</span>(m_msg.authCode) + <span class="number">1</span>);</span><br><span class="line">writeNextNode(m_msg.serverId, <span class="built_in">strlen</span>(m_msg.serverId) + <span class="number">1</span>);</span><br><span class="line">writeNextNode(m_msg.r1, <span class="built_in">strlen</span>(m_msg.r1) + <span class="number">1</span>);</span><br><span class="line">packSequence(outData, len);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> * RequestCodec::msgDecode(<span class="keyword">char</span> * inData, <span class="keyword">int</span> inLen)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//反序列化</span></span><br><span class="line">unpackSequence(inData, inLen);</span><br><span class="line">readHeadNode(m_msg.cmdType);</span><br><span class="line">readNextNode(m_msg.clientId);</span><br><span class="line">readNextNode(m_msg.authCode);</span><br><span class="line">readNextNode(m_msg.serverId);</span><br><span class="line">readNextNode(m_msg.r1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"解码成功"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> &amp;m_msg;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h2 id="工厂模式"><a class="markdownIt-Anchor" href="#工厂模式"></a> 工厂模式</h2><h3 id="简单工厂模式-只需要一个工厂类"><a class="markdownIt-Anchor" href="#简单工厂模式-只需要一个工厂类"></a> 简单工厂模式 - 只需要一个工厂类</h3><blockquote><p>工厂: 使用一个单独的类来做创建实例的过程, 这就是工厂。</p><p>简单工厂：把对象的创建放到一个工厂类中，通过参数来创建不同的对象。 特点：</p><ul><li>缺点：每添一个对象，就需要对简单工厂进行修改（尽管不是删代码，仅仅是添一个switch case，但仍<br>然违背了“不改代码”的原则, 尽量做到添加代码而不是修改原有代码）</li><li>优点：去除了与具体产品的依赖。<br>使用流程</li></ul><ol><li>创建一类, 用于生产对象, 这个类就是工厂类</li><li>在这个类中添加一工厂函数</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> :</span> pulbic C</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> :</span> pulbic C</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Factory()&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">Factory(<span class="keyword">int</span> flag)&#123;</span><br><span class="line">m_flag = flag</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">C * CreateObject()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span>(m_flag)&#123;</span><br><span class="line"><span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> A;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> B;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_flag;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="工厂模式-需要有n个工厂类"><a class="markdownIt-Anchor" href="#工厂模式-需要有n个工厂类"></a> 工厂模式 - 需要有N个工厂类</h3><blockquote><p>工厂方法：每种产品由一种工厂来创建, 不同工厂创建不同的对象<br>特点：基本完美，完全遵循 “不改代码”的原则</p><ol><li>创建一个工厂类 - 基类</li><li>在基类的工厂类中添加工厂函数, 这是一个虚函数</li><li>根据要创建的子对象添加子工厂类, 每个子对象的创建都对应一个子工厂类</li><li>在子工厂类中实现父类的工厂函数, 完成创建对象的操作</li></ol></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建的子对象</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestCodec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RespondCodec</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Factory</span>&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Factory();</span><br><span class="line">~Factory();</span><br><span class="line"><span class="comment">// 工厂函数</span></span><br><span class="line"><span class="comment">// 创建RequestCodec对象</span></span><br><span class="line"><span class="comment">// 创建RespondCodec对象</span></span><br><span class="line"><span class="comment">// flag == 0 创建RequestCodec对象</span></span><br><span class="line"><span class="comment">// flag == 1 创建RespondCodec对象</span></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Codec* <span class="title">createFactory</span><span class="params">(<span class="keyword">int</span> flag)</span> </span>= <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子工厂类1</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RequestFactory</span> :</span> <span class="keyword">public</span> Factory&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">RequestFactory()</span><br><span class="line">&#123;</span><br><span class="line">flag = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">RequestFactory(RequestMsg* msg)</span><br><span class="line">&#123;</span><br><span class="line">m_request = msg;</span><br><span class="line">flag = <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">~RequestFactory();</span><br><span class="line"><span class="comment">// 只创建RequestCodec对象</span></span><br><span class="line"><span class="function">Codec* <span class="title">createFactory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(flag)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RequestCodec(&amp;msg);</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RequestCodec();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line">RequestMsg *m_request;</span><br><span class="line"><span class="keyword">bool</span> flag;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建子工厂类2</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RespondFactory</span> :</span> <span class="keyword">public</span> Factory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">RequestFactory();</span><br><span class="line">~RequestFactory();</span><br><span class="line"><span class="comment">// 只创建RespondCodec对象</span></span><br><span class="line"><span class="function">Codec* <span class="title">createFactory</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RespondCodec();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="respondfactoryh"><a class="markdownIt-Anchor" href="#respondfactoryh"></a> RespondFactory.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CodecFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RespondCodec.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">RespondFactory</span> :</span></span><br><span class="line"><span class="keyword">public</span> CodecFactory</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">RespondFactory();</span><br><span class="line">RespondFactory(RespondMsg *msg);</span><br><span class="line">~RespondFactory();</span><br><span class="line"></span><br><span class="line"><span class="function">Codec* <span class="title">createCodec</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">bool</span> m_flag;</span><br><span class="line">RespondMsg * m_respond;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><br><br><br><h3 id="respondfactorycpp"><a class="markdownIt-Anchor" href="#respondfactorycpp"></a> RespondFactory.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"></span><br><span class="line">RequestFactory::RequestFactory()</span><br><span class="line">&#123;</span><br><span class="line">m_flag = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestFactory::RequestFactory(RequestMsg * msg)</span><br><span class="line">&#123;</span><br><span class="line">m_request = msg;</span><br><span class="line">m_flag = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RequestFactory::~RequestFactory()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Codec * RequestFactory::createCodec()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_flag == <span class="literal">true</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于编码的类对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RequestCodec(m_request);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//用于解码的类对象</span></span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RequestCodec();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="codecfactoryh"><a class="markdownIt-Anchor" href="#codecfactoryh"></a> CodecFactory.h</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Codec.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">CodecFactory</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">CodecFactory();</span><br><span class="line"><span class="keyword">virtual</span> ~CodecFactory();</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">virtual</span> Codec* <span class="title">createCodec</span><span class="params">()</span></span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="codecfactorycpp"><a class="markdownIt-Anchor" href="#codecfactorycpp"></a> CodecFactory.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CodecFactory.h"</span></span></span><br><span class="line"></span><br><span class="line">CodecFactory::CodecFactory()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CodecFactory::~CodecFactory()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Codec * CodecFactory::createCodec()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestCodec.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"CodecFactory.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"RequestFactory.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1</span></span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line">RequestMsg req;</span><br><span class="line">req.cmdType = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(req.clientId, <span class="string">"hello"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.authCode, <span class="string">"1111"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.serverId, <span class="string">"22222"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.r1, <span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">char</span>* outData;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line"></span><br><span class="line"><span class="comment">//使用工厂类构造编解码对象</span></span><br><span class="line"><span class="comment">//1-new子工厂类对象</span></span><br><span class="line">CodecFactory *factory = <span class="keyword">new</span> RequestFactory(&amp;req);</span><br><span class="line">Codec *codec = factory-&gt;createCodec();</span><br><span class="line">codec-&gt;msgEncode(&amp;outData, len);</span><br><span class="line"><span class="keyword">delete</span> factory;</span><br><span class="line"><span class="keyword">delete</span> codec;</span><br><span class="line"></span><br><span class="line">RequestMsg* tmp;</span><br><span class="line">factory = <span class="keyword">new</span> RequestFactory();</span><br><span class="line">codec = factory-&gt;createCodec();</span><br><span class="line">tmp = (RequestMsg *)codec-&gt;msgDecode(outData, len);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"cmdtype: "</span> &lt;&lt; tmp-&gt;cmdType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"serverID: "</span> &lt;&lt; tmp-&gt;serverId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"clientID: "</span> &lt;&lt; tmp-&gt;clientId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1: "</span> &lt;&lt; tmp-&gt;r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="comment">//测试RequestCodec类</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 编码</span></span><br><span class="line">RequestMsg req;</span><br><span class="line">req.cmdType = <span class="number">100</span>;</span><br><span class="line"><span class="built_in">strcpy</span>(req.clientId, <span class="string">"hello"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.authCode, <span class="string">"1111"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.serverId, <span class="string">"22222"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(req.r1, <span class="string">"abcdefg"</span>);</span><br><span class="line"></span><br><span class="line">Codec* codec = <span class="keyword">new</span> RequestCodec(&amp;req);</span><br><span class="line"><span class="comment">// 调用编码函数</span></span><br><span class="line"><span class="keyword">char</span>* outData;</span><br><span class="line"><span class="keyword">int</span> len;</span><br><span class="line">codec-&gt;msgEncode(&amp;outData, len);</span><br><span class="line"></span><br><span class="line"><span class="comment">// ========================</span></span><br><span class="line"><span class="comment">// 解码</span></span><br><span class="line">codec = <span class="keyword">new</span> RequestCodec();</span><br><span class="line">RequestMsg* tmp = (RequestMsg*)codec-&gt;msgDecode(outData, len);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"cmdtype: "</span> &lt;&lt; tmp-&gt;cmdType &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"serverID: "</span> &lt;&lt; tmp-&gt;serverId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"clientID: "</span> &lt;&lt; tmp-&gt;clientId &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"r1: "</span> &lt;&lt; tmp-&gt;r1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><p><br><br></p><br><br><h2 id="单向散列函数哈希函数"><a class="markdownIt-Anchor" href="#单向散列函数哈希函数"></a> 单向散列函数（哈希函数）</h2><h5 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念</h5><blockquote><p>单向散列函数（one-wayftnction）有一个输入和一个输出，其中输入称为消息（message），输出称</p><p>为<strong>散列值</strong>（hashvalue）。单向散列函数可以根据消息的内容计算出散列值，而散列值就可以被用来检</p><p>查消息的完整性。</p><ul><li><p>单向散列函数也称为<strong>消息摘要函数</strong>（message digest function）、<strong>哈希函数</strong>或者<strong>杂凑函数</strong>。</p></li><li><p>单向散列函数输出的散列值也称为<strong>消息摘要</strong>（message digest）或者<strong>指纹</strong>（fifingerprint）。</p></li><li><p><strong>完整性</strong>也称为一致性。</p></li></ul></blockquote><ul><li>压缩性<ul><li>任意长度的数据，算出的值长度都是固定的。</li></ul></li></ul><p><img src="/images/javawz/image-20220523021602267.png" alt="image-20220523021602267"></p><ul><li><p>容易计算</p></li><li><p>计算散列值所花费的时间必须要短。尽管消息越长，计算散列值的时间也会越长，但如果不能在现实的时间内完成计算就没有意义了。</p></li><li><p>抗修改性</p><ul><li>对原数据进行任何改动，哪怕只修改1个字节，所得到的值都有很大区别</li></ul></li></ul><p><img src="/images/javawz/image-20220523021836248.png" alt="image-20220523021836248"></p><ul><li>强抗碰撞性<ul><li>已知原数据和其哈希值，想找到一个具有相同哈希值的数据（即伪造数据）是非常困难的。</li></ul></li></ul><p><img src="/images/javawz/image-20220523021934069.png" alt="image-20220523021934069"></p><ul><li>单向性（不可逆）<br><img src="/images/javawz/image-20220523022005944.png" alt="image-20220523022005944"></li></ul><h3 id="哈希函数的应用"><a class="markdownIt-Anchor" href="#哈希函数的应用"></a> 哈希函数的应用</h3><ol><li>检测软件是否被篡改</li></ol><blockquote><p>我们可以使用单向散列函数来确认自己下载的软件是否被篡改。</p><p>很多软件，尤其是安全相关的软件都会把通过单向散列函数计算出的散列值公布在自己的官方网站上。<br>用户在下载到软件之后，可以自行计算散列值，然后与官方网站上公布的散列值进行对比。通过散列<br>值，用户可以确认自己所下载到的文件与软件作者所提供的文件是否一致。</p><p>这样的方法，在可以通过多种途径得到软件的情况下非常有用。为了减轻服务器的压力，很多软件作者<br>都会借助多个网站（镜像站点）来发布软件，在这种情况下，单向散列函数就会在检测软件是否被篡改<br>方面发挥重要作用。</p></blockquote><p><img src="/images/javawz/image-20220523022106162.png" alt="image-20220523022106162"></p><ol start="2"><li>消息认证码</li></ol><blockquote><p>使用单向散列函数可以构造消息认证码。<br>消息认证码是将“发送者和接收者之间的共享密钥”和“消息，进行混合后计算出的散列值。使用消息认证<br>码可以检测并防止通信过程中的错误、篡改以及伪装。</p></blockquote><p>对于发送端tom:</p><ul><li>将要发送的数据进行哈希运算, 参与运算的数据是: 原始数据+秘钥, 可以得到一个散列值</li><li>将散列值与原始数据进行拼接, 一起发送给对方;</li></ul><p>对于接收端:</p><ul><li>接收对方发来的数据, 并将原始数据和散列值拆分开, 得到散列值和原始数据</li><li>对原始数据进行哈希运算: 参与运算的数据也是:原始数据+秘钥, 可以得到一个散列值</li><li>将计算得到的散列值与接受到的散列值进行比较, 相同则认为没有被篡改, 否则认为被篡改了.</li></ul><h5 id="注意-发送方和接受方使用的秘钥是同一个秘钥对称秘钥秘钥分发困难-这个秘钥只有发送方和接受方知道若这个秘钥被第三方知道了-就没有办法保证数据的是安全的了"><a class="markdownIt-Anchor" href="#注意-发送方和接受方使用的秘钥是同一个秘钥对称秘钥秘钥分发困难-这个秘钥只有发送方和接受方知道若这个秘钥被第三方知道了-就没有办法保证数据的是安全的了"></a> 注意: 发送方和接受方使用的秘钥是同一个秘钥(对称秘钥,秘钥分发困难), 这个秘钥只有发送方和接受方知道,若这个秘钥被第三方知道了, 就没有办法保证数据的是安全的了</h5><p><img src="/images/javawz/image-20220523022356814.png" alt="image-20220523022356814"></p><h3 id="数字签名"><a class="markdownIt-Anchor" href="#数字签名"></a> 数字签名</h3><blockquote><p>在进行数字签名时也会使用单向散列函数。<br>数字签名是现实社会中的签名（sign）和盖章这样的行为在数字世界中的实现。数字签名的处理过程非<br>常耗时，因此一般不会对整个消息内容直接施加数字签名，而是先通过单向散列函数计算出消息的散列<br>值，然后再对这个散列值施加数字签名。</p></blockquote><ul><li><p>使用的是非对称加密, 有公钥和私钥</p><ul><li><p>A给B发送数据:</p></li><li><p>A先将公钥发送给B</p><ul><li>将发送的数据+私钥进行哈希运算, 得到一个散列值</li><li>将原数据+散列值拼接一起发送给对方B</li><li>B收到数据之后, 将数据进行拆分成原数据和散列值</li><li>B也对原数据+公钥进行哈希运算, 得到散列值</li><li>B将自己计算出的散列值与A发送来的散列值进行比较:<ul><li>相同, 认为数据没有被篡改</li><li>不相同, 认为数据篡改过.</li></ul></li></ul></li></ul></li></ul><p>数字签名: A将明文进行哈希运算得到一个散列值, 并且用私钥对哈希值进行加密, 然后将明文和加了密的哈希<br>值一起发送给B;</p><p>B收到之后, 使用公钥对哈希值进行解密, 得到原始的哈希值, 并且对明文进行哈希运算也得到一个哈希值, 最后<br>对自己生成的哈希值和A发送过来的哈希值进行比较, 如果一样, 则认为没有被篡改.</p><p>使用数字签名的目的是为了不可抵赖性.(表明拿私钥的一方发送的数据, 是不可抵赖的)</p><h5 id="一次性口令或登录验证"><a class="markdownIt-Anchor" href="#一次性口令或登录验证"></a> 一次性口令或登录验证</h5><blockquote><p>使用单向散列函数可以构造一次性口令（one-time password）。<br>一次性口令经常被用于服务器对客户端的合法性认证。在这种方式中，通过使用单向散列函数可以保证<br>口令只在通信链路上传送一次（one-time），因此即使窃听者窃取了口令，也无法使用。<br>当用户登录的时候, 需要输入密码, 这个密码会经过加密运算, 经过运算之后的值再与服务器中保存的密<br>码进行比较, 若相同则输入密码正确, 允许登录.<br>若用户忘记密码, 则只能重置密码, 服务端并不知道用户原来的明文, 只能是重新设置.</p></blockquote><h3 id="常用的哈希函数"><a class="markdownIt-Anchor" href="#常用的哈希函数"></a> 常用的哈希函数</h3><h4 id="1-md4-md5"><a class="markdownIt-Anchor" href="#1-md4-md5"></a> 1. Md4、Md5</h4><blockquote><p>MD4是由Rivest于1990年设计的单向散列函数，能够产生<mark>128比特</mark>的散列值（RFC1186，修订版<br>RFC1320）。不过，随着Dobbertin提出寻找MD4散列碰撞的方法，因此现在它已经不安全了。</p><p>MD5是由Rwest于1991年设计的单项散列函数，能够产生<mark>128比特</mark>的散列值（RFC1321）。<br>MD5的强抗碰撞性已经被攻破，也就是说，现在已经能够产生具备相同散列值的两条不同的消息，因此<br>它也已经不安全了。</p><p>MD4和MD5中的MD是消息摘要（Message Digest）的缩写。</p></blockquote><h4 id="2-sha-1-sha-256-sha-384-sha-512"><a class="markdownIt-Anchor" href="#2-sha-1-sha-256-sha-384-sha-512"></a> 2. SHA-1、SHA-256、SHA-384、SHA-512</h4><blockquote><p>SHA-1是由NIST（National Institute Of Standardsand Technology，美国国家标准技术研究所）设计<br>的一种能够产生<mark>160比特</mark>的散列值的单向散列函数。1993年被作为美国联邦信息处理标准规格<br>（FIPS PUB 180）发布的是SHA,1995年发布的修订版FIPS PUB 180-1称为SHA-1。</p><p>SHA-1的消息长度存在上限，但这个值接近于2<sup>64</sup>比特，是个非常巨大的数值，因此在实际应用中没<br>有问题。</p><p>SHA-256、SHA-384和SHA-512都是由NIST设计的单向散列函数，它们的散列值长度分别为<mark>256比特<br><mark>、<mark>384</mark>比特和</mark>512比特</mark>。这些单向散列函数合起来统称SHA-2，它们的消息长度也存在上限<br>（SHA-256的上限接近于 2<sup>64</sup> 比特，SHA-384 和 SHA-512的上限接近于 2<sup>128</sup> 比特）。这些单向<br>散列函数是于2002年和 SHA-1 一起作为 FIPS PUB 180-2发布的 SHA-1 的强抗碰撞性已于2005年被攻<br>破, 也就是说，现在已经能够产生具备相同散列值的两条不同的消息。不过，SHA-2还尚未被攻破。</p></blockquote><p><img src="/images/javawz/image-20220523022911024.png" alt="image-20220523022911024"></p><p>最终需要对得到的散列值做转换, 以16进制格式的字符串表示</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 第一种方式</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 初始化一个MD5_CTX类型的变量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Init</span><span class="params">(MD5_CTX *c)</span></span>;</span><br><span class="line">- c: 传出</span><br><span class="line"></span><br><span class="line"><span class="comment">// 给哈希函数添加要运算的数据</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Update</span><span class="params">(MD5_CTX *c, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line">- C: 传入</span><br><span class="line">- data: 传入, 要进行哈希运算的数据</span><br><span class="line">- len: data参数的长度</span><br><span class="line">文件<span class="number">1</span>G</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(read(fd, buf, len))</span><br><span class="line">&#123;</span><br><span class="line">MD5_Update(c, buf, buflen);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 计算结果</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">MD5_Final</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *md, MD5_CTX *c)</span></span>;</span><br><span class="line">- md传出参数, 需要将计算出的散列值保存到md中</span><br><span class="line">- c: 出入</span><br><span class="line"><span class="comment">//=========================================</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 第二种方式</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">MD5</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *d, <span class="keyword">size_t</span> n, <span class="keyword">unsigned</span> <span class="keyword">char</span> *md)</span></span>;</span><br><span class="line">- d: 要进行哈希运算的字符串</span><br><span class="line">- n: 第一个参数的长度</span><br><span class="line">- md: 计算出的散列值</span><br><span class="line">返回值:</span><br><span class="line">得到的散列值</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//===========================================================================</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SHA1_Init</span><span class="params">(SHA_CTX *c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SHA1_Update</span><span class="params">(SHA_CTX *c, <span class="keyword">const</span> <span class="keyword">void</span> *data, <span class="keyword">size_t</span> len)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">SHA1_Final</span><span class="params">(<span class="keyword">unsigned</span> <span class="keyword">char</span> *md, SHA_CTX *c)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="keyword">char</span> *<span class="title">SHA1</span><span class="params">(<span class="keyword">const</span> <span class="keyword">unsigned</span> <span class="keyword">char</span> *d, <span class="keyword">size_t</span> n, <span class="keyword">unsigned</span> <span class="keyword">char</span> *md)</span></span>;</span><br><span class="line">上述几个函数的用法同md5的几个函数.</span><br></pre></td></tr></table></figure><p>相关的函数说明可以在openssl安装目录中去查看:</p><ul><li>C:\OpenSSL-Win32\include\openssl, 如md5.h和sha.h</li><li>能够用到的库名: libssl.lib libcrypto.lib</li><li>使用到的库所在的路径: C:\OpenSSL-Win32\lib</li><li>使用到的头文件所在的路径: C:\OpenSSL-Win32\include</li></ul><p>注意: 在使用vs进行项目开发的时候, 需要指定头文件所在路径和库文件所在路径</p><br><br><br><br><br><h3 id="itcastlogh"><a class="markdownIt-Anchor" href="#itcastlogh"></a> ItcastLog.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _ITCAST_LOG_H_</span><br><span class="line">#define _ITCAST_LOG_H_</span><br><span class="line">#include &lt;cstdarg&gt;</span><br><span class="line">/************************************************************************/</span><br><span class="line">/* </span><br><span class="line">const char *file：文件名称</span><br><span class="line">int line：文件行号</span><br><span class="line">int level：错误级别</span><br><span class="line">0 -- 没有日志</span><br><span class="line">1 -- debug级别</span><br><span class="line">2 -- info级别</span><br><span class="line">3 -- warning级别</span><br><span class="line">4 -- err级别</span><br><span class="line">int status：错误码</span><br><span class="line">const char *fmt：可变参数</span><br><span class="line">*/</span><br><span class="line">/************************************************************************/</span><br><span class="line">// 日志类</span><br><span class="line">class ItcastLog</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">    enum LogLevel&#123;NOLOG, DEBUG, INFO, WARNING, ERROR&#125;;</span><br><span class="line">    void Log(const char *file, int line, int level, int status, const char *fmt, ...);</span><br><span class="line">    ItcastLog();</span><br><span class="line">    ~ItcastLog();</span><br><span class="line"></span><br><span class="line">private:</span><br><span class="line">    int ITCAST_Error_GetCurTime(char* strTime);</span><br><span class="line">    int ITCAST_Error_OpenFile(int* pf);</span><br><span class="line">    void ITCAST_Error_Core(const char *file, int line, int level, int status, const char *fmt, va_list args);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="itcastlogcpp"><a class="markdownIt-Anchor" href="#itcastlogcpp"></a> ItcastLog.cpp</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/types.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;sys/stat.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fcntl.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdarg.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;time.h&gt;</span></span></span><br><span class="line"><span class="comment">//#include &lt;unistd.h&gt;</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"ItcastLog.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> ITCAST_DEBUG_FILE  = <span class="string">"itderlog.log"</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> ITCAST_MAX_STRING_LEN =  <span class="number">10240</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Level的名称</span></span><br><span class="line"><span class="keyword">const</span> <span class="built_in">string</span> ICLevelName[] = &#123; <span class="string">"NOLOG"</span>, <span class="string">"DEBUG"</span>, <span class="string">"INFO"</span>, <span class="string">"WARNING"</span>, <span class="string">"ERROR"</span> &#125;;</span><br><span class="line">ItcastLog::ItcastLog()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ItcastLog::~ItcastLog()</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ItcastLog::ITCAST_Error_GetCurTime(<span class="keyword">char</span> *strTime)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">tm</span>*<span class="title">tmTime</span> = <span class="title">NULL</span>;</span></span><br><span class="line">    <span class="keyword">size_t</span>timeLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">time_t</span>tTime = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    tTime = time(<span class="literal">NULL</span>);</span><br><span class="line">    tmTime = localtime(&amp;tTime);</span><br><span class="line">    <span class="comment">//timeLen = strftime(strTime, 33, "%Y(Y)%m(M)%d(D)%H(H)%M(M)%S(S)", tmTime);</span></span><br><span class="line">    timeLen = strftime(strTime, <span class="number">33</span>, <span class="string">"%Y.%m.%d %H:%M:%S"</span>, tmTime);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> timeLen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> ItcastLog::ITCAST_Error_OpenFile(<span class="keyword">int</span> *pf)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span>fileName[<span class="number">1024</span>];</span><br><span class="line">    <span class="built_in">memset</span>(fileName, <span class="number">0</span>, <span class="keyword">sizeof</span>(fileName));</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">ifdef</span> WIN32</span></span><br><span class="line">    <span class="built_in">sprintf</span>(fileName, <span class="string">"d:\\%s"</span>, ITCAST_DEBUG_FILE.data());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span></span></span><br><span class="line">    <span class="built_in">sprintf</span>(fileName, <span class="string">"./log/%s"</span>, ITCAST_DEBUG_FILE.data());</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    *pf = open(fileName, O_WRONLY | O_CREAT | O_APPEND, <span class="number">0666</span>);</span><br><span class="line">    <span class="keyword">if</span> (*pf &lt; <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ItcastLog::ITCAST_Error_Core(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> line, <span class="keyword">int</span> level, <span class="keyword">int</span> status, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, va_list args)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">char</span> str[ITCAST_MAX_STRING_LEN];</span><br><span class="line">    <span class="keyword">int</span> strLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span> tmpStr[<span class="number">64</span>];</span><br><span class="line">    <span class="keyword">int</span> tmpStrLen = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span>  pf = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//初始化</span></span><br><span class="line">    <span class="built_in">memset</span>(str, <span class="number">0</span>, ITCAST_MAX_STRING_LEN);</span><br><span class="line">    <span class="built_in">memset</span>(tmpStr, <span class="number">0</span>, <span class="number">64</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG时间</span></span><br><span class="line">    tmpStrLen = ITCAST_Error_GetCurTime(tmpStr);</span><br><span class="line">    tmpStrLen = <span class="built_in">sprintf</span>(str, <span class="string">"[%s] "</span>, tmpStr);</span><br><span class="line">    strLen = tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG等级</span></span><br><span class="line">    tmpStrLen = <span class="built_in">sprintf</span>(str + strLen, <span class="string">"[%s] "</span>, ICLevelName[level].data());</span><br><span class="line">    strLen += tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG状态</span></span><br><span class="line">    <span class="keyword">if</span> (status != <span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        tmpStrLen = <span class="built_in">sprintf</span>(str + strLen, <span class="string">"[ERRNO is %d] "</span>, status);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">    &#123;</span><br><span class="line">        tmpStrLen = <span class="built_in">sprintf</span>(str + strLen, <span class="string">"[SUCCESS] "</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    strLen += tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG信息</span></span><br><span class="line">    tmpStrLen = <span class="built_in">vsprintf</span>(str + strLen, fmt, args);</span><br><span class="line">    strLen += tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG发生文件</span></span><br><span class="line">    tmpStrLen = <span class="built_in">sprintf</span>(str + strLen, <span class="string">" [%s]"</span>, file);</span><br><span class="line">    strLen += tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//加入LOG发生行数</span></span><br><span class="line">    tmpStrLen = <span class="built_in">sprintf</span>(str + strLen, <span class="string">" [%d]\n"</span>, line);</span><br><span class="line">    strLen += tmpStrLen;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//打开LOG文件</span></span><br><span class="line">    <span class="keyword">if</span> (ITCAST_Error_OpenFile(&amp;pf))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line">    <span class="comment">//写入LOG文件</span></span><br><span class="line">    write(pf, str, strLen);</span><br><span class="line">    <span class="comment">//IC_Log_Error_WriteFile(str);</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭文件</span></span><br><span class="line">    close(pf);</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> ItcastLog::Log(<span class="keyword">const</span> <span class="keyword">char</span> *file, <span class="keyword">int</span> line, <span class="keyword">int</span> level, <span class="keyword">int</span> status, <span class="keyword">const</span> <span class="keyword">char</span> *fmt, ...)</span><br><span class="line">&#123;</span><br><span class="line">    va_list args;</span><br><span class="line">    <span class="comment">//判断是否需要写LOG</span></span><br><span class="line">    <span class="keyword">if</span> (level == NOLOG)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用核心的写LOG函数</span></span><br><span class="line">    va_start(args, fmt);</span><br><span class="line">    ITCAST_Error_Core(file, line, level, status, fmt, args);</span><br><span class="line">    va_end(args);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><br><br><p><br><br></p><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;下载地址:&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://gitee.com/xiaochenyan/mypro/tree/master/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>UML类图_常见的报文编码方式_ASN1报文编解码_vs连接linux服务器</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/21/UML%E7%B1%BB%E5%9B%BE-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E6%96%87%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-ASN1%E6%8A%A5%E6%96%87%E7%BC%96%E8%A7%A3%E7%A0%81-vs%E8%BF%9E%E6%8E%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/21/UML类图-常见的报文编码方式-ASN1报文编解码-vs连接linux服务器/</id>
    <published>2022-05-21T03:32:04.000Z</published>
    <updated>2022-05-21T21:24:30.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两台机器通信"><a class="markdownIt-Anchor" href="#两台机器通信"></a> 两台机器通信</h2><h3 id="1-两台机器的操作系统平台不同"><a class="markdownIt-Anchor" href="#1-两台机器的操作系统平台不同"></a> 1 两台机器的操作系统平台不同:</h3><pre><code>一台是32为windows, 一台是linux 64系统</code></pre><p>不同的平台对数据的处理都可能不一样,比如在windows中的int类型是4个字节,在linux中可能是2个字节。</p><h3 id="2-网络传输的时候用的是大端模式"><a class="markdownIt-Anchor" href="#2-网络传输的时候用的是大端模式"></a> 2 网络传输的时候用的是大端模式</h3><pre><code>只要是传输的数据的数据类型超过了一个字节都需要进行网络字节序的转换关于字节序序的函数:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htons htonl ntohs ntohl </span><br><span class="line">h: host to: 到n: networkl: longs: short</span><br></pre></td></tr></table></figure><p>​  假如在从A传递数据给B, 需要传递一个结构体</p><h3 id="3-字节序对齐不一样"><a class="markdownIt-Anchor" href="#3-字节序对齐不一样"></a> 3 字节序对齐不一样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct test</span><br><span class="line">&#123;</span><br><span class="line">int a;</span><br><span class="line">char c;</span><br><span class="line">double d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-两台服务的开发语言不同"><a class="markdownIt-Anchor" href="#4-两台服务的开发语言不同"></a> 4 两台服务的开发语言不同</h3><pre><code>对于C语言, 一个字符占用一个字节对于java, 一个字符占用2个字节</code></pre><p>报文: 其实就是数据.<br>上述几种情况, 涉及到网络数据传输, 都需要对数据进行编解码操作.</p><h1 id="uml类图"><a class="markdownIt-Anchor" href="#uml类图"></a> UML类图:</h1><h2 id="1-面向对象设计"><a class="markdownIt-Anchor" href="#1-面向对象设计"></a> 1. 面向对象设计</h2><p>面向对象设计主要就是使用UML的类图，类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人</p><p>们简化对系统的理解，它是<strong>系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据</strong></p><h2 id="类的uml画法"><a class="markdownIt-Anchor" href="#类的uml画法"></a> 类的UML画法</h2><p><strong>类（Class）封装了数据和行为，是面向对象的重要组成部分，它是具有相同属性、操作、关系的对象集合的</strong></p><p><strong>总称</strong>。在系统中，每个类都具有一定的职责，职责指的是类要完成什么样子的功能，要承担什么样子的义</p><p>务。一个类可以有多种职责，但是设计得好的类一般只有一种职责。</p><p>假如我现在定义了这么一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Persion </span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">string getName()</span><br><span class="line">&#123; </span><br><span class="line">return name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void setName(string name) &#123; </span><br><span class="line">this-&gt;name = name;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">protected: </span><br><span class="line">void playBasketball() &#123; </span><br><span class="line">pass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">void pass() &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string name = &quot;Jack&quot;; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么此类对应的UML为：</p><p><img src="/images/javawz/image-20220522003152929.png" alt="image-20220522003152929"></p><p>看到该图分为三层：最顶层的为类名，中间层的为属性，最底层的为方法。<br>属性的表示方式为：【可见性】【属性名称】：【类型】={缺省值，可选}<br>方法的表示方式为：【可见性】【方法名称】（【参数列表】）：【类型】<br>可见性都是一样的，&quot;-“表示private、”+“表示public、”#&quot;表示protected。</p><h2 id="3-继承关系"><a class="markdownIt-Anchor" href="#3-继承关系"></a> 3. 继承关系</h2><p>继承也叫作泛化（Generalization），用于描述父子类之间的关系，父类又称为基类或者超类，子类又称作<br>派生类。在UML中，泛化关系用带空心三角形的实线来表示。</p><h3 id="31-普通继承关系"><a class="markdownIt-Anchor" href="#31-普通继承关系"></a> 3.1 普通继承关系</h3><p>假如现在我又定义了一个Student和一个Teacher：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Student : public Persion </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">void study() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string studentNo; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Teacher : public Persion </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">void teach() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string teacherNo; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，用UML表示这种关系应当是：</p><p><img src="/images/javawz/image-20220522003744558.png" alt="image-20220522003744558"></p><h3 id="32-抽象继承关系"><a class="markdownIt-Anchor" href="#32-抽象继承关系"></a> 3.2 抽象继承关系</h3><blockquote><p>上面的继承是普通的继承，在C++中，除了普通的继承之外，众所周知的还有一种抽象的继承关系，因此就<br>再讲讲抽象继承关系，作为上面的继承的补充。</p><p>比方说我想实现一个链表（Link），插入（insert）与删除（remove）动作我想让子类去实现，链表本身只<br>实现统计链表中元素个数的动作（count），然后有一个子类单向链表（OneWayLink）去实现父类没有实现<br>的动作，C++代码为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 抽象类(含有纯虚函数的类)</span><br><span class="line">class Link &#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">virtual void insert() = 0; </span><br><span class="line"></span><br><span class="line">virtual void remove() = 0;</span><br><span class="line"></span><br><span class="line">int count() &#123;</span><br><span class="line">    return 0;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 子类 </span><br><span class="line">class OneWayLink : public Link </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line"></span><br><span class="line">void insert() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void remove() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/images/javawz/image-20220522004231464.png" alt="image-20220522004231464"></p><blockquote><p>在UML中，抽象类无论类名还是抽象方法名，都以斜体的方式表示，因为这也是一种继承关系，所以子类与父类通过带空心三角形的实线来联系。</p></blockquote><h2 id="4-关联关系"><a class="markdownIt-Anchor" href="#4-关联关系"></a> 4. 关联关系</h2><blockquote><p>关联（Assocition）关系是类与类之间最常见的一种关系，它是一种结构化的关系，表示一类对象与另一类<br>对象之间有联系，如汽车和轮胎、师傅和徒弟、班级和学生等。在UML类图中，用实线连接有关联关系的对<br>象所对应的类，在C++中通常将一个类的对象作为另一个类的成员变量。关联关系分单向关联、双向关联、<br>自关联，逐一看一下。</p></blockquote><h3 id="41-单向关联关系"><a class="markdownIt-Anchor" href="#41-单向关联关系"></a> 4.1 单向关联关系</h3><p>单向关联指的是关联只有一个方向，比如顾客（Customer）拥有地址（Address），其代码实现为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 地址类 </span><br><span class="line">class Address &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 顾客类 </span><br><span class="line">class Customer </span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">Address address; // 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UML的画法为：</p><p><img src="/images/javawz/image-20220522004610246.png" alt="image-20220522004610246"></p><h3 id="42-双向关联关系"><a class="markdownIt-Anchor" href="#42-双向关联关系"></a> 4.2 双向关联关系</h3><blockquote><p>默认情况下的关联都是双向的，比如顾客（Customer）购买商品（Product），反之，卖出去的商品总是与<br>某个顾客与之相关联，这就是双向关联。c++ 类的写法为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 商品类 </span><br><span class="line">class Product &#123;</span><br><span class="line">private: </span><br><span class="line">Customer customer; // 该商品属于哪一位顾客, 作为成员变量 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 顾客类 </span><br><span class="line">class Customer &#123;</span><br><span class="line">private:</span><br><span class="line">Product product[64]; // 给顾客购买了哪些商品, 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/images/javawz/image-20220522004827876.png" alt="image-20220522004827876"></p><h3 id="43-自关联关系"><a class="markdownIt-Anchor" href="#43-自关联关系"></a> 4.3 自关联关系</h3><blockquote><p>自关联，指的就是对象中的属性为对象本身，这在链表中非常常见，单向链表Node中会维护一个它的前驱<br>Node，双向链表Node中会维护一个它的前驱Node和一个它的后继Node。就以单向链表为例，它的C++写<br>法为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 链表节点 </span><br><span class="line">class Node </span><br><span class="line">&#123;</span><br><span class="line">private: </span><br><span class="line">Node* nextNode; // 指向后继节点的指针, 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/images/javawz/image-20220522004959775.png" alt="image-20220522004959775"></p><h2 id="5-聚合关系"><a class="markdownIt-Anchor" href="#5-聚合关系"></a> 5. 聚合关系</h2><blockquote><p>聚合（Aggregation）关系表示整体与部分的关系。在聚合关系中，成员对象是整体的一部分，但是成员对象<br>可以脱离整体对象独立存在。在UML中，</p><p>聚合关系用带空心菱形的直线表示，如汽车（Car）与引擎（Engine）、轮胎（Wheel）、车灯（Light），C++ 表示为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Engine &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Wheel &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Light &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Car &#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line"></span><br><span class="line">Car(Engine engine, Light light, Wheel wheel) </span><br><span class="line">&#123; </span><br><span class="line">this-&gt;engine = engine; </span><br><span class="line">this-&gt;light = light;</span><br><span class="line">    this-&gt;wheel = wheel; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">void drive() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line"></span><br><span class="line">Engine engine; </span><br><span class="line"></span><br><span class="line">Light light;</span><br><span class="line"></span><br><span class="line">Wheel wheel; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图为：</p><p><img src="/images/javawz/image-20220522005440449.png" alt="image-20220522005440449"></p><blockquote><p>代码实现聚合关系，<strong>成员对象通常以构造方法、Setter方法的方式注入到整体对象之中</strong>。</p></blockquote><h2 id="6-组合关系"><a class="markdownIt-Anchor" href="#6-组合关系"></a> 6. 组合关系</h2><blockquote><p>组合（Composition）关系也表示的是一种整体和部分的关系，但是在组合关系中整体对象可以控制成员对<br>象的生命周期，一旦整体对象不存在，成员对象也不存在，整体对象和成员对象之间具有同生共死的关系。 在UML中组合关系用带实心菱形的直线表示。<br>比如人的头（Head）和嘴巴（Mouth）、鼻子（Nose），嘴巴和鼻子是头的组成部分之一，一旦头没了，<br>嘴巴也没了，因此头和嘴巴、鼻子是组合关系，C++ 表示为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Mouth &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Nose &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Head &#123;</span><br><span class="line">public: </span><br><span class="line">Head() </span><br><span class="line">&#123; </span><br><span class="line">mouth = new Mouth(); </span><br><span class="line">nose = new Nose(); </span><br><span class="line">&#125;</span><br><span class="line">void shake() &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">Mouth *mouth;</span><br><span class="line">Nose *nose;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的表示方法为：</p><p><img src="/images/javawz/image-20220522005903188.png" alt="image-20220522005903188"></p><blockquote><p>代码实现组合关系，通常在整体类的构造方法中直接实例化成员类，因为组合关系的整体和部分是共生关<br>系，如果通过外部注入，那么即使整体不存在，那么部分还是存在的，这就相当于变成了一种聚合关系了。</p></blockquote><h2 id="7-依赖关系"><a class="markdownIt-Anchor" href="#7-依赖关系"></a> 7. 依赖关系</h2><blockquote><p>依赖（Dependency）关系是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需<br>要表示一个事物使用另一个事物时使用依赖关系，大多数情况下依赖关系体现在某个类的方法使用另一个类<br>的对象作为参数。在UML中，依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。</p><p>比如，驾驶员（Driver）开车，Driver类的drive()方法将车（Car）的对象作为一个参数传递，以便在drive()<br>方法中能够调用car的move()方法，且驾驶员的drive()方法依赖车的move()方法，因此也可以说Driver依赖<br>Car，C++代码为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Car </span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">void move(); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Driver &#123;</span><br><span class="line">public: </span><br><span class="line">void drive(Car car) </span><br><span class="line">&#123; </span><br><span class="line">car.move(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/images/javawz/image-20220522010251666.png" alt="image-20220522010251666"></p><blockquote><p>依赖关系通常通过三种方式来实现：</p><ol><li>将一个类的对象作为另一个类中方法的参数</li><li>在一个类的方法中将另一个类的对象作为其对象的局部变量</li><li>在一个类的方法中调用另一个类的静态方法</li></ol></blockquote><h2 id="8-关联关系-聚合关系-组合关系之间的区别"><a class="markdownIt-Anchor" href="#8-关联关系-聚合关系-组合关系之间的区别"></a> 8. 关联关系、聚合关系、组合关系之间的区别</h2><blockquote><p>从上文可以看出，关联关系、聚合关系和组合关系三者之间比较相似，本文的最后就来总结一下这三者之间<br>的区别。</p><p>关联和聚合的区别主要在于语义上：关联的两个对象之间一般是平等的，聚合则一般是不平等的。</p><p>聚合和组合的区别则在语义和实现上都有差别：组合的两个对象之间生命周期有很大的关联，被组合的对象<br>在组合对象创建的同时或者创建之后创建，在组合对象销毁之前销毁，一般来说被组合对象不能脱离组合对<br>象独立存在，而且也只能属于一个组合对象；聚合则不一样，被聚合的对象可以属于多个聚合对象。</p><p>再举例子来说：</p><ul><li><p>你和你的朋友属于关联关系，因为你和你的朋友之间的关系是平等的，关联关系只是表示一下两个对象<br>之间的一种简单的联系而已，就像我有一个朋友</p></li><li><p>你和你借的书属于聚合关系，第一是因为书可以独立存在，第二是因为书不仅仅属于你，也可以属于别<br>人，只是暂时你拥有</p></li><li><p>你和你的心脏属于组合关系，因为你的心脏只是属于你的，不能脱离与你而存在</p></li></ul><p>不过，实际应用中，我个人感觉三种关系其实没有区分得这么清楚，有些架构师甚至会说&quot;组合和聚合没什么<br>区别&quot;，所以，有时候不需要把细节扣得这么细，合理利用对象之间的关系给出设计方案即可。</p></blockquote><h2 id="常用的几种序列化方式"><a class="markdownIt-Anchor" href="#常用的几种序列化方式"></a> 常用的几种序列化方式</h2><ol><li>XML类似于HTML，与HTML很相似，但是用它来序列化对象的时候，就显得很复杂</li><li>JSON使用起来很简单，他的产生来自于一种关联数组，其本质是采用“键值对”的方式描述对象</li><li>Protocol Buffer是一个高效的数据化数据存储格式，用于结构化数据串行化，很适合做数据储存或RPC数据交换格式</li><li>ASN.1抽象语法标记</li><li>boost 序列化的类</li><li>自定义的格式</li></ol><h3 id="asn1"><a class="markdownIt-Anchor" href="#asn1"></a> ASN.1</h3><p>头文件和源代码下载地址:<a href="https://gitee.com/xiaochenyan/mypro/tree/master/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">https://gitee.com/xiaochenyan/mypro/tree/master/多端安全协议传输平台/参考代码</a></p><p>描述了对一种数据进行表示、编码、传输和解码的数据格式。</p><ul><li>ASN.1它有两部分<ol><li>一部分描述信息内数据，数据类型及序列格式；<ul><li>相当于属性</li></ul></li><li>一部分描述如何将各个部分组成消息<ul><li>相当于方法</li></ul></li></ol></li></ul><p><img src="/images/javawz/c3d36423a938455a9551fc5b00ff0542.png" alt="在这里插入图片描述"></p><h3 id="编码格式tlv"><a class="markdownIt-Anchor" href="#编码格式tlv"></a> 编码格式（TLV）</h3><table><thead><tr><th>TAG（type）</th><th>LENGTH</th><th>VALUE</th></tr></thead><tbody><tr><td>数据类型</td><td>数据长度</td><td>数据的值</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Persion</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;Persion;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220522013950586.png" alt="image-20220522013950586"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>   *pData;<span class="comment">// 数据值</span></span><br><span class="line">ITCAST_UINT32     dataLen;<span class="comment">// 数据长度</span></span><br><span class="line"></span><br><span class="line">ITCAST_UINT32     unusedBits;<span class="comment">/* for bit string */</span></span><br><span class="line">ITCAST_UINT32     memoryType;</span><br><span class="line">ITCAST_UINT32     dataType;<span class="comment">// 数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">next</span>;</span>    <span class="comment">/* for sequence and set */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;ITCAST_ANYBUF;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WriteInteger(ITCAST_UINT32 integer, ITASN1_INTEGER **ppDerInteger);</span><br><span class="line">函数说明:对整形数据进行编码操作</span><br><span class="line">函数参数:</span><br><span class="line">integer: 输入参数, 表示待编码的整形数据</span><br><span class="line">ppDerInteger: 传出参数, 编码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadInteger(ITASN1_INTEGER *pDerInteger, ITCAST_UINT32 *pInteger);</span><br><span class="line">函数说明: 对整形数据解码</span><br><span class="line">参数说明: </span><br><span class="line">pDerInteger: 传入参数, 表示待解码的数据</span><br><span class="line">pInteger: 传出参数, 表示解码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line">  ITCAST_ANYBUF p;</span><br><span class="line">  ITCAST_UINT32 aa; </span><br><span class="line">例如: DER_ItAsn1_ReadInteger(&amp;p, &amp;aa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WritePrintableString(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString);</span><br><span class="line">函数说明:编码字符串数据</span><br><span class="line">函数参数:</span><br><span class="line">pPrintString: 输入参数, 表示要编码的数据</span><br><span class="line">ppDerPrintString: 输出参数, 表示编码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadPrintableString(ITASN1_PRINTABLESTRING *pDerPrintString, ITASN1_PRINTABLESTRING **ppPrintString);</span><br><span class="line">函数说明: 解码函数, 将ANYCAST_ANYBUF类型解码到第二个参数</span><br><span class="line">参数说明:</span><br><span class="line">pDerPrintString: 输入参数, 表示待解码的数据</span><br><span class="line">ppPrintString: 输出参数, 存放解码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ITCAST_String_To_AnyBuf(ITCAST_ANYBUF **pOriginBuf, unsigned char * strOrigin, int strOriginLen);</span><br><span class="line">函数说明: 将char *----&gt;ITCAST_ANYBUF类型</span><br><span class="line">函数参数:</span><br><span class="line">pOriginBuf: 传出参数, ITCAST_ANYBUF指针</span><br><span class="line">strOrigin: 传入参数, 待转换的字符串</span><br><span class="line">strOriginLen: 传入参数, strOrigin的字符串长度</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int EncodeChar(char *pData, int dataLen, ITCAST_ANYBUF **outBuf);</span><br><span class="line">函数说明: 将char *类型数据进行编码</span><br><span class="line">函数参数:</span><br><span class="line">pData: 输入参数, 指的是待编码的字符串</span><br><span class="line">dataLen: 输入参数, 指的是pData的长度</span><br><span class="line">outBuf: 输出参数, ITCAST_ANYBUF类型的数据, TLV格式</span><br><span class="line"></span><br><span class="line">int DecodeChar(ITCAST_ANYBUF *inBuf, char **Data, int *pDataLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WriteSequence(ITASN1_SEQUENCE *pSequence, ITCAST_ANYBUF **ppDerSequence);</span><br><span class="line">函数说明: 序列化链表, 将链表序列化成字节流数据</span><br><span class="line">函数参数:</span><br><span class="line">pSequence: 输入参数, 待序列化的数据</span><br><span class="line">ppDerSequence: 输出参数, 序列化之后的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadSequence(ITCAST_ANYBUF *pDerSequence, ITASN1_SEQUENCE **ppSequence);</span><br><span class="line">函数说明: 反序列化</span><br><span class="line">参数说明:</span><br><span class="line">pDerSequence:输入参数, 开始需要将char *---&gt;ITCAST_ANYBUF类型</span><br><span class="line">ppSequence: 输出参数, 获得链表头节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ITCAST_FreeQueue(ITCAST_ANYBUF *pAnyBuf);</span><br><span class="line">释放内存</span><br></pre></td></tr></table></figure><h3 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Teacher tea;</span><br><span class="line">memset(&amp;tea, 0x00, sizeof(Teacher));</span><br><span class="line">strcpy(tea.name, &quot;路飞&quot;);</span><br><span class="line">tea.age = 20;</span><br><span class="line">tea.p = (char*)malloc(100);</span><br><span class="line">strcpy(tea.p, &quot;我是要成为海贼王的男人&quot;);</span><br><span class="line">tea.plen = strlen(tea.p);</span><br><span class="line"></span><br><span class="line">// 编码</span><br><span class="line">char* outData;</span><br><span class="line">int outlen;</span><br><span class="line">encodeTeacher(&amp;tea, &amp;outData, &amp;outlen);</span><br><span class="line"></span><br><span class="line">//===============================================</span><br><span class="line"></span><br><span class="line">// 解码</span><br><span class="line">Teacher* pt;</span><br><span class="line">decodeTeacher(outData, outlen, &amp;pt);</span><br><span class="line">printf(&quot;name:%s\n&quot;, pt-&gt;name);</span><br><span class="line">printf(&quot;age:%d\n&quot;, pt-&gt;age);</span><br><span class="line">printf(&quot;p:%s\n&quot;, pt-&gt;p);</span><br><span class="line">printf(&quot;plen:%d\n&quot;, pt-&gt;plen);</span><br><span class="line"></span><br><span class="line">freeTeacher(&amp;pt);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="teacherh"><a class="markdownIt-Anchor" href="#teacherh"></a> Teacher.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _TEACHER_H</span><br><span class="line">#define _TEACHER_H</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64]; </span><br><span class="line">int age;   </span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line">// 编码结构体</span><br><span class="line">//p: 输入参数, 待编码的结构体</span><br><span class="line">//outData: 输出参数, 保存编码之后的字符串</span><br><span class="line">//outlen: 输出参数, 编码之后的字符串的长度</span><br><span class="line">int encodeTeacher(Teacher* p, char** outData, int* outlen);</span><br><span class="line">// 解码结构体</span><br><span class="line"></span><br><span class="line">//inData: 输入参数</span><br><span class="line">//inLen: inData的长度</span><br><span class="line">//p:保存解码之后的数据</span><br><span class="line">int decodeTeacher(char* inData, int inLen, Teacher**p);</span><br><span class="line">// 释放内存函数</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">void freeTeacher(Teacher** p);</span><br><span class="line"></span><br><span class="line">#endif// _TEACHER_H</span><br></pre></td></tr></table></figure><h3 id="teacherc"><a class="markdownIt-Anchor" href="#teacherc"></a> Teacher.c</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line">#include &quot;itcast_asn1_der.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64];</span><br><span class="line">int age;</span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">*/</span><br><span class="line">int encodeTeacher(Teacher * p, char ** outData, int * outlen)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_ANYBUF *head = NULL;</span><br><span class="line">ITCAST_ANYBUF *temp = NULL;</span><br><span class="line">ITCAST_ANYBUF *next = NULL;</span><br><span class="line"></span><br><span class="line">//编码name</span><br><span class="line">//ITCAST_INT DER_ItAsn1_WritePrintableString(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString);</span><br><span class="line">//char *----&gt;ITCAST_ANYBUF</span><br><span class="line">DER_ITCAST_String_To_AnyBuf(&amp;temp, p-&gt;name, strlen(p-&gt;name)+1);</span><br><span class="line">DER_ItAsn1_WritePrintableString(temp, &amp;head);</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line">next = head;</span><br><span class="line"></span><br><span class="line">//编码age</span><br><span class="line">DER_ItAsn1_WriteInteger(p-&gt;age, &amp;next-&gt;next);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//编码p</span><br><span class="line">//int EncodeChar(char *pData, int dataLen, ITCAST_ANYBUF **outBuf);</span><br><span class="line">EncodeChar(p-&gt;p, strlen(p-&gt;p)+1, &amp;next-&gt;next);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//编码plen</span><br><span class="line">DER_ItAsn1_WriteInteger(p-&gt;plen, &amp;next-&gt;next);</span><br><span class="line"></span><br><span class="line">//序列化</span><br><span class="line">DER_ItAsn1_WriteSequence(head, &amp;temp);</span><br><span class="line"></span><br><span class="line">//输出参数赋值</span><br><span class="line">*outData = temp-&gt;pData;</span><br><span class="line">*outlen = temp-&gt;dataLen;</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">DER_ITCAST_FreeQueue(head);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64];</span><br><span class="line">int age;</span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int decodeTeacher(char * inData, int inLen, Teacher ** p)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_ANYBUF *head = NULL;</span><br><span class="line">ITCAST_ANYBUF *temp = NULL;</span><br><span class="line">ITCAST_ANYBUF *next = NULL;</span><br><span class="line"></span><br><span class="line">Teacher *pt = (Teacher *)malloc(sizeof(Teacher));</span><br><span class="line">if (pt == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将inData反序列化成链表</span><br><span class="line">//将char *---&gt;ITCAST_ANYBUF类型</span><br><span class="line">DER_ITCAST_String_To_AnyBuf(&amp;temp, inData, inLen);</span><br><span class="line">DER_ItAsn1_ReadSequence(temp, &amp;head);</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line">next = head;</span><br><span class="line"></span><br><span class="line">//解码name</span><br><span class="line">DER_ItAsn1_ReadPrintableString(next, &amp;temp);</span><br><span class="line">memcpy(pt-&gt;name, temp-&gt;pData, temp-&gt;dataLen);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line"></span><br><span class="line">//解码age</span><br><span class="line">DER_ItAsn1_ReadInteger(next, &amp;pt-&gt;age);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//解码p</span><br><span class="line">int len = 0;</span><br><span class="line">DecodeChar(next, &amp;pt-&gt;p, &amp;len);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//解码plen</span><br><span class="line">DER_ItAsn1_ReadInteger(next, &amp;pt-&gt;plen);</span><br><span class="line"></span><br><span class="line">//给输出参数赋值</span><br><span class="line">*p = pt;</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">DER_ITCAST_FreeQueue(head);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void freeTeacher(Teacher ** p)</span><br><span class="line">&#123;</span><br><span class="line">if ((*p) != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if ((*p)-&gt;p != NULL)</span><br><span class="line">&#123;</span><br><span class="line">free((*p)-&gt;p);</span><br><span class="line">&#125;</span><br><span class="line">free(*p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vs连接linux服务器"><a class="markdownIt-Anchor" href="#vs连接linux服务器"></a> vs连接linux服务器</h2><p>创建项目工程</p><p><img src="/images/javawz/image-20220522014650992.png" alt="image-20220522014650992"></p><p>点击菜单栏上的工具----------&gt;选项</p><p><img src="/images/javawz/image-20220522014903248.png" alt="image-20220522014903248"></p><p>选择  跨平台-------&gt;连接管理器-----------&gt;添加</p><p><img src="/images/javawz/image-20220522015040222.png" alt="image-20220522015040222"></p><p><img src="/images/javawz/image-20220522015129104.png" alt="image-20220522015129104"></p><br><p><img src="/images/javawz/image-20220522015211419.png" alt="image-20220522015211419"></p><p>修改生成目录的路径</p><p><img src="/images/javawz/image-20220522040443774.png" alt="image-20220522040443774"></p><br><br><br><br><br><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两台机器通信&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#两台机器通信&quot;&gt;&lt;/a&gt; 两台机器通信&lt;/h2&gt;
&lt;h3 id=&quot;1-两台机器的操作系统平台不同&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
</feed>
