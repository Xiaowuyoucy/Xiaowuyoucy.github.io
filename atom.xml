<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2022-01-06T18:18:59.488Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>libevent源码vs2017编译完成包含openssl模块</title>
    <link href="https://xiaowuyoucy.github.io/2022/01/07/libev004libevent%E6%BA%90%E7%A0%81vs2017%E7%BC%96%E8%AF%91%E5%AE%8C%E6%88%90%E5%8C%85%E5%90%ABopenssl%E6%A8%A1%E5%9D%97/"/>
    <id>https://xiaowuyoucy.github.io/2022/01/07/libev004libevent源码vs2017编译完成包含openssl模块/</id>
    <published>2022-01-06T17:46:28.000Z</published>
    <updated>2022-01-06T18:18:59.488Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译libevent"><a class="markdownIt-Anchor" href="#编译libevent"></a> 编译libevent</h2><h3 id="编译命令"><a class="markdownIt-Anchor" href="#编译命令"></a> 编译命令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_x86.bat</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f Makefifile.nmake clean</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f Makefifile.nmake OPENSSL_DIR=D:\lib\openssl</span><br></pre></td></tr></table></figure><p><code>OPENSSL_DIR=</code>  指定openssl目录</p><h3 id="出现问题"><a class="markdownIt-Anchor" href="#出现问题"></a> 出现问题</h3><h4 id="openssl问题"><a class="markdownIt-Anchor" href="#openssl问题"></a> openssl问题</h4><p>修改test目录下 Makefifile.nmake 文件内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSL_LIBS=..\libevent_openssl.lib $(OPENSSL_DIR)\lib\libeay32.lib $(OPENSSL_DIR)\lib\ssleay32.lib gdi32.lib User32.lib</span><br></pre></td></tr></table></figure><p>改成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">SSL_LIBS=..\libevent_openssl.lib $(OPENSSL_DIR)\lib\libssl.lib $(OPENSSL_DIR)\lib\libcrypto.lib gdi32.lib User32.lib</span><br></pre></td></tr></table></figure><br><br><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤:</h3><p>1.打开VS 2017的 x64_x86 交叉工具命令提示符<br><br></p><p>2.进入到<code>libevent-master</code>目录</p><p><img src="/images/javawz/image-20220107020711140.png" alt="image-20220107020711140"><br><br></p><p>3.输入<code>nmake /f Makefifile.nmake OPENSSL_DIR=D:\lib\openssl</code></p><p><code>OPENSSL_DIR=</code> 这里的路径是我们生成的openssl路径</p><p><img src="/images/javawz/image-20220107020837005.png" alt="image-20220107020837005"><br></p><br><p>4.出现错误</p><p><img src="/images/javawz/image-20220107020942573.png" alt="image-20220107020942573"></p><p>找不到libeay32.lib</p><p>可以改掉自己的openssl文件</p><p>或者改掉libevent-master\test\Makefile.nmake文件内容<br><br></p><p>5.打开regress.exe程序</p><p>可能会出现缺失libcrypto-1_1.dll文件和libssl-1_1.dll文件</p><p>下载回来之后放在<code>C:\Windows\SysWOW64</code>目录即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译libevent&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译libevent&quot;&gt;&lt;/a&gt; 编译libevent&lt;/h2&gt;
&lt;h3 id=&quot;编译命令&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编
      
    
    </summary>
    
      <category term="libevent" scheme="https://xiaowuyoucy.github.io/categories/libevent/"/>
    
    
  </entry>
  
  <entry>
    <title>用vs2017编译openssl源码并完成编译批处理脚本</title>
    <link href="https://xiaowuyoucy.github.io/2022/01/07/libev003%E7%94%A8vs2017%E7%BC%96%E8%AF%91openssl%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AE%8C%E6%88%90%E7%BC%96%E8%AF%91%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2022/01/07/libev003用vs2017编译openssl源码并完成编译批处理脚本/</id>
    <published>2022-01-06T17:20:03.000Z</published>
    <updated>2022-01-06T18:20:52.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译openssl"><a class="markdownIt-Anchor" href="#编译openssl"></a> 编译openssl</h2><h3 id="依赖项"><a class="markdownIt-Anchor" href="#依赖项"></a> 依赖项</h3><h4 id="perl"><a class="markdownIt-Anchor" href="#perl"></a> perl</h4><p><code>https://pan.baidu.com/s/ 1BXPRcDAUFN2vJOrNvkZIwQ</code></p><h4 id="nasm"><a class="markdownIt-Anchor" href="#nasm"></a> nasm</h4><p>默认安装目录: C:\Users\xiaca\AppData\Local\bin\NASM</p><p>安装后配置到环境变量path中</p><p>下载地址:<code>https://pan.baidu.com/s/1BXPRcDAUFN2vJOrNvkZIwQ</code></p><h4 id="编译命令"><a class="markdownIt-Anchor" href="#编译命令"></a> 编译命令</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_x86.bat</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">perl Confifigure &#123; VC-WIN32 | VC-WIN64A | VC-WIN64I | VC-CE &#125; --prefifix=%OUTPATH% </span><br><span class="line">perl Confifigure VC-WIN32</span><br></pre></td></tr></table></figure><p>nmake</p><p>make test</p><p>nmake install</p><p>C:\Program Files (x86)\OpenSSL</p><p>如果c盘需要管理员权限运行</p><h3 id="步骤"><a class="markdownIt-Anchor" href="#步骤"></a> 步骤:</h3><p>1.先安装perl和nasm</p><p><img src="/images/javawz/image-20220107012532294.png" alt="image-20220107012532294"></p><p>全部点下一步</p><p>nasma解压后添加到PATH环境变量里</p><p><img src="/images/javawz/image-20220107012731695.png" alt="image-20220107012731695"></p><p>控制台重启生效</p><p><br><br></p><p>2.打开VS 2017的 x64_x86 交叉工具命令提示符</p><p>进入到openssl目录</p><p>输入<code>perl Configure VC-WIN32 --prefix=E:\libevent\out\vs2017_32\openssl</code></p><p><code>--prefix=</code> 指定输出路径</p><p><img src="/images/javawz/image-20220107013355347.png" alt="image-20220107013355347"></p><p><br><br></p><p>3.编译</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220107013514294.png" alt="image-20220107013514294"></p><p><br><br></p><p>4.安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake install</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220107013657853.png" alt="image-20220107013657853"></p><p><br><br></p><h2 id="编译批处理脚本"><a class="markdownIt-Anchor" href="#编译批处理脚本"></a> 编译批处理脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">@echo &quot;开始编译openssl&quot;</span><br><span class="line">set VS=&quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_x86.bat&quot;</span><br><span class="line">set OUT=E:\libevent\out\vs2017_32\openssl</span><br><span class="line">call %VS%</span><br><span class="line">E:</span><br><span class="line">cd E:\libevent\openssl-1.1.1</span><br><span class="line">perl Configure VC-WIN32 --prefix=%OUT%</span><br><span class="line">nmake clean</span><br><span class="line">nmake</span><br><span class="line">nmake install</span><br><span class="line">@echo &quot;build openssl end&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译openssl&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译openssl&quot;&gt;&lt;/a&gt; 编译openssl&lt;/h2&gt;
&lt;h3 id=&quot;依赖项&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#依赖项&quot;&gt;
      
    
    </summary>
    
      <category term="libevent" scheme="https://xiaowuyoucy.github.io/categories/libevent/"/>
    
    
  </entry>
  
  <entry>
    <title>用vs2017编译zlib源码并完成编译批处理脚本</title>
    <link href="https://xiaowuyoucy.github.io/2022/01/07/libev002%E7%94%A8vs2017%E7%BC%96%E8%AF%91zlib%E6%BA%90%E7%A0%81%E5%B9%B6%E5%AE%8C%E6%88%90%E7%BC%96%E8%AF%91%E6%89%B9%E5%A4%84%E7%90%86%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2022/01/07/libev002用vs2017编译zlib源码并完成编译批处理脚本/</id>
    <published>2022-01-06T16:44:23.000Z</published>
    <updated>2022-01-06T18:20:03.862Z</updated>
    
    <content type="html"><![CDATA[<h2 id="编译zlib"><a class="markdownIt-Anchor" href="#编译zlib"></a> 编译zlib</h2><h3 id="编译32位"><a class="markdownIt-Anchor" href="#编译32位"></a> 编译32位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_x86.bat</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="编译64位"><a class="markdownIt-Anchor" href="#编译64位"></a> 编译64位</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;C:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvars64.bat&quot;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake -f win32/Makefifile.msc</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="vs-2017的-x64_x86-交叉工具命令提示符"><a class="markdownIt-Anchor" href="#vs-2017的-x64_x86-交叉工具命令提示符"></a> VS 2017的 x64_x86 交叉工具命令提示符</h3><p><img src="/images/javawz/image-20220107005147178.png" alt="image-20220107005147178"></p><p>64位平台编译32位用这个工具</p><p><br><br></p><h3 id="适用于-vs-2017-的-x64-本机工具命令提示"><a class="markdownIt-Anchor" href="#适用于-vs-2017-的-x64-本机工具命令提示"></a> 适用于 VS 2017 的 x64 本机工具命令提示</h3><p>编译64位源码用这个工具</p><p><img src="/images/javawz/image-20220107005205464.png" alt="image-20220107005205464"></p><p><br><br></p><h3 id="适用于-vs-2017-的-x86_x64-兼容工具命令提示"><a class="markdownIt-Anchor" href="#适用于-vs-2017-的-x86_x64-兼容工具命令提示"></a> 适用于 VS 2017 的 x86_x64 兼容工具命令提示</h3><p>用32位平台来编译64位源码</p><p><img src="/images/javawz/image-20220107005440939.png" alt="image-20220107005440939"></p><p><br><br></p><h4 id="打开vs-2017的-x64_x86-交叉工具命令提示符并且进入到zlib目录"><a class="markdownIt-Anchor" href="#打开vs-2017的-x64_x86-交叉工具命令提示符并且进入到zlib目录"></a> 打开VS 2017的 x64_x86 交叉工具命令提示符并且进入到zlib目录</h4><p><img src="/images/javawz/image-20220107005557569.png" alt="image-20220107005557569"></p><h3 id="编译"><a class="markdownIt-Anchor" href="#编译"></a> 编译</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f WIN32\Makefile.msc</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220107005748153.png" alt="image-20220107005748153"></p><p><br><br></p><h2 id="编译批处理脚本"><a class="markdownIt-Anchor" href="#编译批处理脚本"></a> 编译批处理脚本</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@echo &quot;开始编译zlib&quot;</span><br><span class="line">set VS=&quot;D:\Program Files (x86)\Microsoft Visual Studio\2017\Community\VC\Auxiliary\Build\vcvarsamd64_x86.bat&quot;</span><br><span class="line">set OUT=F:\libevent\out\vs2017_32\zlib</span><br><span class="line">call %VS%</span><br><span class="line">cd zlib-1.2.11</span><br><span class="line">nmake /f win32\Makefile.msc clean</span><br><span class="line">nmake /f win32\Makefile.msc</span><br><span class="line">md %OUT%\lib</span><br><span class="line">md %OUT%\bin</span><br><span class="line">md %OUT%\include</span><br><span class="line">copy /Y *.lib %OUT%\lib</span><br><span class="line">copy /Y *.h %OUT%\include</span><br><span class="line">copy /Y *.dll %OUT%\bin</span><br><span class="line">copy /Y *.exe %OUT%\bin</span><br><span class="line">@echo &quot;zlib编译结束&quot;</span><br><span class="line">pause</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set VS=//自己VS 2017的 x64_x86 交叉工具命令提示符的路径</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set OUT=//输出文件的路径</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">call %VS%//代表调用vcvarsamd64_x86.bat</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f win32\Makefile.msc clean//清理编译出来的文件</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmake /f win32\Makefile.msc//编译</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">md %OUT%\lib//创建lib目录</span><br><span class="line">md %OUT%\bin//创建bin目录</span><br><span class="line">md %OUT%\include//创建include目录</span><br></pre></td></tr></table></figure><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">copy /Y *.lib %OUT%\lib//不提示复制所有后缀为.lib的文件到%OUT%\lib目录</span><br><span class="line">copy /Y *.h %OUT%\include//不提示复制所有后缀为.h的文件到%OUT%\include目录</span><br><span class="line">copy /Y *.dll %OUT%\bin//不提示复制所有后缀为.dll的文件到%OUT%\bin目录</span><br><span class="line">copy /Y *.exe %OUT%\bin//不提示复制所有后缀为.exe的文件到%OUT%\bin目录</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;编译zlib&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译zlib&quot;&gt;&lt;/a&gt; 编译zlib&lt;/h2&gt;
&lt;h3 id=&quot;编译32位&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#编译32位&quot;&gt;&lt;/a&gt; 
      
    
    </summary>
    
      <category term="libevent" scheme="https://xiaowuyoucy.github.io/categories/libevent/"/>
    
    
  </entry>
  
  <entry>
    <title>windows平台编译libevent分析及环境安装和源码</title>
    <link href="https://xiaowuyoucy.github.io/2022/01/07/libev001windows%E5%B9%B3%E5%8F%B0%E7%BC%96%E8%AF%91libevent%E5%88%86%E6%9E%90%E5%8F%8A%E7%8E%AF%E5%A2%83%E5%AE%89%E8%A3%85%E5%92%8C%E6%BA%90%E7%A0%81/"/>
    <id>https://xiaowuyoucy.github.io/2022/01/07/libev001windows平台编译libevent分析及环境安装和源码/</id>
    <published>2022-01-06T16:02:42.000Z</published>
    <updated>2022-01-06T18:19:23.864Z</updated>
    
    <content type="html"><![CDATA[<h2 id="环境准备"><a class="markdownIt-Anchor" href="#环境准备"></a> 环境准备</h2><p>windows 10 64位</p><p>VS2017社区版本</p><p>perl   编译openssl用</p><p>nasm 编译openssl用</p><p><br><br></p><h3 id="zlib1211源码"><a class="markdownIt-Anchor" href="#zlib1211源码"></a> zlib1.2.11源码</h3><p>压缩/解压缩用的</p><p>官方地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.zlib.net</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="openssl-111-源码"><a class="markdownIt-Anchor" href="#openssl-111-源码"></a> openssl 1.1.1 源码</h3><p>加密传输</p><p>官方地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">www.openssl.org/source/</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="libevent-218-源码"><a class="markdownIt-Anchor" href="#libevent-218-源码"></a> libevent 2.1.8 源码</h3><p>ffmpeg.club/libevent</p><p>官方地址:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">libevent.org</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;环境准备&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境准备&quot;&gt;&lt;/a&gt; 环境准备&lt;/h2&gt;
&lt;p&gt;windows 10 64位&lt;/p&gt;
&lt;p&gt;VS2017社区版本&lt;/p&gt;
&lt;p&gt;perl   编译openssl用&lt;/p&gt;
&lt;p&gt;n
      
    
    </summary>
    
      <category term="libevent" scheme="https://xiaowuyoucy.github.io/categories/libevent/"/>
    
    
  </entry>
  
  <entry>
    <title>循环链表</title>
    <link href="https://xiaowuyoucy.github.io/2022/01/06/sf0004%E5%BE%AA%E7%8E%AF%E9%93%BE%E8%A1%A8/"/>
    <id>https://xiaowuyoucy.github.io/2022/01/06/sf0004循环链表/</id>
    <published>2022-01-06T08:01:04.000Z</published>
    <updated>2022-01-06T16:53:04.464Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/image-20220106160208492.png" alt="image-20220106160208492"></p><p><img src="/images/javawz/image-20220106160259094.png" alt="image-20220106160259094"></p><h3 id="链表操作"><a class="markdownIt-Anchor" href="#链表操作"></a> 链表操作:</h3><p>初始化函数，插入函数，获得第一个结点，根据位置删除，根据值删除</p><p>获得链表长度，查找，打印结点，释放内存，判断是否为空</p><h3 id="circlelinklisth"><a class="markdownIt-Anchor" href="#circlelinklisth"></a> CircleLinkList.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> CIRCLELINKLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCLELINKLIST_H</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//真</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCLELINKLIST_TRUE 1</span></span><br><span class="line"><span class="comment">//假</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CIRCLELINKLIST_FALSE 0</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CIRCLELINKNODE</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CIRCLELINKNODE</span> * <span class="title">next</span>;</span></span><br><span class="line">&#125;CircleLinkNode;</span><br><span class="line"><span class="comment">//链表</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">CIRCLELINKLIST</span> &#123;</span></span><br><span class="line">CircleLinkNode head;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;CircleLinkList;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*COMPARENODE)</span><span class="params">(CircleLinkNode *, CircleLinkNode *)</span></span>;</span><br><span class="line"><span class="comment">//打印函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*PRINTNODE)</span><span class="params">(CircleLinkNode *)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">CircleLinkList * <span class="title">Init_CircleLinkList</span><span class="params">()</span></span>;</span><br><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_CircleLinkList</span><span class="params">(CircleLinkList *clist, <span class="keyword">int</span> pos, CircleLinkNode * data)</span></span>;</span><br><span class="line"><span class="comment">//获得第一个结点</span></span><br><span class="line"><span class="function">CircleLinkNode * <span class="title">Front_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span></span>;</span><br><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByPos_CircleLinkList</span><span class="params">(CircleLinkList *clist,<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByValue_CircleLinkList</span><span class="params">(CircleLinkList *clist, CircleLinkNode* data,COMPARENODE compare)</span></span>;</span><br><span class="line"><span class="comment">//获得链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span></span>;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_CircleLinkList</span><span class="params">(CircleLinkList *clist, CircleLinkNode * data, COMPARENODE compare)</span></span>;</span><br><span class="line"><span class="comment">//打印结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_CircleLinkList</span><span class="params">(CircleLinkList *clist, PRINTNODE print)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="circlelinklistc"><a class="markdownIt-Anchor" href="#circlelinklistc"></a> CircleLinkList.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"CircleLinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化函数</span></span><br><span class="line"><span class="function">CircleLinkList * <span class="title">Init_CircleLinkList</span><span class="params">()</span></span>&#123;</span><br><span class="line">CircleLinkList *<span class="built_in">list</span> = (CircleLinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(CircleLinkList));</span><br><span class="line"><span class="built_in">list</span>-&gt;head.next = &amp;(<span class="built_in">list</span>-&gt;head);<span class="comment">//开始先让头结点的next指向自己</span></span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_CircleLinkList</span><span class="params">(CircleLinkList *clist, <span class="keyword">int</span> pos, CircleLinkNode * data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; clist-&gt;size )</span><br><span class="line">&#123;</span><br><span class="line">pos = clist-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line">CircleLinkNode * pCurrent = &amp;(clist-&gt;head);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入结点</span></span><br><span class="line">data-&gt;next = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = data;</span><br><span class="line"><span class="comment">//结点长度加1</span></span><br><span class="line">clist-&gt;size++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得第一个元素</span></span><br><span class="line"><span class="function">CircleLinkNode * <span class="title">Front_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> clist-&gt;head.next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByPos_CircleLinkList</span><span class="params">(CircleLinkList *clist, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; clist-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找位置</span></span><br><span class="line">CircleLinkNode * pCurrent = &amp;(clist-&gt;head);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">CircleLinkNode * pNext = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = pNext-&gt;next;</span><br><span class="line"></span><br><span class="line">clist-&gt;size--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByValue_CircleLinkList</span><span class="params">(CircleLinkList *clist, CircleLinkNode* data, COMPARENODE compare)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//指向目标结点的前一个结点</span></span><br><span class="line">CircleLinkNode *pPrev = &amp;(clist-&gt;head);</span><br><span class="line"><span class="comment">//指向目标结点</span></span><br><span class="line">CircleLinkNode * pCurrent = clist-&gt;head.next; </span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clist-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (compare(pCurrent,data) == CIRCLELINKLIST_TRUE)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//删除结点</span></span><br><span class="line">pPrev-&gt;next = pCurrent-&gt;next;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pPrev = pPrev-&gt;next;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结点长度减一</span></span><br><span class="line">clist-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得链表长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> clist-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_CircleLinkList</span><span class="params">(CircleLinkList *clist, CircleLinkNode * data, COMPARENODE compare)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line">CircleLinkNode *pCurrent = clist-&gt;head.next;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clist-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (compare(pCurrent,data) == CIRCLELINKLIST_TRUE)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_CircleLinkList</span><span class="params">(CircleLinkList *clist, PRINTNODE print)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">CircleLinkNode * pCurrent = clist-&gt;head.next;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; clist-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line">print(pCurrent);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n ==================================\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clist == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(clist);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为空</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">IsEmpty_CircleLinkList</span><span class="params">(CircleLinkList *clist)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (clist-&gt;size == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> CIRCLELINKLIST_TRUE;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> CIRCLELINKLIST_FALSE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"CircleLinkList.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">STUDENT</span> &#123;</span></span><br><span class="line">CircleLinkNode node;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Student;</span><br><span class="line"></span><br><span class="line"><span class="comment">//比较函数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Compare</span><span class="params">(CircleLinkNode *data1, CircleLinkNode *data2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Student *s1 = (Student*)data1;</span><br><span class="line">Student *s2 = (Student*)data2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s1-&gt;age == s2-&gt;age &amp;&amp; s1-&gt;score == s2-&gt;score &amp;&amp; <span class="built_in">strcmp</span>(s1-&gt;name,s2-&gt;name) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print</span><span class="params">(CircleLinkNode * node)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Student *s = (Student*)node;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s,%d,%d\n"</span>,s-&gt;name,s-&gt;age,s-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Student s1 = &#123;<span class="literal">NULL</span>,<span class="string">"aaa"</span>,<span class="number">81</span>,<span class="number">15</span>&#125;;</span><br><span class="line">Student s2 = &#123; <span class="literal">NULL</span>,<span class="string">"bbb"</span>,<span class="number">82</span>,<span class="number">16</span>&#125;;</span><br><span class="line">Student s3 = &#123; <span class="literal">NULL</span>,<span class="string">"ccc"</span>,<span class="number">83</span>,<span class="number">17</span>&#125;;</span><br><span class="line">Student s4 = &#123; <span class="literal">NULL</span>,<span class="string">"ddd"</span>,<span class="number">84</span>,<span class="number">18</span>&#125;;</span><br><span class="line">Student s5 = &#123; <span class="literal">NULL</span>,<span class="string">"eee"</span>,<span class="number">85</span>,<span class="number">19</span>&#125;;</span><br><span class="line"><span class="comment">//创建链表</span></span><br><span class="line">CircleLinkList* clist =  Init_CircleLinkList();</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入链表</span></span><br><span class="line">Insert_CircleLinkList(clist,<span class="number">100</span>,(CircleLinkNode*)&amp;s1);</span><br><span class="line">Insert_CircleLinkList(clist,<span class="number">100</span>, (CircleLinkNode*)&amp;s2);</span><br><span class="line">Insert_CircleLinkList(clist,<span class="number">100</span>, (CircleLinkNode*)&amp;s3);</span><br><span class="line">Insert_CircleLinkList(clist,<span class="number">100</span>, (CircleLinkNode*)&amp;s4);</span><br><span class="line">Insert_CircleLinkList(clist,<span class="number">100</span>, (CircleLinkNode*)&amp;s5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Print_CircleLinkList(clist,Print);</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除第0个元素</span></span><br><span class="line">RemoveByPos_CircleLinkList(clist,<span class="number">0</span>);</span><br><span class="line"><span class="comment">//删除s4元素</span></span><br><span class="line">RemoveByValue_CircleLinkList(clist, (CircleLinkNode*)&amp;s4, Compare);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Print_CircleLinkList(clist,Print);</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pos:%d\n"</span>, Find_CircleLinkList(clist, (CircleLinkNode*)&amp;s5, Compare));</span><br><span class="line"><span class="comment">//返回链表大小</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"size:%d\n"</span>, Size_CircleLinkList(clist));</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表</span></span><br><span class="line">FreeSpace_CircleLinkList(clist);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/image-20220106160208492.png&quot; alt=&quot;image-20220106160208492&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/image-20220106160259
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>企业链表</title>
    <link href="https://xiaowuyoucy.github.io/2021/12/30/sf0003%E4%BC%81%E4%B8%9A%E9%93%BE%E8%A1%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/12/30/sf0003企业链表/</id>
    <published>2021-12-30T10:50:05.000Z</published>
    <updated>2021-12-30T11:05:22.145Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/20181110200923648.png" alt="img"></p><p>不开辟结点的空间，用户定义的结构体包含指向下一个结点的指针。</p><h3 id="链表小结点"><a class="markdownIt-Anchor" href="#链表小结点"></a> 链表小结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span>* <span class="title">next</span>;</span> <span class="comment">//指向一个结点的指针变量</span></span><br><span class="line">&#125;LinkNode;</span><br></pre></td></tr></table></figure><h3 id="链表结点"><a class="markdownIt-Anchor" href="#链表结点"></a> 链表结点</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LINKLIST</span> &#123;</span></span><br><span class="line">LinkNode head;<span class="comment">//头结点,不保存数据</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//结点长度</span></span><br><span class="line">&#125;LinkList;</span><br></pre></td></tr></table></figure><h2 id="企业链表操作"><a class="markdownIt-Anchor" href="#企业链表操作"></a> 企业链表操作</h2><p>初始化链表，插入，删除，查找，返回链表大小，打印，释放链表内存</p><h4 id="初始化链表"><a class="markdownIt-Anchor" href="#初始化链表"></a> 初始化链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">LinkList* <span class="title">Init_LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LinkList * <span class="built_in">list</span> = (LinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"><span class="built_in">list</span>-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="插入"><a class="markdownIt-Anchor" href="#插入"></a> 插入</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos, LinkNode* data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">pos = <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找插入位置</span></span><br><span class="line">LinkNode * pCurrent = &amp;(<span class="built_in">list</span>-&gt;head);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入新结点</span></span><br><span class="line">data-&gt;next = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = data;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除"><a class="markdownIt-Anchor" href="#删除"></a> 删除</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode * pCurrent = &amp;(<span class="built_in">list</span>-&gt;head);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pCurrent-&gt;next = pCurrent-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找"><a class="markdownIt-Anchor" href="#查找"></a> 查找</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, LinkNode * data, COMPARENODE compare)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode *pCurrent = <span class="built_in">list</span>-&gt;head.next;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (compare(pCurrent,data) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (flag = pos);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos++;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回链表大小"><a class="markdownIt-Anchor" href="#返回链表大小"></a> 返回链表大小</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//返回链表大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印"><a class="markdownIt-Anchor" href="#打印"></a> 打印</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, PRINTNODE print)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head.next;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(pCurrent);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放链表内存"><a class="markdownIt-Anchor" href="#释放链表内存"></a> 释放链表内存</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="linklisth"><a class="markdownIt-Anchor" href="#linklisth"></a> Linklist.h</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> LINKLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LINKLIST_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="comment">//链表小结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span> &#123;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span>* <span class="title">next</span>;</span></span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line"><span class="comment">//链表结点</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LINKLIST</span> &#123;</span></span><br><span class="line">LinkNode head;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line">&#125;LinkList;</span><br><span class="line"><span class="comment">//用户提供的打印函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*PRINTNODE)</span><span class="params">(LinkNode *)</span></span>;</span><br><span class="line"><span class="comment">//用户提供的比较函数指针</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*COMPARENODE)</span><span class="params">(LinkNode*, LinkNode*)</span></span>;</span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">LinkList* <span class="title">Init_LinkList</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos, LinkNode* data)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, LinkNode * data, COMPARENODE compare)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, PRINTNODE print)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h2 id="listlinkc"><a class="markdownIt-Anchor" href="#listlinkc"></a> ListLink.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">LinkList* <span class="title">Init_LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">LinkList * <span class="built_in">list</span> = (LinkList*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"><span class="built_in">list</span>-&gt;head.next = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos, LinkNode* data)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">pos = <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找插入位置</span></span><br><span class="line">LinkNode * pCurrent = &amp;(<span class="built_in">list</span>-&gt;head);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++) &#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//插入新结点</span></span><br><span class="line">data-&gt;next = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = data;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode * pCurrent = &amp;(<span class="built_in">list</span>-&gt;head);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">pCurrent-&gt;next = pCurrent-&gt;next-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, LinkNode * data, COMPARENODE compare)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (data == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode *pCurrent = <span class="built_in">list</span>-&gt;head.next;</span><br><span class="line"><span class="keyword">int</span> flag = <span class="number">-1</span>, pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (compare(pCurrent,data) == <span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> (flag = pos);</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos++;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> flag;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回链表大小</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, PRINTNODE print)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//辅助指针</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head.next;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(pCurrent);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h2><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PERSON</span> &#123;</span></span><br><span class="line">LinkNode node;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line">&#125;Person;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">MyPrint</span><span class="params">(LinkNode* data)</span> </span>&#123;</span><br><span class="line">Person *p = (Person*)data;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s,%d\n"</span>, p-&gt;name, p-&gt;age);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">compare</span><span class="params">(LinkNode* d1, LinkNode *d2)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Person *p1 = (Person*)d1;</span><br><span class="line">Person *p2 = (Person*)d2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p1-&gt;name,p2-&gt;name) == <span class="number">0</span> &amp;&amp; p1-&gt;age == p2-&gt;age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">LinkList * <span class="built_in">list</span> = Init_LinkList();</span><br><span class="line"><span class="comment">//创建数据</span></span><br><span class="line">Person p1 = &#123; <span class="literal">NULL</span>,<span class="string">"aaa"</span>,<span class="number">11</span> &#125;;</span><br><span class="line">Person p2 = &#123; <span class="literal">NULL</span>,<span class="string">"bbb"</span>,<span class="number">12</span> &#125;;</span><br><span class="line">Person p3 = &#123; <span class="literal">NULL</span>,<span class="string">"ccc"</span>,<span class="number">13</span> &#125;;</span><br><span class="line">Person p4 = &#123; <span class="literal">NULL</span>,<span class="string">"ddd"</span>,<span class="number">14</span> &#125;;</span><br><span class="line">Person p5 = &#123; <span class="literal">NULL</span>,<span class="string">"eee"</span>,<span class="number">15</span> &#125;;</span><br><span class="line"><span class="comment">//插入数据</span></span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,(LinkNode *)&amp;p1);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,(LinkNode *)&amp;p2);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,(LinkNode *)&amp;p3);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,(LinkNode *)&amp;p4);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,(LinkNode *)&amp;p5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Print_LinkList(<span class="built_in">list</span>, MyPrint);</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="keyword">int</span> ret = Find_LinkList(<span class="built_in">list</span>, (LinkNode*)&amp;p1, compare);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Find:%d\n"</span>, ret);</span><br><span class="line"><span class="comment">//返回链表长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Size:%d\n"</span>, Size_LinkList(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"--------------------\n"</span>);</span><br><span class="line"><span class="comment">//删除</span></span><br><span class="line">Remove_LinkList(<span class="built_in">list</span>,<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Print_LinkList(<span class="built_in">list</span>, MyPrint);</span><br><span class="line"><span class="comment">//释放链表</span></span><br><span class="line">FreeSpace_LinkList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/20181110200923648.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;p&gt;不开辟结点的空间，用户定义的结构体包含指向下一个结点的指针。&lt;/p&gt;
&lt;h3 id=&quot;链表小结点&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>单向链表</title>
    <link href="https://xiaowuyoucy.github.io/2021/12/29/sf002%E5%8D%95%E5%90%91%E9%93%BE%E8%A1%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/12/29/sf002单向链表/</id>
    <published>2021-12-29T10:12:11.000Z</published>
    <updated>2021-12-29T14:16:11.602Z</updated>
    
    <content type="html"><![CDATA[<p>链表是由一系列的结点组成，链表在内存中是非连续的，每一个结点包含两个域，一个保存数据域，一个保存结点关系的指针域。</p><h3 id="链表节点"><a class="markdownIt-Anchor" href="#链表节点"></a> 链表节点</h3><p>结点包含两个域,一个指向数据,一个指向下一个结点的指针</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span> &#123;</span></span><br><span class="line"><span class="keyword">void</span>*  data;<span class="comment">//指向任何类型的数据</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">LINKNODE</span>* <span class="title">next</span>;</span> <span class="comment">//指向下一个链表的结点</span></span><br><span class="line">&#125;LinkNode;</span><br></pre></td></tr></table></figure><h3 id="链表结构体"><a class="markdownIt-Anchor" href="#链表结构体"></a> 链表结构体</h3><p>头结点不保存数据.</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">typedef</span><span class="class"><span class="keyword">struct</span> <span class="title">LINKLIST</span> &#123;</span></span><br><span class="line">LinkNode* head;<span class="comment">//指向链表头结点</span></span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//链表长度</span></span><br><span class="line">&#125;LinkList;</span><br></pre></td></tr></table></figure><h3 id="链表操作"><a class="markdownIt-Anchor" href="#链表操作"></a> 链表操作</h3><p>初始化链表，指定位置插入，删除指定位置的结点，获得链表的长度</p><p>查找，打印链表节点,需要用户提供一个打印函数，返回第一个节点</p><p>释放链表内存</p><h4 id="初始化链表"><a class="markdownIt-Anchor" href="#初始化链表"></a> 初始化链表</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function">LinkList* <span class="title">Init_LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//创建链表结构体</span></span><br><span class="line">LinkList* <span class="built_in">list</span> = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头结点不保存数据信息</span></span><br><span class="line"><span class="built_in">list</span>-&gt;head = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line"><span class="built_in">list</span>-&gt;head-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回链表</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="指定位置插入"><a class="markdownIt-Anchor" href="#指定位置插入"></a> 指定位置插入</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//友好处理越界问题</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">pos = <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新的结点</span></span><br><span class="line">LinkNode* newNode = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找找结点</span></span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新结点入链表</span></span><br><span class="line">newNode-&gt;next = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点数量加1</span></span><br><span class="line"><span class="built_in">list</span>-&gt;size++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="删除指定位置的值"><a class="markdownIt-Anchor" href="#删除指定位置的值"></a> 删除指定位置的值</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByPos_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找删除结点的前一个结点</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存删除的结点</span></span><br><span class="line">LinkNode* pDel = pCurrent-&gt;next;</span><br><span class="line">    <span class="comment">//使当前结点的next指向下下个结点</span></span><br><span class="line">pCurrent-&gt;next = pDel-&gt;next;</span><br><span class="line"><span class="comment">//释放删除结点的内存</span></span><br><span class="line"><span class="built_in">free</span>(pDel);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//结点数量减一</span></span><br><span class="line"><span class="built_in">list</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获得链表的长度"><a class="markdownIt-Anchor" href="#获得链表的长度"></a> 获得链表的长度</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="查找结点需要用户提供"><a class="markdownIt-Anchor" href="#查找结点需要用户提供"></a> 查找结点,需要用户提供</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">void</span>* pData, PEQUALNODE equal)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pData == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历查找</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line">    <span class="comment">//记录当前位置</span></span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//使用用户提供的equal函数判断结点是否相等</span></span><br><span class="line"><span class="keyword">if</span> (equal(pCurrent-&gt;data,pData) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;<span class="comment">//跳出循环</span></span><br><span class="line">&#125;</span><br><span class="line">        </span><br><span class="line">pos++;<span class="comment">//当前位置加1</span></span><br><span class="line">        <span class="comment">//指向下一个结点</span></span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回结点位置,pos等于size表示查找失败</span></span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打印链表节点需要用户提供一个打印函数"><a class="markdownIt-Anchor" href="#打印链表节点需要用户提供一个打印函数"></a> 打印链表节点,需要用户提供一个打印函数</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, PRINTLINKNODE print)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line"><span class="comment">//判断当前结点是否为空</span></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//使用用户提供的print函数打印结点</span></span><br><span class="line">print(pCurrent-&gt;data);</span><br><span class="line">        <span class="comment">//指向下一个指针</span></span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="返回第一个节点"><a class="markdownIt-Anchor" href="#返回第一个节点"></a> 返回第一个节点</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">Front_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放链表内存"><a class="markdownIt-Anchor" href="#释放链表内存"></a> 释放链表内存</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkNode *pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line">    <span class="comment">//判断当前结点是否为空</span></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">        <span class="comment">//缓存当前结点的下一个结点</span></span><br><span class="line">LinkNode *pNext = pCurrent-&gt;next;</span><br><span class="line">        <span class="comment">//释放当前结点</span></span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line">        <span class="comment">//指向下一个结点</span></span><br><span class="line">pCurrent = pNext;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//释放list链表结构</span></span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="linklisth"><a class="markdownIt-Anchor" href="#linklisth"></a> LinkList.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">#ifndef LINKLIST_H</span><br><span class="line">#define LINKLIST_H</span><br><span class="line">#include&lt;stdlib.h&gt;</span><br><span class="line">#include&lt;string.h&gt;</span><br><span class="line">#include&lt;stdio.h&gt;</span><br><span class="line">//链表节点</span><br><span class="line">typedef struct LINKNODE &#123;</span><br><span class="line">void*  data;//指向任何类型的数据</span><br><span class="line">struct LINKNODE* next;</span><br><span class="line">&#125;LinkNode;</span><br><span class="line"></span><br><span class="line">//链表结构体</span><br><span class="line">typedefstruct LINKLIST &#123;</span><br><span class="line">LinkNode* head;</span><br><span class="line">int size;</span><br><span class="line">&#125;LinkList;</span><br><span class="line">//打印函数指针</span><br><span class="line">typedef void(*PRINTLINKNODE)(void *);</span><br><span class="line">//判断函数指针</span><br><span class="line">typedef int(*PEQUALNODE)(void* vp1, void *vp2);</span><br><span class="line">//初始化链表</span><br><span class="line">LinkList* Init_LinkList();</span><br><span class="line"></span><br><span class="line">//指定位置插入</span><br><span class="line">void Insert_LinkList(LinkList* list, int pos, void *data);</span><br><span class="line"></span><br><span class="line">//删除指定位置的结点</span><br><span class="line">void RemoveByPos_LinkList(LinkList* list, int pos);</span><br><span class="line"></span><br><span class="line">//获得链表的长度</span><br><span class="line">int Size_LinkList(LinkList* list);</span><br><span class="line">//查找</span><br><span class="line">int Find_LinkList(LinkList* list, void* pData, PEQUALNODE equal);</span><br><span class="line">//打印链表节点,需要用户提供一个打印函数</span><br><span class="line">void Print_LinkList(LinkList* list, PRINTLINKNODE print);</span><br><span class="line">//返回第一个节点</span><br><span class="line">void* Front_LinkList(LinkList* list);</span><br><span class="line"></span><br><span class="line">//释放链表内存</span><br><span class="line">void FreeSpace_LinkList(LinkList* list);</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><h3 id="linklistc"><a class="markdownIt-Anchor" href="#linklistc"></a> LinkList.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line"><span class="function">LinkList* <span class="title">Init_LinkList</span><span class="params">()</span> </span>&#123;</span><br><span class="line">LinkList* <span class="built_in">list</span> = (LinkList *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkList));</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//头结点不保存数据信息</span></span><br><span class="line"><span class="built_in">list</span>-&gt;head = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line"><span class="built_in">list</span>-&gt;head-&gt;data = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">list</span>-&gt;head-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//指定位置插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Insert_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos, <span class="keyword">void</span> *data)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span>-&gt;head == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//友好处理越界问题</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt; <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line">pos = <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建新的结点</span></span><br><span class="line">LinkNode* newNode = (LinkNode*)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(LinkNode));</span><br><span class="line">newNode-&gt;data = data;</span><br><span class="line">newNode-&gt;next = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找找结点</span></span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//新结点入链表</span></span><br><span class="line">newNode-&gt;next = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = newNode;</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size++;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定位置的值</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByPos_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= <span class="built_in">list</span>-&gt;size)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找删除结点的前一个结点</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pos; i++)</span><br><span class="line">&#123;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//缓存删除的结点</span></span><br><span class="line">LinkNode* pDel = pCurrent-&gt;next;</span><br><span class="line">pCurrent-&gt;next = pDel-&gt;next;</span><br><span class="line"><span class="comment">//释放删除结点的内存</span></span><br><span class="line"><span class="built_in">free</span>(pDel);</span><br><span class="line"></span><br><span class="line"><span class="built_in">list</span>-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得链表的长度</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, <span class="keyword">void</span>* pData, PEQUALNODE equal)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (pData == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//遍历查找</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (equal(pCurrent-&gt;data,pData) == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">pos++;</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印链表节点,需要用户提供一个打印函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>, PRINTLINKNODE print)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//辅助指针变量</span></span><br><span class="line">LinkNode* pCurrent = <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">print(pCurrent-&gt;data);</span><br><span class="line">pCurrent = pCurrent-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//返回第一个节点</span></span><br><span class="line"><span class="function"><span class="keyword">void</span>* <span class="title">Front_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">list</span>-&gt;head-&gt;next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_LinkList</span><span class="params">(LinkList* <span class="built_in">list</span>)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">list</span> == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">LinkNode *pCurrent = <span class="built_in">list</span>-&gt;head;</span><br><span class="line"><span class="keyword">while</span> (pCurrent != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">LinkNode *pNext = pCurrent-&gt;next;</span><br><span class="line"><span class="built_in">free</span>(pCurrent);</span><br><span class="line">pCurrent = pNext;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">list</span>-&gt;size = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">free</span>(<span class="built_in">list</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"LinkList.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">PERSON</span> &#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">20</span>];</span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">int</span> score;</span><br><span class="line">&#125;Person;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Equal</span><span class="params">(<span class="keyword">void</span>* pv1, <span class="keyword">void</span>* pv2)</span> </span>&#123;</span><br><span class="line">Person* p1 = (Person *)pv1;</span><br><span class="line">Person* p2 = (Person *)pv2;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">strcmp</span>(p1-&gt;name, p2-&gt;name) == <span class="number">0</span> &amp;&amp; p1-&gt;age == p2-&gt;age)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">void</span>* pv)</span> </span>&#123;</span><br><span class="line">Person *p1 = (Person *)pv;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s,%d,%d\n"</span>, p1-&gt;name, p1-&gt;age, p1-&gt;score);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Person p1 = &#123; <span class="string">"aaa"</span>,<span class="number">10</span>,<span class="number">100</span> &#125;;</span><br><span class="line">Person p2 = &#123; <span class="string">"bbb"</span>,<span class="number">11</span>,<span class="number">111</span> &#125;;</span><br><span class="line">Person p3 = &#123; <span class="string">"ccc"</span>,<span class="number">12</span>,<span class="number">20</span> &#125;;</span><br><span class="line">Person p4 = &#123; <span class="string">"ddd"</span>,<span class="number">13</span>,<span class="number">150</span> &#125;;</span><br><span class="line">Person p5 = &#123; <span class="string">"eee"</span>,<span class="number">14</span>,<span class="number">120</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化链表</span></span><br><span class="line">LinkList *<span class="built_in">list</span> = Init_LinkList();</span><br><span class="line"><span class="comment">//在链表指定位置添加结点</span></span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">0</span>,&amp;p1);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">1</span>,&amp;p2);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">2</span>,&amp;p3);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">3</span>,&amp;p4);</span><br><span class="line">Insert_LinkList(<span class="built_in">list</span>,<span class="number">4</span>,&amp;p5);</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印链表</span></span><br><span class="line">Print_LinkList(<span class="built_in">list</span>, print);</span><br><span class="line"><span class="comment">//查找结点位置</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d\n"</span>, Find_LinkList(<span class="built_in">list</span>, &amp;p4, Equal));</span><br><span class="line"><span class="comment">//返回链表第一个结点</span></span><br><span class="line">LinkNode *ret = (LinkNode*)Front_LinkList(<span class="built_in">list</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s,%d,%d\n"</span>,((Person*)(ret-&gt;data))-&gt;name, ((Person*)(ret-&gt;data))-&gt;age, ((Person*)(ret-&gt;data))-&gt;score);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取链表长度</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"size:%d \n"</span>, Size_LinkList(<span class="built_in">list</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//删除指定位置结点</span></span><br><span class="line">RemoveByPos_LinkList(<span class="built_in">list</span>, <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"---------------"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"size:%d \n"</span>, Size_LinkList(<span class="built_in">list</span>));</span><br><span class="line">Print_LinkList(<span class="built_in">list</span>, print);</span><br><span class="line"><span class="comment">//释放链表内存</span></span><br><span class="line">FreeSpace_LinkList(<span class="built_in">list</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;链表是由一系列的结点组成，链表在内存中是非连续的，每一个结点包含两个域，一个保存数据域，一个保存结点关系的指针域。&lt;/p&gt;
&lt;h3 id=&quot;链表节点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#链表节点&quot;&gt;&lt;/a&gt; 链表节点&lt;/h3&gt;
&lt;p&gt;结
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>动态数组</title>
    <link href="https://xiaowuyoucy.github.io/2021/12/29/sf001%E5%8A%A8%E6%80%81%E6%95%B0%E7%BB%84/"/>
    <id>https://xiaowuyoucy.github.io/2021/12/29/sf001动态数组/</id>
    <published>2021-12-29T09:12:11.000Z</published>
    <updated>2021-12-29T14:18:59.369Z</updated>
    
    <content type="html"><![CDATA[<p><code>线性表的顺序存储:用一块连续的内存空间</code></p><p>插入新元素,空间不足</p><p>申请更大的内存空间,</p><p>旧的空间数据拷贝到新空间</p><p>释放旧空间的内存</p><p>新元素插入到新空间</p><h3 id="构成元素"><a class="markdownIt-Anchor" href="#构成元素"></a> 构成元素:</h3><p><code>容量，元素个数，int指针</code></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DYNAMICARRAY</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> * pAddr;</span><br><span class="line"><span class="keyword">int</span> size;<span class="comment">//元素个数</span></span><br><span class="line"><span class="keyword">int</span> capacity;<span class="comment">//容量</span></span><br><span class="line">&#125;Dynamic_Array;</span><br></pre></td></tr></table></figure><h3 id="数组行为"><a class="markdownIt-Anchor" href="#数组行为"></a> 数组行为:</h3><p>初始化，插入，根据位置删除，根据值删除，查找，打印元素，释放动态数组的内存</p><p>清空数组，获得动态数组容量，获得动态数据当前元素个数，根据位置获得某个位置元素</p><p><br><br></p><p>1.初始化</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Dynamic_Array * <span class="title">Init_Array</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//分配内存</span></span><br><span class="line">Dynamic_Array * myArray = (Dynamic_Array *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Dynamic_Array));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myArray == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">myArray-&gt;size = <span class="number">0</span>;</span><br><span class="line">myArray-&gt;capacity = <span class="number">20</span>;</span><br><span class="line">    <span class="comment">//分配元素内存</span></span><br><span class="line">myArray-&gt;pAddr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(myArray-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span> (myArray-&gt;pAddr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> myArray;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.插入</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_Back_Array</span><span class="params">(Dynamic_Array* arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空间是否足够</span></span><br><span class="line"><span class="keyword">if</span> (arr-&gt;size == arr-&gt;capacity) &#123;</span><br><span class="line"><span class="comment">//第一步,申请一块更大的内存空间,新空间是旧空间的两倍</span></span><br><span class="line"><span class="keyword">int</span>* newSpace = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(arr-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步,拷贝数据到新空间</span></span><br><span class="line"><span class="built_in">memcpy</span>(newSpace, arr-&gt;pAddr, arr-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">//第三步,释放旧空间的内存</span></span><br><span class="line"><span class="built_in">free</span>(arr-&gt;pAddr);</span><br><span class="line"><span class="comment">//更新容量</span></span><br><span class="line">arr-&gt;capacity = arr-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">arr-&gt;pAddr = newSpace;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新元素</span></span><br><span class="line">arr-&gt;pAddr[arr-&gt;size] = value;</span><br><span class="line">arr-&gt;size++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.根据位置删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断位置是否有效</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= arr-&gt;size) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素,将后面一位往前面移动一位</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; arr-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr-&gt;pAddr[i] = arr-&gt;pAddr[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arr-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4.根据值删除</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByValue</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//查找元素位置</span></span><br><span class="line"><span class="keyword">int</span> pos = Find_Array(arr,value);</span><br><span class="line"><span class="comment">//判断位置是否有效</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= arr-&gt;size) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//根据位置删除元素</span></span><br><span class="line">Remove_Array(arr, pos);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>5.查找</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//查找,找到返回位置,找不到返回-1</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr-&gt;pAddr[i] == value)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>6.打印元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;size; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr-&gt;pAddr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>7.释放动态数组的内存</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//释放动态数组的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr-&gt;pAddr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arr-&gt;pAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>8.清空数组</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//清空数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>9.获得动态数组容量</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得动态数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Capacity_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr-&gt;capacity;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>10.获得动态数据当前元素个数</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得动态数据当前元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr-&gt;size;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>11.根据位置获得某个位置元素</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//根据位置获得某个位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">At_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr-&gt;pAddr[pos];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="dynamicarrayh"><a class="markdownIt-Anchor" href="#dynamicarrayh"></a> DynamicArray.h</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">ifndef</span> DYNAMIC_ARRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DYNAMIC_ARRAY_H</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//容量capacity</span></span><br><span class="line"><span class="comment">//元素个数size</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//动态数组结构体</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">DYNAMICARRAY</span> &#123;</span></span><br><span class="line"><span class="keyword">int</span> * pAddr;</span><br><span class="line"><span class="keyword">int</span> size;</span><br><span class="line"><span class="keyword">int</span> capacity;</span><br><span class="line">&#125;Dynamic_Array;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Dynamic_Array * <span class="title">Init_Array</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_Back_Array</span><span class="params">(Dynamic_Array* arr,<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_Array</span><span class="params">(Dynamic_Array * arr,<span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByValue</span><span class="params">(Dynamic_Array * arr,<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_Array</span><span class="params">(Dynamic_Array * arr,<span class="keyword">int</span> value)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Array</span><span class="params">(Dynamic_Array * arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放动态数组的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_Array</span><span class="params">(Dynamic_Array * arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_Array</span><span class="params">(Dynamic_Array * arr)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得动态数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Capacity_Array</span><span class="params">(Dynamic_Array * arr)</span></span>;</span><br><span class="line"><span class="comment">//获得动态数据当前元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_Array</span><span class="params">(Dynamic_Array * arr)</span></span>;</span><br><span class="line"><span class="comment">//根据位置获得某个位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">At_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> pos)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br></pre></td></tr></table></figure><h3 id="dynamicarrayc"><a class="markdownIt-Anchor" href="#dynamicarrayc"></a> DynamicArray.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"DynamicArray.h"</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="function">Dynamic_Array * <span class="title">Init_Array</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">Dynamic_Array * myArray = (Dynamic_Array *)<span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(Dynamic_Array));</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myArray == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">myArray-&gt;size = <span class="number">0</span>;</span><br><span class="line">myArray-&gt;capacity = <span class="number">20</span>;</span><br><span class="line">myArray-&gt;pAddr = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(myArray-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="keyword">if</span> (myArray-&gt;pAddr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> myArray;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Push_Back_Array</span><span class="params">(Dynamic_Array* arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断空间是否足够</span></span><br><span class="line"><span class="keyword">if</span> (arr-&gt;size == arr-&gt;capacity) &#123;</span><br><span class="line"><span class="comment">//第一步,申请一块更大的内存空间,新空间是旧空间的两倍</span></span><br><span class="line"><span class="keyword">int</span>* newSpace = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(arr-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>) * <span class="number">2</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二步,拷贝数据到新空间</span></span><br><span class="line"><span class="built_in">memcpy</span>(newSpace, arr-&gt;pAddr, arr-&gt;capacity * <span class="keyword">sizeof</span>(<span class="keyword">int</span>));</span><br><span class="line"><span class="comment">//第三步,释放旧空间的内存</span></span><br><span class="line"><span class="built_in">free</span>(arr-&gt;pAddr);</span><br><span class="line"><span class="comment">//更新容量</span></span><br><span class="line">arr-&gt;capacity = arr-&gt;capacity * <span class="number">2</span>;</span><br><span class="line">arr-&gt;pAddr = newSpace;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入新元素</span></span><br><span class="line">arr-&gt;pAddr[arr-&gt;size] = value;</span><br><span class="line">arr-&gt;size++;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Remove_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断位置是否有效</span></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= arr-&gt;size) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//删除元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = pos; i &lt; arr-&gt;size - <span class="number">1</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">arr-&gt;pAddr[i] = arr-&gt;pAddr[i + <span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">arr-&gt;size--;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">RemoveByValue</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = Find_Array(arr,value);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (pos &lt; <span class="number">0</span> || pos &gt;= arr-&gt;size) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line">Remove_Array(arr, pos);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//查找</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Find_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">int</span> pos = <span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;size; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr-&gt;pAddr[i] == value)</span><br><span class="line">&#123;</span><br><span class="line">pos = i;</span><br><span class="line"></span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> pos;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Print_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr-&gt;size; i++) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d "</span>, arr-&gt;pAddr[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//释放动态数组的内存</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">FreeSpace_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (arr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (arr-&gt;pAddr != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">free</span>(arr-&gt;pAddr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(arr);</span><br><span class="line">&#125;</span><br><span class="line">arr = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数组</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">Clear_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">arr-&gt;size = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获得动态数组容量</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Capacity_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> arr-&gt;capacity;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//获得动态数据当前元素个数</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Size_Array</span><span class="params">(Dynamic_Array * arr)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr-&gt;size;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//根据位置获得某个位置元素</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">At_Array</span><span class="params">(Dynamic_Array * arr, <span class="keyword">int</span> pos)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (arr == <span class="literal">NULL</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> arr-&gt;pAddr[pos];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="mainc"><a class="markdownIt-Anchor" href="#mainc"></a> main.c</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 动态数组.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。</span></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"DynamicArray.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line">Dynamic_Array *myArr = Init_Array();</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (myArr == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组容量:%d\n"</span>, Capacity_Array(myArr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组元素长度:%d\n"</span>, Size_Array(myArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//插入元素</span></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">30</span>; i++)</span><br><span class="line">&#123;</span><br><span class="line">Push_Back_Array(myArr, i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印</span></span><br><span class="line">Print_Array(myArr);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取容量</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组容量:%d\n"</span>, Capacity_Array(myArr));</span><br><span class="line"><span class="comment">//获取元素个数</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组元素长度:%d\n"</span>, Size_Array(myArr));</span><br><span class="line"></span><br><span class="line"><span class="comment">//查找元素</span></span><br><span class="line"><span class="keyword">int</span> pos = Find_Array(myArr, <span class="number">20</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"查找20的元素:pos=%d value=%d\n"</span>, pos, myArr-&gt;pAddr[pos]);</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据位置获得某个位置元素</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"元素:%d\n"</span>, At_Array(myArr,pos));</span><br><span class="line"></span><br><span class="line"><span class="comment">//根据位置删除</span></span><br><span class="line">Remove_Array(myArr, pos);</span><br><span class="line">Print_Array(myArr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//根据值删除</span></span><br><span class="line">RemoveByValue(myArr, <span class="number">23</span>);</span><br><span class="line">Print_Array(myArr);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//清空数组</span></span><br><span class="line">Clear_Array(myArr);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组容量:%d\n"</span>, Capacity_Array(myArr));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"数组元素长度:%d\n"</span>, Size_Array(myArr));</span><br><span class="line"><span class="comment">//释放数组</span></span><br><span class="line">FreeSpace_Array(myArr);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;线性表的顺序存储:用一块连续的内存空间&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;插入新元素,空间不足&lt;/p&gt;
&lt;p&gt;申请更大的内存空间,&lt;/p&gt;
&lt;p&gt;旧的空间数据拷贝到新空间&lt;/p&gt;
&lt;p&gt;释放旧空间的内存&lt;/p&gt;
&lt;p&gt;新元素插入到新空间&lt;/p&gt;
&lt;h3 id=&quot;构成元
      
    
    </summary>
    
      <category term="数据结构与算法" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95/"/>
    
    
  </entry>
  
  <entry>
    <title>linux1-4</title>
    <link href="https://xiaowuyoucy.github.io/2021/12/23/linux004-1-4/"/>
    <id>https://xiaowuyoucy.github.io/2021/12/23/linux004-1-4/</id>
    <published>2021-12-23T13:29:16.000Z</published>
    <updated>2022-01-05T05:41:31.416Z</updated>
    
    <content type="html"><![CDATA[<p>终端：(虚拟终端)  所有输入输出设备总称</p><p>shell： 命令解析器</p><p>bash： bore again shell 命令解析器。</p><h3 id="快捷键"><a class="markdownIt-Anchor" href="#快捷键"></a> 快捷键:</h3><p>命令和路径补齐: tab<br>主键盘快捷键:<br>1).历史命令切换:<br>历史命令:history<br>向上遍历: ctrl + p<br>向下遍历: ctrl + n</p><p>2).光标移动:<br>向左: ctrl + b<br>向右: ctrl + f<br>移动到头部: ctrl + a<br>移动到尾部: ctrl + e</p><p>3).删除字符:<br>删除光标后边的字符: ctrl + d<br>删除光标前面的字符: ctrl + h<br>删除光标前面的所有内容: ctrl + u</p><hr><p><br><br><br><br></p><p>/ 根目录<br>ls /</p><p>/bin  常用的命令</p><p>cd /bin  进入bin目录</p><p>/boot 开机启动项文件</p><p>/dev  设备文件</p><p>/etc 配置文件</p><p>/home 主目录,存放用户</p><p>/lib  动态链接库(共享库)</p><p>/lost-found  存放文件碎片</p><p>/media  挂载外设 U盘或光盘等等</p><p>/mnt  手动挂载外设到这个目录</p><p>/opt 第三方软件</p><p>/root 超级用户目录</p><p>/sbin 管理员使用的系统管理程序</p><p>/usr 用户软件资源目录(用户的软件或文件)</p><p>/usr/bin 系统用户的应用程序</p><p>/usr/sbin 超级用户使用的管理程序和系统守护程序</p><p>/usr/src 内核源码默认的放置目录</p><hr><br><p>ctrl + l 清屏,或clear</p><p>cd 进入指定目录</p><p>绝对路径 从/开始<br>相对路径<br>./当前路径<br>…/上一级路径<br>cd -  两个相邻目录切换<br>cd ~  切换到当前用户目录<br>cd  切换到用户目录</p><p>yxc19980620c@yc:~$</p><p>yxc19980620c  用户名<br>yc 主机名<br>~ 用户目录<br>$普通用户</p><p>超级用户root   切换到超级用户 sudo su  或 su root</p><hr><br><p>-rw-r–r--  1 root root   1937 9月   2  2020 ucontext.h</p><p>文件类型 所有者 所属组 其他人 硬连接数 文件所有者 文件所属组 文件大小 日期 文件名</p><p>文件类型<br>- 普通文件<br>d 目录<br>l 链接符号<br>b 块设备<br>c 字符设备<br>s socket文件<br>p 管道</p><p>ls和tree的使用:</p><p>ls -a 显示所有文件<br>ls -l 详细显示<br>ls -R 递归列出当前目录<br>ls -al<br>ls -h 人性化显示文件大小</p><hr><br><p>tree 目录</p><p>pwd 查看当前位置</p><hr><br><h3 id="文件目录和文件的创建"><a class="markdownIt-Anchor" href="#文件目录和文件的创建"></a> 文件目录和文件的创建</h3><p>mkdir 目录名<br>mkdir dri/dir/dir -p  递归创建目录<br>mkdir -p dir/dir/dir<br>touch 文件名<br>touch 文件名1 文件名2 … 文件名n</p><hr><br><h3 id="删除目录和文件"><a class="markdownIt-Anchor" href="#删除目录和文件"></a> 删除目录和文件</h3><p>​rmdir 空目录名<br>​rm 目录名 -rf (f代表不提示)<br>​rm 文件名 -f<br>​rm 目录名 -ri (i代表提示)</p><hr><br><h3 id="文件和目录的拷贝"><a class="markdownIt-Anchor" href="#文件和目录的拷贝"></a> 文件和目录的拷贝</h3><p>​cp 源文件 目标文件名<br>​cp h1 h2  将h1复制一份并命名为h2<br>​如果h2存在将原来内容覆盖<br>​cp 源目录 目标目录 -r<br>​如果目标目录不存在就将源码目拷贝一份并命名为目标目录<br>​如果目标目录存在,就将源目录拷贝一份,复制到目的目录里面</p><hr><br><h2 id="查看文件内容"><a class="markdownIt-Anchor" href="#查看文件内容"></a> 查看文件内容</h2><p>gedit 文件名</p><p>cat 文件名<br>cat 文件1 文件2 … 文件n   拼接查看文件<br>cat 文件1 | more</p><p>more 文件名<br>回车  一行<br>空格  一页<br>只能往后看<br>q 退出<br>ctrl + c 退出</p><p>less 文件名<br>回车  一行<br>空格  一页<br>可以往前后看<br>q 退出<br>ctrl + c 退出<br>ctrl + p 向前一行<br>ctrl + n 向后一行<br>ctrl +b 向前一页<br>ctrl + f 向后一下</p><p>head 文件名      显示文件前十行<br>head -5 文件名   显示文件前五行</p><p>tail 文件名 显示文件后十行<br>tail -5 文件名 显示文件后五行</p><hr><br><h3 id="mv命令"><a class="markdownIt-Anchor" href="#mv命令"></a> mv命令</h3><p>​文件改名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 源文件 改名后的文件</span><br></pre></td></tr></table></figure><p>移动</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mv 文件名 目录名    //将文件移动到目录中</span><br></pre></td></tr></table></figure><hr><br><h4 id="ln-创建软链接"><a class="markdownIt-Anchor" href="#ln-创建软链接"></a> ln 创建软链接</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s 源文件(绝对路径)  目标文件</span><br></pre></td></tr></table></figure><p>​创建软链接最好使用绝对路径<br>​</p><h4 id="ln-创建硬链接"><a class="markdownIt-Anchor" href="#ln-创建硬链接"></a> ln 创建硬链接</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln 源文件(绝对路径)  目标文件</span><br></pre></td></tr></table></figure><p>​只有文件才可以创建硬链接，不可以为目录创建硬链接<br>​硬链接是指向i（inode）节点的，在linux中所有文件都有一个i节点，i节点保存了一些文件信息<br>​linux通过i节点找到文件的位置</p><hr><br><h4 id="文件的检索"><a class="markdownIt-Anchor" href="#文件的检索"></a> 文件的检索</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">grep -r &quot;文件内容&quot; 路径    </span><br><span class="line">-r代表递归检索文件</span><br><span class="line">grep -r &quot;printf&quot; /</span><br><span class="line">从根目录开始递归查找文件包含&quot;printf&quot;内容的文件</span><br></pre></td></tr></table></figure><hr><br><h2 id="文件和目录属性命令"><a class="markdownIt-Anchor" href="#文件和目录属性命令"></a> 文件和目录属性命令</h2><h4 id="wc-获取文本文件的信息"><a class="markdownIt-Anchor" href="#wc-获取文本文件的信息"></a> wc 获取文本文件的信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yxsdc19c@yscc:/usr/include$ wc time.h</span><br><span class="line">  309  1515 10360 time.h</span><br></pre></td></tr></table></figure><p>​309代表行数 1515代表单词个数 10360代表字节数</p><hr><br><h4 id="od-查看二进制文件"><a class="markdownIt-Anchor" href="#od-查看二进制文件"></a> od 查看二进制文件</h4><p>od -t 文件名<br>-t 指定数据的显示格式<br>-tc ASCII字符<br>-tx 十六进制数<br>-td 有符号十进制数<br>-tu 无符号十进制数<br>-to 八进制数<br>-tf 浮点数</p><hr><br><h4 id="查看某个目录的大小du"><a class="markdownIt-Anchor" href="#查看某个目录的大小du"></a> 查看某个目录的大小du</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">du -h 目录</span><br></pre></td></tr></table></figure><hr><br><h4 id="查看磁盘的使用情况"><a class="markdownIt-Anchor" href="#查看磁盘的使用情况"></a> 查看磁盘的使用情况</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">df -h</span><br></pre></td></tr></table></figure><hr><br><h4 id="查看命令在哪个目录-which"><a class="markdownIt-Anchor" href="#查看命令在哪个目录-which"></a> 查看命令在哪个目录 which</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">which 命令名</span><br></pre></td></tr></table></figure><p>​内建命令是查不到的，例如cd，只能查外建命令</p><p>​</p><hr><br><h4 id="查看当前用户-whoami"><a class="markdownIt-Anchor" href="#查看当前用户-whoami"></a> 查看当前用户 whoami</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br></pre></td></tr></table></figure><hr><br><h2 id="修改文件权限"><a class="markdownIt-Anchor" href="#修改文件权限"></a> 修改文件权限</h2><h4 id="文字设定法-chmod-who-mode"><a class="markdownIt-Anchor" href="#文字设定法-chmod-who-mode"></a> 文字设定法： chmod [who] [+|-|=] [mode]</h4><p>​who:<br>​    文件所有者： u<br>​    文件所属组： g<br>​    其他人：        o<br>​    所有的人：    a<br>​</p><p>+：添加权限<br>-：减少权限<br>=：覆盖原来的权限</p><p>mode：<br>r：读   w：写   x：执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">chmod go-rw 文件名</span><br><span class="line">chmod go+rw 文件名</span><br><span class="line">chmod go=w 文件名</span><br></pre></td></tr></table></figure><h4 id="数字设定法"><a class="markdownIt-Anchor" href="#数字设定法"></a> 数字设定法</h4><p>​-：没有权限<br>​r：4<br>​w：2<br>​x：1</p><p>765<br>7  –  rwx  --文件所有者<br>6  –  rw  --文件所属组<br>5  –  rx  --其他人</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod 765 文件名</span><br><span class="line">chmod -001 文件名    //减去其他人的执行权限</span><br></pre></td></tr></table></figure><hr><br><h2 id="修改文件所有者和所属组"><a class="markdownIt-Anchor" href="#修改文件所有者和所属组"></a> 修改文件所有者和所属组</h2><p>​</p><h4 id="修改文件所有者"><a class="markdownIt-Anchor" href="#修改文件所有者"></a> 修改文件所有者</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chown 用户名 文件名//改变所有者</span><br><span class="line">chown 用户名:所属组 文件名      //同时改变所有者和所属组</span><br></pre></td></tr></table></figure><h4 id="修改文件所属组"><a class="markdownIt-Anchor" href="#修改文件所属组"></a> 修改文件所属组</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chgrp 所属组 文件名</span><br></pre></td></tr></table></figure><p>目录必须拥有执行权限<br>如果目录没有执行权限x，会提示进不去的</p><hr><br><h2 id="文件的查找"><a class="markdownIt-Anchor" href="#文件的查找"></a> 文件的查找</h2><h4 id="按文件属性查找"><a class="markdownIt-Anchor" href="#按文件属性查找"></a> 按文件属性查找：</h4><p>​文件名：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 查找的目录 -name “文件的名字”</span><br></pre></td></tr></table></figure><p>通配符：*代表所有字符   ？ 代表一个字符</p><h4 id="文件大小"><a class="markdownIt-Anchor" href="#文件大小"></a> 文件大小：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find 查找的目录  / -size +10k</span><br></pre></td></tr></table></figure><p>· find 查找的目录 / -size -10k<br>· find 查找的目录 / -size -10M<br>find 查找的目录 / -size +10k -size -10M  //表示大于10KB小于10MB的文件<br>+代表大于       - 代表小于<br>数字后面的字母区分大小写</p><h4 id="文件类型"><a class="markdownIt-Anchor" href="#文件类型"></a> 文件类型：</h4><p>find 查找的目录 -type 文件类型</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">find  / -type s</span><br><span class="line">find  / -type s</span><br></pre></td></tr></table></figure><hr><br><h4 id="按文件内容查找"><a class="markdownIt-Anchor" href="#按文件内容查找"></a> 按文件内容查找</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -r “查找内容” 查找路径</span><br></pre></td></tr></table></figure><p>​-r  代表递归查找</p><hr><br><h4 id="创建管道文件"><a class="markdownIt-Anchor" href="#创建管道文件"></a> 创建管道文件：</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkfifo 文件名</span><br></pre></td></tr></table></figure><hr><br><h2 id="软件的安装和卸载"><a class="markdownIt-Anchor" href="#软件的安装和卸载"></a> 软件的安装和卸载</h2><h4 id="在线安装"><a class="markdownIt-Anchor" href="#在线安装"></a> 在线安装</h4><p>​    apt-get<br>​安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install 软件名</span><br></pre></td></tr></table></figure><p>​卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove  软件名</span><br></pre></td></tr></table></figure><p>​更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update  更新软件列表</span><br></pre></td></tr></table></figure><p>​软件列表存放的是软件名字和下载地址</p><p>清理所有软件安装包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get clean</span><br></pre></td></tr></table></figure><p>实际清理的是: /var/cache/apt/archives目录下的.deb文件<br>aptitude<br>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude install 软件名</span><br></pre></td></tr></table></figure><p>重新安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude reinstall 软件名</span><br></pre></td></tr></table></figure><p>更新：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br></pre></td></tr></table></figure><p>移除：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude rermove 软件名</span><br></pre></td></tr></table></figure><p>显示状态：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude show 软件名</span><br></pre></td></tr></table></figure><h3 id="deb包安装"><a class="markdownIt-Anchor" href="#deb包安装"></a> deb包安装</h3><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -i xxx.deb</span><br></pre></td></tr></table></figure><p>卸载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dpkg -r xxx</span><br></pre></td></tr></table></figure><h3 id="源码安装"><a class="markdownIt-Anchor" href="#源码安装"></a> 源码安装</h3><p>1.解压缩源代码包<br>2.进入到安装目录<br>3. 检测文件是否缺失,创建Makefile,检测编译环境: ./configure<br>4.编译源码 生成库和可以执行程序:make<br>5.把库和可执行程序,安装到系统目录下: sudo make install<br>6.删除和卸载软件:sudo make distclean<br>7.上述安装步骤并不是绝对的,应该先查看附带的README文件</p><hr><br><h2 id="u盘挂载和卸载"><a class="markdownIt-Anchor" href="#u盘挂载和卸载"></a> U盘挂载和卸载</h2><p>卸载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">umount 设备文件名</span><br></pre></td></tr></table></figure><p>挂载:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mount 设备文件名 挂载路径</span><br></pre></td></tr></table></figure><p>自己在U盘目录里面是无法卸载的 ，就相当于不能在自己房间里才房间一样<br>将外设挂载到非mnt目录时,会临时覆盖原来内容,卸载之后会恢复</p><h3 id="lsof命令"><a class="markdownIt-Anchor" href="#lsof命令"></a> lsof命令</h3><p>​用于查看你进程开打的文件，打开文件的进程，进程打开的端口(TCP、UDP)。<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lsof 参数 文件</span><br><span class="line">lsof /mnt/</span><br></pre></td></tr></table></figure><p>​-a 列出打开文件存在的进程</p><p>-c&lt;进程名&gt; 列出指定进程所打开的文件</p><p>-g  列出GID号进程详情</p><p>-d&lt;文件号&gt; 列出占用该文件号的进程</p><p>+d&lt;目录&gt;  列出目录下被打开的文件</p><p>+D&lt;目录&gt;  递归列出目录下被打开的文件</p><p>-n&lt;目录&gt;  列出使用NFS的文件</p><p>-i&lt;条件&gt;  列出符合条件的进程。（4、6、协议、:端口、 @ip ）</p><p>-p&lt;进程号&gt; 列出指定进程号所打开的文件</p><p>-u  列出UID号进程详情</p><p>-h 显示帮助信息</p><p>-v 显示版本信息</p><hr><br><h3 id="gzip"><a class="markdownIt-Anchor" href="#gzip"></a> gzip</h3><p>压缩出来的文件以.gz结尾<br>不保留源文件   不能对目录进行打包压缩</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gzip 文件名</span><br><span class="line">gzip *.txt</span><br></pre></td></tr></table></figure><p>​</p><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gunzip 文件名</span><br><span class="line">gunzip *.gz</span><br></pre></td></tr></table></figure><hr><br><h3 id="bzip2-bz2"><a class="markdownIt-Anchor" href="#bzip2-bz2"></a> bzip2 — .bz2</h3><p>​  -k 来保留源文件  不能对目录进行打包压缩<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bzip2 文件名</span><br><span class="line">bzip2 *.txt</span><br><span class="line">bzip2 -k  *.txt</span><br></pre></td></tr></table></figure><hr><br><h3 id="tar"><a class="markdownIt-Anchor" href="#tar"></a> tar</h3><p>不使用z/j参数，该命令只能对文件或目录打包<br>c–创建—压缩<br>x–释放—解压缩<br>v–显示提示信息<br>f–指定压缩文件的名字</p><p>z–使用gzip的方式压缩文件<br>j–使用bzip2的方式压缩文件</p><p>压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tar -zcvf 生成的压缩包的名字（xxx.tar.gz） 要压缩的文件或目录</span><br><span class="line">tar -jcvf  生成的压缩包的名字（xxx.tar.bz2）要压缩的文件或目录</span><br></pre></td></tr></table></figure><p>解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf 压缩包名字  //解压到当前目录</span><br><span class="line">tar -jxvf 压缩包名字  //解压到当前目录</span><br><span class="line">tar -zxvf 压缩包名字 -C（大写） 指定的目录</span><br><span class="line">tar -zxvf xxx.tar.gz -C ./test</span><br><span class="line">tar -jxvf xxx.tar.gz -C ./test</span><br></pre></td></tr></table></figure><hr><br><h3 id="rar"><a class="markdownIt-Anchor" href="#rar"></a> rar</h3><p>​压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">rar a 压缩包的文件名 源文件</span><br><span class="line">rar a bird *.c</span><br></pre></td></tr></table></figure><p>​解压：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">rar x 压缩包名 （解压到当前文件夹）</span><br><span class="line">rar x 压缩包名  解压的路径</span><br><span class="line">rar x bird.rar</span><br><span class="line">rar x bird.rar ./</span><br></pre></td></tr></table></figure><hr><br><h3 id="zip"><a class="markdownIt-Anchor" href="#zip"></a> zip</h3><p>​参数： 压缩目录要加参数 -r<br>​压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">zip 压缩包的名字 压缩的文件或目录</span><br><span class="line">zip man *.txt</span><br></pre></td></tr></table></figure><p>​解压缩：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">unzip 压缩包的名字</span><br><span class="line">unzip 压缩包的名字 -d 解压目录</span><br></pre></td></tr></table></figure><hr><br><h3 id="ps-查看进程信息"><a class="markdownIt-Anchor" href="#ps-查看进程信息"></a> ps 查看进程信息</h3><p>​参数：<br>​  a   显示现行终端机下的所有程序，包括其他用户的程序。<br>​  u代表 以用户为主的格式来显示程序状况。<br>​  x 代表没有终端的程序</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux</span><br></pre></td></tr></table></figure><h3 id="管道"><a class="markdownIt-Anchor" href="#管道"></a> | 管道</h3><p>​将A输出作为B输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps aux | grep bash  //将ps输出的结果作为grep的输入，然后将结果显示回终端</span><br></pre></td></tr></table></figure><h3 id="kill"><a class="markdownIt-Anchor" href="#kill"></a> kill</h3><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">kill -l   //查看信号</span><br><span class="line">kill -信号(可以只写数字) PID</span><br><span class="line">kill -9 13442</span><br><span class="line">kill -SIGKILL 123432</span><br></pre></td></tr></table></figure><hr><br><h3 id="env和top"><a class="markdownIt-Anchor" href="#env和top"></a> env和top</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">env查看环境变量</span><br><span class="line">top 打开任务管理器</span><br></pre></td></tr></table></figure><h3 id="linux-环境变量"><a class="markdownIt-Anchor" href="#linux-环境变量"></a> linux 环境变量：</h3><p>​变量=值<br>​多个值用 :  隔开<br>​PATH=A:B:C:D</p><hr><br><h3 id="ifconfig查看ip"><a class="markdownIt-Anchor" href="#ifconfig查看ip"></a> ifconfig查看ip</h3><p>ens33: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500<br>inet 192.168.44.135  netmask 255.255.255.0  broadcast 192.168.44.255<br>inet6 fe80::7438:27c1:6044:963d  prefixlen 64  scopeid 0x20&lt;link&gt;<br>ether 00:0c:29:f2:c7:2a  txqueuelen 1000  (以太网)<br>RX packets 28453  bytes 18295064 (18.2 MB)<br>RX errors 0  dropped 0  overruns 0  frame 0<br>TX packets 10656  bytes 815687 (815.6 KB)<br>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536<br>inet 127.0.0.1  netmask 255.0.0.0<br>inet6 ::1  prefixlen 128  scopeid 0x10&lt;host&gt;<br>loop  txqueuelen 1000  (本地环回)<br>RX packets 945  bytes 84825 (84.8 KB)<br>RX errors 0  dropped 0  overruns 0  frame 0<br>TX packets 945  bytes 84825 (84.8 KB)<br>TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0</p><p>ens33: 代表设备名      broadcast 广播地址inet： ip地址</p><hr><br><h3 id="ping-命令"><a class="markdownIt-Anchor" href="#ping-命令"></a> ping 命令</h3><p>​检查网络是否通<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ping ip地址</span><br><span class="line">ping 192.168.1.123</span><br><span class="line">ping ip地址 -c 次数//ping多少次</span><br><span class="line">ping ip地址 -i 秒数//每隔多少秒返回一次结果</span><br><span class="line">ping 域名</span><br></pre></td></tr></table></figure><hr><br><p>nslookup 把域名转换为ip</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup 域名</span><br></pre></td></tr></table></figure><hr><br><h3 id="用户管理"><a class="markdownIt-Anchor" href="#用户管理"></a> 用户管理:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">adduser 用户名</span><br></pre></td></tr></table></figure><p>​创建一个用户<br>​需要管理员权限<br>​用户名不能有大写字母</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo adduser abc</span><br></pre></td></tr></table></figure><h3 id="su"><a class="markdownIt-Anchor" href="#su"></a> su</h3><p>​切换用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su 用户名</span><br></pre></td></tr></table></figure><h3 id="exit"><a class="markdownIt-Anchor" href="#exit"></a> exit</h3><p>​退出当前用户</p><h3 id="useradd"><a class="markdownIt-Anchor" href="#useradd"></a> useradd</h3><p>​创建一个用户<br>​用户名可以大写<br>​需要管理员权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">useradd -s /bin/bash -g xiaoai -d /home/xiaoai -m xiaoai</span><br></pre></td></tr></table></figure><p>​-s 表示使用什么命令解析器<br>​-g 用户组<br>​-d 用户家目录<br>​-m 如果用户家目录不存在,则创建一个目录</p><h3 id="groupadd"><a class="markdownIt-Anchor" href="#groupadd"></a> groupadd</h3><p>​添加一个用户组<br>​需要管理员权限<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupadd 用户组名</span><br></pre></td></tr></table></figure><p>​</p><h3 id="passwd"><a class="markdownIt-Anchor" href="#passwd"></a> passwd</h3><p>​修改用户密码<br>​需要管理员权限</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">passwd 用户名</span><br></pre></td></tr></table></figure><p>​passwd 不加sudo 不输入用户名表示修改当前用户密码<br>​sudo passwd 表示修改root用户密码</p><h3 id="deluser"><a class="markdownIt-Anchor" href="#deluser"></a> deluser</h3><p>​删除用户<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">deluser 用户名</span><br></pre></td></tr></table></figure><p>​需要手动删除家目录</p><h3 id="userdel"><a class="markdownIt-Anchor" href="#userdel"></a> userdel</h3><p>​删除用户<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">userdel -r 用户名</span><br></pre></td></tr></table></figure><p>​不需要手动删除家目录</p><hr><br><p>查看当前系统下有哪些用户</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/passwd</span><br><span class="line">yxc19980620c:x:1000:0:yc:/home/yxc19980620c:/bin/bash</span><br></pre></td></tr></table></figure><p>​/bin/bash 代表使用什么命令解析器</p><hr><br><h3 id="ftp服务器配置-vsftpd"><a class="markdownIt-Anchor" href="#ftp服务器配置-vsftpd"></a> ftp服务器配置  vsftpd</h3><p>作用:文件上传和下载</p><h4 id="ftp服务器配置"><a class="markdownIt-Anchor" href="#ftp服务器配置"></a> ftp服务器配置</h4><p>​配置文件在/etc/vsftpd.conf</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">anonymous_enable=YES  允许匿名用户登录</span><br><span class="line"></span><br><span class="line">write_enable=YES   实名登录用户拥有写的权限</span><br><span class="line"></span><br><span class="line">local_umask=022 设置本地掩码为022</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">anon_mkdir_write_enable=YES  匿名用户可以在ftp服务器上创建目录</span><br><span class="line"></span><br><span class="line">listen_ipv6=NO</span><br><span class="line"></span><br><span class="line">listen=YES</span><br></pre></td></tr></table></figure><h4 id="重启ftp服务"><a class="markdownIt-Anchor" href="#重启ftp服务"></a> 重启ftp服务</h4><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd restart</span><br></pre></td></tr></table></figure><h4 id="ftp服务"><a class="markdownIt-Anchor" href="#ftp服务"></a> ftp服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">sudo service vsftpd start 启动ftp</span><br><span class="line"></span><br><span class="line">sudo service vsftpd stop关闭ftp服务</span><br><span class="line"></span><br><span class="line">sudo service vsftpd restart重启ftp服务。</span><br><span class="line"></span><br><span class="line">service vsftpd status查看状态</span><br></pre></td></tr></table></figure><h4 id="实名登录ftp"><a class="markdownIt-Anchor" href="#实名登录ftp"></a> 实名登录ftp</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ftp ip地址</span><br><span class="line">输入用户</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure><p>​</p><p>退出</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">bye </span><br><span class="line">quit</span><br><span class="line">exit</span><br></pre></td></tr></table></figure><h4 id="文件上传和下载"><a class="markdownIt-Anchor" href="#文件上传和下载"></a> 文件上传和下载</h4><p>上传<br>在什么目录登录的,文件默认从那里找</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">put 文件名</span><br></pre></td></tr></table></figure><p>下载</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">get 文件名</span><br></pre></td></tr></table></figure><p>不允许操作目录,可以打包处理</p><h4 id="匿名登录服务器"><a class="markdownIt-Anchor" href="#匿名登录服务器"></a> 匿名登录服务器</h4><p>用户名 anonymous</p><p>密码是空<br>不允许匿名用户在任意目录直接切换<br>只能在一个指定的目录范围内工作<br>需要在ftp服务器上创建一个匿名用户的目录 --匿名用户的根目录</p><p>​<br><br></p><p>配置文件在/etc/vsftpd.conf<br>在配置文件添加  anon_root=/home/yxc19980620c/myFtp/<br>匿名登录默认路径是在/srv/ftp<br>在配置文件/etc/passwd可以查看并修改</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp:x :123:127:ftp daemon,,,:/srv/ftp:/usr/sbin/nologin</span><br></pre></td></tr></table></figure><hr><br><h3 id="lftp客户端"><a class="markdownIt-Anchor" href="#lftp客户端"></a> lftp客户端</h3><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install lftp   //下载</span><br></pre></td></tr></table></figure><p>​</p><p>登录服务器:<br>匿名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lftp 服务器ip</span><br></pre></td></tr></table></figure><p>​输入login<br>​实名:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lftp 用户名@ip地址</span><br><span class="line">输入服务器密码</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">lpwd 获取本地当前目录地址</span><br><span class="line">pwd  获取服务器当前目录地址</span><br><span class="line">lcd  目录  //切换本地目录</span><br><span class="line">cd   目录  //切换服务器目录</span><br><span class="line"></span><br><span class="line">put 文件名//上传文件</span><br><span class="line">mput 文件1 文件2  文件3//上传多个文件</span><br><span class="line">get 文件名//下载文件</span><br><span class="line">mget 文件1 文件2  文件3//下载多个文件</span><br><span class="line">mirror 目录名//下载整个目录及其子目录</span><br><span class="line">mirror -R 目录名//上传整个目录及其子目录</span><br></pre></td></tr></table></figure><hr><br><h3 id="nfs服务器"><a class="markdownIt-Anchor" href="#nfs服务器"></a> nfs服务器</h3><p>​安装<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install nfs-kernel-server</span><br></pre></td></tr></table></figure><p>​</p><p>功能：创建一个共享目录</p><p>​</p><p>1).先创建一个目录  mkdir 目录名</p><p>2).修改配置文件<br>/etc/exports<br>添加这一行/home/用户名/共享目录 *（访问权限，sync）<br>/home/qwe/aa *（rw，sync）<br>*代表ip地址访问权限有ro（只读），rw（可读可写），sync（代表实时更新）</p><p>ro只读<br>rw读写<br>root_squash当NFS客户端以root管理员访问时，映射为NFS服务器的匿名用户<br>no_root_squash当NFS客户端以root管理员访问时，映射为NFS服务器的root管理员<br>all_squash无论NFS客户端使用什么账户访问，均映射为NFS服务器的匿名用户<br>sync同时将数据写入到内存与硬盘中，保证不丢失数据<br>async优先将数据保存到内存，然后再写入硬盘；这样效率更高，但可能会丢失数据</p><h4 id="重启服务"><a class="markdownIt-Anchor" href="#重启服务"></a> 重启服务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service nfs-kernel-server restart</span><br></pre></td></tr></table></figure><h4 id="客户端"><a class="markdownIt-Anchor" href="#客户端"></a> 客户端：</h4><p>​挂载服务器共享目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mount 服务器ip:共享目录   /mnt</span><br><span class="line">mount 192.168.1.123:/home/xiaoh/nfs /mnt</span><br></pre></td></tr></table></figure><h3 id="aptitude-查看软件是否安装"><a class="markdownIt-Anchor" href="#aptitude-查看软件是否安装"></a> aptitude 查看软件是否安装</h3><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">安装 ：sudo apt-get install aptitude</span><br><span class="line">sudo aptitude show 软件名</span><br></pre></td></tr></table></figure><hr><br><h3 id="ssh-远程登录到服务器"><a class="markdownIt-Anchor" href="#ssh-远程登录到服务器"></a> ssh 远程登录到服务器</h3><p>​安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install openssh-server</span><br></pre></td></tr></table></figure><p>​查看是否安装ssh</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo aptitude show openssh-server</span><br></pre></td></tr></table></figure><p>配置文件：/etc/ssh/ssh_config</p><h4 id="远程登录"><a class="markdownIt-Anchor" href="#远程登录"></a> 远程登录：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh 用户名@ip</span><br><span class="line">输入yes或no</span><br><span class="line">输入密码</span><br></pre></td></tr></table></figure><h4 id="退出登录"><a class="markdownIt-Anchor" href="#退出登录"></a> 退出登录：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logout</span><br></pre></td></tr></table></figure><h4 id="scp命令"><a class="markdownIt-Anchor" href="#scp命令"></a> scp命令</h4><p>​超级复制<br>​使用该命令的前提条件是目标主机已经成功安装openssh-server<br>​</p><p>使用格式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r 目标用户名@目标主机ip地址:/目标文件的绝对路径 /保存到本机的绝对（相对）路径</span><br></pre></td></tr></table></figure><p>​拷贝目录要加-r，拷贝文件不需要加-r<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp -r yxc19980620c@192.168.44.135:/home/yxc19980620c/test2 ./test3</span><br></pre></td></tr></table></figure><hr><br><p>终端翻页<br>Shift + PageDown          下翻页</p><p>清屏：<br>clear<br>Ctrl+l</p><p>创建终端：<br>Ctrl+Alt + T（Ubuntu）<br>Ctrl+Shift +T（添加新标签页）</p><hr><br><h3 id="看手册"><a class="markdownIt-Anchor" href="#看手册"></a> 看手册：</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">man [编号] 命令名</span><br></pre></td></tr></table></figure><p>​编号：<br>​1 普通用户可以执行的系统命令和可执行文件的帮助<br>​2 内核可以调用的函数和工具的帮助<br>​3 C语言函数的帮助<br>​4 设备和特殊文件的帮助<br>​5 配置文件的帮助<br>​6 游戏的帮助（个人版的Linux中是有游戏的）<br>​7 杂项的帮助<br>​8 超级用户可以执行的系统命令的帮助<br>​9 内核的帮助</p><hr><br><h3 id="设置或查看别名"><a class="markdownIt-Anchor" href="#设置或查看别名"></a> 设置或查看别名</h3><p>​查看<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias 命令名</span><br><span class="line">alias ls</span><br></pre></td></tr></table></figure><p>​设置<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alias 新命令名=&apos;命令操作&apos;</span><br><span class="line">alias pag=&apos;ps aux | grep&apos;</span><br></pre></td></tr></table></figure><p>​需要长久有效需要去设置配置文件：.bashrc</p><hr><br><p>echo<br>在显示器上显示数据<br>普通数据: echo 字符串<br>显示环境变量:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">echo $变量名</span><br><span class="line">echo $PATH</span><br></pre></td></tr></table></figure><p>​显示上一次程序退出值:<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo $?</span><br></pre></td></tr></table></figure><p>​$代表取值</p><hr><br><p>poweroff 关机</p><p>reboot 重启</p><p>shutdown<br>-a 指定权限<br>-r 重启计算器（和reboot）命令一样<br>-k 模拟关机（只向用户发出警告信息，但不关机）<br>-h 关闭计算机并关闭电源（常用）<br>-n 不调用init进程关闭计算机（不推荐）<br>-c 取消正在执行的关机命令<br>-f 重启计算机，但不进行磁盘检测<br>-F 重启计算机，进行磁盘检测<br>-t(秒) 指定发出警告信息与删除信息时要延迟的秒数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">shutdown -r now //加now则是立即重启</span><br><span class="line">shutdown -h +1 &quot;1 minute after shutdown&quot;</span><br><span class="line">//设置1分钟以后关闭计算机，并在SSH中提示“1 minute after shutdown”</span><br></pre></td></tr></table></figure><p>shutdown -c //取消关机<br>shutdown now//切换至单人操作模式</p><hr><br><h3 id="vi-vim"><a class="markdownIt-Anchor" href="#vi-vim"></a> vi----vim</h3><p>​vim是从vi发展过来的一款文本编辑器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi a.txt</span><br></pre></td></tr></table></figure><p>前提安装了vim软件</p><p>工作模式：<br>命令模式：-- 打开文件之后，默认就是命令模式（ESC键）<br>编辑模式：–需要输入一些命令，切换到编辑模式(iaos，IAOS)，按esc键回到命令模式<br>末行模式：-- 在末行模式可以输入一些命令（ : 键 ） 按两次esc键切回命令模式<br>编辑模式不能直接切回到末行模式，需要先切换到命令模式，然后再切回到末行模式</p><h2 id="命令模式下的操作"><a class="markdownIt-Anchor" href="#命令模式下的操作"></a> 命令模式下的操作：</h2><h4 id="光标移动"><a class="markdownIt-Anchor" href="#光标移动"></a> 光标移动：</h4><p>​HJKL<br>​前下上后<br>​行首：0<br>​行尾：$<br>​文件开始位置：gg<br>​文件末尾：G<br>​行跳转：300g</p><h4 id="删除操作"><a class="markdownIt-Anchor" href="#删除操作"></a> 删除操作：</h4><p>​删除光标后边的字符：x<br>​删除光标前的字符：X<br>​删除单词：dw（光标移动到单词开始位置，否则只能删除一部分）<br>​删除光标到行首的字符串：d0<br>​删除光标到行尾字符串：D（d$）<br>​删除光标当前行：dd<br>​删除光标多行：ndd（n–自然数）</p><h4 id="撤销操作"><a class="markdownIt-Anchor" href="#撤销操作"></a> 撤销操作：</h4><p>​撤销：u<br>​反撤销：ctrl+r</p><p>​</p><h4 id="复制粘贴"><a class="markdownIt-Anchor" href="#复制粘贴"></a> 复制粘贴:</h4><p>​复制：yy<br>​复制多行：nyy<br>​</p><p>粘贴：p（光标所在行的下一行）<br>粘贴：P（大写，光标所在行）</p><p>​</p><p>在vim中剪切等于删除<br>剪切：dd（剪切一行）<br>剪切多行：ndd（n–自然数）</p><h2 id="可视模式"><a class="markdownIt-Anchor" href="#可视模式"></a> 可视模式：</h2><p>​切换到可视模式：v<br>​选择内容：h  j  k  l<br>​复制：y   删除当前行：d<br>​粘贴：小写p（粘贴到光标下一个字符）或大写P（粘贴到光标上一个字符）<br>​<br>查找操作：<br>​/查找内容    往下找<br>​？查找内容 往上找</p><p>把光标移动到查找的单词上，按#</p><p>​遍历快捷键：n或N，往下找n是下一个，N是是一个，往上找n是上一个，N是下一个，取决于查找方向</p><p>​</p><p>r：替换当前字符 按下r之后输入一个字符，只能替换一个字符</p><p>​</p><h4 id="缩进"><a class="markdownIt-Anchor" href="#缩进"></a> 缩进：</h4><p>​向右：&gt;&gt;<br>​向左：&lt;&lt;<br>​<br>查看帮助文档，首先光标移动到关键字或函数那里，然后按下数字，例如3，在按shitf+k</p><h2 id="文本模式下的操作"><a class="markdownIt-Anchor" href="#文本模式下的操作"></a> 文本模式下的操作：</h2><p>​</p><h4 id="切换到文本模式"><a class="markdownIt-Anchor" href="#切换到文本模式"></a> 切换到文本模式：</h4><p>​a – 在光标所在位置的后边插入<br>​A – 在当前行的尾部插入<br>​</p><p>i – 在光标所在位置的前边插入<br>I – 在光标所在行的行首插入</p><p>o – 在光标所在行的下边开辟一个新的行<br>O – 在光标所在行的上边开辟一个新的行</p><p>s – 删除光标后边的字符，然后插入<br>S – 删除光标所在行，然后插入</p><h4 id="末行模式下的操作"><a class="markdownIt-Anchor" href="#末行模式下的操作"></a> 末行模式下的操作：</h4><p>​替换：先查找,然后光标移动到要替换的行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">:s/tom/jack 代表用jack替换当前行的第一个tom</span><br><span class="line">s/tom/jack/g 代表用jack替换当前行的所有tom</span><br><span class="line">:%s/tom/jack代表用jack替换当前文本所有行的第一个tom</span><br><span class="line">:%s/tom/jack/g代表用jack替换当前文本的所有tom</span><br><span class="line">:20,25s/tom/jack/g 代表用jack替换20行到25行的tom</span><br><span class="line">:20,25s/tom/jack/ 代表用jack替换20行到25行的第一个tom</span><br></pre></td></tr></table></figure><h4 id="保存退出"><a class="markdownIt-Anchor" href="#保存退出"></a> 保存退出:</h4><p>​:q退出<br>​:q!退出不保存<br>​:w保存<br>​:wq保存退出<br>​:x保存退出</p><p>命令模式下的保存退出:ZZ</p><p>命令模式分屏操作:<br>:sp 将屏幕分成两部分 水平<br>：vsp将屏幕分成两部分 垂直<br>:sp或vsp +文件名,水平或垂直拆分窗口显示两个不同的文件</p><p>:wqall保存并退出所有屏幕<br>:wall 保存所有<br>:wq保存并退出光标所在的屏幕<br>:q  退出当前屏幕<br>ctrl+ww 切换屏幕</p><p>vim打造IDE<br>系统级配置文件目录:/etc/vim/vimrc<br>用户级配置文件目录: ~/.vim/vimrc</p><hr><br><h3 id="编译过程"><a class="markdownIt-Anchor" href="#编译过程"></a> 编译过程：</h3><p>源文件----&gt;预处理—&gt;编译—&gt;汇编----&gt;链接----&gt;可执行文件</p><p>预处理器(.i)—&gt;编译器(.s)----&gt;汇编器(.o)----&gt;链接器</p><p>hello.c—&gt;hello.i-----&gt;hello.s-----hello.o----a.out</p><p>​</p><p>预处理器(cpp):头文件展开,宏替换,注释去掉</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -E hello.c -o hello.i</span><br></pre></td></tr></table></figure><p>编译器(gcc):c文件编程汇编文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -S hello.i -o hello.s</span><br></pre></td></tr></table></figure><p>汇编器(as):汇编文件变成二进制文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -c hello.s -o hello.o</span><br></pre></td></tr></table></figure><p>链接器(ld):将函数库中相应的代码组合到目标文件中</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.o -o hello</span><br></pre></td></tr></table></figure><p>直接生成可执行文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o myapp</span><br><span class="line">gcc hello.c //生成一个默认的可执行文件 a.out</span><br></pre></td></tr></table></figure><p>指定头文件目录</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -I ./include -o app</span><br><span class="line">gcc hello.c -I./include -o app 旧版本的gcc -I后面不可以有空格</span><br></pre></td></tr></table></figure><p>​./include就是头文件的目录</p><p>#ifdef DEBUG<br>printf(“123”)<br>#endif</p><h4 id="通过gcc定义一个debug宏"><a class="markdownIt-Anchor" href="#通过gcc定义一个debug宏"></a> 通过gcc定义一个DEBUG宏</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o app -D DEBUG</span><br></pre></td></tr></table></figure><h4 id="优化程序-o大写"><a class="markdownIt-Anchor" href="#优化程序-o大写"></a> 优化程序(-O大写)</h4><p>​</p><p>优化等级 0~3，0不优化</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o app —O3</span><br></pre></td></tr></table></figure><h4 id="输出警告信息-wall"><a class="markdownIt-Anchor" href="#输出警告信息-wall"></a> 输出警告信息（-Wall）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o app -Wall</span><br></pre></td></tr></table></figure><h4 id="添加调试信息-g"><a class="markdownIt-Anchor" href="#添加调试信息-g"></a> 添加调试信息（-g）</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc hello.c -o app -g</span><br></pre></td></tr></table></figure><hr><br><h3 id="静态库的制作和使用"><a class="markdownIt-Anchor" href="#静态库的制作和使用"></a> 静态库的制作和使用</h3><h4 id="命名规则"><a class="markdownIt-Anchor" href="#命名规则"></a> 命名规则：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">lib + 库的名字 +.a</span><br><span class="line">例如：libMylib.a</span><br></pre></td></tr></table></figure><h4 id="制作步骤"><a class="markdownIt-Anchor" href="#制作步骤"></a> 制作步骤：</h4><p>​1)生成对应的.o文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc *.c -c</span><br></pre></td></tr></table></figure><p>​</p><p>2)将生成的.o文件打包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ar rcs 静态库的名字 生成的所有.o文件</span><br><span class="line">ar rcs libMylib.a *.o</span><br></pre></td></tr></table></figure><h4 id="发布和使用静态库"><a class="markdownIt-Anchor" href="#发布和使用静态库"></a> 发布和使用静态库</h4><p>​1)发布静态库<br>​2)头文件</p><p>使用:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c 库的目录和名字 -o main</span><br><span class="line">gcc main.c ./libMylib.a -o main</span><br><span class="line"></span><br><span class="line">gcc main.c -L 库的目录 -l 库的名字(将lib和.a去掉) -o main</span><br><span class="line">gcc main.c -L lib -l Mylib -o main</span><br></pre></td></tr></table></figure><h4 id="静态库的优缺点"><a class="markdownIt-Anchor" href="#静态库的优缺点"></a> 静态库的优缺点：</h4><p>​优点：<br>​发布程序的时候不需要提供对应的库<br>​加载库的速度快<br>​</p><p>缺点；<br>库被打包到应用程序中，导致库的体积很大<br>库发生改变，需要重新编译程序</p><p>链接器是以.o为单位链接的</p><h4 id="nm"><a class="markdownIt-Anchor" href="#nm"></a> nm</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nm 库的名字/可执行程序</span><br></pre></td></tr></table></figure><p>可以查看库的一些信息<br>T 代表在代码区</p><hr><br><h3 id="共享库动态库"><a class="markdownIt-Anchor" href="#共享库动态库"></a> 共享库(动态库)</h3><h4 id="共享库的制作"><a class="markdownIt-Anchor" href="#共享库的制作"></a> 共享库的制作：</h4><p>​命名规则：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lib+名字+.so</span><br></pre></td></tr></table></figure><p>​</p><h4 id="制作步骤-2"><a class="markdownIt-Anchor" href="#制作步骤-2"></a> 制作步骤：</h4><p>​1）生成与位置无关的代码（生成与位置无关的.o）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -fPIC -c *.c</span><br></pre></td></tr></table></figure><p>​2)将.o打包成共享库(动态库)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc -shared -o libMylib.so *.o</span><br></pre></td></tr></table></figure><p>共享库是程序运行的时候才加载的</p><p>​</p><h4 id="发布和使用共享库动态库"><a class="markdownIt-Anchor" href="#发布和使用共享库动态库"></a> 发布和使用共享库(动态库)</h4><p>​1)头文件<br>​2)库文件<br>​使用：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gcc main.c 库的目录和名字 -o main</span><br><span class="line">gcc main.c ./libMylib.so -o main</span><br></pre></td></tr></table></figure><p>​</p><h4 id="解决程序执行时动态库无法被加载的问题"><a class="markdownIt-Anchor" href="#解决程序执行时动态库无法被加载的问题"></a> 解决程序执行时动态库无法被加载的问题</h4><p>​1）将库文件放到/lib目录里(不建议使用)<br>​</p><p>2）临时设置终端环境变量<br>环境变量:LD_LIBRARY_PATH=将动态库的路径设置给该变量<br>将设置的值,导入到环境变量中:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=目录</span><br><span class="line">export LD_LIBRARY_PATH=./lib</span><br></pre></td></tr></table></figure><p>​终端关闭失效<br>​<br>3）设置家目录.bashrc配置文件<br>​在.bashrc文件最后一行添加</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export LD_LIBRARY_PATH=目录(绝对路径)</span><br></pre></td></tr></table></figure><p>​每次启动bash时都会自动执行这条命令<br>​终端重启生效<br>​<br>4）<br>​1.需要找动态链接器的配置文件<br>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/etc/ld.so.conf</span><br></pre></td></tr></table></figure><p>​2.动态库的路径写到配置文件<br>​3.更新</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ldconfig -v</span><br></pre></td></tr></table></figure><h4 id="动态库的优缺点"><a class="markdownIt-Anchor" href="#动态库的优缺点"></a> 动态库的优缺点:</h4><p>​优点:<br>​1)执行程序体积小<br>​2)动态库更新了,不需要重新编译程序,前提是函数接口不变<br>​</p><p>缺点:<br>发布程序的时候，需要将动态库提供给用户<br>动态库没有被打包到应用程序中，加载速度相对较慢</p><h2 id="gdb调试"><a class="markdownIt-Anchor" href="#gdb调试"></a> gdb调试</h2><p>可执行程序必须包含调试信息<code>-g</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gdb 程序名</span><br><span class="line">gdb main</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">l  输出十行源代码</span><br><span class="line"></span><br><span class="line">l 文件名:要查看第几行</span><br><span class="line">l main.c 10</span><br><span class="line"></span><br><span class="line">l 文件名:函数名</span><br><span class="line">l main.c main</span><br><span class="line"></span><br><span class="line">后面继续按回车可以继续显示源代码,直到输入了其他命令</span><br></pre></td></tr></table></figure><h4 id="设置断点"><a class="markdownIt-Anchor" href="#设置断点"></a> 设置断点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">b 行号/函数名</span><br><span class="line">break 行号/函数名</span><br><span class="line"></span><br><span class="line">break 22</span><br><span class="line">b 37</span><br><span class="line">b main</span><br><span class="line">break main</span><br></pre></td></tr></table></figure><h3 id="条件断点"><a class="markdownIt-Anchor" href="#条件断点"></a> 条件断点</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">b 行号 if 条件</span><br><span class="line">b 15 if i==15  //当i等于15时,设置15行断点</span><br></pre></td></tr></table></figure><h4 id="查看断点信息"><a class="markdownIt-Anchor" href="#查看断点信息"></a> 查看断点信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">i b</span><br><span class="line">或</span><br><span class="line">info break</span><br><span class="line"></span><br><span class="line">Num     Type           Disp Enb Address            What</span><br><span class="line">1       breakpoint     keep y   0x00000000000006cf in main at main.c:6</span><br><span class="line">enb y表示断点开始,n表示断点关闭</span><br><span class="line">main.c:6 代表在main.c文件的第六行断点</span><br></pre></td></tr></table></figure><h4 id="删除断点"><a class="markdownIt-Anchor" href="#删除断点"></a> 删除断点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">需要通过 info break 找到断点编号</span><br><span class="line"></span><br><span class="line">d 编号</span><br><span class="line">d 4</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start 执行一步</span><br></pre></td></tr></table></figure><h4 id="单步调试"><a class="markdownIt-Anchor" href="#单步调试"></a> 单步调试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">n</span><br></pre></td></tr></table></figure><h4 id="继续执行"><a class="markdownIt-Anchor" href="#继续执行"></a> 继续执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">c </span><br><span class="line">代表执行到断点的位置</span><br></pre></td></tr></table></figure><h4 id="进入函数内部"><a class="markdownIt-Anchor" href="#进入函数内部"></a> 进入函数内部</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">s</span><br></pre></td></tr></table></figure><h4 id="查看变量的值"><a class="markdownIt-Anchor" href="#查看变量的值"></a> 查看变量的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">p 变量名</span><br><span class="line">p i</span><br></pre></td></tr></table></figure><h4 id="查看变量的类型"><a class="markdownIt-Anchor" href="#查看变量的类型"></a> 查看变量的类型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ptype 变量名</span><br><span class="line">ptype i</span><br></pre></td></tr></table></figure><h4 id="追踪变量的值"><a class="markdownIt-Anchor" href="#追踪变量的值"></a> 追踪变量的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">display 变量名</span><br><span class="line">display i</span><br><span class="line"></span><br><span class="line">取消追踪变量</span><br><span class="line">undisplay 追踪变量的编号</span><br><span class="line">undisplay 1</span><br><span class="line">查看追踪变量的编号</span><br><span class="line">info display</span><br></pre></td></tr></table></figure><h4 id="跳出当次循环"><a class="markdownIt-Anchor" href="#跳出当次循环"></a> 跳出当次循环</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">u</span><br></pre></td></tr></table></figure><h4 id="跳出当前函数"><a class="markdownIt-Anchor" href="#跳出当前函数"></a> 跳出当前函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">finish</span><br></pre></td></tr></table></figure><p>循环有断点需要先删除断点</p><h4 id="设置变量的值"><a class="markdownIt-Anchor" href="#设置变量的值"></a> 设置变量的值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">set var 变量名=值</span><br><span class="line">set var i=10</span><br></pre></td></tr></table></figure><h4 id="退出gdb"><a class="markdownIt-Anchor" href="#退出gdb"></a> 退出gdb</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">quit</span><br></pre></td></tr></table></figure><h2 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> makefile</h2><p>项目代码管理工具</p><h4 id="1命名规则"><a class="markdownIt-Anchor" href="#1命名规则"></a> 1).命名规则</h4><p>Makefile或makefile</p><h4 id="2makefile的规则"><a class="markdownIt-Anchor" href="#2makefile的规则"></a> 2).makefile的规则:</h4><p>规则中有三要素:目标,依赖,命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">make </span><br><span class="line">make命令运行makefile</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20211228222234708-1640701376106.png" alt="image-20211228222234708"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">目标:依赖</span><br><span class="line">命令//命令左边一定要有一个tab缩进</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">app:main.c add.c sub.c mul.c</span><br><span class="line">gcc main.c add.c sub.c mul.c -o app</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20211229002343337-1640708638230.png" alt="image-20211229002343337"></p><p><img src="/images/javawz/image-20211229002843041.png" alt="image-20211229002843041"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">main:main.o add.o</span><br><span class="line">gcc main.o add.o -o main</span><br><span class="line"></span><br><span class="line">main.o:main.c</span><br><span class="line">gcc -c main.c</span><br><span class="line"></span><br><span class="line">add.o:add.c</span><br><span class="line">gcc -c add.c</span><br></pre></td></tr></table></figure><p>当add.c的修改时间 大于add.o的修改时间时,表示文件过时了</p><p>终极目标一定要在最前面</p><h4 id="makefile中的变量"><a class="markdownIt-Anchor" href="#makefile中的变量"></a> makefile中的变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">变量名=值</span><br><span class="line">$(变量名) 代表取变量的值</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">obj=main.o add.o</span><br><span class="line">target=main</span><br><span class="line">$(target):$(obj)</span><br><span class="line">gcc $(obj) -o $(target)</span><br><span class="line"></span><br><span class="line">%.o:%.c</span><br><span class="line">gcc -c $&lt; -o $@</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%.o:%.c代表自动匹配,当main.o找不到的时候,会自动匹配%.o:%.c,然后变成main.o:main.c</span><br></pre></td></tr></table></figure><p>makefile中的自动变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$&lt; 规则中的第一个依赖</span><br><span class="line">$@ 规则中的目标</span><br><span class="line">$^ 规则中的所有依赖</span><br><span class="line">只能在规则的命令中使用</span><br></pre></td></tr></table></figure><p>由Makefile维护的一些变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">通常都是大写</span><br><span class="line">CC:默认值cc</span><br><span class="line">CPPFLAGS:预处理器需要的选项 -I</span><br><span class="line">CFLAGS:编译的时候使用的参数 -Wall -g -c</span><br><span class="line">LDFLAGS: 链接库使用的选项 -L -l</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">obj=main.o add.o</span><br><span class="line">target=main</span><br><span class="line">CC=gcc</span><br><span class="line"></span><br><span class="line">$(target):$(obj)</span><br><span class="line">$(CC) $(obj) -o $(target)</span><br><span class="line"></span><br><span class="line">%.o:%.c</span><br><span class="line">$(CC) -c $&lt; -o $@</span><br></pre></td></tr></table></figure><p><br><br> <br><br><br><br><br><br><br><br></p><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;终端：(虚拟终端)  所有输入输出设备总称&lt;/p&gt;
&lt;p&gt;shell： 命令解析器&lt;/p&gt;
&lt;p&gt;bash： bore again shell 命令解析器。&lt;/p&gt;
&lt;h3 id=&quot;快捷键&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#快捷键&quot;&gt;
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>集合</title>
    <link href="https://xiaowuyoucy.github.io/2021/12/22/%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowuyoucy.github.io/2021/12/22/集合/</id>
    <published>2021-12-22T07:49:50.000Z</published>
    <updated>2021-12-22T10:25:04.830Z</updated>
    
    <content type="html"><![CDATA[<h1 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> 集合</h1><p>定义：把一些不同的、可以确定的对象看作整体</p><p>对象：元素</p><p>整体：集合</p><p>性质：确定性、互异性、无序性</p><p>表示：集合用大写字母 A B C</p><p>​元素用小写表示</p><p>​N 代表自然数</p><p>​R  代表实数</p><p>​N<sup>*</sup>或N<sub>+</sub>代表正整数</p><p>​Z 代表整数</p><p>​Q 有理数</p><p>​C 复数</p><p>属于:a∈A代表a在集合A里</p><p>不属于:b∉A  代表元素b不属于集合B</p><p>空集:∅</p><p>集合表示方法</p><p>列举法</p><p>描述法</p><p>韦恩图法</p><p>区间法</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;集合&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#集合&quot;&gt;&lt;/a&gt; 集合&lt;/h1&gt;
&lt;p&gt;定义：把一些不同的、可以确定的对象看作整体&lt;/p&gt;
&lt;p&gt;对象：元素&lt;/p&gt;
&lt;p&gt;整体：集合&lt;/p&gt;
&lt;p&gt;性质：确定性、互异性、无序性&lt;/p
      
    
    </summary>
    
      <category term="高中数学" scheme="https://xiaowuyoucy.github.io/categories/%E9%AB%98%E4%B8%AD%E6%95%B0%E5%AD%A6/"/>
    
    
  </entry>
  
  <entry>
    <title>结构体与指针应用_封包构造与解析</title>
    <link href="https://xiaowuyoucy.github.io/2021/09/28/C0004%E7%BB%93%E6%9E%84%E4%BD%93%E4%B8%8E%E6%8C%87%E9%92%88%E5%BA%94%E7%94%A8-%E5%B0%81%E5%8C%85%E6%9E%84%E9%80%A0%E4%B8%8E%E8%A7%A3%E6%9E%90/"/>
    <id>https://xiaowuyoucy.github.io/2021/09/28/C0004结构体与指针应用-封包构造与解析/</id>
    <published>2021-09-28T09:34:41.000Z</published>
    <updated>2021-12-28T18:51:49.247Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/image-20210928175610434.png" alt="image-20210928175610434"></p><p><img src="/images/javawz/image-20210928180651334.png" alt="image-20210928180651334"></p><p><img src="/images/javawz/image-20210928181047378.png" alt="image-20210928181047378"></p><p><img src="/images/javawz/image-20210928181341416.png" alt="image-20210928181341416"></p><p><br><br><br></p><p>封包：网络传输中的包<br>自定义协议如下：<br>4字节 命令类型<br>1字节 附加数据个数<br>4字节 保留字段</p><p><br><br><br></p><p>TLV结构<br>type - 1字节          1 - 代表字符串 2 - 二进制数据<br>length - 4字节大小<br>value - 值<br><br></p><p>// 构造数据<br>命令类型 110 保留字0填充<br>2个TLV 一个是字符串 hello 一个是字符串agp</p><p><br><br></p><p>封包要使用<code>#pragma pack(1)</code>  1字节对齐</p><p>用<code>#pragma pack()</code>还原</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack(1)</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">byte bType;</span><br><span class="line"><span class="keyword">int</span> ilength;</span><br><span class="line"><span class="keyword">char</span>* cValue;</span><br><span class="line">&#125;TLV;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> iCmdID;</span><br><span class="line">byte bCount;</span><br><span class="line"><span class="keyword">int</span> iResolve;</span><br><span class="line">TLV tlv[<span class="number">0</span>];</span><br><span class="line">&#125;COMMAND;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> pack()</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">// 发送命令函数</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendCmd</span><span class="params">(<span class="keyword">void</span>* pDate, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParseCmd</span><span class="params">(<span class="keyword">void</span>* pDate, <span class="keyword">int</span> size)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 命令类型 110 保留字0填充</span></span><br><span class="line"><span class="comment">// 2个TLV 一个是字符串 hello 一个是字符串agp</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">// 声明变量</span></span><br><span class="line">TLV tl1;</span><br><span class="line">TLV tl2;</span><br><span class="line"><span class="keyword">char</span>* pString1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span>* pString2 = <span class="literal">NULL</span>;</span><br><span class="line">COMMAND* pCmd = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">int</span> iCmdLength = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> iTLVCount = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memset</span>(&amp;tl1, <span class="number">0</span>, <span class="keyword">sizeof</span>(TLV));</span><br><span class="line"><span class="built_in">memset</span>(&amp;tl2, <span class="number">0</span>, <span class="keyword">sizeof</span>(TLV));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造字符串</span></span><br><span class="line">pString1 = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(<span class="string">"hello"</span>));</span><br><span class="line"><span class="built_in">memcpy</span>(pString1, <span class="string">"hello"</span>, <span class="built_in">strlen</span>(<span class="string">"hello"</span>));</span><br><span class="line">pString2 = <span class="built_in">malloc</span>(<span class="built_in">strlen</span>(<span class="string">"agp"</span>));</span><br><span class="line"><span class="built_in">memcpy</span>(pString2, <span class="string">"agp"</span>, <span class="built_in">strlen</span>(<span class="string">"agp"</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造tlv1</span></span><br><span class="line">tl1.ilength = <span class="built_in">strlen</span>(<span class="string">"hello"</span>);</span><br><span class="line">tl1.bType = <span class="number">1</span>;</span><br><span class="line">tl1.cValue = pString1;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造tlv2</span></span><br><span class="line">tl2.ilength = <span class="built_in">strlen</span>(<span class="string">"agp"</span>);</span><br><span class="line">tl2.bType = <span class="number">1</span>;</span><br><span class="line">tl2.cValue = pString2;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 构造发送包</span></span><br><span class="line">iCmdLength = <span class="keyword">sizeof</span>(COMMAND) + tl1.ilength + tl2.ilength + <span class="number">2</span> * <span class="number">5</span>;</span><br><span class="line">pCmd = <span class="built_in">malloc</span>(iCmdLength);</span><br><span class="line">pCmd-&gt;iCmdID = <span class="number">110</span>;</span><br><span class="line">pCmd-&gt;bCount = <span class="number">2</span>;</span><br><span class="line">pCmd-&gt;iResolve = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span>*)((<span class="keyword">int</span>)pCmd + <span class="keyword">sizeof</span>(COMMAND)), &amp;tl1, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span>*)((<span class="keyword">int</span>)pCmd + <span class="keyword">sizeof</span>(COMMAND) + <span class="number">5</span>), tl1.cValue, tl1.ilength);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span>*)((<span class="keyword">int</span>)pCmd + <span class="keyword">sizeof</span>(COMMAND) + <span class="number">5</span> + tl1.ilength), &amp;tl2, <span class="number">5</span>);</span><br><span class="line"><span class="built_in">memcpy</span>((<span class="keyword">void</span>*)((<span class="keyword">int</span>)pCmd + <span class="keyword">sizeof</span>(COMMAND) + <span class="number">5</span> + tl1.ilength + <span class="number">5</span>), tl2.cValue, tl2.ilength);</span><br><span class="line">SendCmd(pCmd,iCmdLength);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 解析</span></span><br><span class="line">ParseCmd(pCmd,iCmdLength);</span><br><span class="line"></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>* g_PDate = <span class="literal">NULL</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">SendCmd</span><span class="params">(<span class="keyword">void</span>* pDate, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">g_PDate = <span class="built_in">malloc</span>(size);</span><br><span class="line"><span class="built_in">memcpy</span>(g_PDate, pDate, size);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">ParseCmd</span><span class="params">(<span class="keyword">void</span>* pDate, <span class="keyword">int</span> size)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line">COMMAND* cmd = (COMMAND*)pDate;</span><br><span class="line">TLV* ptl1 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TLV));</span><br><span class="line">TLV* ptl2 = <span class="built_in">malloc</span>(<span class="keyword">sizeof</span>(TLV));</span><br><span class="line"><span class="keyword">char</span>* pString1 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">char</span>* pString2 = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">memset</span>(ptl1, <span class="number">0</span>, <span class="keyword">sizeof</span>(TLV));</span><br><span class="line"><span class="built_in">memset</span>(ptl2, <span class="number">0</span>, <span class="keyword">sizeof</span>(TLV));</span><br><span class="line"></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"命令ID:%d\r\n"</span>, cmd-&gt;iCmdID);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TLV个数:%d\r\n"</span>, cmd-&gt;bCount);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"保留字段:%d\r\n"</span>, cmd-&gt;iResolve);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TLV数据--------------------\r\n"</span>);</span><br><span class="line">ptl1 = (TLV*)((<span class="keyword">int</span>)pDate + <span class="keyword">sizeof</span>(COMMAND));</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL1类型:%d\r\n"</span>, ptl1-&gt;bType);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL1长度:%d\r\n"</span>, ptl1-&gt;ilength);</span><br><span class="line">pString1 = <span class="built_in">malloc</span>(ptl1-&gt;ilength + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pString1, (<span class="keyword">void</span>*)((<span class="keyword">int</span>)ptl1 + <span class="keyword">sizeof</span>(TLV) - <span class="number">4</span>), ptl1-&gt;ilength);</span><br><span class="line">pString1[ptl1-&gt;ilength] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL1数据:%s\r\n"</span>, pString1);</span><br><span class="line"></span><br><span class="line">ptl2 = (TLV*)((<span class="keyword">int</span>)pDate + <span class="keyword">sizeof</span>(COMMAND) + ptl1-&gt;ilength + <span class="keyword">sizeof</span>(TLV) - <span class="number">4</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL2类型:%d\r\n"</span>, ptl2-&gt;bType);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL2长度:%d\r\n"</span>, ptl2-&gt;ilength);</span><br><span class="line">pString2 = <span class="built_in">malloc</span>(ptl2-&gt;ilength + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">memcpy</span>(pString2, (<span class="keyword">void</span>*)((<span class="keyword">int</span>)ptl2 + <span class="keyword">sizeof</span>(TLV) - <span class="number">4</span>), ptl2-&gt;ilength);</span><br><span class="line">pString2[ptl2-&gt;ilength] = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"TL2数据:%s\r\n"</span>, pString2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/image-20210928175610434.png&quot; alt=&quot;image-20210928175610434&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/image-20210928180651
      
    
    </summary>
    
      <category term="c" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数调用过程与调用约定</title>
    <link href="https://xiaowuyoucy.github.io/2021/09/28/C0002%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8%E8%BF%87%E7%A8%8B%E4%B8%8E%E8%B0%83%E7%94%A8%E7%BA%A6%E5%AE%9A/"/>
    <id>https://xiaowuyoucy.github.io/2021/09/28/C0002函数调用过程与调用约定/</id>
    <published>2021-09-27T17:39:51.000Z</published>
    <updated>2021-12-28T18:51:55.729Z</updated>
    
    <content type="html"><![CDATA[<h3 id="函数调用约定"><a class="markdownIt-Anchor" href="#函数调用约定"></a> 函数调用约定</h3><p><code>__cdecl</code>    缺省调用方式，函数采用从右到左的压栈方式，调用方清理堆栈，注意可变参数<br></p><p><code>__stdcall</code>  函数的参数自右向左通过栈传递，被调用方清理堆栈<br></p><p><code>__fastcall</code> 通过寄存器来传送参数，被调用方清理堆栈<br></p><p><code>__thiscall</code>用于C++成员函数，使用ecx存放this指针<br></p><p>naked call 裸函数，上面几种方式会产生保存一些寄存器的代码，这种不产生。naked call不是类型修饰符，必须和_declspec共同使用<br><code>__declspec(naked)</code> 是告诉编译器 不要对函数进行优化  函数的所有实现包括堆栈的平衡  参数的压栈 ebp的赋值 还原 都要我们来做</p><br><h4 id="决定以下内容"><a class="markdownIt-Anchor" href="#决定以下内容"></a> 决定以下内容：</h4><p>1)函数参数的压栈顺序<br>2)由调用者还是被调用者把参数弹出栈<br>3)以及产生函数修饰名的方法</p><h4 id="修饰名"><a class="markdownIt-Anchor" href="#修饰名"></a> 修饰名</h4><p>1、修饰名(Decoration name)：&quot;C&quot;或者&quot;C++“函数在内部（编译和链接）通过修饰名识别<br>2、C编译时函数名修饰约定规则：<br><br><code>__stdcall</code>调用约定在输出函数名前加上一个下划线前缀，后面加上一个”@&quot;符号和其参数的字节数，格式为_functionname@number,<br>例如 ：function(int a, int b)，其修饰名为：_function@8</p><br><p><code>__cdecl</code>调用约定仅在输出函数名前加上一个下划线前缀，格式为_functionname。</p><p><br><code>__fastcall</code>调用约定在输出函数名前加上一个&quot;@“符号，后面也是一个”@&quot;符号和其参数的字节数，格式为@functionname@number。</p><br><p>注：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">一般WIN32的函数都是__stdcall</span><br><span class="line"> #define CALLBACK __stdcall</span><br><span class="line"> #define WINAPI　 __stdcall</span><br></pre></td></tr></table></figure><hr><h3 id="例子"><a class="markdownIt-Anchor" href="#例子"></a> 例子</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;Windows.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 默认是__cdecl</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">cAdd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆栈平衡由函数内部处理</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">stdcall <span class="title">stdAdd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//前两个参数使用寄存器存储,堆栈平衡由函数内部处理</span></span><br><span class="line"><span class="keyword">int</span> __<span class="function">fastcall <span class="title">fastAdd</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a + b + c;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//堆栈平衡由我们自己处理</span></span><br><span class="line"><span class="keyword">int</span> __declspec(naked) nkAdd(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span><br><span class="line">&#123;</span><br><span class="line">__asm  </span><br><span class="line">&#123;  </span><br><span class="line">push [esp + <span class="number">0</span>ch]  </span><br><span class="line">push [esp + <span class="number">0</span>ch]  </span><br><span class="line">push [esp + <span class="number">0</span>ch]      </span><br><span class="line">call stdAdd</span><br><span class="line">mov eax,eax</span><br><span class="line">ret</span><br><span class="line">&#125;  </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result;</span><br><span class="line"><span class="comment">// 内联汇编</span></span><br><span class="line">__asm</span><br><span class="line">&#123;</span><br><span class="line">mov eax,eax</span><br><span class="line">mov eax,eax</span><br><span class="line">mov eax,eax</span><br><span class="line">&#125;</span><br><span class="line">result = cAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line">stdAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line">fastAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line"> nkAdd(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%d"</span>,result);</span><br><span class="line"><span class="comment">//CreateThread();</span></span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;函数调用约定&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数调用约定&quot;&gt;&lt;/a&gt; 函数调用约定&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;__cdecl&lt;/code&gt;    缺省调用方式，函数采用从右到左的压栈方式，调用方清理堆栈，注意可变参数&lt;
      
    
    </summary>
    
      <category term="c" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>结构体、共用体、枚举</title>
    <link href="https://xiaowuyoucy.github.io/2021/09/28/C0003%E7%BB%93%E6%9E%84%E4%BD%93%E3%80%81%E5%85%B1%E7%94%A8%E4%BD%93%E3%80%81%E6%9E%9A%E4%B8%BE/"/>
    <id>https://xiaowuyoucy.github.io/2021/09/28/C0003结构体、共用体、枚举/</id>
    <published>2021-09-27T16:52:48.000Z</published>
    <updated>2021-12-28T18:51:52.755Z</updated>
    
    <content type="html"><![CDATA[<h3 id="结构体"><a class="markdownIt-Anchor" href="#结构体"></a> 结构体</h3><p>不同类型数据的集合<br>定义</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">struct 结构名</span><br><span class="line">&#123;结构成员表&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">struct student</span><br><span class="line">&#123;</span><br><span class="line">int no;</span><br><span class="line">char name[10];</span><br><span class="line">int age;</span><br><span class="line">double socre;</span><br><span class="line">char addr[50];</span><br><span class="line">struct date birth;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct date</span><br><span class="line">&#123;</span><br><span class="line">int year;</span><br><span class="line">int month;</span><br><span class="line">int day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">struct student st1;</span><br></pre></td></tr></table></figure><p>初始化，可直接清空</p><h3 id="memset"><a class="markdownIt-Anchor" href="#memset"></a> memset</h3><p>函数原型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void *memset(void *s, int ch, size_t n);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memset(&amp;st, 0, sizeof(st)); //用0填充st内存</span><br></pre></td></tr></table></figure><h3 id="memcpy"><a class="markdownIt-Anchor" href="#memcpy"></a> memcpy</h3><p>函数原型:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">void *memcpy(void *destin, void *source, unsigned n);</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">memcpy(st.name, &quot;agp&quot;, strlen(&quot;agp&quot;)); //将“agp”复制到st.name内存中</span><br></pre></td></tr></table></figure><h3 id="typedef"><a class="markdownIt-Anchor" href="#typedef"></a> typedef</h3><p>使用typedef创建结构体、共用体、枚举类型别名</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">typedef struct date</span><br><span class="line">&#123;</span><br><span class="line">int year;</span><br><span class="line">int month;</span><br><span class="line">int day;</span><br><span class="line">&#125;MDATE;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">typedef union data</span><br><span class="line">&#123;</span><br><span class="line">char c[10];</span><br><span class="line">int a;</span><br><span class="line">double f;</span><br><span class="line">&#125; MDATA;</span><br><span class="line">MDATA x;</span><br><span class="line"></span><br><span class="line">typedef enum week &#123;</span><br><span class="line">sun, </span><br><span class="line">mon, </span><br><span class="line">tue,</span><br><span class="line">wed,</span><br><span class="line">thu, </span><br><span class="line">fri,</span><br><span class="line">sta</span><br><span class="line">&#125;WEEK;</span><br></pre></td></tr></table></figure><h5 id="结构体指针变量访问成员"><a class="markdownIt-Anchor" href="#结构体指针变量访问成员"></a> 结构体指针变量访问成员</h5><p>访问方法，指针用-&gt; .</p><h5 id="大小-内存对齐-x86-默认4字节对齐"><a class="markdownIt-Anchor" href="#大小-内存对齐-x86-默认4字节对齐"></a> 大小 内存对齐 X86 默认4字节对齐</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#pragma pack(1)  修改内存对齐为1</span><br><span class="line">一般是 网络通信 双机通信~~ 使用</span><br></pre></td></tr></table></figure><p>sizeof(结构名或者变量名)<br>对齐原因：有些平台每次读都是从偶地址开始，如果一个int型（假设为 32位）如果存放在偶地址开始的地方，那么一个读周期就可以读出，而如果存放在奇地址开始的地方，就可能会需要2个读周期，并对两次读出的结果的高低 字节进行拼凑才能得到该int数据。显然在读取效率上下降很多。这也是空间和时间的博弈。<br><a href="http://baike.baidu.com/view/925608.htm" target="_blank" rel="noopener">http://baike.baidu.com/view/925608.htm</a><br>原则：地址可以被整除</p><p>结构数组<br>地址1 结构1<br>地址2 结构2<br>…</p><h3 id="共用体union"><a class="markdownIt-Anchor" href="#共用体union"></a> 共用体union</h3><p>共用一块内存，某个时刻只有一个有效</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">union data</span><br><span class="line">&#123;</span><br><span class="line">char c[10];</span><br><span class="line">int a;</span><br><span class="line">double f;</span><br><span class="line">&#125;;</span><br><span class="line">union data x;</span><br></pre></td></tr></table></figure><h3 id="枚举enum-提高程序可读性"><a class="markdownIt-Anchor" href="#枚举enum-提高程序可读性"></a> 枚举enum 提高程序可读性</h3><p>有名字的整形常量的集合，该类型变量只能取其中的一个值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">enum week &#123;sun, mon, tue, wed,thu, fri, sta&#125;; 不赋值 默认从0开始</span><br><span class="line">enum week w = sun; //sun == 0</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;结构体&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#结构体&quot;&gt;&lt;/a&gt; 结构体&lt;/h3&gt;
&lt;p&gt;不同类型数据的集合&lt;br&gt;
定义&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td c
      
    
    </summary>
    
      <category term="c" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>编译过程与预处理</title>
    <link href="https://xiaowuyoucy.github.io/2021/09/27/C0001%E7%BC%96%E8%AF%91%E8%BF%87%E7%A8%8B%E4%B8%8E%E9%A2%84%E5%A4%84%E7%90%86/"/>
    <id>https://xiaowuyoucy.github.io/2021/09/27/C0001编译过程与预处理/</id>
    <published>2021-09-27T15:41:21.000Z</published>
    <updated>2021-12-28T18:52:02.836Z</updated>
    
    <content type="html"><![CDATA[<p>1.编写文本代码，C或Cpp文件<br><br></p><p>2.编译，就是Compile，由C编译程序对你写的代码进行词法和语法分析，发现并报告错误。<br>如若无错，则生成中间代码，扩展名.obj，此时是二进制</p><br><p>3.链接，Link，生成可执行的Exe文件。由于一个程序的源码可由多个文件组成。这些文件在第二步<br>中分别编译，生成各自的目标文件，这一步的作用便是将这些Obj文件，以及程序中需要的其它库文件(Dll除开），统一到一个文件中来，形成单个的Exe 文件。此Exe文件便可以在操作系统下直接运行了。</p><br><h4 id="源文件-预编译处理-编译优化汇编程序-链接程序可执行文件"><a class="markdownIt-Anchor" href="#源文件-预编译处理-编译优化汇编程序-链接程序可执行文件"></a> 源文件－－&gt;预编译处理－－&gt;编译(优化,汇编程序)－－&gt;链接程序–&gt;可执行文件</h4><p>预处理：编译成目标文件前对源程序进行处理</p><br><h3 id="宏处理-define"><a class="markdownIt-Anchor" href="#宏处理-define"></a> 宏处理 #define</h3><p>预处理指令#开头，无逗号，可出现在任意位置，作用域为出现位置到文件结尾</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#define 一改全改</span><br><span class="line">#define PI 3.14</span><br><span class="line">#define MAX(a, b) (a &gt; b ? a : b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define Add(a,b) a+b  </span><br><span class="line">c * Add(a,b) * d == c * a + b * d，导致计算错误，解决方法是在a+b中加上括号(a + b )</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#undef 宏名 //取消宏定义</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">多行定义 \</span><br><span class="line"></span><br><span class="line">#define MAX(a, b) (a &gt; b ? \</span><br><span class="line">a : b)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#define APG_DELETE(p) do&#123; delete p; p = NULL&#125; while(0)</span><br><span class="line"></span><br><span class="line">if(NULL != p) APG_DELETE(p)</span><br><span class="line">else   ...do sth...</span><br><span class="line">if(NULL != p) AGP_DELETE(p);</span><br><span class="line">else   ...do sth...</span><br></pre></td></tr></table></figure><p><br><br></p><h3 id="文件包含-include"><a class="markdownIt-Anchor" href="#文件包含-include"></a> 文件包含 #include</h3><p><code>#include&lt;头文件名称&gt;</code>: 先在系统路径搜索文件（一般是include）<br><code>#include&quot;头文件名称&quot;</code>：先在当前目录搜索</p><p><br><br></p><h3 id="条件编译与program"><a class="markdownIt-Anchor" href="#条件编译与program"></a> 条件编译与#program</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#if 0或1  //如果是0则不编译，如果是1则编译</span><br><span class="line"></span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#ifdef 宏名 //如果宏名已定义，执行块1，否则执行块2</span><br><span class="line">块1....</span><br><span class="line">#else</span><br><span class="line">块2.....</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#ifndef 宏名 //如果宏名没有定义，我们就定义一个这样的宏，防止头文件被重复包含</span><br><span class="line">#define 宏名</span><br><span class="line">...</span><br><span class="line">#endif</span><br></pre></td></tr></table></figure><p><br><br></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">#program once //防止头文件被重复包含，只能在vs中用</span><br></pre></td></tr></table></figure><p><br><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1.编写文本代码，C或Cpp文件&lt;br&gt;&lt;br&gt;&lt;/p&gt;
&lt;p&gt;2.编译，就是Compile，由C编译程序对你写的代码进行词法和语法分析，发现并报告错误。&lt;br&gt;
如若无错，则生成中间代码，扩展名.obj，此时是二进制&lt;/p&gt;
&lt;br&gt;
&lt;p&gt;3.链接，Link，生成可执行
      
    
    </summary>
    
      <category term="c" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>STL中常用的集合算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/26/cpp0094-STL%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E9%9B%86%E5%90%88%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/26/cpp0094-STL中常用的集合算法/</id>
    <published>2021-07-26T15:13:19.000Z</published>
    <updated>2021-12-28T18:41:01.061Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stl中常用的集合算法"><a class="markdownIt-Anchor" href="#stl中常用的集合算法"></a> STL中常用的集合算法</h1><h4 id="set_unionset_intersectionset_difference"><a class="markdownIt-Anchor" href="#set_unionset_intersectionset_difference"></a> set_union(),set_intersection(),set_difference()</h4><p>set_union: 构造一个有序序列，包含两个有序序列的并集。</p><p>set_intersection: 构造一个有序序列，包含两个有序序列的交集。</p><p>假设有集合A和B，所有属于A且不属于B的元素的集合被称为A与B的差集。</p><p>示例：对于集合A = {a, b, c, d}和集合B = {b, c, w}，则A与B 的差集为{a, d}</p><p>也就是集合A中有的元素,在集合B中没有的这部分元素，就是集合A和集合B中的差集</p><p>set_difference: 构造一个有序序列，该序列保留第一个有序序列中存在而第二个有序序列中不存在的元素。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecIntB;</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(6);</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(8);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecIntC;</span><br><span class="line"></span><br><span class="line">​          vecIntC.resize(10);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          //并集</span><br><span class="line"></span><br><span class="line">​          set_union(vecIntA.begin(), vecIntA.end(), vecIntB.begin(), vecIntB.end(), vecIntC.begin());          //vecIntC : &#123;1,3,5,6,7,8,9,0,0,0&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          //交集</span><br><span class="line"></span><br><span class="line">​          fill(vecIntC.begin(),vecIntC.end(),0);</span><br><span class="line"></span><br><span class="line">​          set_intersection(vecIntA.begin(), vecIntA.end(),  </span><br><span class="line">vecIntB.begin(), vecIntB.end(), vecIntC.begin());        //vecIntC: &#123;1,3,5,0,0,0,0,0,0,0&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          //差集</span><br><span class="line"></span><br><span class="line">​          fill(vecIntC.begin(),vecIntC.end(),0);</span><br><span class="line"></span><br><span class="line">​          set_difference(vecIntA.begin(), vecIntA.end(), vecIntB.begin(),   </span><br><span class="line">           vecIntB.end(), vecIntC.begin());          //vecIntC: &#123;7,9,0,0,0,0,0,0,0,0&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printV</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_union</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line">v1.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2.push_back(<span class="number">2</span>);</span><br><span class="line">v2.push_back(<span class="number">4</span>);</span><br><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">v3.resize(v1.size() + v2.size());</span><br><span class="line"><span class="comment">//v1∪v2,把相同部分去掉,将结果存放到v3容器中</span></span><br><span class="line">set_union(v1.begin(),v1.end(),v2.begin(),v2.end(),v3.begin());</span><br><span class="line"></span><br><span class="line">for_each(v3.begin(),v3.end(), printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_set_intersection</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line">v1.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2.push_back(<span class="number">1</span>);</span><br><span class="line">v2.push_back(<span class="number">3</span>);</span><br><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">v3.resize(v1.size()+v2.size());</span><br><span class="line"><span class="comment">//v1∩v2,将不相同的部分去掉,把结果存放到v3容器中</span></span><br><span class="line">set_intersection(v1.begin(),v1.end(),v2.begin(),v2.end(),v3.begin());</span><br><span class="line">for_each(v3.begin(), v3.end(), printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_difference</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line"></span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">2</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line">v1.push_back(<span class="number">4</span>);</span><br><span class="line">v1.push_back(<span class="number">4</span>);</span><br><span class="line">v1.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line"></span><br><span class="line">v2.push_back(<span class="number">1</span>);</span><br><span class="line">v2.push_back(<span class="number">2</span>);</span><br><span class="line">v2.push_back(<span class="number">3</span>);</span><br><span class="line">v2.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">v3.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">  set_difference 差集:v1 - v2 将剩余元素存放在v3中</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">      假设有集合A和B，所有属于A且不属于B的元素的集合被称为A与B的差集。</span></span><br><span class="line"><span class="comment">      </span></span><br><span class="line"><span class="comment">      示例：对于集合A = &#123;a, b, c, d&#125;和集合B = &#123;b, c, w&#125;，则A与B 的差集为&#123;a, d&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">set_difference(v1.begin(), v1.end(), v2.begin(), v2.end(), v3.begin());</span><br><span class="line">for_each(v3.begin(), v3.end(), printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test_union();</span><br><span class="line">test_set_intersection();</span><br><span class="line">test_difference();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stl中常用的集合算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stl中常用的集合算法&quot;&gt;&lt;/a&gt; STL中常用的集合算法&lt;/h1&gt;
&lt;h4 id=&quot;set_unionset_intersectionset_difference&quot;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>STL中常用的算术和生成算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/26/cpp0093-STL%E4%B8%AD%E5%B8%B8%E7%94%A8%E7%9A%84%E7%AE%97%E6%9C%AF%E5%92%8C%E7%94%9F%E6%88%90%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/26/cpp0093-STL中常用的算术和生成算法/</id>
    <published>2021-07-26T14:44:33.000Z</published>
    <updated>2021-12-28T18:40:55.196Z</updated>
    
    <content type="html"><![CDATA[<h1 id="stl中常用的算术和生成算法"><a class="markdownIt-Anchor" href="#stl中常用的算术和生成算法"></a> STL中常用的算术和生成算法</h1><h4 id="accumulate"><a class="markdownIt-Anchor" href="#accumulate"></a> accumulate()</h4><p>accumulate: 对指定范围内的元素求和，然后结果再加上一个由val指定的初始值。</p><p>要加上头文件 <code>#include&lt;numeric&gt;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">vecIntA.push_back(7);</span><br><span class="line"></span><br><span class="line">vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line">int iSum = accumulate(vecIntA.begin(), vecIntA.end(), 100);     //iSum==125</span><br></pre></td></tr></table></figure><h4 id="fill"><a class="markdownIt-Anchor" href="#fill"></a> fill()</h4><p>fill:  将输入值赋给标志范围内的所有元素。</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(9);</span><br><span class="line">//将vecintA容器中的所有元素都填充为8</span><br><span class="line">​          fill(vecIntA.begin(), vecIntA.end(), 8);       //8, 8, 8, 8, 8</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;numeric&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_accumulate</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">2</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line">v1.push_back(<span class="number">4</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//accumulate : 将容器中所有元素相加,然后在加上最后一个参数的值,并返回</span></span><br><span class="line"><span class="keyword">int</span> sum = accumulate(v1.begin(),v1.end(),<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; sum &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_fill</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将v1所有元素都填充为100</span></span><br><span class="line">fill(v1.begin(),v1.end(),<span class="number">100</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v1.begin(); it != v1.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test_accumulate();</span><br><span class="line">test_fill();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;stl中常用的算术和生成算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#stl中常用的算术和生成算法&quot;&gt;&lt;/a&gt; STL中常用的算术和生成算法&lt;/h1&gt;
&lt;h4 id=&quot;accumulate&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的拷贝和替换STL算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/26/cpp0092-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%9B%BF%E6%8D%A2STL%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/26/cpp0092-常用的拷贝和替换STL算法/</id>
    <published>2021-07-26T14:23:54.000Z</published>
    <updated>2021-12-28T18:40:32.286Z</updated>
    
    <content type="html"><![CDATA[<h1 id="常用的拷贝和替换stl算法"><a class="markdownIt-Anchor" href="#常用的拷贝和替换stl算法"></a> 常用的拷贝和替换STL算法</h1><h4 id="copy"><a class="markdownIt-Anchor" href="#copy"></a> copy()</h4><p>将容器1中的元素拷贝到容器2中</p><p><code>copy(容器1.begin(),容器1.end(),容器2.begin())</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecIntB;</span><br><span class="line"></span><br><span class="line">​          vecIntB.resize(5);            //扩大空间</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          copy(vecIntA.begin(), vecIntA.end(), vecIntB.begin()); //vecIntB: &#123;1,3,5,7,9&#125;</span><br></pre></td></tr></table></figure><h4 id="replace"><a class="markdownIt-Anchor" href="#replace"></a> replace()</h4><p><code>replace(beg,end,oldValue,newValue)</code>:</p><p>将指定范围内的所有等于oldValue的元素替换成newValue。</p><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">     vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          replace(vecIntA.begin(), vecIntA.end(), 3, 8);     //&#123;1,8,5,8,9&#125;</span><br></pre></td></tr></table></figure><h4 id="replace_if"><a class="markdownIt-Anchor" href="#replace_if"></a> replace_if()</h4><p><code>replace_if(begin,end,一元谓词,要替换的数字)</code></p><p>replace_if : 将指定范围内所有操作结果为true的元素用新值替换。</p><p>用法举例：</p><p>replace_if(vecIntA.begin(),vecIntA.end(),GreaterThree,newVal)</p><p>其中 vecIntA是用vector&lt;int&gt;声明的容器</p><p>GreaterThree 函数的原型是 bool GreaterThree(int iNum)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">//把大于等于3的元素替换成8</span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          replace_if(vecIntA.begin(), vecIntA.end(), GreaterThree, 8);     // GreaterThree的定义在上面。</span><br></pre></td></tr></table></figure><h4 id="swap"><a class="markdownIt-Anchor" href="#swap"></a> swap()</h4><p>swap:  交换两个容器的元素</p><p><code>swap(容器1,容器2)</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">       vector&lt;int&gt; vecIntA;</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecIntA.push_back(5);</span><br><span class="line"></span><br><span class="line">​          </span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecIntB;</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(2);</span><br><span class="line"></span><br><span class="line">​          vecIntB.push_back(4);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          swap(vecIntA, vecIntB); //交换</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printV</span><span class="params">(<span class="keyword">int</span> &amp;x)</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; x &lt;&lt; <span class="string">" "</span> ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_copy</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">21</span>);</span><br><span class="line">v1.push_back(<span class="number">31</span>);</span><br><span class="line">v1.push_back(<span class="number">41</span>);</span><br><span class="line">v1.push_back(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2.resize(v1.size());</span><br><span class="line">copy(v1.begin(), v1.end(),v2.begin());</span><br><span class="line"></span><br><span class="line">for_each(v2.begin(),v2.end(),printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_replace</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">21</span>);</span><br><span class="line">v1.push_back(<span class="number">31</span>);</span><br><span class="line">v1.push_back(<span class="number">41</span>);</span><br><span class="line">v1.push_back(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将v1的所以元素是1的,都替换成5</span></span><br><span class="line">replace(v1.begin(),v1.end(),<span class="number">1</span>,<span class="number">5</span>);</span><br><span class="line">for_each(v1.begin(),v1.end(),printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">MyGreate</span><span class="params">(<span class="keyword">int</span> &amp; i)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (i &gt;= <span class="number">1</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_replaceif</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">21</span>);</span><br><span class="line">v1.push_back(<span class="number">51</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将v1容器中大于等于1的所有元素都替换成5</span></span><br><span class="line">replace_if(v1.begin(),v1.end(), MyGreate,<span class="number">5</span>);</span><br><span class="line">for_each(v1.begin(),v1.end(),printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_swap</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1, v2;</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">3</span>);</span><br><span class="line">v1.push_back(<span class="number">5</span>);</span><br><span class="line"></span><br><span class="line">v2.push_back(<span class="number">2</span>);</span><br><span class="line">v2.push_back(<span class="number">4</span>);</span><br><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//交换前</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"v1: "</span>;</span><br><span class="line">for_each(v1.begin(), v1.end(), printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">swap(v1, v2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//交换后</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"v1: "</span>;</span><br><span class="line">for_each(v1.begin(),v1.end(),printV);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test_copy();</span><br><span class="line">test_replace();</span><br><span class="line">test_replaceif();</span><br><span class="line">test_swap();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;常用的拷贝和替换stl算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用的拷贝和替换stl算法&quot;&gt;&lt;/a&gt; 常用的拷贝和替换STL算法&lt;/h1&gt;
&lt;h4 id=&quot;copy&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot;
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的排序算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/25/cpp0091-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/25/cpp0091-常用的排序算法/</id>
    <published>2021-07-24T19:38:28.000Z</published>
    <updated>2021-12-28T18:40:28.447Z</updated>
    
    <content type="html"><![CDATA[<h3 id="常用的排序算法"><a class="markdownIt-Anchor" href="#常用的排序算法"></a> 常用的排序算法</h3><h4 id="merge"><a class="markdownIt-Anchor" href="#merge"></a> merge()</h4><p>以下是排序和通用算法：提供元素排序策略</p><p>merge:  合并两个有序序列，存放到另一个序列。</p><p>例如：vecIntA,vecIntB,vecIntC是用vector&lt;int&gt;声明的容器，vecIntA已包含1,3,5,7,9元素，vecIntB已包含2,4,6,8元素</p><p>vecIntC.resize(9); //扩大容量</p><p>merge(vecIntA.begin(),vecIntA.end(),vecIntB.begin(),vecIntB.end(),vecIntC.begin());</p><p>此时vecIntC就存放了按顺序的1,2,3,4,5,6,7,8,9九个元素</p><h4 id="sort"><a class="markdownIt-Anchor" href="#sort"></a> sort()</h4><p>sort: 以默认升序的方式重新排列指定范围内的元素。若要改排序规则，可以输入比较函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">//学生类</span><br><span class="line"></span><br><span class="line">Class CStudent:</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public:</span><br><span class="line"></span><br><span class="line">​    CStudent(int iID, string strName)</span><br><span class="line"></span><br><span class="line">​          &#123;</span><br><span class="line"></span><br><span class="line">m_iID=iID; </span><br><span class="line"></span><br><span class="line">m_strName=strName; </span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public:      </span><br><span class="line"></span><br><span class="line">​     int m_iID;</span><br><span class="line"></span><br><span class="line">​     string m_strName;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">//学号比较函数</span><br><span class="line"></span><br><span class="line">bool Compare(const CStudent &amp;stuA,const CStudent &amp;stuB)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​          return (stuA.m_iID&lt;strB.m_iID);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​    vector&lt;CStudent&gt; vecStu;</span><br><span class="line"></span><br><span class="line">​    vecStu.push_back(CStudent(2,&quot;老二&quot;));</span><br><span class="line"></span><br><span class="line">vecStu.push_back(CStudent(1,&quot;老大&quot;));</span><br><span class="line"></span><br><span class="line">vecStu.push_back(CStudent(3,&quot;老三&quot;));</span><br><span class="line"></span><br><span class="line">vecStu.push_back(CStudent(4,&quot;老四&quot;));</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">   sort(vecStu.begin(),vecStu.end(),Compare);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">// 此时，vecStu容器包含了按顺序的&quot;老大对象&quot;,&quot;老二对象&quot;,&quot;老三对象&quot;,&quot;老四对象&quot;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="random_shuffle"><a class="markdownIt-Anchor" href="#random_shuffle"></a> random_shuffle()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"> random_shuffle:   对指定范围内的元素随机调整次序。</span><br><span class="line"></span><br><span class="line">​          srand(time(0));              //设置随机种子</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          vector&lt;int&gt; vecInt;</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          string str(&quot;itcastitcast &quot;);</span><br><span class="line"></span><br><span class="line">​     </span><br><span class="line"></span><br><span class="line">​          random_shuffle(vecInt.begin(), vecInt.end());  //随机排序，结果比如：9,7,1,5,3</span><br><span class="line"></span><br><span class="line">​          random_shuffle(str.begin(), str.end());         //随机排序，结果比如：&quot; itstcasticat &quot;</span><br></pre></td></tr></table></figure><h4 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> reverse()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       vector&lt;int&gt; vecInt;</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          reverse(vecInt.begin(), vecInt.end());        //&#123;9,7,5,3,1&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;ctime&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printV</span><span class="params">(<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; &amp;v)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = v.begin(); it != v.end() ; it++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *it &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span> &lt;&lt; <span class="string">"============================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_merge</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">0</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">5</span>);</span><br><span class="line">v1.push_back(<span class="number">60</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sort(v1.begin(),v1.end());</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v2;</span><br><span class="line">v2.push_back(<span class="number">2</span>);</span><br><span class="line">v2.push_back(<span class="number">4</span>);</span><br><span class="line">v2.push_back(<span class="number">6</span>);</span><br><span class="line">v2.push_back(<span class="number">8</span>);</span><br><span class="line">sort(v2.begin(), v2.end());</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v3;</span><br><span class="line">v3.resize(v1.size() + v2.size());</span><br><span class="line"></span><br><span class="line">merge(v1.begin(),v1.end(),v2.begin(),v2.end(),v3.begin());</span><br><span class="line"></span><br><span class="line">printV(v3);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Student() &#123;</span><br><span class="line">m_name = <span class="string">""</span>;</span><br><span class="line">m_age = <span class="number">0</span>;</span><br><span class="line">m_id = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">Student(<span class="built_in">string</span> name, <span class="keyword">int</span> id, <span class="keyword">int</span> age)</span><br><span class="line">&#123;</span><br><span class="line">m_name = name;</span><br><span class="line">m_age = age;</span><br><span class="line">m_id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(Student &amp; s1, Student &amp; s2)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (s1.m_id &lt;= s2.m_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (s1.m_id == s2.m_id)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> s1.m_age &gt;= s2.m_age;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printAll</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"name: "</span> &lt;&lt; m_name &lt;&lt; <span class="string">"\tid: "</span> &lt;&lt; m_id &lt;&lt; <span class="string">"\tage: "</span> &lt;&lt; m_age &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="built_in">string</span>m_name;</span><br><span class="line"><span class="keyword">int</span>m_id;</span><br><span class="line"><span class="keyword">int</span>m_age;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printV2</span><span class="params">(Student &amp; s)</span> </span>&#123;</span><br><span class="line">s.printAll();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_sort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v1;</span><br><span class="line">v1.push_back(<span class="number">0</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line">v1.push_back(<span class="number">5</span>);</span><br><span class="line">v1.push_back(<span class="number">60</span>);</span><br><span class="line">v1.push_back(<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">sort(v1.begin(),v1.end());<span class="comment">//默认升序排序</span></span><br><span class="line">printV(v1);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; v2;</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>,<span class="number">1</span>,<span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>,<span class="number">1</span>,<span class="number">23</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老二"</span>, <span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老四"</span>, <span class="number">4</span>, <span class="number">18</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>,<span class="number">1</span>,<span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老三"</span>, <span class="number">3</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">sort(v2.begin(),v2.end(),Student());</span><br><span class="line">for_each(v2.begin(),v2.end(),printV2);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_random_shuffle</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; v2;</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">23</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老二"</span>, <span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老四"</span>, <span class="number">4</span>, <span class="number">18</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老三"</span>, <span class="number">3</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">srand(time(<span class="literal">NULL</span>));</span><br><span class="line"></span><br><span class="line">random_shuffle(v2.begin(),v2.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"========================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">for_each(v2.begin(), v2.end(), printV2);</span><br><span class="line"></span><br><span class="line"><span class="built_in">string</span> str = <span class="string">"1234567"</span>;</span><br><span class="line">random_shuffle(str.begin(), str.end());</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_reverse</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;Student&gt; v2;</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">23</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老二"</span>, <span class="number">2</span>, <span class="number">20</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老四"</span>, <span class="number">4</span>, <span class="number">18</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老大"</span>, <span class="number">1</span>, <span class="number">22</span>));</span><br><span class="line">v2.push_back(Student(<span class="string">"老三"</span>, <span class="number">3</span>, <span class="number">19</span>));</span><br><span class="line"></span><br><span class="line">sort(v2.begin(), v2.end(), Student());</span><br><span class="line">reverse(v2.begin(), v2.end());</span><br><span class="line">for_each(v2.begin(),v2.end(),printV2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test_merge();</span><br><span class="line">test_sort();</span><br><span class="line">test_random_shuffle();</span><br><span class="line">test_reverse();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;常用的排序算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#常用的排序算法&quot;&gt;&lt;/a&gt; 常用的排序算法&lt;/h3&gt;
&lt;h4 id=&quot;merge&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#merge&quot;&gt;&lt;/
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>常用的查找算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/25/cpp0090-%E5%B8%B8%E7%94%A8%E7%9A%84%E6%9F%A5%E6%89%BE%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/25/cpp0090-常用的查找算法/</id>
    <published>2021-07-24T18:33:46.000Z</published>
    <updated>2021-12-28T18:40:24.240Z</updated>
    
    <content type="html"><![CDATA[<h4 id="adjacent_find"><a class="markdownIt-Anchor" href="#adjacent_find"></a> adjacent_find()</h4><h4 id="binary_search"><a class="markdownIt-Anchor" href="#binary_search"></a> binary_search()</h4><h4 id="binary_search-2"><a class="markdownIt-Anchor" href="#binary_search-2"></a> binary_search()</h4><h4 id="count"><a class="markdownIt-Anchor" href="#count"></a> count()</h4><h4 id="count_if"><a class="markdownIt-Anchor" href="#count_if"></a> count_if()</h4><h4 id="find"><a class="markdownIt-Anchor" href="#find"></a> find()</h4><h4 id="find_if"><a class="markdownIt-Anchor" href="#find_if"></a> find_if()</h4><h4 id="adjacent_find-2"><a class="markdownIt-Anchor" href="#adjacent_find-2"></a> adjacent_find()</h4><p>在iterator对标识元素范围内，查找一对相邻重复元素，找到则返回指向这对元素的第一个元素的迭代器。否则返回past-the-end。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecInt;</span><br><span class="line"></span><br><span class="line">​     vecInt.push_back(1);</span><br><span class="line"></span><br><span class="line">​     vecInt.push_back(2);</span><br><span class="line"></span><br><span class="line">​     vecInt.push_back(2);</span><br><span class="line"></span><br><span class="line">​     vecInt.push_back(4);</span><br><span class="line"></span><br><span class="line">​     vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line">vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​     vector&lt;int&gt;::iterator it = adjacent_find(vecInt.begin(), vecInt.end());       //*it == 2</span><br></pre></td></tr></table></figure><h4 id="binary_search-3"><a class="markdownIt-Anchor" href="#binary_search-3"></a> binary_search</h4><p>在有序序列中查找value,找到则返回true。注意：在无序序列中，不可使用。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">       set&lt;int&gt; setInt;</span><br><span class="line"></span><br><span class="line">​          setInt.insert(3);</span><br><span class="line"></span><br><span class="line">​          setInt.insert(1);</span><br><span class="line"></span><br><span class="line">​          setInt.insert(7);</span><br><span class="line"></span><br><span class="line">​          setInt.insert(5);</span><br><span class="line"></span><br><span class="line">​          setInt.insert(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">​          bool bFind = binary_search(setInt.begin(),setInt.end(),5);</span><br></pre></td></tr></table></figure><h4 id="count-2"><a class="markdownIt-Anchor" href="#count-2"></a> count()</h4><p>利用等于操作符，把标志范围内的元素与输入值比较，返回相等的个数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecInt;</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(2);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(2);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(4);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(2);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line">​          int iCount = count(vecInt.begin(),vecInt.end(),2);  //iCount==3</span><br><span class="line"></span><br><span class="line">​</span><br></pre></td></tr></table></figure><h4 id="count_if-2"><a class="markdownIt-Anchor" href="#count_if-2"></a> count_if()</h4><p>假设vector&lt;int&gt; vecIntA，vecIntA包含1,3,5,7,9元素</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">//先定义比较函数</span><br><span class="line"></span><br><span class="line">bool GreaterThree(int iNum)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​          if(iNum&gt;=3)</span><br><span class="line"></span><br><span class="line">​          &#123;</span><br><span class="line"></span><br><span class="line">​              return true;</span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">​          else</span><br><span class="line"></span><br><span class="line">​          &#123;</span><br><span class="line"></span><br><span class="line">​              return false;</span><br><span class="line"></span><br><span class="line">​          &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">int iCount = count_if(vecIntA.begin(), vecIntA.end(), GreaterThree);</span><br><span class="line"></span><br><span class="line">//此时iCount == 4</span><br></pre></td></tr></table></figure><h4 id="find-2"><a class="markdownIt-Anchor" href="#find-2"></a> find()</h4><p>find: 利用底层元素的等于操作符，对指定范围内的元素与输入值进行比较。当匹配时，结束搜索，返回该元素的迭代器。</p><p>equal_range:  返回一对iterator，第一个表示lower_bound,第二个表示upper_bound。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">vector&lt;int&gt; vecInt;</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(1);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(3);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(5);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(7);</span><br><span class="line"></span><br><span class="line">​          vecInt.push_back(9);</span><br><span class="line"></span><br><span class="line"> </span><br><span class="line"></span><br><span class="line">vector&lt;int&gt;::iterator it = find(vecInt.begin(), vecInt.end(), 5);         //*it == 5</span><br></pre></td></tr></table></figure><h4 id="find_if-2"><a class="markdownIt-Anchor" href="#find_if-2"></a> find_if()</h4><p>find_if:  使用输入的函数代替等于操作符执行find。返回被找到的元素的迭代器。</p><p>假设vector&lt;int&gt; vecIntA，vecIntA包含1,3,5,3,9元素</p><p><code>vector&lt;int&gt;::it = find_if(vecInt.begin(),vecInt.end(),GreaterThree);</code></p><p>此时<code>*it==3, *(it+1)==5, *(it+2)==3, *(it+3)==9</code></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_adjacent_find</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line"><span class="comment">//在iterator对标识元素范围内，</span></span><br><span class="line"><span class="comment">//查找一对相邻重复元素，找到则返回指向这对元素的第一个元素的迭代器。否则返回past-the-end。</span></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it =  adjacent_find(v.begin(), v.end());</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*it: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//distance 返回迭代器it元素在v容器中的位置(索引)</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"distance: "</span> &lt;&lt; distance(v.begin(),it) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_binary_search</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//需要先排序</span></span><br><span class="line"><span class="keyword">if</span> (binary_search(v.begin(), v.end(), <span class="number">5</span>))</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"yes"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"no"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_count</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"count: "</span> &lt;&lt; count(v.begin(), v.end(), <span class="number">3</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">Com</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">3</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_countif</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"count_if: "</span> &lt;&lt; count_if(v.begin(), v.end(), Com) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_find</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;::iterator it = find(v.begin(),v.end(),<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*it: "</span> &lt;&lt; *it &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"distance: "</span> &lt;&lt; distance(v.begin(),it) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComP</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">operator</span><span class="params">()</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (x &gt; <span class="number">3</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test_findif</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; v;</span><br><span class="line">v.push_back(<span class="number">0</span>);</span><br><span class="line">v.push_back(<span class="number">1</span>);</span><br><span class="line">v.push_back(<span class="number">2</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">3</span>);</span><br><span class="line">v.push_back(<span class="number">5</span>);</span><br><span class="line">v.push_back(<span class="number">-1</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"find_if: "</span> &lt;&lt; *(find_if(v.begin(), v.end(), ComP())) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">char</span> *argv[], <span class="keyword">int</span> argc)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test_adjacent_find();</span><br><span class="line">test_binary_search();</span><br><span class="line">test_count();</span><br><span class="line">test_countif();</span><br><span class="line">test_find();</span><br><span class="line">test_findif();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;adjacent_find&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#adjacent_find&quot;&gt;&lt;/a&gt; adjacent_find()&lt;/h4&gt;
&lt;h4 id=&quot;binary_search&quot;&gt;&lt;a class=&quot;markdow
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>foreach和transform算法</title>
    <link href="https://xiaowuyoucy.github.io/2021/07/24/cpp0089-foreach%E5%92%8Ctransform%E7%AE%97%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2021/07/24/cpp0089-foreach和transform算法/</id>
    <published>2021-07-24T15:28:16.000Z</published>
    <updated>2021-12-28T18:40:19.526Z</updated>
    
    <content type="html"><![CDATA[<h1 id="foreach和transform算法"><a class="markdownIt-Anchor" href="#foreach和transform算法"></a> foreach和transform算法</h1><h4 id="for_each"><a class="markdownIt-Anchor" href="#for_each"></a> for_each()</h4><p><code>for_each(迭代器起始位置,迭代器结束位置,函数对象或回调函数)</code></p><p>for_each: 用指定函数依次对指定范围内所有元素进行迭代访问。该函数不得修改序列中的元素。</p><p>for_each()会返回一个新的函数对象</p><p>一般情况下：for_each所使用的函数对象，参数是引用，没有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">void show(const int &amp;iItem)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; iItem;</span><br><span class="line">&#125;</span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">int iArray[] = &#123;0,1,2,3,4&#125;;</span><br><span class="line">vector&lt;int&gt; vecInt(iArray,iArray+sizeof(iArray)/sizeof(iArray[0]));</span><br><span class="line">    for_each(vecInt.begin(), vecInt.end(), show);</span><br><span class="line"></span><br><span class="line">//结果打印出0 1 2 3 4</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="transform"><a class="markdownIt-Anchor" href="#transform"></a> transform()</h4><p>transform:  与for_each类似，遍历所有元素，但可对容器的元素进行修改</p><p><code>transform(迭代器起始位置,迭代器结束位置,迭代器x起始位置,函数对象或回调函数)</code></p><p>transform所使用的函数对象，参数一般不使用引用，而是还有返回值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">int increase (int i)  </span><br><span class="line">&#123;  </span><br><span class="line">return i+1;   </span><br><span class="line">&#125;  </span><br><span class="line"></span><br><span class="line">main()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; vecIntA;</span><br><span class="line">vecIntA.push_back(1);</span><br><span class="line">vecIntA.push_back(3);</span><br><span class="line">vecIntA.push_back(5);</span><br><span class="line">vecIntA.push_back(7);</span><br><span class="line">vecIntA.push_back(9);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">transform(vecIntA.begin(),vecIntA.end(),vecIntA.begin(),increase);//vecIntA : &#123;2,4,6,8,10&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">#include &quot;string&quot;</span><br><span class="line">#include &lt;vector&gt;</span><br><span class="line">#include &lt;list&gt;</span><br><span class="line">#include &quot;set&quot;</span><br><span class="line">#include &lt;algorithm&gt;</span><br><span class="line">#include &quot;functional&quot;</span><br><span class="line">#include &quot;iterator&quot;  //输出流迭代器的头文件</span><br><span class="line"></span><br><span class="line">void printV(vector&lt;int&gt; &amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (vector&lt;int&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void printList(list&lt;int&gt; &amp;v)</span><br><span class="line">&#123;</span><br><span class="line">for (list&lt;int&gt;::iterator it=v.begin(); it!=v.end(); it++)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; *it &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void showElem(int &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class CMyShow</span><br><span class="line">&#123;</span><br><span class="line">public:</span><br><span class="line">CMyShow()</span><br><span class="line">&#123;</span><br><span class="line">num = 0;</span><br><span class="line">&#125;</span><br><span class="line">void operator()(int &amp;n)</span><br><span class="line">&#123;</span><br><span class="line">num ++;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class="line">&#125;</span><br><span class="line">void printNum()</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; &quot;num:&quot; &lt;&lt; num &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line">protected:</span><br><span class="line">private:</span><br><span class="line">int num;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">void main41_foreach()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">v1.push_back(1);</span><br><span class="line">v1.push_back(3);</span><br><span class="line">v1.push_back(5);</span><br><span class="line"></span><br><span class="line">printV(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">template&lt;class _InIt,</span><br><span class="line">class _Fn1&gt; inline</span><br><span class="line">_Fn1 for_each(_InIt _First, _InIt _Last, _Fn1 _Func)</span><br><span class="line">&#123;// perform function for each element</span><br><span class="line">_DEBUG_RANGE(_First, _Last);</span><br><span class="line">_DEBUG_POINTER(_Func);</span><br><span class="line">return (_For_each(_Unchecked(_First), _Unchecked(_Last), _Func));</span><br><span class="line">&#125; */</span><br><span class="line"></span><br><span class="line">//函数对象 回调函数入口地址</span><br><span class="line">for_each(v1.begin(), v1.end(), showElem);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">for_each(v1.begin(), v1.end(), CMyShow());</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line"> CMyShow mya;</span><br><span class="line"> CMyShow my1 = for_each(v1.begin(), v1.end(),mya); //给my1初始化</span><br><span class="line"> mya.printNum();  //ma1和my1 是两个不同的对象</span><br><span class="line"> my1.printNum();</span><br><span class="line"></span><br><span class="line"> my1 = for_each(v1.begin(), v1.end(),mya);  //给my1赋值</span><br><span class="line"> my1.printNum();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int  increase(int i)</span><br><span class="line">&#123;</span><br><span class="line">return i+100;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main42_transform()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">v1.push_back(1);</span><br><span class="line">v1.push_back(3);</span><br><span class="line">v1.push_back(5);</span><br><span class="line"></span><br><span class="line">printV(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//transform 使用回调函数</span><br><span class="line">transform(v1.begin(), v1.end(), v1.begin(),  increase ); </span><br><span class="line">printV(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//transform 使用 预定义的函数对象</span><br><span class="line">transform(v1.begin(), v1.end(), v1.begin(),  negate&lt;int&gt;() ); </span><br><span class="line">printV(v1);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//transform 使用 函数适配器 和函数对象</span><br><span class="line">list&lt;int&gt; mylist;</span><br><span class="line">mylist.resize( v1.size() );</span><br><span class="line"></span><br><span class="line">transform(v1.begin(), v1.end(), mylist.begin(),  bind2nd( multiplies&lt;int&gt;(), 10 ) ); </span><br><span class="line">printList(mylist);</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line"></span><br><span class="line">//transform 也可以把运算结果 直接输出到屏幕</span><br><span class="line">transform(v1.begin(), v1.end(), ostream_iterator&lt;int&gt;(cout, &quot; &quot; ), negate&lt;int&gt;() );</span><br><span class="line">cout &lt;&lt; endl;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//一般情况下：for_each所使用的函数对象，参数是引用，没有返回值</span><br><span class="line">//transform所使用的函数对象，参数一般不使用引用，而是还有返回值</span><br><span class="line">int showElem2(int n)</span><br><span class="line">&#123;</span><br><span class="line">cout &lt;&lt; n &lt;&lt; &quot; &quot;;</span><br><span class="line">return n;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main43_transform_pk_foreach()</span><br><span class="line">&#123;</span><br><span class="line">vector&lt;int&gt; v1;</span><br><span class="line">v1.push_back(1);</span><br><span class="line">v1.push_back(3);</span><br><span class="line">v1.push_back(5);</span><br><span class="line"></span><br><span class="line">vector&lt;int&gt; v2 = v1;</span><br><span class="line"></span><br><span class="line">for_each(v1.begin(), v1.end(), showElem);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//transform 对 函数对象的要求</span><br><span class="line">/*</span><br><span class="line">c:\program files\microsoft visual studio 10.0\vc\include\algorithm(1119): </span><br><span class="line">参见对正在编译的函数 模板 实例化</span><br><span class="line">“_OutIt std::_Transform1&lt;int*,_OutIt,</span><br><span class="line">void(__cdecl *)(int &amp;)&gt;(_InIt,_InIt,_OutIt,_Fn1,</span><br><span class="line">std::tr1::true_type)”的引用</span><br><span class="line">1&gt;          with</span><br><span class="line">1&gt;          [</span><br><span class="line">1&gt;              _OutIt=std::_Vector_iterator&lt;std::_Vector_val&lt;int,std::allocator&lt;int&gt;&gt;&gt;,</span><br><span class="line">1&gt;              _InIt=int *,</span><br><span class="line">1&gt;              _Fn1=void (__cdecl *)(int &amp;)</span><br><span class="line">1&gt;          ]</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">template&lt;class _InIt,</span><br><span class="line">class _OutIt,</span><br><span class="line">class _Fn1&gt; inline</span><br><span class="line">_OutIt _Transform(_InIt _First, _InIt _Last,</span><br><span class="line">_OutIt _Dest, _Fn1 _Func)</span><br><span class="line">&#123;// transform [_First, _Last) with _Func</span><br><span class="line">for (; _First != _Last; ++_First, ++_Dest)</span><br><span class="line">*_Dest = _Func(*_First);  //解释了 为什么 要有返回值</span><br><span class="line">return (_Dest);</span><br><span class="line">&#125;</span><br><span class="line">*/</span><br><span class="line">transform(v2.begin(), v2.end(), v2.begin(), showElem2);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void main()</span><br><span class="line">&#123;</span><br><span class="line">//main41_foreach();</span><br><span class="line">//main42_transform();</span><br><span class="line">// main43_transform_pk_foreach();</span><br><span class="line">cout&lt;&lt;&quot;hello...&quot;&lt;&lt;endl;</span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line">return ;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;foreach和transform算法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#foreach和transform算法&quot;&gt;&lt;/a&gt; foreach和transform算法&lt;/h1&gt;
&lt;h4 id=&quot;for_each&quot;&gt;&lt;a cla
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
</feed>
