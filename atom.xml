<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2020-03-12T15:01:34.066Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java局部内部类定义</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00123%E5%B1%80%E9%83%A8%E5%86%85%E9%83%A8%E7%B1%BB%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00123局部内部类定义/</id>
    <published>2020-03-12T14:58:22.000Z</published>
    <updated>2020-03-12T15:01:34.066Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java局部内部类定义"><a class="markdownIt-Anchor" href="#java局部内部类定义"></a> java局部内部类定义</h1><p>如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。<br>“局部”：只有当前所属的方法才能使用它，出了这个方法外面就不能用了。</p><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    修饰符 返回值类型 外部类方法名称(参数列表) &#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> 局部内部类名称 </span>&#123;</span><br><span class="line">            <span class="comment">// ...</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="小节一下类的权限修饰符"><a class="markdownIt-Anchor" href="#小节一下类的权限修饰符"></a> 小节一下类的权限修饰符：</h3><p><code>public &gt; protected &gt; (default) &gt; private</code></p><h4 id="定义一个类的时候权限修饰符规则"><a class="markdownIt-Anchor" href="#定义一个类的时候权限修饰符规则"></a> 定义一个类的时候，权限修饰符规则：</h4><p>外部类：public / (default)</p><p>成员内部类：public / protected / (default) / private</p><p>局部内部类：什么都不能写</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodOuter</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> </span>&#123; <span class="comment">// 局部内部类</span></span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(num); <span class="comment">// 10</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        Inner inner = <span class="keyword">new</span> Inner();</span><br><span class="line">        inner.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Outer obj = <span class="keyword">new</span> Outer();</span><br><span class="line">        obj.methodOuter();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java局部内部类定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java局部内部类定义&quot;&gt;&lt;/a&gt; java局部内部类定义&lt;/h1&gt;
&lt;p&gt;如果一个类是定义在一个方法内部的，那么这就是一个局部内部类。&lt;br&gt;
“局部”：只有当前所
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java内部类的同名变量访问</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00122%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%90%8C%E5%90%8D%E5%8F%98%E9%87%8F%E8%AE%BF%E9%97%AE/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00122内部类的同名变量访问/</id>
    <published>2020-03-12T09:44:02.000Z</published>
    <updated>2020-03-12T14:57:39.341Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java内部类的同名变量访问"><a class="markdownIt-Anchor" href="#java内部类的同名变量访问"></a> java内部类的同名变量访问</h1><h3 id="格式是"><a class="markdownIt-Anchor" href="#格式是"></a> 格式是：</h3><p><code>外部类名称.this.外部类成员变量名</code></p><h3 id="声明内部类对象"><a class="markdownIt-Anchor" href="#声明内部类对象"></a> 声明内部类对象:</h3><p><code>外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 如果出现了重名现象，那么格式是：外部类名称.this.外部类成员变量名</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Outer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>; <span class="comment">// 外部类的成员变量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Inner</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> num = <span class="number">20</span>; <span class="comment">// 内部类的成员变量</span></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodInner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">int</span> num = <span class="number">30</span>; <span class="comment">// 内部类方法的局部变量</span></span><br><span class="line">            System.out.println(num); <span class="comment">// 局部变量，就近原则</span></span><br><span class="line">            System.out.println(<span class="keyword">this</span>.num); <span class="comment">// 内部类的成员变量</span></span><br><span class="line">            System.out.println(Outer.<span class="keyword">this</span>.num); <span class="comment">// 外部类的成员变量</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();</span></span><br><span class="line">        Outer.Inner obj = <span class="keyword">new</span> Outer().new Inner();</span><br><span class="line">        obj.methodInner();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java内部类的同名变量访问&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java内部类的同名变量访问&quot;&gt;&lt;/a&gt; java内部类的同名变量访问&lt;/h1&gt;
&lt;h3 id=&quot;格式是&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java成员内部类的使用</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00121%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00121成员内部类的使用/</id>
    <published>2020-03-12T09:36:26.000Z</published>
    <updated>2020-03-12T09:42:58.148Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java成员内部类的使用"><a class="markdownIt-Anchor" href="#java成员内部类的使用"></a> java成员内部类的使用</h1><h3 id="如何使用成员内部类"><a class="markdownIt-Anchor" href="#如何使用成员内部类"></a> 如何使用成员内部类？</h3><h5 id="有两种方式"><a class="markdownIt-Anchor" href="#有两种方式"></a> 有两种方式：</h5><h5 id="间接方式"><a class="markdownIt-Anchor" href="#间接方式"></a> 间接方式：</h5><p>在外部类的方法当中，使用内部类；然后main只是调用外部类的方法。</p><h5 id="直接方式公式"><a class="markdownIt-Anchor" href="#直接方式公式"></a> 直接方式，公式：</h5><p><code>类名称 对象名 = new 类名称();</code><br><code>【外部类名称.内部类名称 对象名 = new 外部类名称().new 内部类名称();】</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body(); <span class="comment">// 外部类的对象</span></span><br><span class="line">        <span class="comment">// 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照公式写：</span></span><br><span class="line">        Body.Hearts heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">// 成员内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏跳动：蹦蹦蹦！"</span>);</span><br><span class="line">            System.out.println(<span class="string">"我叫："</span> + name); <span class="comment">// 正确写法！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法"</span>);</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java成员内部类的使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java成员内部类的使用&quot;&gt;&lt;/a&gt; java成员内部类的使用&lt;/h1&gt;
&lt;h3 id=&quot;如何使用成员内部类&quot;&gt;&lt;a class=&quot;markdownIt-Ancho
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java成员内部类的定义</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00120%E6%88%90%E5%91%98%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E5%AE%9A%E4%B9%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00120成员内部类的定义/</id>
    <published>2020-03-12T09:33:33.000Z</published>
    <updated>2020-03-12T09:35:48.343Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java成员内部类的定义"><a class="markdownIt-Anchor" href="#java成员内部类的定义"></a> java成员内部类的定义</h1><h3 id="成员内部类的定义格式"><a class="markdownIt-Anchor" href="#成员内部类的定义格式"></a> 成员内部类的定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 外部类名称 </span>&#123;</span><br><span class="line">    </span><br><span class="line">    修饰符 <span class="class"><span class="keyword">class</span> 内部类名称 </span>&#123;</span><br><span class="line">        <span class="comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h3><p>内用外，随意访问；外用内，需要内部类对象。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Body body = <span class="keyword">new</span> Body(); <span class="comment">// 外部类的对象</span></span><br><span class="line">        <span class="comment">// 通过外部类的对象，调用外部类的方法，里面间接在使用内部类Heart</span></span><br><span class="line">        body.methodBody();</span><br><span class="line">        System.out.println(<span class="string">"====================="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 按照公式写：</span></span><br><span class="line">        Body.Heart heart = <span class="keyword">new</span> Body().new Heart();</span><br><span class="line">        heart.beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Body</span> </span>&#123; <span class="comment">// 外部类</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Heart</span> </span>&#123; <span class="comment">// 成员内部类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 内部类的方法</span></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">beat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            System.out.println(<span class="string">"心脏跳动：蹦蹦蹦！"</span>);</span><br><span class="line">            System.out.println(<span class="string">"我叫："</span> + name); <span class="comment">// 正确写法！</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的成员变量</span></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 外部类的方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodBody</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"外部类的方法"</span>);</span><br><span class="line">        <span class="keyword">new</span> Heart().beat();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java成员内部类的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java成员内部类的定义&quot;&gt;&lt;/a&gt; java成员内部类的定义&lt;/h1&gt;
&lt;h3 id=&quot;成员内部类的定义格式&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java内部类的概念与分类</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00119%E5%86%85%E9%83%A8%E7%B1%BB%E7%9A%84%E6%A6%82%E5%BF%B5%E4%B8%8E%E5%88%86%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00119内部类的概念与分类/</id>
    <published>2020-03-12T09:30:07.000Z</published>
    <updated>2020-03-12T09:32:54.484Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java内部类的概念与分类"><a class="markdownIt-Anchor" href="#java内部类的概念与分类"></a> java内部类的概念与分类</h1><p>如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。<br>例如：身体和心脏的关系。又如：汽车和发动机的关系。</p><h3 id="分类"><a class="markdownIt-Anchor" href="#分类"></a> 分类：</h3><ol><li>成员内部类</li><li>局部内部类（包含匿名内部类）</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo03;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01InnerClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java内部类的概念与分类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java内部类的概念与分类&quot;&gt;&lt;/a&gt; java内部类的概念与分类&lt;/h1&gt;
&lt;p&gt;如果一个事物的内部包含另一个事物，那么这就是一个类内部包含另一个类。&lt;br&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java四种权限修饰符</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00118%E5%9B%9B%E7%A7%8D%E6%9D%83%E9%99%90%E4%BF%AE%E9%A5%B0%E7%AC%A6/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00118四种权限修饰符/</id>
    <published>2020-03-12T07:59:46.000Z</published>
    <updated>2020-03-12T09:29:42.197Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java四种权限修饰符"><a class="markdownIt-Anchor" href="#java四种权限修饰符"></a> java四种权限修饰符</h1><h3 id="java中有四种权限修饰符"><a class="markdownIt-Anchor" href="#java中有四种权限修饰符"></a> Java中有四种权限修饰符：</h3><table><thead><tr><th></th><th>public  &gt;</th><th>protected   &gt;</th><th>(default)   &gt;</th><th>private</th></tr></thead><tbody><tr><td>同一个类（我自己）</td><td>YES</td><td>YES</td><td>YES</td><td>YES</td></tr><tr><td>同一个包（我邻居）</td><td>YES</td><td>YES</td><td>YES</td><td>NO</td></tr><tr><td>不同包子类（我儿子）</td><td>YES</td><td>YES</td><td>NO</td><td>NO</td></tr><tr><td>不同包非子类（陌生人）</td><td>YES</td><td>NO</td><td>NO</td><td>NO</td></tr></tbody></table><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项：</h3><p>(default)并不是关键字“default”，而是根本不写。</p><h3 id="sub包中的类"><a class="markdownIt-Anchor" href="#sub包中的类"></a> sub包中的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02.sub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.day11.demo02.MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Stranger</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodStrange</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="keyword">new</span> MyClass().num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02.sub;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.day11.demo02.MyClass;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySon</span> <span class="keyword">extends</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodSon</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(super.num);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="demo02包中的类"><a class="markdownIt-Anchor" href="#demo02包中的类"></a> demo02包中的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Main</span> </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo02;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyAnother</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">anotherMethod</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="comment">//        System.out.println(new MyClass().num);</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java四种权限修饰符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java四种权限修饰符&quot;&gt;&lt;/a&gt; java四种权限修饰符&lt;/h1&gt;
&lt;h3 id=&quot;java中有四种权限修饰符&quot;&gt;&lt;a class=&quot;markdownIt-Anch
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰成员变量</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00117final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00117final关键字用于修饰成员变量/</id>
    <published>2020-03-12T07:54:37.000Z</published>
    <updated>2020-03-12T07:57:43.442Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰成员变量"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰成员变量"></a> java final关键字用于修饰成员变量</h1><p>对于成员变量来说，如果使用final关键字修饰，那么这个变量也照样是不可变。</p><p>由于成员变量具有默认值，所以用了final之后必须手动赋值，不会再给默认值了。</p><p>对于final的成员变量，要么使用直接赋值，要么通过构造方法赋值。二者选其一。</p><p>必须保证类当中所有重载的构造方法，都最终会对final的成员变量进行赋值。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String name<span class="comment">/* = "鹿晗"*/</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        name = <span class="string">"关晓彤"</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    public void setName(String name) &#123;</span></span><br><span class="line"><span class="comment">//        this.name = name;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰成员变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰成员变量&quot;&gt;&lt;/a&gt; java final关键字用于修饰成员变量&lt;/h1&gt;
&lt;p&gt;对于成员变量来说，如果使用fi
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰局部变量</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00116final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E5%B1%80%E9%83%A8%E5%8F%98%E9%87%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00116final关键字用于修饰局部变量/</id>
    <published>2020-03-12T07:50:56.000Z</published>
    <updated>2020-03-12T07:54:01.844Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰局部变量"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰局部变量"></a> java final关键字用于修饰局部变量</h1><p>对于基本类型来说，不可变说的是变量当中的数据不可改变<br>对于引用类型来说，不可变说的是变量当中的地址值不可改变</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">final关键字代表最终、不可改变的。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">常见四种用法：</span></span><br><span class="line"><span class="comment">1. 可以用来修饰一个类</span></span><br><span class="line"><span class="comment">2. 可以用来修饰一个方法</span></span><br><span class="line"><span class="comment">3. 还可以用来修饰一个局部变量</span></span><br><span class="line"><span class="comment">4. 还可以用来修饰一个成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Final</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> num1 = <span class="number">10</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 10</span></span><br><span class="line">        num1 = <span class="number">20</span>;</span><br><span class="line">        System.out.println(num1); <span class="comment">// 20</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 一旦使用final用来修饰局部变量，那么这个变量就不能进行更改。</span></span><br><span class="line">        <span class="comment">// “一次赋值，终生不变”</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num2 = <span class="number">200</span>;</span><br><span class="line">        System.out.println(num2); <span class="comment">// 200</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        num2 = 250; // 错误写法！不能改变！</span></span><br><span class="line"><span class="comment">//        num2 = 200; // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 正确写法！只要保证有唯一一次赋值即可</span></span><br><span class="line">        <span class="keyword">final</span> <span class="keyword">int</span> num3;</span><br><span class="line">        num3 = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 对于基本类型来说，不可变说的是变量当中的数据不可改变</span></span><br><span class="line">        <span class="comment">// 对于引用类型来说，不可变说的是变量当中的地址值不可改变</span></span><br><span class="line">        Student stu1 = <span class="keyword">new</span> Student(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu1.getName()); <span class="comment">// 赵丽颖</span></span><br><span class="line">        stu1 = <span class="keyword">new</span> Student(<span class="string">"霍建华"</span>);</span><br><span class="line">        System.out.println(stu1);</span><br><span class="line">        System.out.println(stu1.getName()); <span class="comment">// 霍建华</span></span><br><span class="line">        System.out.println(<span class="string">"==============="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">final</span> Student stu2 = <span class="keyword">new</span> Student(<span class="string">"高圆圆"</span>);</span><br><span class="line">        <span class="comment">// 错误写法！final的引用类型变量，其中的地址不可改变</span></span><br><span class="line"><span class="comment">//        stu2 = new Student("赵又廷");</span></span><br><span class="line">        System.out.println(stu2.getName()); <span class="comment">// 高圆圆</span></span><br><span class="line">        stu2.setName(<span class="string">"高圆圆圆圆圆圆"</span>);</span><br><span class="line">        System.out.println(stu2.getName()); <span class="comment">// 高圆圆圆圆圆圆</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰局部变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰局部变量&quot;&gt;&lt;/a&gt; java final关键字用于修饰局部变量&lt;/h1&gt;
&lt;p&gt;对于基本类型来说，不可变说的是
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰成员方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00115final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00115final关键字用于修饰成员方法/</id>
    <published>2020-03-12T07:38:55.000Z</published>
    <updated>2020-03-12T07:42:07.282Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰成员方法"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰成员方法"></a> java final关键字用于修饰成员方法</h1><p>当final关键字用来修饰一个方法的时候，这个方法就是最终方法，也就是不能被覆盖重写。</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="keyword">final</span> 返回值类型 方法名称(参数列表) &#123;</span><br><span class="line">    <span class="comment">// 方法体</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="注意事项"><a class="markdownIt-Anchor" href="#注意事项"></a> 注意事项：</h3><p>对于类、方法来说，<code>abstract</code>关键字和<code>final</code>关键字不能同时使用，因为矛盾。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="comment">/*final*/</span> <span class="function"><span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodAbs</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 错误写法！不能覆盖重写父类当中final的方法</span></span><br><span class="line"><span class="comment">//    @Override</span></span><br><span class="line"><span class="comment">//    public void method() &#123;</span></span><br><span class="line"><span class="comment">//        System.out.println("子类覆盖重写父类的方法！");</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰成员方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰成员方法&quot;&gt;&lt;/a&gt; java final关键字用于修饰成员方法&lt;/h1&gt;
&lt;p&gt;当final关键字用来修饰一个
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字用于修饰类</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00114final%E5%85%B3%E9%94%AE%E5%AD%97%E7%94%A8%E4%BA%8E%E4%BF%AE%E9%A5%B0%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00114final关键字用于修饰类/</id>
    <published>2020-03-12T07:31:37.000Z</published>
    <updated>2020-03-12T07:35:31.308Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字用于修饰类"><a class="markdownIt-Anchor" href="#java-final关键字用于修饰类"></a> java final关键字用于修饰类</h1><p>当final关键字用来修饰一个类的时候，</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> 类名称 </span>&#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="含义"><a class="markdownIt-Anchor" href="#含义"></a> 含义：</h3><p>当前这个类不能有任何的子类。（太监类）</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意：</h3><p>一个类如果是final的，那么其中所有的成员方法都无法进行覆盖重写（因为没儿子。）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="class"><span class="keyword">class</span> <span class="title">MyClass</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"方法执行！"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day11.demo01;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不能使用一个final类来作为父类</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MySubClass</span> /*<span class="keyword">extends</span> <span class="title">MyClass</span>*/ </span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字用于修饰类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字用于修饰类&quot;&gt;&lt;/a&gt; java final关键字用于修饰类&lt;/h1&gt;
&lt;p&gt;当final关键字用来修饰一个类的时候，&lt;/p&gt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java final关键字与四种用法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/12/java00113final%E5%85%B3%E9%94%AE%E5%AD%97%E4%B8%8E%E5%9B%9B%E7%A7%8D%E7%94%A8%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/12/java00113final关键字与四种用法/</id>
    <published>2020-03-12T07:26:50.000Z</published>
    <updated>2020-03-12T07:31:02.653Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java-final关键字与四种用法"><a class="markdownIt-Anchor" href="#java-final关键字与四种用法"></a> java final关键字与四种用法</h1><h3 id="final关键字代表最终-不可改变的"><a class="markdownIt-Anchor" href="#final关键字代表最终-不可改变的"></a> final关键字代表最终、不可改变的。</h3><h3 id="常见四种用法"><a class="markdownIt-Anchor" href="#常见四种用法"></a> 常见四种用法：</h3><p>可以用来修饰一个类</p><p>可以用来修饰一个方法</p><p>还可以用来修饰一个局部变量</p><p>还可以用来修饰一个成员变量</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java-final关键字与四种用法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java-final关键字与四种用法&quot;&gt;&lt;/a&gt; java final关键字与四种用法&lt;/h1&gt;
&lt;h3 id=&quot;final关键字代表最终-不可改变的&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java关键字读法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00112%E5%85%B3%E9%94%AE%E5%AD%97%E8%AF%BB%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00112关键字读法/</id>
    <published>2020-03-11T14:51:47.000Z</published>
    <updated>2020-03-11T14:59:57.864Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java关键字读法"><a class="markdownIt-Anchor" href="#java关键字读法"></a> java关键字读法</h1><center><p><img src="/images/javawz/1583938319378.png" alt="1583938319378"></p><p><img src="/images/javawz/1583938353027.png" alt="1583938353027"></p><p><img src="/images/javawz/1583938389684.png" alt="1583938389684"></p><p><img src="/images/javawz/1583938408155.png" alt="1583938408155"></p><p><img src="/images/javawz/1583938433388.png" alt="1583938433388"></p><p><img src="/images/javawz/1583938494745.png" alt="1583938494745"></p><p><img src="/images/javawz/1583938512492.png" alt="1583938512492"></p><p><img src="/images/javawz/1583938531091.png" alt="1583938531091"></p><p><img src="/images/javawz/1583938566780.png" alt="1583938566780"></p><p><img src="/images/javawz/1583938583104.png" alt="1583938583104"></p><p><img src="/images/javawz/1583938603106.png" alt="1583938603106"></p><p><img src="/images/javawz/1583938619024.png" alt="1583938619024"></p><p><img src="/images/javawz/1583938636415.png" alt="1583938636415"></p></center>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java关键字读法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java关键字读法&quot;&gt;&lt;/a&gt; java关键字读法&lt;/h1&gt;
&lt;center&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1583938319378.png
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java接口多态</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00111%E6%8E%A5%E5%8F%A3%E5%A4%9A%E6%80%81/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00111接口多态/</id>
    <published>2020-03-11T11:36:49.000Z</published>
    <updated>2020-03-11T11:46:56.254Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java接口多态"><a class="markdownIt-Anchor" href="#java接口多态"></a> java接口多态</h1><p>接口多态和类多态是一样的用法</p><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> 父接口</span>&#123;</span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名<span class="title">A</span> <span class="keyword">implements</span> 父接口 </span>&#123;</span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名<span class="title">B</span> <span class="keyword">implements</span> 父接口 </span>&#123;</span><br><span class="line"><span class="comment">//内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="使用格式"><a class="markdownIt-Anchor" href="#使用格式"></a> 使用格式:</h3><p><code>父接口类型 接口对象名 = new 类名();</code></p><br><br><br><br><br><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xiaochenyan.top.demo003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoMain</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Computer cm = <span class="keyword">new</span> Computer();</span><br><span class="line">        cm.open();</span><br><span class="line">        cm.local(<span class="keyword">new</span> usbMouse());</span><br><span class="line">        cm.local(<span class="keyword">new</span> usbKeyboard());</span><br><span class="line">        cm.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xiaochenyan.top.demo003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xiaochenyan.top.demo003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">usbKeyboard</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">qiaoJiJianPan</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"敲击键盘"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xiaochenyan.top.demo003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">usbMouse</span> <span class="keyword">implements</span> <span class="title">USB</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开鼠标"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭鼠标"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">shuBiaoDianJi</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"鼠标点击"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> xiaochenyan.top.demo003;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Computer</span></span>&#123;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"打开电脑"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"关闭电脑"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//使用接口进行多态处理</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">local</span><span class="params">(USB obj)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        obj.open();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> usbMouse)&#123;</span><br><span class="line">            ((usbMouse) obj).shuBiaoDianJi();</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span>(obj <span class="keyword">instanceof</span> usbKeyboard)&#123;</span><br><span class="line">            ((usbKeyboard) obj).qiaoJiJianPan();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        obj.close();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java接口多态&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java接口多态&quot;&gt;&lt;/a&gt; java接口多态&lt;/h1&gt;
&lt;p&gt;接口多态和类多态是一样的用法&lt;/p&gt;
&lt;h3 id=&quot;定义格式&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java用instanceof关键字进行类型判断</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00109%E7%94%A8instanceof%E5%85%B3%E9%94%AE%E5%AD%97%E8%BF%9B%E8%A1%8C%E7%B1%BB%E5%9E%8B%E5%88%A4%E6%96%AD/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00109用instanceof关键字进行类型判断/</id>
    <published>2020-03-11T09:15:30.000Z</published>
    <updated>2020-03-11T09:21:06.904Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java用instanceof关键字进行类型判断"><a class="markdownIt-Anchor" href="#java用instanceof关键字进行类型判断"></a> java用instanceof关键字进行类型判断</h1><p>如何才能知道一个父类引用的对象，本来是什么子类？</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h3><p><code>对象 instanceof 类名称</code><br>这将会得到一个boolean值结果，也就是判断前面的对象能不能当做后面类型的实例。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃SHIT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Instanceof</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Animal animal = <span class="keyword">new</span> Dog(); <span class="comment">// 本来是一只狗</span></span><br><span class="line">        animal.eat(); <span class="comment">// 狗吃SHIT</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 如果希望掉用子类特有方法，需要向下转型</span></span><br><span class="line">        <span class="comment">// 判断一下父类引用animal本来是不是Dog</span></span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHouse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断一下animal本来是不是Cat</span></span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        giveMeAPet(<span class="keyword">new</span> Dog());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">giveMeAPet</span><span class="params">(Animal animal)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Dog) &#123;</span><br><span class="line">            Dog dog = (Dog) animal;</span><br><span class="line">            dog.watchHouse();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (animal <span class="keyword">instanceof</span> Cat) &#123;</span><br><span class="line">            Cat cat = (Cat) animal;</span><br><span class="line">            cat.catchMouse();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java用instanceof关键字进行类型判断&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java用instanceof关键字进行类型判断&quot;&gt;&lt;/a&gt; java用instanceof关键字进行类型判断&lt;/h1&gt;
&lt;p&gt;如何才能知道
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java对象的向下转型</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00108%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%91%E4%B8%8B%E8%BD%AC%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00108对象的向下转型/</id>
    <published>2020-03-11T08:57:49.000Z</published>
    <updated>2020-03-11T09:19:41.252Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java对象的向下转型"><a class="markdownIt-Anchor" href="#java对象的向下转型"></a> java对象的向下转型</h1><p><img src="/images/javawz/1583917324447.png" alt="1583917324447"></p><p>向上转型一定是安全的，没有问题的，正确的。但是也有一个弊端：<br>对象一旦向上转型为父类，那么就无法调用子类原本特有的内容。</p><h3 id="解决方案用对象的向下转型还原"><a class="markdownIt-Anchor" href="#解决方案用对象的向下转型还原"></a> 解决方案：用对象的向下转型【还原】。</h3><h4 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式 :</h4><p><code>子类类型 子类对象名 = (子类类型)父类对象</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Dog</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗吃SHIT"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">watchHouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"狗看家"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象的向上转型，就是：父类引用指向之类对象。</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat(); <span class="comment">// 本来创建的时候是一只猫</span></span><br><span class="line">        animal.eat(); <span class="comment">// 猫吃鱼</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        animal.catchMouse(); // 错误写法！</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 向下转型，进行“还原”动作</span></span><br><span class="line">        Cat cat = (Cat) animal;</span><br><span class="line">        cat.catchMouse(); <span class="comment">// 猫抓老鼠</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 下面是错误的向下转型</span></span><br><span class="line">        <span class="comment">// 本来new的时候是一只猫，现在非要当做狗</span></span><br><span class="line">        <span class="comment">// 错误写法！编译不会报错，但是运行会出现异常：</span></span><br><span class="line">        <span class="comment">// java.lang.ClassCastException，类转换异常</span></span><br><span class="line">        Dog dog = (Dog) animal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java对象的向下转型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java对象的向下转型&quot;&gt;&lt;/a&gt; java对象的向下转型&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1583917324447.png&quot; a
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java对象的向上转型</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00107%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%90%91%E4%B8%8A%E8%BD%AC%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00107对象的向上转型/</id>
    <published>2020-03-11T08:44:08.000Z</published>
    <updated>2020-03-11T12:08:28.302Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java对象的向上转型"><a class="markdownIt-Anchor" href="#java对象的向上转型"></a> java对象的向上转型</h1><p><img src="/images/javawz/1583916548352.png" alt="1583916548352"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Cat</span> <span class="keyword">extends</span> <span class="title">Animal</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">eat</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫吃鱼"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 子类特有方法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">catchMouse</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"猫抓老鼠"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo06;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> */</span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 对象的向上转型，就是：父类引用指向之类对象。</span></span><br><span class="line">        Animal animal = <span class="keyword">new</span> Cat(); </span><br><span class="line">        animal.eat();</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java对象的向上转型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java对象的向上转型&quot;&gt;&lt;/a&gt; java对象的向上转型&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1583916548352.png&quot; a
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java使用多态的好处</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00106%E4%BD%BF%E7%94%A8%E5%A4%9A%E6%80%81%E7%9A%84%E5%A5%BD%E5%A4%84/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00106使用多态的好处/</id>
    <published>2020-03-11T08:29:46.000Z</published>
    <updated>2020-03-11T08:43:15.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java使用多态的好处"><a class="markdownIt-Anchor" href="#java使用多态的好处"></a> java使用多态的好处</h1><p><img src="/images/javawz/1583915978020.png" alt="1583915978020"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java使用多态的好处&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java使用多态的好处&quot;&gt;&lt;/a&gt; java使用多态的好处&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1583915978020.png&quot; a
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java多态中成员方法的使用特点</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00105%E5%A4%9A%E6%80%81%E4%B8%AD%E6%88%90%E5%91%98%E6%96%B9%E6%B3%95%E7%9A%84%E4%BD%BF%E7%94%A8%E7%89%B9%E7%82%B9/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00105多态中成员方法的使用特点/</id>
    <published>2020-03-11T08:29:41.000Z</published>
    <updated>2020-03-11T11:33:06.491Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java多态中成员方法的使用特点"><a class="markdownIt-Anchor" href="#java多态中成员方法的使用特点"></a> java多态中成员方法的使用特点</h1><h3 id="在多态的代码当中成员方法的访问规则是"><a class="markdownIt-Anchor" href="#在多态的代码当中成员方法的访问规则是"></a> 在多态的代码当中，成员方法的访问规则是：</h3><p>​    看new的是谁，就优先用谁，没有则向上找。</p><h3 id="口诀"><a class="markdownIt-Anchor" href="#口诀"></a> 口诀：</h3><p>编译看左边，运行看右边。</p><h3 id="对比一下"><a class="markdownIt-Anchor" href="#对比一下"></a> 对比一下：</h3><h5 id="成员变量"><a class="markdownIt-Anchor" href="#成员变量"></a> 成员变量：</h5><p>编译看左边，运行还看左边。</p><h5 id="成员方法"><a class="markdownIt-Anchor" href="#成员方法"></a> 成员方法：</h5><p>编译看左边，运行看右边。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02MultiMethod</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi(); <span class="comment">// 多态</span></span><br><span class="line"></span><br><span class="line">        obj.method(); <span class="comment">// 父子都有，优先用子</span></span><br><span class="line">        obj.methodFu(); <span class="comment">// 子类没有，父类有，向上找到父类</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 编译看左边，左边是Fu，Fu当中没有methodZi方法，所以编译报错。</span></span><br><span class="line"><span class="comment">//        obj.methodZi(); // 错误写法！</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类特有方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类特有方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java多态中成员方法的使用特点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java多态中成员方法的使用特点&quot;&gt;&lt;/a&gt; java多态中成员方法的使用特点&lt;/h1&gt;
&lt;h3 id=&quot;在多态的代码当中成员方法的访问规则是&quot;&gt;&lt;a cl
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java多态中成员变量的使用特点</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00104%E5%A4%9A%E6%80%81%E4%B8%AD%E6%88%90%E5%91%98%E5%8F%98%E9%87%8F%E7%9A%84%E4%BD%BF%E7%94%A8%E7%89%B9%E7%82%B9/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00104多态中成员变量的使用特点/</id>
    <published>2020-03-11T08:14:50.000Z</published>
    <updated>2020-03-11T08:22:24.544Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java多态中成员变量的使用特点"><a class="markdownIt-Anchor" href="#java多态中成员变量的使用特点"></a> java多态中成员变量的使用特点</h1><h3 id="访问成员变量的两种方式"><a class="markdownIt-Anchor" href="#访问成员变量的两种方式"></a> 访问成员变量的两种方式：</h3><p>直接通过对象名称访问成员变量：看等号左边是谁，优先用谁，没有则向上找。</p><p>间接通过成员方法访问成员变量：看该方法属于谁，优先用谁，没有则向上找。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01MultiField</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态的写法，父类引用指向子类对象</span></span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi();</span><br><span class="line">        System.out.println(obj.num); <span class="comment">// 父：10</span></span><br><span class="line"><span class="comment">//        System.out.println(obj.age); // 错误写法！</span></span><br><span class="line">        System.out.println(<span class="string">"============="</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 子类没有覆盖重写，就是父：10</span></span><br><span class="line">        <span class="comment">// 子类如果覆盖重写，就是子：20</span></span><br><span class="line">        obj.showNum();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> /*<span class="keyword">extends</span> <span class="title">Object</span>*/ </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类特有方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo05;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> age = <span class="number">16</span>;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showNum</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(num);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodZi</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类特有方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java多态中成员变量的使用特点&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java多态中成员变量的使用特点&quot;&gt;&lt;/a&gt; java多态中成员变量的使用特点&lt;/h1&gt;
&lt;h3 id=&quot;访问成员变量的两种方式&quot;&gt;&lt;a class=&quot;ma
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java多态的格式与使用</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/11/java00103%E5%A4%9A%E6%80%81%E7%9A%84%E6%A0%BC%E5%BC%8F%E4%B8%8E%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/11/java00103多态的格式与使用/</id>
    <published>2020-03-11T08:09:47.000Z</published>
    <updated>2020-03-11T08:14:13.229Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java多态的格式与使用"><a class="markdownIt-Anchor" href="#java多态的格式与使用"></a> java多态的格式与使用</h1><p>代码当中体现多态性，其实就是一句话：父类引用指向子类对象。</p><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式：</h3><p><code>父类名称 对象名 = new 子类名称();</code></p><h5 id="或者"><a class="markdownIt-Anchor" href="#或者"></a> 或者：</h5><p><code>接口名称 对象名 = new 实现类名称();</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Multi</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 使用多态的写法</span></span><br><span class="line">        <span class="comment">// 左侧父类的引用，指向了右侧子类的对象</span></span><br><span class="line">        Fu obj = <span class="keyword">new</span> Zi();</span><br><span class="line"></span><br><span class="line">        obj.method();</span><br><span class="line">        obj.methodFu();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">methodFu</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"父类特有方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.day10.demo04;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Zi</span> <span class="keyword">extends</span> <span class="title">Fu</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"子类方法"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java多态的格式与使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java多态的格式与使用&quot;&gt;&lt;/a&gt; java多态的格式与使用&lt;/h1&gt;
&lt;p&gt;代码当中体现多态性，其实就是一句话：父类引用指向子类对象。&lt;/p&gt;
&lt;h3 id=&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
