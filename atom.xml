<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2022-05-21T21:24:30.994Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>UML类图_常见的报文编码方式_ASN1报文编解码_vs连接linux服务器</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/21/UML%E7%B1%BB%E5%9B%BE-%E5%B8%B8%E8%A7%81%E7%9A%84%E6%8A%A5%E6%96%87%E7%BC%96%E7%A0%81%E6%96%B9%E5%BC%8F-ASN1%E6%8A%A5%E6%96%87%E7%BC%96%E8%A7%A3%E7%A0%81-vs%E8%BF%9E%E6%8E%A5linux%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/21/UML类图-常见的报文编码方式-ASN1报文编解码-vs连接linux服务器/</id>
    <published>2022-05-21T03:32:04.000Z</published>
    <updated>2022-05-21T21:24:30.994Z</updated>
    
    <content type="html"><![CDATA[<h2 id="两台机器通信"><a class="markdownIt-Anchor" href="#两台机器通信"></a> 两台机器通信</h2><h3 id="1-两台机器的操作系统平台不同"><a class="markdownIt-Anchor" href="#1-两台机器的操作系统平台不同"></a> 1 两台机器的操作系统平台不同:</h3><pre><code>一台是32为windows, 一台是linux 64系统</code></pre><p>不同的平台对数据的处理都可能不一样,比如在windows中的int类型是4个字节,在linux中可能是2个字节。</p><h3 id="2-网络传输的时候用的是大端模式"><a class="markdownIt-Anchor" href="#2-网络传输的时候用的是大端模式"></a> 2 网络传输的时候用的是大端模式</h3><pre><code>只要是传输的数据的数据类型超过了一个字节都需要进行网络字节序的转换关于字节序序的函数:</code></pre><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">htons htonl ntohs ntohl </span><br><span class="line">h: host to: 到n: networkl: longs: short</span><br></pre></td></tr></table></figure><p>​  假如在从A传递数据给B, 需要传递一个结构体</p><h3 id="3-字节序对齐不一样"><a class="markdownIt-Anchor" href="#3-字节序对齐不一样"></a> 3 字节序对齐不一样</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">struct test</span><br><span class="line">&#123;</span><br><span class="line">int a;</span><br><span class="line">char c;</span><br><span class="line">double d;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="4-两台服务的开发语言不同"><a class="markdownIt-Anchor" href="#4-两台服务的开发语言不同"></a> 4 两台服务的开发语言不同</h3><pre><code>对于C语言, 一个字符占用一个字节对于java, 一个字符占用2个字节</code></pre><p>报文: 其实就是数据.<br>上述几种情况, 涉及到网络数据传输, 都需要对数据进行编解码操作.</p><h1 id="uml类图"><a class="markdownIt-Anchor" href="#uml类图"></a> UML类图:</h1><h2 id="1-面向对象设计"><a class="markdownIt-Anchor" href="#1-面向对象设计"></a> 1. 面向对象设计</h2><p>面向对象设计主要就是使用UML的类图，类图用于描述系统中所包含的类以及它们之间的相互关系，帮助人</p><p>们简化对系统的理解，它是<strong>系统分析和设计阶段的重要产物，也是系统编码和测试的重要模型依据</strong></p><h2 id="类的uml画法"><a class="markdownIt-Anchor" href="#类的uml画法"></a> 类的UML画法</h2><p><strong>类（Class）封装了数据和行为，是面向对象的重要组成部分，它是具有相同属性、操作、关系的对象集合的</strong></p><p><strong>总称</strong>。在系统中，每个类都具有一定的职责，职责指的是类要完成什么样子的功能，要承担什么样子的义</p><p>务。一个类可以有多种职责，但是设计得好的类一般只有一种职责。</p><p>假如我现在定义了这么一个类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">class Persion </span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">string getName()</span><br><span class="line">&#123; </span><br><span class="line">return name; </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void setName(string name) &#123; </span><br><span class="line">this-&gt;name = name;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">protected: </span><br><span class="line">void playBasketball() &#123; </span><br><span class="line">pass();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">void pass() &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string name = &quot;Jack&quot;; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么此类对应的UML为：</p><p><img src="/images/javawz/image-20220522003152929.png" alt="image-20220522003152929"></p><p>看到该图分为三层：最顶层的为类名，中间层的为属性，最底层的为方法。<br>属性的表示方式为：【可见性】【属性名称】：【类型】={缺省值，可选}<br>方法的表示方式为：【可见性】【方法名称】（【参数列表】）：【类型】<br>可见性都是一样的，&quot;-“表示private、”+“表示public、”#&quot;表示protected。</p><h2 id="3-继承关系"><a class="markdownIt-Anchor" href="#3-继承关系"></a> 3. 继承关系</h2><p>继承也叫作泛化（Generalization），用于描述父子类之间的关系，父类又称为基类或者超类，子类又称作<br>派生类。在UML中，泛化关系用带空心三角形的实线来表示。</p><h3 id="31-普通继承关系"><a class="markdownIt-Anchor" href="#31-普通继承关系"></a> 3.1 普通继承关系</h3><p>假如现在我又定义了一个Student和一个Teacher：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">class Student : public Persion </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">void study() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string studentNo; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Teacher : public Persion </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">void teach() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">string teacherNo; </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>那么，用UML表示这种关系应当是：</p><p><img src="/images/javawz/image-20220522003744558.png" alt="image-20220522003744558"></p><h3 id="32-抽象继承关系"><a class="markdownIt-Anchor" href="#32-抽象继承关系"></a> 3.2 抽象继承关系</h3><blockquote><p>上面的继承是普通的继承，在C++中，除了普通的继承之外，众所周知的还有一种抽象的继承关系，因此就<br>再讲讲抽象继承关系，作为上面的继承的补充。</p><p>比方说我想实现一个链表（Link），插入（insert）与删除（remove）动作我想让子类去实现，链表本身只<br>实现统计链表中元素个数的动作（count），然后有一个子类单向链表（OneWayLink）去实现父类没有实现<br>的动作，C++代码为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">// 抽象类(含有纯虚函数的类)</span><br><span class="line">class Link &#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line">virtual void insert() = 0; </span><br><span class="line"></span><br><span class="line">virtual void remove() = 0;</span><br><span class="line"></span><br><span class="line">int count() &#123;</span><br><span class="line">    return 0;</span><br><span class="line">        &#125; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 子类 </span><br><span class="line">class OneWayLink : public Link </span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line"></span><br><span class="line">void insert() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void remove() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/images/javawz/image-20220522004231464.png" alt="image-20220522004231464"></p><blockquote><p>在UML中，抽象类无论类名还是抽象方法名，都以斜体的方式表示，因为这也是一种继承关系，所以子类与父类通过带空心三角形的实线来联系。</p></blockquote><h2 id="4-关联关系"><a class="markdownIt-Anchor" href="#4-关联关系"></a> 4. 关联关系</h2><blockquote><p>关联（Assocition）关系是类与类之间最常见的一种关系，它是一种结构化的关系，表示一类对象与另一类<br>对象之间有联系，如汽车和轮胎、师傅和徒弟、班级和学生等。在UML类图中，用实线连接有关联关系的对<br>象所对应的类，在C++中通常将一个类的对象作为另一个类的成员变量。关联关系分单向关联、双向关联、<br>自关联，逐一看一下。</p></blockquote><h3 id="41-单向关联关系"><a class="markdownIt-Anchor" href="#41-单向关联关系"></a> 4.1 单向关联关系</h3><p>单向关联指的是关联只有一个方向，比如顾客（Customer）拥有地址（Address），其代码实现为:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 地址类 </span><br><span class="line">class Address &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 顾客类 </span><br><span class="line">class Customer </span><br><span class="line">&#123;</span><br><span class="line">private:</span><br><span class="line">Address address; // 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>UML的画法为：</p><p><img src="/images/javawz/image-20220522004610246.png" alt="image-20220522004610246"></p><h3 id="42-双向关联关系"><a class="markdownIt-Anchor" href="#42-双向关联关系"></a> 4.2 双向关联关系</h3><blockquote><p>默认情况下的关联都是双向的，比如顾客（Customer）购买商品（Product），反之，卖出去的商品总是与<br>某个顾客与之相关联，这就是双向关联。c++ 类的写法为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">// 商品类 </span><br><span class="line">class Product &#123;</span><br><span class="line">private: </span><br><span class="line">Customer customer; // 该商品属于哪一位顾客, 作为成员变量 </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">// 顾客类 </span><br><span class="line">class Customer &#123;</span><br><span class="line">private:</span><br><span class="line">Product product[64]; // 给顾客购买了哪些商品, 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/images/javawz/image-20220522004827876.png" alt="image-20220522004827876"></p><h3 id="43-自关联关系"><a class="markdownIt-Anchor" href="#43-自关联关系"></a> 4.3 自关联关系</h3><blockquote><p>自关联，指的就是对象中的属性为对象本身，这在链表中非常常见，单向链表Node中会维护一个它的前驱<br>Node，双向链表Node中会维护一个它的前驱Node和一个它的后继Node。就以单向链表为例，它的C++写<br>法为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">// 链表节点 </span><br><span class="line">class Node </span><br><span class="line">&#123;</span><br><span class="line">private: </span><br><span class="line">Node* nextNode; // 指向后继节点的指针, 作为成员变量 </span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图应当是：</p><p><img src="/images/javawz/image-20220522004959775.png" alt="image-20220522004959775"></p><h2 id="5-聚合关系"><a class="markdownIt-Anchor" href="#5-聚合关系"></a> 5. 聚合关系</h2><blockquote><p>聚合（Aggregation）关系表示整体与部分的关系。在聚合关系中，成员对象是整体的一部分，但是成员对象<br>可以脱离整体对象独立存在。在UML中，</p><p>聚合关系用带空心菱形的直线表示，如汽车（Car）与引擎（Engine）、轮胎（Wheel）、车灯（Light），C++ 表示为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">class Engine &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Wheel &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Light &#123;&#125;;</span><br><span class="line"></span><br><span class="line">class Car &#123;</span><br><span class="line"></span><br><span class="line">public: </span><br><span class="line"></span><br><span class="line">Car(Engine engine, Light light, Wheel wheel) </span><br><span class="line">&#123; </span><br><span class="line">this-&gt;engine = engine; </span><br><span class="line">this-&gt;light = light;</span><br><span class="line">    this-&gt;wheel = wheel; </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">void drive() &#123;&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line"></span><br><span class="line">Engine engine; </span><br><span class="line"></span><br><span class="line">Light light;</span><br><span class="line"></span><br><span class="line">Wheel wheel; </span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>对应的UML类图为：</p><p><img src="/images/javawz/image-20220522005440449.png" alt="image-20220522005440449"></p><blockquote><p>代码实现聚合关系，<strong>成员对象通常以构造方法、Setter方法的方式注入到整体对象之中</strong>。</p></blockquote><h2 id="6-组合关系"><a class="markdownIt-Anchor" href="#6-组合关系"></a> 6. 组合关系</h2><blockquote><p>组合（Composition）关系也表示的是一种整体和部分的关系，但是在组合关系中整体对象可以控制成员对<br>象的生命周期，一旦整体对象不存在，成员对象也不存在，整体对象和成员对象之间具有同生共死的关系。 在UML中组合关系用带实心菱形的直线表示。<br>比如人的头（Head）和嘴巴（Mouth）、鼻子（Nose），嘴巴和鼻子是头的组成部分之一，一旦头没了，<br>嘴巴也没了，因此头和嘴巴、鼻子是组合关系，C++ 表示为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">class Mouth &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">class Nose &#123;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Head &#123;</span><br><span class="line">public: </span><br><span class="line">Head() </span><br><span class="line">&#123; </span><br><span class="line">mouth = new Mouth(); </span><br><span class="line">nose = new Nose(); </span><br><span class="line">&#125;</span><br><span class="line">void shake() &#123;</span><br><span class="line"></span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line">private: </span><br><span class="line">Mouth *mouth;</span><br><span class="line">Nose *nose;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的表示方法为：</p><p><img src="/images/javawz/image-20220522005903188.png" alt="image-20220522005903188"></p><blockquote><p>代码实现组合关系，通常在整体类的构造方法中直接实例化成员类，因为组合关系的整体和部分是共生关<br>系，如果通过外部注入，那么即使整体不存在，那么部分还是存在的，这就相当于变成了一种聚合关系了。</p></blockquote><h2 id="7-依赖关系"><a class="markdownIt-Anchor" href="#7-依赖关系"></a> 7. 依赖关系</h2><blockquote><p>依赖（Dependency）关系是一种使用关系，特定事物的改变有可能会影响到使用该事物的其他事物，在需<br>要表示一个事物使用另一个事物时使用依赖关系，大多数情况下依赖关系体现在某个类的方法使用另一个类<br>的对象作为参数。在UML中，依赖关系用带箭头的虚线表示，由依赖的一方指向被依赖的一方。</p><p>比如，驾驶员（Driver）开车，Driver类的drive()方法将车（Car）的对象作为一个参数传递，以便在drive()<br>方法中能够调用car的move()方法，且驾驶员的drive()方法依赖车的move()方法，因此也可以说Driver依赖<br>Car，C++代码为：</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">class Car </span><br><span class="line">&#123;</span><br><span class="line">public: </span><br><span class="line">void move(); </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">class Driver &#123;</span><br><span class="line">public: </span><br><span class="line">void drive(Car car) </span><br><span class="line">&#123; </span><br><span class="line">car.move(); </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>其UML的画法为：</p><p><img src="/images/javawz/image-20220522010251666.png" alt="image-20220522010251666"></p><blockquote><p>依赖关系通常通过三种方式来实现：</p><ol><li>将一个类的对象作为另一个类中方法的参数</li><li>在一个类的方法中将另一个类的对象作为其对象的局部变量</li><li>在一个类的方法中调用另一个类的静态方法</li></ol></blockquote><h2 id="8-关联关系-聚合关系-组合关系之间的区别"><a class="markdownIt-Anchor" href="#8-关联关系-聚合关系-组合关系之间的区别"></a> 8. 关联关系、聚合关系、组合关系之间的区别</h2><blockquote><p>从上文可以看出，关联关系、聚合关系和组合关系三者之间比较相似，本文的最后就来总结一下这三者之间<br>的区别。</p><p>关联和聚合的区别主要在于语义上：关联的两个对象之间一般是平等的，聚合则一般是不平等的。</p><p>聚合和组合的区别则在语义和实现上都有差别：组合的两个对象之间生命周期有很大的关联，被组合的对象<br>在组合对象创建的同时或者创建之后创建，在组合对象销毁之前销毁，一般来说被组合对象不能脱离组合对<br>象独立存在，而且也只能属于一个组合对象；聚合则不一样，被聚合的对象可以属于多个聚合对象。</p><p>再举例子来说：</p><ul><li><p>你和你的朋友属于关联关系，因为你和你的朋友之间的关系是平等的，关联关系只是表示一下两个对象<br>之间的一种简单的联系而已，就像我有一个朋友</p></li><li><p>你和你借的书属于聚合关系，第一是因为书可以独立存在，第二是因为书不仅仅属于你，也可以属于别<br>人，只是暂时你拥有</p></li><li><p>你和你的心脏属于组合关系，因为你的心脏只是属于你的，不能脱离与你而存在</p></li></ul><p>不过，实际应用中，我个人感觉三种关系其实没有区分得这么清楚，有些架构师甚至会说&quot;组合和聚合没什么<br>区别&quot;，所以，有时候不需要把细节扣得这么细，合理利用对象之间的关系给出设计方案即可。</p></blockquote><h2 id="常用的几种序列化方式"><a class="markdownIt-Anchor" href="#常用的几种序列化方式"></a> 常用的几种序列化方式</h2><ol><li>XML类似于HTML，与HTML很相似，但是用它来序列化对象的时候，就显得很复杂</li><li>JSON使用起来很简单，他的产生来自于一种关联数组，其本质是采用“键值对”的方式描述对象</li><li>Protocol Buffer是一个高效的数据化数据存储格式，用于结构化数据串行化，很适合做数据储存或RPC数据交换格式</li><li>ASN.1抽象语法标记</li><li>boost 序列化的类</li><li>自定义的格式</li></ol><h3 id="asn1"><a class="markdownIt-Anchor" href="#asn1"></a> ASN.1</h3><p>头文件和源代码下载地址:<a href="https://gitee.com/xiaochenyan/mypro/tree/master/%E5%A4%9A%E7%AB%AF%E5%AE%89%E5%85%A8%E5%8D%8F%E8%AE%AE%E4%BC%A0%E8%BE%93%E5%B9%B3%E5%8F%B0/%E5%8F%82%E8%80%83%E4%BB%A3%E7%A0%81" target="_blank" rel="noopener">https://gitee.com/xiaochenyan/mypro/tree/master/多端安全协议传输平台/参考代码</a></p><p>描述了对一种数据进行表示、编码、传输和解码的数据格式。</p><ul><li>ASN.1它有两部分<ol><li>一部分描述信息内数据，数据类型及序列格式；<ul><li>相当于属性</li></ul></li><li>一部分描述如何将各个部分组成消息<ul><li>相当于方法</li></ul></li></ol></li></ul><p><img src="/images/javawz/c3d36423a938455a9551fc5b00ff0542.png" alt="在这里插入图片描述"></p><h3 id="编码格式tlv"><a class="markdownIt-Anchor" href="#编码格式tlv"></a> 编码格式（TLV）</h3><table><thead><tr><th>TAG（type）</th><th>LENGTH</th><th>VALUE</th></tr></thead><tbody><tr><td>数据类型</td><td>数据长度</td><td>数据的值</td></tr></tbody></table><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">Persion</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> age;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;Persion;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220522013950586.png" alt="image-20220522013950586"></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span>   *pData;<span class="comment">// 数据值</span></span><br><span class="line">ITCAST_UINT32     dataLen;<span class="comment">// 数据长度</span></span><br><span class="line"></span><br><span class="line">ITCAST_UINT32     unusedBits;<span class="comment">/* for bit string */</span></span><br><span class="line">ITCAST_UINT32     memoryType;</span><br><span class="line">ITCAST_UINT32     dataType;<span class="comment">// 数据类型</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">next</span>;</span>    <span class="comment">/* for sequence and set */</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">ITCAST_ANYBUF_</span> *<span class="title">prev</span>;</span></span><br><span class="line"></span><br><span class="line">&#125;ITCAST_ANYBUF;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WriteInteger(ITCAST_UINT32 integer, ITASN1_INTEGER **ppDerInteger);</span><br><span class="line">函数说明:对整形数据进行编码操作</span><br><span class="line">函数参数:</span><br><span class="line">integer: 输入参数, 表示待编码的整形数据</span><br><span class="line">ppDerInteger: 传出参数, 编码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadInteger(ITASN1_INTEGER *pDerInteger, ITCAST_UINT32 *pInteger);</span><br><span class="line">函数说明: 对整形数据解码</span><br><span class="line">参数说明: </span><br><span class="line">pDerInteger: 传入参数, 表示待解码的数据</span><br><span class="line">pInteger: 传出参数, 表示解码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line">  ITCAST_ANYBUF p;</span><br><span class="line">  ITCAST_UINT32 aa; </span><br><span class="line">例如: DER_ItAsn1_ReadInteger(&amp;p, &amp;aa);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WritePrintableString(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString);</span><br><span class="line">函数说明:编码字符串数据</span><br><span class="line">函数参数:</span><br><span class="line">pPrintString: 输入参数, 表示要编码的数据</span><br><span class="line">ppDerPrintString: 输出参数, 表示编码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadPrintableString(ITASN1_PRINTABLESTRING *pDerPrintString, ITASN1_PRINTABLESTRING **ppPrintString);</span><br><span class="line">函数说明: 解码函数, 将ANYCAST_ANYBUF类型解码到第二个参数</span><br><span class="line">参数说明:</span><br><span class="line">pDerPrintString: 输入参数, 表示待解码的数据</span><br><span class="line">ppPrintString: 输出参数, 存放解码之后的数据</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ITCAST_String_To_AnyBuf(ITCAST_ANYBUF **pOriginBuf, unsigned char * strOrigin, int strOriginLen);</span><br><span class="line">函数说明: 将char *----&gt;ITCAST_ANYBUF类型</span><br><span class="line">函数参数:</span><br><span class="line">pOriginBuf: 传出参数, ITCAST_ANYBUF指针</span><br><span class="line">strOrigin: 传入参数, 待转换的字符串</span><br><span class="line">strOriginLen: 传入参数, strOrigin的字符串长度</span><br><span class="line">返回值:</span><br><span class="line">成功或者失败</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">int EncodeChar(char *pData, int dataLen, ITCAST_ANYBUF **outBuf);</span><br><span class="line">函数说明: 将char *类型数据进行编码</span><br><span class="line">函数参数:</span><br><span class="line">pData: 输入参数, 指的是待编码的字符串</span><br><span class="line">dataLen: 输入参数, 指的是pData的长度</span><br><span class="line">outBuf: 输出参数, ITCAST_ANYBUF类型的数据, TLV格式</span><br><span class="line"></span><br><span class="line">int DecodeChar(ITCAST_ANYBUF *inBuf, char **Data, int *pDataLen);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_WriteSequence(ITASN1_SEQUENCE *pSequence, ITCAST_ANYBUF **ppDerSequence);</span><br><span class="line">函数说明: 序列化链表, 将链表序列化成字节流数据</span><br><span class="line">函数参数:</span><br><span class="line">pSequence: 输入参数, 待序列化的数据</span><br><span class="line">ppDerSequence: 输出参数, 序列化之后的数据</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ItAsn1_ReadSequence(ITCAST_ANYBUF *pDerSequence, ITASN1_SEQUENCE **ppSequence);</span><br><span class="line">函数说明: 反序列化</span><br><span class="line">参数说明:</span><br><span class="line">pDerSequence:输入参数, 开始需要将char *---&gt;ITCAST_ANYBUF类型</span><br><span class="line">ppSequence: 输出参数, 获得链表头节点</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">ITCAST_INT DER_ITCAST_FreeQueue(ITCAST_ANYBUF *pAnyBuf);</span><br><span class="line">释放内存</span><br></pre></td></tr></table></figure><h3 id="代码示例"><a class="markdownIt-Anchor" href="#代码示例"></a> 代码示例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line"></span><br><span class="line">int main()</span><br><span class="line">&#123;</span><br><span class="line">Teacher tea;</span><br><span class="line">memset(&amp;tea, 0x00, sizeof(Teacher));</span><br><span class="line">strcpy(tea.name, &quot;路飞&quot;);</span><br><span class="line">tea.age = 20;</span><br><span class="line">tea.p = (char*)malloc(100);</span><br><span class="line">strcpy(tea.p, &quot;我是要成为海贼王的男人&quot;);</span><br><span class="line">tea.plen = strlen(tea.p);</span><br><span class="line"></span><br><span class="line">// 编码</span><br><span class="line">char* outData;</span><br><span class="line">int outlen;</span><br><span class="line">encodeTeacher(&amp;tea, &amp;outData, &amp;outlen);</span><br><span class="line"></span><br><span class="line">//===============================================</span><br><span class="line"></span><br><span class="line">// 解码</span><br><span class="line">Teacher* pt;</span><br><span class="line">decodeTeacher(outData, outlen, &amp;pt);</span><br><span class="line">printf(&quot;name:%s\n&quot;, pt-&gt;name);</span><br><span class="line">printf(&quot;age:%d\n&quot;, pt-&gt;age);</span><br><span class="line">printf(&quot;p:%s\n&quot;, pt-&gt;p);</span><br><span class="line">printf(&quot;plen:%d\n&quot;, pt-&gt;plen);</span><br><span class="line"></span><br><span class="line">freeTeacher(&amp;pt);</span><br><span class="line"></span><br><span class="line">system(&quot;pause&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="teacherh"><a class="markdownIt-Anchor" href="#teacherh"></a> Teacher.h</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">#ifndef _TEACHER_H</span><br><span class="line">#define _TEACHER_H</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64]; </span><br><span class="line">int age;   </span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line"></span><br><span class="line">// 编码结构体</span><br><span class="line">//p: 输入参数, 待编码的结构体</span><br><span class="line">//outData: 输出参数, 保存编码之后的字符串</span><br><span class="line">//outlen: 输出参数, 编码之后的字符串的长度</span><br><span class="line">int encodeTeacher(Teacher* p, char** outData, int* outlen);</span><br><span class="line">// 解码结构体</span><br><span class="line"></span><br><span class="line">//inData: 输入参数</span><br><span class="line">//inLen: inData的长度</span><br><span class="line">//p:保存解码之后的数据</span><br><span class="line">int decodeTeacher(char* inData, int inLen, Teacher**p);</span><br><span class="line">// 释放内存函数</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">void freeTeacher(Teacher** p);</span><br><span class="line"></span><br><span class="line">#endif// _TEACHER_H</span><br></pre></td></tr></table></figure><h3 id="teacherc"><a class="markdownIt-Anchor" href="#teacherc"></a> Teacher.c</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br></pre></td><td class="code"><pre><span class="line">#include &quot;teacher.h&quot;</span><br><span class="line">#include &quot;itcast_asn1_der.h&quot;</span><br><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &lt;stdlib.h&gt;</span><br><span class="line">#include &lt;string.h&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64];</span><br><span class="line">int age;</span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">*/</span><br><span class="line">int encodeTeacher(Teacher * p, char ** outData, int * outlen)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_ANYBUF *head = NULL;</span><br><span class="line">ITCAST_ANYBUF *temp = NULL;</span><br><span class="line">ITCAST_ANYBUF *next = NULL;</span><br><span class="line"></span><br><span class="line">//编码name</span><br><span class="line">//ITCAST_INT DER_ItAsn1_WritePrintableString(ITASN1_PRINTABLESTRING *pPrintString, ITASN1_PRINTABLESTRING **ppDerPrintString);</span><br><span class="line">//char *----&gt;ITCAST_ANYBUF</span><br><span class="line">DER_ITCAST_String_To_AnyBuf(&amp;temp, p-&gt;name, strlen(p-&gt;name)+1);</span><br><span class="line">DER_ItAsn1_WritePrintableString(temp, &amp;head);</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line">next = head;</span><br><span class="line"></span><br><span class="line">//编码age</span><br><span class="line">DER_ItAsn1_WriteInteger(p-&gt;age, &amp;next-&gt;next);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//编码p</span><br><span class="line">//int EncodeChar(char *pData, int dataLen, ITCAST_ANYBUF **outBuf);</span><br><span class="line">EncodeChar(p-&gt;p, strlen(p-&gt;p)+1, &amp;next-&gt;next);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//编码plen</span><br><span class="line">DER_ItAsn1_WriteInteger(p-&gt;plen, &amp;next-&gt;next);</span><br><span class="line"></span><br><span class="line">//序列化</span><br><span class="line">DER_ItAsn1_WriteSequence(head, &amp;temp);</span><br><span class="line"></span><br><span class="line">//输出参数赋值</span><br><span class="line">*outData = temp-&gt;pData;</span><br><span class="line">*outlen = temp-&gt;dataLen;</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">DER_ITCAST_FreeQueue(head);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line">typedef struct _Teacher</span><br><span class="line">&#123;</span><br><span class="line">char name[64];</span><br><span class="line">int age;</span><br><span class="line">char *p;</span><br><span class="line">long plen;</span><br><span class="line">&#125;Teacher;</span><br><span class="line">*/</span><br><span class="line"></span><br><span class="line">int decodeTeacher(char * inData, int inLen, Teacher ** p)</span><br><span class="line">&#123;</span><br><span class="line">ITCAST_ANYBUF *head = NULL;</span><br><span class="line">ITCAST_ANYBUF *temp = NULL;</span><br><span class="line">ITCAST_ANYBUF *next = NULL;</span><br><span class="line"></span><br><span class="line">Teacher *pt = (Teacher *)malloc(sizeof(Teacher));</span><br><span class="line">if (pt == NULL)</span><br><span class="line">&#123;</span><br><span class="line">return -1;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//将inData反序列化成链表</span><br><span class="line">//将char *---&gt;ITCAST_ANYBUF类型</span><br><span class="line">DER_ITCAST_String_To_AnyBuf(&amp;temp, inData, inLen);</span><br><span class="line">DER_ItAsn1_ReadSequence(temp, &amp;head);</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line">next = head;</span><br><span class="line"></span><br><span class="line">//解码name</span><br><span class="line">DER_ItAsn1_ReadPrintableString(next, &amp;temp);</span><br><span class="line">memcpy(pt-&gt;name, temp-&gt;pData, temp-&gt;dataLen);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line">DER_ITCAST_FreeQueue(temp);</span><br><span class="line"></span><br><span class="line">//解码age</span><br><span class="line">DER_ItAsn1_ReadInteger(next, &amp;pt-&gt;age);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//解码p</span><br><span class="line">int len = 0;</span><br><span class="line">DecodeChar(next, &amp;pt-&gt;p, &amp;len);</span><br><span class="line">next = next-&gt;next;</span><br><span class="line"></span><br><span class="line">//解码plen</span><br><span class="line">DER_ItAsn1_ReadInteger(next, &amp;pt-&gt;plen);</span><br><span class="line"></span><br><span class="line">//给输出参数赋值</span><br><span class="line">*p = pt;</span><br><span class="line"></span><br><span class="line">//释放内存</span><br><span class="line">DER_ITCAST_FreeQueue(head);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">void freeTeacher(Teacher ** p)</span><br><span class="line">&#123;</span><br><span class="line">if ((*p) != NULL)</span><br><span class="line">&#123;</span><br><span class="line">if ((*p)-&gt;p != NULL)</span><br><span class="line">&#123;</span><br><span class="line">free((*p)-&gt;p);</span><br><span class="line">&#125;</span><br><span class="line">free(*p);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="vs连接linux服务器"><a class="markdownIt-Anchor" href="#vs连接linux服务器"></a> vs连接linux服务器</h2><p>创建项目工程</p><p><img src="/images/javawz/image-20220522014650992.png" alt="image-20220522014650992"></p><p>点击菜单栏上的工具----------&gt;选项</p><p><img src="/images/javawz/image-20220522014903248.png" alt="image-20220522014903248"></p><p>选择  跨平台-------&gt;连接管理器-----------&gt;添加</p><p><img src="/images/javawz/image-20220522015040222.png" alt="image-20220522015040222"></p><p><img src="/images/javawz/image-20220522015129104.png" alt="image-20220522015129104"></p><br><p><img src="/images/javawz/image-20220522015211419.png" alt="image-20220522015211419"></p><p>修改生成目录的路径</p><p><img src="/images/javawz/image-20220522040443774.png" alt="image-20220522040443774"></p><br><br><br><br><br><br><br>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;两台机器通信&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#两台机器通信&quot;&gt;&lt;/a&gt; 两台机器通信&lt;/h2&gt;
&lt;h3 id=&quot;1-两台机器的操作系统平台不同&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>Git教程</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/17/Git%E6%95%99%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/17/Git教程/</id>
    <published>2022-05-17T14:55:09.000Z</published>
    <updated>2022-05-20T20:59:15.766Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/images/javawz/wps103.tmp.png" alt="img"></p><h1 id="1-git历史"><a class="markdownIt-Anchor" href="#1-git历史"></a> 1 Git历史</h1><p>同生活中的许多伟大事件一样，Git 诞生于一个极富纷争大举创新的年代。Linux 内核开源项目有着为数众广的参与者。绝大多数的 Linux 内核维护工作都花在了提交补丁和保存归档的繁琐事务上（1991－2002年间）。到 2002 年，整个项目组开始启用分布式版本控制系统 BitKeeper 来管理和维护代码。</p><p>到 2005 年的时候，开发 BitKeeper 的商业公司同 Linux 内核开源社区的合作关系结束，他们收回了免费使用 BitKeeper 的权力。这就迫使 Linux 开源社区（特别是 Linux的缔造者 Linus Torvalds ）不得不吸取教训，只有开发一套属于自己的版本控制系统才不至于重蹈覆辙。他们对新的系统订了若干目标：</p><p>• 速度</p><p>• 简单的设计</p><p>• 对非线性开发模式的强力支持（允许上千个并行开发的分支）</p><p>• 完全分布式</p><p>• 有能力高效管理类似 Linux 内核一样的超大规模项目（速度和数据量）</p><p><img src="/images/javawz/wps104.tmp.jpg" alt="img"></p><h1 id="2-git与svn对比"><a class="markdownIt-Anchor" href="#2-git与svn对比"></a> 2 <strong>Git与svn对比</strong></h1><h2 id="21-svn"><a class="markdownIt-Anchor" href="#21-svn"></a> 2.1 <strong>Svn</strong></h2><p>SVN（Subversion）是集中式版本控制系统，版本库是集中放在中央服务器的，而干活的时候，用的都是自己的电脑，所以首先要从中央服务器哪里得到最新的版本，然后干活，干完后，需要把自己做完的活推送到中央服务器。集中式版本控制系统是必须联网才能工作，如果在局域网还可以，带宽够大，速度够快，如果在互联网下，如果网速慢的话，就郁闷了。</p><p>下图就是标准的集中式版本控制工具管理方式：</p><p><img src="/images/javawz/wps105.tmp.png" alt="img"></p><p>集中管理方式在一定程度上看到其他开发人员在干什么，而管理员也可以很轻松掌握每个人的开发权限。</p><p>但是相较于其优点而言，集中式版本控制工具缺点很明显：</p><p>l 服务器单点故障</p><p>l 容错性差</p><h2 id="22-git"><a class="markdownIt-Anchor" href="#22-git"></a> 2.2 <strong>Git</strong></h2><p>Git是分布式版本控制系统，那么它就没有中央服务器的，每个人的电脑就是一个完整的版本库，这样，工作的时候就不需要联网了，因为版本都是在自己的电脑上。既然每个人的电脑都有一个完整的版本库，那多个人如何协作呢？比如说自己在电脑上改了文件A，其他人也在电脑上改了文件A，这时，你们两之间只需把各自的修改推送给对方，就可以互相看到对方的修改了。</p><p>下图就是分布式版本控制工具管理方式：</p><p><img src="/images/javawz/wps116.tmp.jpg" alt="img"></p><h1 id="3-git工作流程"><a class="markdownIt-Anchor" href="#3-git工作流程"></a> 3 git工作流程</h1><p>一般工作流程如下：</p><p>1．从远程仓库中克隆 Git 资源作为本地仓库。</p><p>2．从本地仓库中checkout代码然后进行代码修改</p><p>3．在提交前先将代码提交到暂存区。</p><p>4．提交修改。提交到本地仓库。本地仓库中保存修改的各个历史版本。</p><p>5．在修改完成后，需要和团队成员共享代码时，可以将代码push到远程仓库。</p><p>下图展示了 Git 的工作流程：</p><p><img src="/images/javawz/wps117.tmp.jpg" alt="img"></p><h1 id="4-git的安装"><a class="markdownIt-Anchor" href="#4-git的安装"></a> 4 <strong>Git的安装</strong></h1><p>最早Git是在Linux上开发的，很长一段时间内，Git也只能在Linux和Unix系统上跑。不过，慢慢地有人把它移植到了Windows上。现在，Git可以在Linux、Unix、Mac和Windows这几大平台上正常运行了。由于开发机大多数情况都是windows，所以本教程只讲解windows下的git的安装及使用。</p><h2 id="41-软件下载"><a class="markdownIt-Anchor" href="#41-软件下载"></a> 4.1 <strong>软件下载</strong></h2><p>下载地址：<a href="https://git-scm.com/download" target="_blank" rel="noopener">https://git-scm.com/download</a></p><p><img src="/images/javawz/wps118.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps119.tmp.jpg" alt="img"></p><p>参考资料中安装包已经下载完毕，根据不同的操作系统选择对应的安装包。</p><h2 id="42-软件安装"><a class="markdownIt-Anchor" href="#42-软件安装"></a> 4.2 <strong>软件安装</strong></h2><h3 id="421-安装git-for-windows"><a class="markdownIt-Anchor" href="#421-安装git-for-windows"></a> 4.2.1 <strong>安装git for windows</strong></h3><p><img src="/images/javawz/wps11A.tmp.jpg" alt="img"><img src="/images/javawz/wps11B.tmp.jpg" alt="img"></p><p>一路“下一步”使用默认选项即可。</p><h3 id="422-安装tortoisegit"><a class="markdownIt-Anchor" href="#422-安装tortoisegit"></a> 4.2.2 <strong>安装TortoiseGit</strong></h3><p><img src="/images/javawz/wps11C.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps12C.tmp.jpg" alt="img"></p><p>一路“下一步”使用默认选项即可。</p><p><img src="/images/javawz/wps12D.tmp.jpg" alt="img"></p><p>默认选项下会启动配置画面：</p><p><img src="/images/javawz/wps12E.tmp.jpg" alt="img"></p><p>由于目前只有英文语言包，默认即可继续下一步。</p><p>配置git.exe，在4.2.1中已经安装过git-for-windows了所以在此找到git.exe所在的目录。</p><p><img src="/images/javawz/wps12F.tmp.jpg" alt="img"></p><p>配置开发者姓名及邮箱，每次提交代码时都会把此信息包含到提交的信息中。</p><p><img src="/images/javawz/wps130.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps131.tmp.jpg" alt="img"></p><p>使用默认配置，点击“完成”按钮完成配置。</p><p>完整完毕后在系统右键菜单中会出现git的菜单项。</p><p><img src="/images/javawz/wps142.tmp.jpg" alt="img"></p><h3 id="423-安装中文语言包"><a class="markdownIt-Anchor" href="#423-安装中文语言包"></a> 4.2.3 <strong>安装中文语言包</strong></h3><p>安装中文语言包并不是必选项。可以根据个人情况来选择安装。</p><p><img src="/images/javawz/wps143.tmp.jpg" alt="img"><img src="/images/javawz/wps144.tmp.jpg" alt="img"></p><p>直接“下一步”完整完毕。</p><p><img src="/images/javawz/wps145.tmp.jpg" alt="img"></p><p>语言包安装完毕后可以在TortoiseGit的设置中调整语言</p><p><img src="/images/javawz/wps146.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps147.tmp.jpg" alt="img"></p><h1 id="5-使用git管理文件版本"><a class="markdownIt-Anchor" href="#5-使用git管理文件版本"></a> 5 <strong>使用git管理文件版本</strong></h1><h2 id="51-创建版本库"><a class="markdownIt-Anchor" href="#51-创建版本库"></a> 5.1 <strong>创建版本库</strong></h2><p>什么是版本库呢？版本库又名仓库，英文名repository，你可以简单理解成一个目录，这个目录里面的所有文件都可以被Git管理起来，每个文件的修改、删除，Git都能跟踪，以便任何时刻都可以追踪历史，或者在将来某个时刻可以“还原”。由于git是分布式版本管理工具，所以git在不需要联网的情况下也具有完整的版本管理能力。</p><p>创建一个版本库非常简单，可以使用git bash也可以使用tortoiseGit。首先，选择一个合适的地方，创建一个空目录。</p><h3 id="511-使用gitbash"><a class="markdownIt-Anchor" href="#511-使用gitbash"></a> 5.1.1 <strong>使用GitBash</strong></h3><p>在桌面创建了一个 新建文件夹(2) 在该目录中点击右键中选择Git Bash来启动。</p><p><img src="/images/javawz/wps148.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps158.tmp.jpg" alt="img"></p><p>创建仓库执行命令：</p><p>$ git init</p><p><img src="/images/javawz/wps159.tmp.jpg" alt="img"></p><h3 id="512-使用tortoisegit"><a class="markdownIt-Anchor" href="#512-使用tortoisegit"></a> 5.1.2 <strong>使用TortoiseGit</strong></h3><p>使用TortoiseGit时只需要在目录中点击右键菜单选择“在这里创建版本库”</p><p><img src="/images/javawz/wps15A.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps15B.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps15C.tmp.jpg" alt="img"></p><p>版本库创建成功，会在此目录下创建一个.git的隐藏目录，如下所示：</p><p><img src="/images/javawz/wps16D.tmp.jpg" alt="img"></p><p>在windows中如何显示隐藏目录隐藏目录请自行百度o(╯□╰)o</p><h5 id="概念"><a class="markdownIt-Anchor" href="#概念"></a> 概念：</h5><h5 id="版本库git目录就是版本库将来文件都需要保存到版本库中"><a class="markdownIt-Anchor" href="#版本库git目录就是版本库将来文件都需要保存到版本库中"></a> 版本库：“.git”目录就是版本库，将来文件都需要保存到版本库中。</h5><h5 id="工作目录包含git目录的目录也就是git目录的上一级目录就是工作目录-只有工作目录中的文件才能保存到版本库中"><a class="markdownIt-Anchor" href="#工作目录包含git目录的目录也就是git目录的上一级目录就是工作目录-只有工作目录中的文件才能保存到版本库中"></a> 工作目录：包含“.git”目录的目录，也就是.git目录的上一级目录就是工作目录。只有工作目录中的文件才能保存到版本库中。</h5><h2 id="52-添加文件"><a class="markdownIt-Anchor" href="#52-添加文件"></a> 5.2 <strong>添加文件</strong></h2><h3 id="521-添加文件过程"><a class="markdownIt-Anchor" href="#521-添加文件过程"></a> 5.2.1 <strong>添加文件过程</strong></h3><p>在 桌面/新建文件夹(2) 目录下创建一个mytest.txt文件</p><p><img src="/images/javawz/wps16E.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps16F.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps170.tmp.jpg" alt="img"></p><p>文本文件变为带“+”号的图标：</p><p><img src="/images/javawz/wps171.tmp.jpg" alt="img"></p><p>提交文件：在mytest.txt上再次点击右键选择“提交”，此时将文件保存至版本库中。</p><p><img src="/images/javawz/wps182.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps183.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps184.tmp.jpg" alt="img"></p><h3 id="522-工作区和暂存区"><a class="markdownIt-Anchor" href="#522-工作区和暂存区"></a> 5.2.2 <strong>工作区和暂存区</strong></h3><p>Git和其他版本控制系统如SVN的一个不同之处就是有暂存区的概念。</p><p>什么是工作区（Working Directory）？</p><p>工作区就是你在电脑里能看到的目录，比如我的 新建文件夹(2) 文件夹就是一个工作区。</p><p>有的同学可能会说新建文件夹(2)不是版本库吗怎么是工作区了？其实新建文件夹(2)目录是工作区，在这个目录中的“.git”隐藏文件夹才是版本库。这回概念清晰了吧。</p><p>Git的版本库里存了很多东西，其中最重要的就是称为stage（或者叫index）的暂存区，还有Git为我们自动创建的第一个分支master，以及指向master的一个指针叫HEAD。</p><p>如下图所示：</p><p><img src="/images/javawz/wps185.tmp.png" alt="img"></p><p>分支和HEAD的概念我们稍后再讲。前面讲了我们把文件往Git版本库里添加的时候，是分两步执行的：</p><p>第一步是用git add把文件添加进去，实际上就是把文件修改添加到暂存区；</p><p>第二步是用git commit提交更改，实际上就是把暂存区的所有内容提交到当前分支。</p><p>因为我们创建Git版本库时，Git自动为我们创建了唯一一个master分支，所以，现在，git commit就是往master分支上提交更改。</p><p>你可以简单理解为，需要提交的文件修改通通放到暂存区，然后，一次性提交暂存区的所有修改。</p><h2 id="53-修改文件"><a class="markdownIt-Anchor" href="#53-修改文件"></a> 5.3 <strong>修改文件</strong></h2><h3 id="531-提交修改"><a class="markdownIt-Anchor" href="#531-提交修改"></a> 5.3.1 <strong>提交修改</strong></h3><p>被版本库管理的文件不可避免的要发生修改，此时只需要直接对文件修改即可。修改完毕后需要将文件的修改提交到版本库。</p><p>在mytest.txt文件上点击右键，然后选择“提交”<br><img src="/images/javawz/wps186.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps187.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps197.tmp.jpg" alt="img"></p><h3 id="532-查看修改历史"><a class="markdownIt-Anchor" href="#532-查看修改历史"></a> 5.3.2 <strong>查看修改历史</strong></h3><p>在开发过程中可能会经常查看代码的修改历史，或者叫做修改日志。来查看某个版本是谁修改的，什么时间修改的，修改了哪些内容。</p><p>可以在文件上点击右键选择“显示日志”来查看文件的修改历史。</p><p><img src="/images/javawz/wps198.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps199.tmp.jpg" alt="img"></p><h3 id="533-差异比较"><a class="markdownIt-Anchor" href="#533-差异比较"></a> 5.3.3 <strong>差异比较</strong></h3><p>当文件内容修改后，需要和修改之前对比一下修改了哪些内容此时可以使用“比较差异功能”</p><p><img src="/images/javawz/wps19A.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps19B.tmp.jpg" alt="img"></p><h3 id="534-还原修改"><a class="markdownIt-Anchor" href="#534-还原修改"></a> 5.3.4 <strong>还原修改</strong></h3><p>当文件修改后不想把修改的内容提交，还想还原到未修改之前的状态。此时可以使用“还原”功能</p><p><img src="/images/javawz/wps19C.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps19D.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1AE.tmp.jpg" alt="img"></p><p><em><strong>*注意：此操作会撤销所有未提交的修改，所以当做还原操作是需要慎重慎重！！！*</strong></em></p><h2 id="54-删除文件"><a class="markdownIt-Anchor" href="#54-删除文件"></a> 5.4 <strong>删除文件</strong></h2><p>需要删除无用的文件时可以使用git提供的删除功能直接将文件从版本库中删除。</p><p><img src="/images/javawz/wps1AF.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1B0.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1B1.tmp.jpg" alt="img"></p><p>需要将删除操作提交到本地仓库</p><p><img src="/images/javawz/wps1B2.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1C3.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1C4.tmp.jpg" alt="img"></p><h2 id="55-案例将c工程提交到版本库"><a class="markdownIt-Anchor" href="#55-案例将c工程提交到版本库"></a> 5.5 <strong>案例：将c++工程提交到版本库</strong></h2><p>第一步：将参考资料中的c++工程project-test复制到工作目录中</p><p><img src="/images/javawz/wps1C5.tmp.jpg" alt="img"></p><p>第二步：将工程添加到暂存区。</p><p><img src="/images/javawz/wps1C6.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1C7.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1C8.tmp.jpg" alt="img"></p><p>点击确定完成暂存区添加。</p><p>三、忽略文件或文件夹</p><p>在此工程中，并不是所有文件都需要保存到版本库中的例如“Debug”目录及目录下的文件就可以忽略。好在Git考虑到了大家的感受，这个问题解决起来也很简单，在Git工作区的根目录下创建一个特殊的.gitignore文件，然后把要忽略的文件名填进去，Git就会自动忽略这些文件。</p><p>如果使用TortoiseGit的话可以使用菜单项直接进行忽略。</p><p><img src="/images/javawz/wps1D8.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1D9.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1DA.tmp.jpg" alt="img"><img src="/images/javawz/wps1DB.tmp.jpg" alt="img"></p><p>选择保留本地文件。完成后在此文件夹内会多出一个.gitignore文件，这个文件就是文件忽略文件，当然也可以手工编辑。其中的内容就是把bin目录忽略掉。</p><p><img src="/images/javawz/wps1DC.tmp.jpg" alt="img"></p><p>四、提交代码</p><p>将代码添加到master分支上，其中.gitignore文件也需要添加到暂存区，然后提交到版本库。</p><p><img src="/images/javawz/wps1DD.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1DE.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1EF.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1F0.tmp.jpg" alt="img"></p><h2 id="56-忽略文件语法规范gitignore文件"><a class="markdownIt-Anchor" href="#56-忽略文件语法规范gitignore文件"></a> 5.6 <strong>忽略文件语法规范(.gitignore文件)</strong></h2><p>空行或是以 # 开头的行即注释行将被忽略。</p><p>可以在前面添加正斜杠 / 来避免递归,下面的例子中可以很明白的看出来与下一条的区别。</p><p>可以在后面添加正斜杠 / 来忽略文件夹，例如 build/ 即忽略build文件夹。</p><p>可以使用 ! 来否定忽略，即比如在前面用了 *.apk ，然后使用 !a.apk ，则这个a.apk不会被忽略。</p><p>* 用来匹配零个或多个字符，如 *.[oa] 忽略所有以&quot;.o&quot;或&quot;.a&quot;结尾， *~ 忽略所有以 ~ 结尾的文件（这种文件通常被许多编辑器标记为临时文件）； [] 用来匹配括号内的任一字符，如 [abc] ，也可以在括号内加连接符，如 [0-9] 匹配0至9的数； ? 用来匹配单个字符。</p><p>看了这么多，还是应该来个栗子：</p><p># 忽略 .a 文件</p><p>*.a</p><p># 但否定忽略 lib.a, 尽管已经在前面忽略了 .a 文件</p><p>!lib.a</p><p># 仅在当前目录下忽略 TODO 文件， 但不包括子目录下的 subdir/TODO</p><p>/TODO</p><p># 忽略 build/ 文件夹下的所有文件</p><p>build/</p><p># 忽略 doc/notes.txt, 不包括 doc/server/arch.txt</p><p>doc/*.txt</p><p># 忽略所有的 .pdf 文件 在 doc/ directory 下的</p><p>doc/**/*.pdf</p><h1 id="6-远程仓库"><a class="markdownIt-Anchor" href="#6-远程仓库"></a> 6 <strong>远程仓库</strong></h1><h2 id="61-添加远程库"><a class="markdownIt-Anchor" href="#61-添加远程库"></a> 6.1 <strong>添加远程库</strong></h2><p>现在我们已经在本地创建了一个Git仓库，又想让其他人来协作开发，此时就可以把本地仓库同步到远程仓库，同时还增加了本地仓库的一个备份。</p><p>常用的远程仓库就是github：<a href="https://github.com/%EF%BC%8C%E6%8E%A5%E4%B8%8B%E6%9D%A5%E6%88%91%E4%BB%AC%E6%BC%94%E7%A4%BA%E5%A6%82%E4%BD%95%E5%B0%86%E6%9C%AC%E5%9C%B0%E4%BB%A3%E7%A0%81%E5%90%8C%E6%AD%A5%E5%88%B0github%E3%80%82" target="_blank" rel="noopener">https://github.com/，接下来我们演示如何将本地代码同步到github。</a></p><p>码云: <a href="https://gitee.com/" target="_blank" rel="noopener">https://gitee.com/</a></p><h3 id="611-在github上创建仓库"><a class="markdownIt-Anchor" href="#611-在github上创建仓库"></a> 6.1.1 <strong>在github上创建仓库</strong></h3><p>首先你得在github上创建一个账号，这个就不演示了。然后在github上创建一个仓库：</p><p><img src="/images/javawz/wps1F1.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1F2.tmp.jpg" alt="img"></p><p>点击“create repository”按钮仓库就创建成功了。</p><p>Github支持两种同步方式“https”和“ssh”。如果使用https很简单基本不需要配置就可以使用，但是每次提交代码和下载代码时都需要输入用户名和密码。而且如果是公司配置的私有git服务器一般不提供hppts方式访问，所以我们着重讲“ssh”方式。</p><p><img src="/images/javawz/wps1F3.tmp.jpg" alt="img"></p><h3 id="612-https方式同步远程仓库"><a class="markdownIt-Anchor" href="#612-https方式同步远程仓库"></a> 6.1.2 <strong>https方式同步远程仓库</strong></h3><p>对于新创建的远程仓库(<strong>还没有分支的</strong>)可以直接通过https地址将本地仓库内容直接推送过去, 找到本地仓库目录, 鼠标右键选择: git 同步</p><p><img src="/images/javawz/wps1F4.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps1F5.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps205.tmp.jpg" alt="img"></p><h3 id="613-ssh协议"><a class="markdownIt-Anchor" href="#613-ssh协议"></a> 6.1.3 <strong>ssh协议</strong></h3><h4 id="6131-什么是ssh"><a class="markdownIt-Anchor" href="#6131-什么是ssh"></a> 6.1.3.1 什么是ssh?</h4><p>SSH是英文Secure Shell的简写形式。通过使用SSH，你可以把所有传输的数据进行加密，这样&quot;中间人&quot;这种攻击方式就不可能实现了，而且也能够防止DNS欺骗和IP欺骗。使用SSH，还有一个额外的好处就是传输的数据是经过压缩的，所以可以加快传输的速度。SSH有很多功能，它既可以代替Telnet，又可以为FTP、Pop、甚至为PPP提供一个安全的&quot;通道&quot;。</p><p><img src="/images/javawz/wps206.tmp.jpg" alt="img"></p><p>如果一个用户从本地计算机，使用SSH协议登录另一台远程计算机，我们就可以认为，这种登录是安全的，即使被中途截获，密码也不会泄露。</p><p>最早的时候，互联网通信都是明文通信，一旦被截获，内容就暴露无疑。1995年，芬兰学者Tatu Ylonen设计了SSH协议，将登录信息全部加密，成为互联网安全的一个基本解决方案，迅速在全世界获得推广，目前已经成为Linux系统的标准配置。</p><h4 id="6132-ssh密钥生成"><a class="markdownIt-Anchor" href="#6132-ssh密钥生成"></a> 6.1.3.2 ssh密钥生成</h4><p>在windows下我们可以使用 Git Bash.exe来生成密钥，可以通过开始菜单或者右键菜单打开Git Bash</p><p><img src="/images/javawz/wps207.tmp.jpg" alt="img">  <img src="/images/javawz/wps208.tmp.jpg" alt="img"></p><p>git bash 执行命令,生命公钥和私钥</p><p>命令: <strong>ssh-keygen -t rsa</strong></p><p><img src="/images/javawz/wps209.tmp.jpg" alt="img"></p><p>执行命令完成后,在window本地用户.ssh目录C:\Users\用户名.ssh下面生成如下名称的公钥和私钥:</p><p><img src="/images/javawz/wps20A.tmp.jpg" alt="img"></p><h4 id="6133-ssh密钥配置"><a class="markdownIt-Anchor" href="#6133-ssh密钥配置"></a> 6.1.3.3 ssh密钥配置</h4><p>密钥生成后需要在github上配置密钥本地才可以顺利访问。</p><p><img src="/images/javawz/wps20B.tmp.jpg" alt="img"> <img src="/images/javawz/wps21C.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps21D.tmp.jpg" alt="img"></p><p>在key部分将id_rsa.pub文件内容添加进去，然后点击“Add SSH key”按钮完成配置。</p><p><img src="/images/javawz/wps21E.tmp.jpg" alt="img"></p><h3 id="614-ssh方式同步到远程仓库"><a class="markdownIt-Anchor" href="#614-ssh方式同步到远程仓库"></a> 6.1.4 <strong>ssh方式同步到远程仓库</strong></h3><p>同步到远程仓库可以使用git bash也可以使用tortoiseGit</p><h4 id="6141-使用tortoisegit同步"><a class="markdownIt-Anchor" href="#6141-使用tortoisegit同步"></a> 6.1.4.1 <strong>使用TortoiseGit同步</strong></h4><p>一、由于TortoiseGit使用的ssh工具是“PuTTY”git Bash使用的ssh工具是“openSSH”，如果想让TortoiseGit也使用刚才生成的密钥可以做如下配置：</p><p><img src="/images/javawz/wps21F.tmp.jpg" alt="img"></p><p>创建新的远程仓库的并复制ssh地址</p><p><img src="/images/javawz/wps220.tmp.jpg" alt="img"></p><p>打开本地代码仓库</p><p><img src="/images/javawz/wps221.tmp.jpg" alt="img"></p><p>配置ssh</p><p><img src="/images/javawz/wps222.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps233.tmp.jpg" alt="img"></p><p><strong>Url：远程仓库的地址</strong></p><p><strong>推送URL：也是相同的</strong></p><p><strong>Putty密钥：选择刚才生成的密钥中的私钥</strong></p><p>二、同步。在本地仓库的文件夹中单击右键，选择“Git同步”</p><p><img src="/images/javawz/wps234.tmp.jpg" alt="img"><img src="/images/javawz/wps235.tmp.jpg" alt="img"></p><h2 id="62-从远程仓库克隆"><a class="markdownIt-Anchor" href="#62-从远程仓库克隆"></a> 6.2 <strong>从远程仓库克隆</strong></h2><p>克隆远程仓库也就是从远程把仓库复制一份到本地，克隆后会创建一个新的本地仓库。选择一个任意部署仓库的目录，然后克隆远程仓库。</p><h3 id="621-使用git-bash"><a class="markdownIt-Anchor" href="#621-使用git-bash"></a> 6.2.1 <strong>使用git bash：</strong></h3><p>git clone 仓库地址(ssh/https)</p><p>$ git clone <a href="mailto:git@github.com:subwen/mytest.git" target="_blank" rel="noopener">git@github.com:subwen/mytest.git</a></p><p>$ git clone <a href="https://github.com/subwen/mytest.git" target="_blank" rel="noopener">https://github.com/subwen/mytest.git</a></p><h3 id="622-使用tortoisegit"><a class="markdownIt-Anchor" href="#622-使用tortoisegit"></a> 6.2.2 <strong>使用TortoiseGit：</strong></h3><p>在任意目录点击右键：</p><p><img src="/images/javawz/wps236.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps237.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps238.tmp.jpg" alt="img"></p><h2 id="63-从远程仓库取代码"><a class="markdownIt-Anchor" href="#63-从远程仓库取代码"></a> 6.3 <strong>从远程仓库取代码</strong></h2><p>Git中从远程的分支获取最新的版本到本地有这样2个命令：</p><ol><li><p>git fetch：相当于是从远程获取最新版本到本地，不会自动merge（合并代码）</p></li><li><p>git pull：相当于是从远程获取最新版本并merge到本地</p></li></ol><p>上述命令其实相当于git fetch 和 git merge</p><p>在实际使用中，git fetch更安全一些</p><p>因为在merge前，我们可以查看更新情况，然后再决定是否合并</p><p>如果使用TortoiseGit的话可以从右键菜单中点击“拉取”（pull）或者“获取”（fetch）</p><p><img src="/images/javawz/wps248.tmp.jpg" alt="img"></p><h1 id="7-分支管理"><a class="markdownIt-Anchor" href="#7-分支管理"></a> 7 <strong>分支管理</strong></h1><h2 id="71-创建合并分支"><a class="markdownIt-Anchor" href="#71-创建合并分支"></a> 7.1 <strong>创建合并分支</strong></h2><p>在我们每次的提交，Git都把它们串成一条时间线，这条时间线就是一个分支。截止到目前，只有一条时间线，在Git里，这个分支叫主分支，即master分支。HEAD指针严格来说不是指向提交，而是指向master，master才是指向提交的，所以，HEAD指向的就是当前分支。</p><p>一开始的时候，master分支是一条线，Git用master指向最新的提交，再用HEAD指向master，就能确定当前分支，以及当前分支的提交点：</p><p><img src="/images/javawz/wps249.tmp.jpg" alt="img"></p><p>每次提交，master分支都会向前移动一步，这样，随着你不断提交，master分支的线也越来越长。</p><p>当我们创建新的分支，例如dev时，Git新建了一个指针叫dev，指向master相同的提交，再把HEAD指向dev，就表示当前分支在dev上：</p><p><img src="/images/javawz/wps24A.tmp.jpg" alt="img"></p><p>你看，Git创建一个分支很快，因为除了增加一个dev指针，改改HEAD的指向，工作区的文件都没有任何变化！</p><p>不过，从现在开始，对工作区的修改和提交就是针对dev分支了，比如新提交一次后，dev指针往前移动一步，而master指针不变：</p><p><img src="/images/javawz/wps24B.tmp.jpg" alt="img"></p><p>假如我们在dev上的工作完成了，就可以把dev合并到master上。Git怎么合并呢？最简单的方法，就是直接把master指向dev的当前提交，就完成了合并：</p><p><img src="/images/javawz/wps24C.tmp.jpg" alt="img"></p><p>所以Git合并分支也很快！就改改指针，工作区内容也不变！</p><p>合并完分支后，甚至可以删除dev分支。删除dev分支就是把dev指针给删掉，删掉后，我们就剩下了一条master分支：</p><p><img src="/images/javawz/wps24D.tmp.jpg" alt="img"></p><h2 id="72-使用tortoisegit实现分支管理"><a class="markdownIt-Anchor" href="#72-使用tortoisegit实现分支管理"></a> 7.2 <strong>使用TortoiseGit实现分支管理</strong></h2><p>使用TortoiseGit管理分支就很简单了。</p><h3 id="721-创建分支"><a class="markdownIt-Anchor" href="#721-创建分支"></a> 7.2.1 <strong>创建分支</strong></h3><p>在本地仓库文件夹中点击右键，然后从菜单中选择“创建分支”：</p><p><img src="/images/javawz/wps24E.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps24F.tmp.jpg" alt="img"></p><p>如果想创建完毕后直接切换到新分支可以勾选“切换到新分支”选项或者从菜单中选择“切换/检出”来切换分支：</p><p><img src="/images/javawz/wps250.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps261.tmp.jpg" alt="img"></p><h3 id="722-合并分支"><a class="markdownIt-Anchor" href="#722-合并分支"></a> 7.2.2 <strong>合并分支</strong></h3><p>分支切换到dev后就可以对工作区的文件进行修改，然后提交到dev分支原来的master分支不受影响。例如我们修改hello.txt中的内容，然后提交到dev分支。</p><p><img src="/images/javawz/wps262.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps263.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps264.tmp.jpg" alt="img"></p><p>切换到master分支后还是原理的内容：</p><p><img src="/images/javawz/wps265.tmp.jpg" alt="img"></p><p>将dev分支的内容合并到master分支，当前分支为master。从右键菜单中选择“合并”：</p><p><img src="/images/javawz/wps266.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps267.tmp.jpg" alt="img"></p><p>再查看hello.txt的内容就已经更新了：</p><p><img src="/images/javawz/wps268.tmp.jpg" alt="img"></p><h2 id="73-解决冲突"><a class="markdownIt-Anchor" href="#73-解决冲突"></a> 7.3 <strong>解决冲突</strong></h2><p>两个分支中编辑的内容都是相互独立互不干扰的，那么如果在两个分支中都对同一个文件进行编辑，然后再合并，就有可能会出现冲突。</p><p>例如在master分支中对hello.txt进行编辑：</p><p>然后提交到版本库。</p><p><img src="/images/javawz/wps279.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps27A.tmp.jpg" alt="img"></p><p>切换到dev分支，对hello.txt进行编辑：</p><p><img src="/images/javawz/wps27B.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps27C.tmp.jpg" alt="img"></p><p>最后进行分支合并，例如将dev分支合并到master分支。需要先切换到master分支然后进行分支合并。</p><p><img src="/images/javawz/wps27D.tmp.jpg" alt="img"></p><p>出现版本冲突。</p><p><img src="/images/javawz/wps27E.tmp.jpg" alt="img"></p><p>冲突需要手动解决。</p><p><img src="/images/javawz/wps27F.tmp.jpg" alt="img"></p><p>在冲突文件上单机右键选择“解决冲突”菜单项：</p><p><img src="/images/javawz/wps280.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps290.tmp.jpg" alt="img"></p><p><img src="/images/javawz/wps291.tmp.jpg" alt="img"></p><p>把冲突解决完毕的文件提交到版本库就可以了。</p><p><img src="/images/javawz/wps292.tmp.jpg" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;img src=&quot;/images/javawz/wps103.tmp.png&quot; alt=&quot;img&quot;&gt;&lt;/p&gt;
&lt;h1 id=&quot;1-git历史&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-git历史&quot;&gt;&lt;/a&gt; 1 Git历史&lt;/h1&gt;
&lt;
      
    
    </summary>
    
      <category term="Git" scheme="https://xiaowuyoucy.github.io/categories/Git/"/>
    
    
  </entry>
  
  <entry>
    <title>项目介绍和部署</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/17/%E9%A1%B9%E7%9B%AE%E4%BB%8B%E7%BB%8D%E5%92%8C%E9%83%A8%E7%BD%B2/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/17/项目介绍和部署/</id>
    <published>2022-05-17T14:36:46.000Z</published>
    <updated>2022-05-17T19:22:38.846Z</updated>
    
    <content type="html"><![CDATA[<p><strong>第一天</strong> <strong>-</strong> <strong>项目介绍和部署</strong></p><ol><li><p>学习目标</p></li><li><p>项目阶段要求</p><ul><li>2.1 项目1 介绍</li><li>2.2 项目要求</li></ul></li><li><p>项目整体架构图</p></li><li><p>项目整体模块划分</p></li><li><p>数据的加密和解密</p><ul><li>5.1 加密三要素</li><li>5.2 常用的加密方式</li><li>5.3 常用的加密算法</li></ul></li><li><p>安装OpenSSL</p></li></ol><p>6.1 openssl介绍</p><p>6.2 安装</p><ol start="7"><li><p>Oracle数据库表的导入</p><ul><li>7.1 连接数据库前的准备工作</li><li>7.2 启动oracle数据库</li></ul></li><li><p>源码安装</p></li></ol><h1 id="第一天-项目介绍和部署"><a class="markdownIt-Anchor" href="#第一天-项目介绍和部署"></a> 第一天 - 项目介绍和部署</h1><p>第一天 - 项目介绍和部署</p><ol><li><p>学习目标<br>理解项目的整体功能, 细节无需明白, 后边会详细讲解<br>清楚项目整体模块划分和后续要实现的功能<br>完成项目所需的oracle数据表的导入<br>Windows/Linux下完成OpenSSL的安装<br>对加密相关概念有初步理解(后续会逐步深入讲解)</p></li><li><p>项目阶段要求<br>2.1 项目1 介绍</p></li><li><p>项目名称 - 数据安全传输 基础设施平台<br>写简历的时候需要自己起个名字(根据项目的功能) 2. 应用场景:<br>网络通信<br>socket<br>http<br>传输层使用的tcp<br>保证通信时数据的安全<br>数据加密方式<br>对称加密</p></li></ol><p>非对称加密<br>项目1实现的功能<br>秘钥生成, 校验<br>数据加密</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;第一天&lt;/strong&gt; &lt;strong&gt;-&lt;/strong&gt; &lt;strong&gt;项目介绍和部署&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;学习目标&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;项目阶段要求&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;2.1 项目1 介绍&lt;/
      
    
    </summary>
    
      <category term="cpp" scheme="https://xiaowuyoucy.github.io/categories/cpp/"/>
    
    
  </entry>
  
  <entry>
    <title>OpenSSL安装和配置</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/17/OpenSSL%E5%AE%89%E8%A3%85%E5%92%8C%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/17/OpenSSL安装和配置/</id>
    <published>2022-05-16T23:12:06.000Z</published>
    <updated>2022-05-16T23:19:36.206Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-安装"><a class="markdownIt-Anchor" href="#1-安装"></a> 1. 安装</h2><h3 id="11-windows下安装openssl"><a class="markdownIt-Anchor" href="#11-windows下安装openssl"></a> 1.1 windows下安装openssl</h3><img src="/images/javawz/snipaste_20180423_165811.png" width="70%"><img src="/images/javawz/snipaste_20180423_170056.png" width="70%"><img src="/images/javawz/snipaste_20180423_170304.png" width="70%"><img src="/images/javawz/1524474316039.png" width="70%"><img src="/images/javawz/snipaste_20180423_170806.png" width="70%"><p>恭喜，OpenSSL安装完成。</p><h3 id="12-linux下安装openssl"><a class="markdownIt-Anchor" href="#12-linux下安装openssl"></a> 1.2 Linux下安装OpenSSL</h3><ol><li><p>下载安装包, 下载地址:  <a href="https://github.com/openssl/openssl" target="_blank" rel="noopener">https://github.com/openssl/openssl</a></p></li><li><p>源码安装包解压缩</p><ul><li><p>.zip格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unzip openssl.zip</span><br></pre></td></tr></table></figure></li><li><p>.tar.gz格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar zxvf openssl.tar.gz</span><br></pre></td></tr></table></figure></li><li><p>.tar.bz格式:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar jxvf openssl.tar.gz</span><br></pre></td></tr></table></figure></li></ul></li><li><p>进入解压目录, 安装（可参考安装文件INSTALL）:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">./config</span><br><span class="line">make</span><br><span class="line">make test （可选）</span><br><span class="line">make install (使用管理员权限执行该命令)</span><br><span class="line">sudo ldconfig    更新动态库配置文件</span><br></pre></td></tr></table></figure></li><li><p>验证是否安装成功</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openssl version -a</span><br></pre></td></tr></table></figure><blockquote><p>输出结果</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">OpenSSL 1.1.1-pre6-dev  xx XXX xxxx</span><br><span class="line">built on: Mon Apr 23 10:53:02 2018 UTC</span><br><span class="line">platform: linux-x86_64</span><br><span class="line">options:  bn(64,64) rc4(16x,int) des(int) idea(int) blowfish(ptr) </span><br><span class="line">compiler: gcc -fPIC -pthread -m64  -Wa,--noexecstack -Wall -O3 -DOPENSSL_USE_NODELETE -DL_ENDIAN -DOPENSSL_PIC -DOPENSSL_CPUID_OBJ -DOPENSSL_IA32_SSE2 -DOPENSSL_BN_ASM_MONT -DOPENSSL_BN_ASM_MONT5 -DOPENSSL_BN_ASM_GF2m -DSHA1_ASM -DSHA256_ASM -DSHA512_ASM -DRC4_ASM -DMD5_ASM -DAES_ASM -DVPAES_ASM -DBSAES_ASM -DGHASH_ASM -DECP_NISTZ256_ASM -DX25519_ASM -DPADLOCK_ASM -DPOLY1305_ASM -DNDEBUG</span><br><span class="line">OPENSSLDIR: "/usr/local/ssl"</span><br><span class="line">ENGINESDIR: "/usr/local/lib64/engines-1.1"</span><br><span class="line">Seeding source: os-specific</span><br></pre></td></tr></table></figure></li></ol><h2 id="2-vs中使用openssl"><a class="markdownIt-Anchor" href="#2-vs中使用openssl"></a> 2  VS中使用openssl</h2><blockquote><p>打开VS, 创建一个空的控制台应用程序</p></blockquote><img src="/images/javawz/snipaste_20180423_171324.png" width="70%"><blockquote><p>设置项目属性, 打开项目的属性面板</p></blockquote><img src="/images/javawz/snipaste_20180423_172055.png" width="100%"><blockquote><p>添加openssl头文件目录</p></blockquote><img src="/images/javawz/snipaste_20180423_172323.png" width="90%"><img src="/images/javawz/snipaste_20180423_172654.png" width="60%"><blockquote><p>添加openssl的库目录</p></blockquote><img src="/images/javawz/snipaste_20180423_172940.png" width="90%"><blockquote><p>配置完毕</p></blockquote><img src="/images/javawz/snipaste_20180423_173043.png" width="90%"><h2 id="3-测试"><a class="markdownIt-Anchor" href="#3-测试"></a> 3. 测试</h2><p>###3.1 VS中的相关设置</p><blockquote><p>打开项目属性窗口, 添加openssl相关的库到项目中</p><p><mark><strong>项目属性 -&gt; 链接器 -&gt; 输入 -&gt; 附件依赖项</strong></mark></p><ul><li><strong>libssl.lib</strong></li><li><strong>libcrypto.lib</strong></li></ul></blockquote><img src="/images/javawz/snipaste_20180423_174217.png" width="90%"><img src="/images/javawz/snipaste_20180423_174437.png" width="90%"><blockquote><p>将openssl安装目录/bin目录下(<strong>C:\OpenSSL-Win32\bin</strong>)的两个动态库拷贝到工作目录下:</p><ul><li><strong>libcrypto-1_1.dll</strong></li><li><strong>libssl-1_1.dll</strong></li></ul><p><mark><strong>C:\OpenSSL-Win32 是我的openssl安装目录</strong></mark></p><p>如图所示:</p><img src="/images/javawz/snipaste_20180423_182257.png" width="50%"></blockquote><p>测试代码如下:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _CRT_SECURE_NO_WARNINGS</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;openssl/md5.h&gt;// md5 头文件</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getMD5</span><span class="params">(<span class="keyword">const</span> <span class="keyword">char</span>* str, <span class="keyword">char</span>* result)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MD5_CTX ctx;</span><br><span class="line"><span class="comment">// 初始化</span></span><br><span class="line">MD5_Init(&amp;ctx);</span><br><span class="line"><span class="comment">// 添加数据</span></span><br><span class="line">MD5_Update(&amp;ctx, str, <span class="built_in">strlen</span>(str));</span><br><span class="line"><span class="comment">// 计算结果</span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">char</span> md[<span class="number">16</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">MD5_Final(md, &amp;ctx);</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">16</span>; ++i)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">sprintf</span>(&amp;result[i * <span class="number">2</span>], <span class="string">"%02x"</span>, md[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">char</span> result[<span class="number">33</span>] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line">getMD5(<span class="string">"hello, md5"</span>, result);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"md5 value: %s\n"</span>, result);</span><br><span class="line">system(<span class="string">"pause"</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输出结果: </span><br><span class="line">md5 value: <span class="number">33b</span>3bc8e05b4fcc16bd531dd9adac166</span><br></pre></td></tr></table></figure><h3 id="32-linux下的使用和测试"><a class="markdownIt-Anchor" href="#32-linux下的使用和测试"></a> 3.2 Linux下的使用和测试</h3><ol><li><p>编程应用程序,  测试代码如上, 文件名为  <code>md5_test.c</code></p></li><li><p>通过gcc编译源文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">gcc md5_test.c -o md5 -lssl -lcrypto</span><br><span class="line">执行该命令, 需要加载openssl的两个动态库</span><br><span class="line">- libssl.so</span><br><span class="line">- libcrypto.so</span><br></pre></td></tr></table></figure></li><li><p>查看生成的可执行程序 md5 运行时需要加载的动态库</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ldd md5</span><br></pre></td></tr></table></figure><p>输出结果:</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">linux-vdso.so.1 =&gt;  (0x00007ffdac781000)</span><br><span class="line">libssl.so.1.1 =&gt; not found</span><br><span class="line">libcrypto.so.1.1 =&gt; not found</span><br><span class="line">libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f365c3aa000)</span><br><span class="line">/lib64/ld-linux-x86-64.so.2 (0x00007f365c782000)</span><br></pre></td></tr></table></figure><p>提示动态库 <mark>libssl.so.1.1</mark> 和 <mark>libcrypto.so.1.1</mark> 链接不到</p></li><li><p>通过find查找两个动态库的位置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">find / -name "libssl.so.1.1"</span><br><span class="line">输出结果:</span><br><span class="line">/root/openssl-master/libssl.so.1.1</span><br><span class="line">/usr/local/lib64/libssl.so.1.1</span><br><span class="line"></span><br><span class="line">find / -name "libcrypto.so.1.1"</span><br><span class="line">输出结果:</span><br><span class="line">/root/openssl-master/libcrypto.so.1.1</span><br><span class="line">/usr/local/lib64/libcrypto.so.1.1</span><br></pre></td></tr></table></figure><p><strong>通过对输出结果的分析, 得出结论动态库所在的目录为:  <mark>/usr/local/lib64</mark></strong></p></li><li><p>解决问题, 将找到的<strong>动态库绝对路径</strong>添加到 <mark><strong>/etc/ld.so.conf</strong></mark> 文件中, 并<strong>使用管理员权限执行命令<mark>ldconfig</mark></strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo vim /etc/ld.so.conf</span><br><span class="line">将/usr/local/lib64 添加到文件末尾, 保存退出配置文件</span><br><span class="line">更新配置:</span><br><span class="line">sudo ldconfig</span><br></pre></td></tr></table></figure></li><li><p>验证</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">ldd md5</span><br><span class="line">        linux-vdso.so.1 =&gt;  (0x00007ffcd8fe0000)</span><br><span class="line">        libssl.so.1.1 =&gt; /usr/local/lib64/libssl.so.1.1 (0x00007fb7aae7d000)</span><br><span class="line">        libcrypto.so.1.1 =&gt; /usr/local/lib64/libcrypto.so.1.1 (0x00007fb7aa9a2000)</span><br><span class="line">        libc.so.6 =&gt; /lib64/libc.so.6 (0x00007fb7aa5e1000)</span><br><span class="line">        libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007fb7aa3dd000)</span><br><span class="line">        libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007fb7aa1c0000)</span><br><span class="line">        /lib64/ld-linux-x86-64.so.2 (0x00007fb7ab123000)</span><br></pre></td></tr></table></figure></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-安装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-安装&quot;&gt;&lt;/a&gt; 1. 安装&lt;/h2&gt;
&lt;h3 id=&quot;11-windows下安装openssl&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#11
      
    
    </summary>
    
      <category term="OpenSSL" scheme="https://xiaowuyoucy.github.io/categories/OpenSSL/"/>
    
    
  </entry>
  
  <entry>
    <title>MySQL中的事务</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/16/MySQL%E4%B8%AD%E7%9A%84%E4%BA%8B%E5%8A%A1/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/16/MySQL中的事务/</id>
    <published>2022-05-16T01:23:35.000Z</published>
    <updated>2022-05-16T01:24:54.209Z</updated>
    
    <content type="html"><![CDATA[<p>修改mysql为手工提交:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1 开启事务</span><br><span class="line">start transaction;</span><br><span class="line">2 设置手工提交</span><br><span class="line">set autocommit=0;</span><br><span class="line"></span><br><span class="line">1 开启事务</span><br><span class="line">start transaction;</span><br><span class="line">2 设置自动提交</span><br><span class="line">set autocommit=1;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mysql中的事务</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mysql.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> SET_TRAN<span class="meta-string">"SET AUTOCOMMIT=0"</span>  <span class="comment">//手动commit————手动commit</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> UNSET_TRAN<span class="meta-string">"SET AUTOCOMMIT=1"</span><span class="comment">//自动commit</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HOST_ <span class="meta-string">"127.0.0.1"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _USER_ <span class="meta-string">"root"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PASSWD_ <span class="meta-string">"123456"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DBNAME_ <span class="meta-string">"scott"</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//设置事务为手动提交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mysql_OperationTran</span><span class="params">(MYSQL *mysql)</span>  </span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//--开启事务</span></span><br><span class="line"><span class="keyword">int</span> ret = mysql_query(mysql, <span class="string">"start transaction"</span>);  </span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_OperationTran query start err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--设置事务为手动提交</span></span><br><span class="line">ret = mysql_query(mysql, SET_TRAN);<span class="comment">//set　autocommmit = 0</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_OperationTran query set err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置事务为自动提交</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mysql_AutoTran</span><span class="params">(MYSQL *mysql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//--开启事务</span></span><br><span class="line"><span class="keyword">int</span> ret = mysql_query(mysql, <span class="string">"start transaction"</span>);  </span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_AutoTran query start err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--设置事务为自动提交</span></span><br><span class="line">ret = mysql_query(mysql, UNSET_TRAN);  <span class="comment">//"set autocommit = 1"</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_AutoTran query set err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行commit，手动提交事务</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mysql_Commit</span><span class="params">(MYSQL *mysql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = mysql_query(mysql, <span class="string">"COMMIT"</span>); <span class="comment">//提交</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"commit err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行rollback，回滚事务</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">mysql_Rollback</span><span class="params">(MYSQL *mysql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = mysql_query(mysql, <span class="string">"ROLLBACK"</span>);</span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"rollback err: %s\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DROP_SAMPLE_TABLE <span class="meta-string">"DROP TABLE IF EXISTS test_table"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_SAMPLE_TABLE <span class="meta-string">"CREATE TABLE test_table(col1 INT,\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">                                                 col2 VARCHAR(10),\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">                                                 col3 VARCHAR(10))"</span></span></span><br><span class="line">                                                                                       </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sql01 <span class="meta-string">"INSERT INTO test_table(col1,col2,col3) VALUES(10, 'AAA', 'A1')"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sql02 <span class="meta-string">"INSERT INTO test_table(col1,col2,col3) VALUES(20, 'BBB', 'B2')"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sql03 <span class="meta-string">"INSERT INTO test_table(col1,col2,col3) VALUES(30, 'CCC', 'C3')"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> sql04 <span class="meta-string">"INSERT INTO test_table(col1,col2,col3) VALUES(40, 'DDD', 'D4')"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> ret = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">MYSQL *mysql = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"></span><br><span class="line">mysql = mysql_real_connect(mysql, _HOST_, _USER_, _PASSWD_, _DBNAME_, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span> (mysql == <span class="literal">NULL</span>) &#123;</span><br><span class="line">ret = mysql_errno(mysql);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"func mysql_real_connect() err：%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125; </span><br><span class="line"><span class="built_in">printf</span>(<span class="string">" --- connect ok......\n"</span>);</span><br><span class="line"><span class="comment">//执行删除表</span></span><br><span class="line"><span class="keyword">if</span> (mysql_query(mysql, DROP_SAMPLE_TABLE)) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" DROP TABLE failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_error(mysql));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行创建表</span></span><br><span class="line"><span class="keyword">if</span> (mysql_query(mysql, CREATE_SAMPLE_TABLE)) &#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" CREATE TABLE failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_error(mysql));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_OperationTran(mysql); <span class="comment">//开启事务，并修改事务属性为手动commit </span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_OperationTran() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_query(mysql, sql01);<span class="comment">//向表中插入第一行数据 ‘AAA’</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_query(mysql, sql02);<span class="comment">//向表中插入第二行数据 ‘BBB’</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_Commit(mysql); <span class="comment">//手动提交事务</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_Commit() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//////////AAA BBB  进去了。</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 1 </span></span><br><span class="line">ret = mysql_AutoTran(mysql); <span class="comment">// =再次= 修改事务属性为【自动】commit</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_OperationTran() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">else</span> </span></span><br><span class="line">ret = mysql_OperationTran(mysql); <span class="comment">// =再次= 修改事务属性为【手动】commit</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_OperationTran() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line">ret = mysql_query(mysql, sql03);<span class="comment">//向表中插入第三行数据 ‘CCC’</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_query(mysql, sql04);<span class="comment">//向表中插入第四行数据 ‘DDD’</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ret = mysql_Rollback(mysql);<span class="comment">//直接rollback操作</span></span><br><span class="line"><span class="keyword">if</span> (ret != <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_Rollback() err:%d\n"</span>, ret);</span><br><span class="line"><span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//rollback操作是否能回退掉CCC、DDD的值，取决于事务属性。</span></span><br><span class="line"></span><br><span class="line">mysql_close(mysql);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;修改mysql为手工提交:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>预处理类API函数</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/16/%E9%A2%84%E5%A4%84%E7%90%86%E7%B1%BBAPI%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/16/预处理类API函数/</id>
    <published>2022-05-16T01:22:35.000Z</published>
    <updated>2022-05-16T01:32:30.704Z</updated>
    
    <content type="html"><![CDATA[<p>该类函数解决问题：处理带有占位符的SQL语句。insert into table111(col1, col2, col3) values(?, ?, ?);</p><p>这种SQL语句由两部分组成，一部分是SQL语句体模型部分，另一部分是？所匹配的值。</p><p>性能、调优是数据库编程永恒不变的主题！如果能把SQL语句框架预先处理好，当真正要执行SQL语句时只需要发送对应的参数到对应的SQL框架中，就能提高客户端访问服务器的速度，且数据量小，可以减少网络通信量，提高数据传输效率高。</p><p>元数据（Metadata）：又称中介数据、中继数据，为描述数据的数据，主要是描述数据属性的信息，用来支持如指示存储位置、历史数据、资源查找、文件记录等功能。</p><p>根据API提供的案例学习该部分内容。主要有 4 个函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">mysql_stmt_init()初始化预处理环境句柄。返回一个结构体指针 MYSQL_STMT *stmt</span><br><span class="line"></span><br><span class="line">mysql_stmt_prepare()向上面句柄中添加SQL语句，带有 (?,?,?) 占位符</span><br><span class="line"></span><br><span class="line">mysql_stmt_param_count() 求绑定变量的个数(辅助函数)， 有多少个&apos;?&apos;就返回多少</span><br><span class="line"></span><br><span class="line">mysql_stmt_bind_param()将?对应的实参，设置到预处理环境句柄中</span><br><span class="line"></span><br><span class="line">mysql_stmt_execute()执行预处理的SQL语句</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/image-20220516093213505.png" alt="image-20220516093213505"></p><br><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mysql.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _HOST_ <span class="meta-string">"localhost"</span>  <span class="comment">//主机</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _USER_ <span class="meta-string">"root"</span>       <span class="comment">//mysql用户,非主机</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _PASSWD_ <span class="meta-string">"123456"</span>   <span class="comment">//密码</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> _DBNAME_ <span class="meta-string">"scott"</span>    <span class="comment">//库名</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> STRING_SIZE 50</span></span><br><span class="line"> </span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> DROP_SAMPLE_TABLE <span class="meta-string">"DROP TABLE IF EXISTS test_table"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> CREATE_SAMPLE_TABLE <span class="meta-string">"CREATE TABLE test_table(col1 INT,\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">                                                 col2 VARCHAR(40),\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">                                                 col3 SMALLINT,\</span></span></span><br><span class="line"><span class="meta"><span class="meta-string">                                                 col4 TIMESTAMP)"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INSERT_SAMPLE <span class="meta-string">"INSERT INTO test_table(col1,col2,col3) VALUES(?,?,?)"</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_insert</span><span class="params">(MYSQL *mysql)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1.初始化</span></span><br><span class="line">MYSQL * mysql = <span class="literal">NULL</span>;</span><br><span class="line">mysql = mysql_init(<span class="literal">NULL</span>) ;</span><br><span class="line"><span class="keyword">if</span>(mysql == <span class="literal">NULL</span> )</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql init err\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//2.连接</span></span><br><span class="line">mysql = mysql_real_connect(mysql, _HOST_,_USER_, _PASSWD_,_DBNAME_, <span class="number">0</span>, <span class="literal">NULL</span>,<span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql == <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_real_connect connect err\n"</span>);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"welcome to mysql \n"</span>);</span><br><span class="line">prepare_insert(mysql);</span><br><span class="line"><span class="comment">//3.关闭</span></span><br><span class="line">    mysql_close(mysql);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">prepare_insert</span><span class="params">(MYSQL *mysql)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MYSQL_STMT    *stmt;<span class="comment">//预处理的句柄</span></span><br><span class="line">MYSQL_BIND    bind[<span class="number">3</span>];<span class="comment">//绑定变量 </span></span><br><span class="line">my_ulonglong  affected_rows;</span><br><span class="line"><span class="keyword">int</span>           param_count;</span><br><span class="line"><span class="keyword">short</span>         small_data;</span><br><span class="line"><span class="keyword">int</span>           int_data;</span><br><span class="line"><span class="keyword">char</span>          str_data[STRING_SIZE];</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> str_length;</span><br><span class="line">my_bool       is_null;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (mysql_query(mysql, DROP_SAMPLE_TABLE))<span class="comment">//删除表</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" DROP TABLE failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_error(mysql));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (mysql_query(mysql, CREATE_SAMPLE_TABLE))<span class="comment">//创建表</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" CREATE TABLE failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_error(mysql));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Prepare an INSERT query with 3 parameters */</span></span><br><span class="line"><span class="comment">/* (the TIMESTAMP column is not named; the server */</span></span><br><span class="line"><span class="comment">/*  sets it to the current date and time) */</span></span><br><span class="line">stmt = mysql_stmt_init(mysql); <span class="comment">//预处理的初始化</span></span><br><span class="line"><span class="keyword">if</span> (!stmt)</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" mysql_stmt_init(), out of memory\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (mysql_stmt_prepare(stmt, INSERT_SAMPLE, <span class="built_in">strlen</span>(INSERT_SAMPLE))) <span class="comment">//insert 语句 的预处理 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" mysql_stmt_prepare(), INSERT failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_stmt_error(stmt));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">" prepare, INSERT successful\n"</span>);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Get the parameter count from the statement */</span></span><br><span class="line">param_count= mysql_stmt_param_count(stmt);<span class="comment">//获得参数个数 </span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">" total parameters in INSERT: %d\n"</span>, param_count);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (param_count != <span class="number">3</span>) <span class="comment">/* validate parameter count */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" invalid parameter count returned by MySQL\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Bind the data for all 3 parameters */</span></span><br><span class="line"> </span><br><span class="line"><span class="built_in">memset</span>(bind, <span class="number">0</span>, <span class="keyword">sizeof</span>(bind));</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* INTEGER PARAM */</span></span><br><span class="line"><span class="comment">/* This is a number type, so there is no need to specify buffer_length */</span></span><br><span class="line">bind[<span class="number">0</span>].buffer_type= MYSQL_TYPE_LONG;</span><br><span class="line">bind[<span class="number">0</span>].buffer= (<span class="keyword">char</span> *)&amp;int_data;<span class="comment">//内存地址的映射 </span></span><br><span class="line">bind[<span class="number">0</span>].is_null= <span class="number">0</span>;</span><br><span class="line">bind[<span class="number">0</span>].length= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* STRING PARAM */</span></span><br><span class="line">bind[<span class="number">1</span>].buffer_type= MYSQL_TYPE_STRING;</span><br><span class="line">bind[<span class="number">1</span>].buffer= (<span class="keyword">char</span> *)str_data;<span class="comment">//char 100 </span></span><br><span class="line">bind[<span class="number">1</span>].buffer_length= STRING_SIZE;</span><br><span class="line">bind[<span class="number">1</span>].is_null= <span class="number">0</span>;</span><br><span class="line">bind[<span class="number">1</span>].length= &amp;str_length;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* SMALLINT PARAM */</span></span><br><span class="line">bind[<span class="number">2</span>].buffer_type= MYSQL_TYPE_SHORT;</span><br><span class="line">bind[<span class="number">2</span>].buffer= (<span class="keyword">char</span> *)&amp;small_data;</span><br><span class="line">bind[<span class="number">2</span>].is_null= &amp;is_null;<span class="comment">//是否为null的指示器 </span></span><br><span class="line">bind[<span class="number">2</span>].length= <span class="number">0</span>;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Bind the buffers */</span></span><br><span class="line"><span class="keyword">if</span> (mysql_stmt_bind_param(stmt, bind)) <span class="comment">//绑定变量 参数绑定</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" mysql_stmt_bind_param() failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_stmt_error(stmt));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第一波赋值 </span></span><br><span class="line">int_data= <span class="number">10</span>;             <span class="comment">/* integer */</span></span><br><span class="line"><span class="built_in">strncpy</span>(str_data, <span class="string">"MySQL"</span>, STRING_SIZE); <span class="comment">/* string  */</span></span><br><span class="line">str_length= <span class="built_in">strlen</span>(str_data);</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* INSERT SMALLINT data as NULL */</span></span><br><span class="line">is_null= <span class="number">1</span>;<span class="comment">//指示插入的第三个字段是否为null </span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Execute the INSERT statement - 1*/</span></span><br><span class="line"><span class="keyword">if</span> (mysql_stmt_execute(stmt)) <span class="comment">//预处理的执行,第一次执行 </span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" mysql_stmt_execute(), 1 failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_stmt_error(stmt));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Get the total number of affected rows */</span></span><br><span class="line">affected_rows= mysql_stmt_affected_rows(stmt);<span class="comment">//预处理的影响条数</span></span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">" total affected rows(insert 1): %lu\n"</span>,</span><br><span class="line">                (<span class="keyword">unsigned</span> <span class="keyword">long</span>) affected_rows);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (affected_rows != <span class="number">1</span>) <span class="comment">/* validate affected rows */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" invalid affected rows by MySQL\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">//第二波赋值 </span></span><br><span class="line">int_data= <span class="number">1000</span>;</span><br><span class="line"><span class="built_in">strncpy</span>(str_data, <span class="string">"The most popular Open Source database"</span>, STRING_SIZE);</span><br><span class="line">str_length= <span class="built_in">strlen</span>(str_data);</span><br><span class="line">small_data= <span class="number">1000</span>;         <span class="comment">/* smallint */</span></span><br><span class="line">is_null= <span class="number">0</span>;               <span class="comment">/* reset */</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Execute the INSERT statement - 2*/</span></span><br><span class="line"><span class="keyword">if</span> (mysql_stmt_execute(stmt))<span class="comment">//第二次执行</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" mysql_stmt_execute, 2 failed\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_stmt_error(stmt));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Get the total rows affected */</span></span><br><span class="line">affected_rows= mysql_stmt_affected_rows(stmt);</span><br><span class="line"><span class="built_in">fprintf</span>(<span class="built_in">stdout</span>, <span class="string">" total affected rows(insert 2): %lu\n"</span>,</span><br><span class="line">                (<span class="keyword">unsigned</span> <span class="keyword">long</span>) affected_rows);</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> (affected_rows != <span class="number">1</span>) <span class="comment">/* validate affected rows */</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" invalid affected rows by MySQL\n"</span>);</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">/* Close the statement */</span></span><br><span class="line"><span class="keyword">if</span> (mysql_stmt_close(stmt))</span><br><span class="line">&#123;</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" failed while closing the statement\n"</span>);</span><br><span class="line">  <span class="built_in">fprintf</span>(<span class="built_in">stderr</span>, <span class="string">" %s\n"</span>, mysql_stmt_error(stmt));</span><br><span class="line">  <span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;该类函数解决问题：处理带有占位符的SQL语句。insert into table111(col1, col2, col3) values(?, ?, ?);&lt;/p&gt;
&lt;p&gt;这种SQL语句由两部分组成，一部分是SQL语句体模型部分，另一部分是？所匹配的值。&lt;/p&gt;
&lt;p&gt;性能
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql客户端开发</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/16/mysql%E5%AE%A2%E6%88%B7%E7%AB%AF%E5%BC%80%E5%8F%91/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/16/mysql客户端开发/</id>
    <published>2022-05-15T23:55:50.000Z</published>
    <updated>2022-05-16T00:12:50.754Z</updated>
    
    <content type="html"><![CDATA[<h3 id="思路分析"><a class="markdownIt-Anchor" href="#思路分析"></a> 思路分析</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">mysql客户端编写思路分析:</span><br><span class="line">1 mysql初始化--mysql_init</span><br><span class="line">2 连接mysql数据库---mysql_real_connect</span><br><span class="line">3 while(1)</span><br><span class="line">  &#123;</span><br><span class="line">  //打印提示符:write(STDOUT_FILENO, &quot;mysql &gt;&quot;, strlen(&quot;mysql &gt;&quot;));</span><br><span class="line">  //读取用户输入: read(STDIN_FILENO, buf, sizeof(buf))</span><br><span class="line">  //判断用户输入的是否为退出: QUIT quit exit EXIT</span><br><span class="line">  if(strncasecmp(buf, &quot;exit&quot;, 4)==0 || strncasecmp(buf, &quot;quit&quot;, 4)==0)</span><br><span class="line">  &#123;</span><br><span class="line">  //关闭连接---mysql_close();</span><br><span class="line">  exit();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //执行sql语句--mysql_query();</span><br><span class="line">  </span><br><span class="line">  //若不是select查询, 打印执行sql语句影响的行数--mysql_affected_rows();</span><br><span class="line">  if(strncasecmp(buf, &quot;select&quot;, 6)!=0)</span><br><span class="line">  &#123;</span><br><span class="line">  printf(&quot;Query OK, %d row affected&quot;, mysql_affected_rows());</span><br><span class="line">  continue;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  //若是select查询的情况</span><br><span class="line">  ---//获取列数: mysql_field_count()</span><br><span class="line">  //获取结果集: mysql_store_result()</span><br><span class="line">  --获取列数: int mysql_num_fields();</span><br><span class="line">  //获取表头信息并打印表头信息:mysql_fetch_fields();</span><br><span class="line">  </span><br><span class="line">  //循环获取每一行记录并打印: mysql_fetch_row()</span><br><span class="line">  //释放结果集: mysql_free_result()</span><br><span class="line">  </span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">4 关闭连接: mysql_close();</span><br></pre></td></tr></table></figure><ol><li>仿照mysql工具，应在连接数据库成功之后，在一个while循环中不断的接受用户输入的SQL语句。定义char sqlbuf[1024] 存储用户输入的SQL语句。初始化该buf，并提示用户输入SQL语句。使用gets函数在循环中动态接收用户输入。</li></ol><p>​</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">while (1) &#123;</span><br><span class="line"></span><br><span class="line">memset(sqlbuf, 0, sizeof(sqlbuf));</span><br><span class="line"></span><br><span class="line">printf(&quot;\nYourSQL&gt; &quot;);</span><br><span class="line"></span><br><span class="line">fgets(sqlbuf, sizeof(sqlbuf), stdin);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol start="2"><li><p>在mysql_query(connect, sqlbuf)之前，如果用户输入了“exit”那么程序直接结束。</p></li><li><p>在执行完 mysql_query(connect, sqlbuf)之后，应该判别用户输入的是否为select语句。如不是select语句不需要查询结果集、处理结果集等繁复操作。</p></li><li><p>如用户输入的是有结果集的SQL语句，将获取列数、获取结果集、获取表头、解析结果集、释放结果集等相关代码一起并入if (strncmp(sqlbuf, “select”, 6))中。</p></li></ol><p>​测试注意：执行SQL语句时不要在结尾加“;”</p><h3 id="中文问题"><a class="markdownIt-Anchor" href="#中文问题"></a> 中文问题：</h3><p>​修改<code>mysql_real_connect()</code>参数，连接到表中有中文数据的数据库，如mydb2，执行程序，测试显示中文出现乱码。我们可以使用mysql_query函数来解决该问题。</p><p>​在 while (1) 之前使用<code>ret = mysql_query(mysql, &quot;set names utf8&quot;);</code>来设置查询属性(也可以加到while中)。表示在查询的时候使用utf8的形式进行查询。</p><p>或者<code>mysql_set_character_set(mysql, &quot;utf8&quot;);</code></p><p>获取当前使用的字符集:  <code>const char *mysql_character_set_name(MYSQL *mysql)</code></p><h3 id="程序实现"><a class="markdownIt-Anchor" href="#程序实现"></a> 程序实现</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//模拟mysql客户端程序</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mysql.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//mysql初始化---mysql_init</span></span><br><span class="line">MYSQL *mysql = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_init error\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接数据库</span></span><br><span class="line">MYSQL *conn = mysql_real_connect(mysql, <span class="string">"localhost"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>, <span class="string">"scott"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(conn==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect mysql db error, [%s]\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取当前进程使用的字符集</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"before:[%s]\n"</span>, mysql_character_set_name(conn));</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置字符集为utf8格式</span></span><br><span class="line">mysql_set_character_set(conn, <span class="string">"utf8"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"after:[%s]\n"</span>, mysql_character_set_name(conn));</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> ret;</span><br><span class="line"><span class="keyword">int</span> num;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line"><span class="keyword">char</span> buf[<span class="number">1024</span>];</span><br><span class="line">MYSQL_RES *results;</span><br><span class="line">MYSQL_FIELD *fields;</span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"></span><br><span class="line"><span class="comment">//进入循环等待用户输入sql语句并执行sql语句</span></span><br><span class="line"><span class="keyword">while</span>(<span class="number">1</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//打印提示符</span></span><br><span class="line">write(STDOUT_FILENO, <span class="string">"mysql&gt; "</span>, <span class="built_in">strlen</span>(<span class="string">"mysql&gt; "</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//读取用户输入</span></span><br><span class="line"><span class="built_in">memset</span>(buf, <span class="number">0x00</span>, <span class="keyword">sizeof</span>(buf));</span><br><span class="line">read(STDIN_FILENO, buf, <span class="keyword">sizeof</span>(buf));</span><br><span class="line"></span><br><span class="line"><span class="comment">//1-去掉末尾的;</span></span><br><span class="line">p = <span class="built_in">strrchr</span>(buf, <span class="string">';'</span>);</span><br><span class="line"><span class="keyword">if</span>(p!=<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line">*p = <span class="string">'\0'</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//2-去掉回车</span></span><br><span class="line"><span class="keyword">if</span>(buf[<span class="number">0</span>]==<span class="string">'\n'</span>) </span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//去掉最前面的几个空格</span></span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;<span class="built_in">strlen</span>(buf); i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span>(buf[i]!=<span class="string">' '</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">n = <span class="built_in">strlen</span>(buf);</span><br><span class="line">memmove(buf, buf+i, n-i+<span class="number">1</span>); <span class="comment">//+1表示多拷贝一个\0</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"[%s]\n"</span>, buf);</span><br><span class="line"></span><br><span class="line"><span class="comment">//若输入的是退出: exit EXIT quit QUIT</span></span><br><span class="line"><span class="keyword">if</span>(strncasecmp(buf, <span class="string">"exit"</span>, <span class="number">4</span>)==<span class="number">0</span> || strncasecmp(buf, <span class="string">"quit"</span>, <span class="number">4</span>)==<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line">mysql_close(conn);</span><br><span class="line"><span class="built_in">exit</span>(<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line">ret = mysql_query(conn, buf);</span><br><span class="line"><span class="keyword">if</span>(ret!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, mysql_error(conn));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//若用户输入的不是select查询</span></span><br><span class="line"><span class="keyword">if</span>(strncasecmp(buf, <span class="string">"select"</span>, <span class="number">6</span>)!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"Query OK, %ld row affected\n"</span>, mysql_affected_rows(conn));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//下面是select查询的情况</span></span><br><span class="line"><span class="comment">//获取结果集</span></span><br><span class="line">results = mysql_store_result(conn);</span><br><span class="line"><span class="keyword">if</span>(results==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, mysql_error(conn));</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取列数</span></span><br><span class="line">num = mysql_num_fields(results);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取表头---列名</span></span><br><span class="line">fields = mysql_fetch_fields(results);</span><br><span class="line"><span class="keyword">if</span>(fields==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\n"</span>, mysql_error(conn));</span><br><span class="line">mysql_free_result(results);</span><br><span class="line"><span class="keyword">continue</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印表头</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+----------+-----------+\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>, fields[i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+----------+-----------+\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//循环获取每一行记录</span></span><br><span class="line"><span class="keyword">while</span>(row=mysql_fetch_row(results))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>, row[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+----------+-----------+\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放结果集</span></span><br><span class="line">mysql_free_result(results);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭数据库连接</span></span><br><span class="line">mysql_close(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;思路分析&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#思路分析&quot;&gt;&lt;/a&gt; 思路分析&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;s
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>linux下环境变量配置</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/16/linux%E4%B8%8B%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E9%85%8D%E7%BD%AE/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/16/linux下环境变量配置/</id>
    <published>2022-05-15T17:08:36.000Z</published>
    <updated>2022-05-15T17:48:00.527Z</updated>
    
    <content type="html"><![CDATA[<h3 id="环境变量"><a class="markdownIt-Anchor" href="#环境变量"></a> 环境变量</h3><ol><li><p><a href>环境变量的分类</a></p></li><li><p><a href>查看环境变量</a></p></li><li><p><a href>常用命名</a></p><ol><li><a href>PATH</a></li><li><a href>LANG</a></li><li><a href>HOSTNAME</a></li><li><a href>SHELL</a></li><li><a href>HISTSIZE</a></li><li><a href>USER</a></li><li><a href>HOME</a></li><li><a href>PWD</a></li><li><a href>CLASSPATH</a></li></ol></li><li><p><a href>设置环境变量</a></p><ol><li><p><a href>系统环境变量</a></p><ol><li><a href>在/etc/profile文件中设置</a></li><li><a href>在/etc/profile文件目录中增加环境变量脚本文件,这是linux推荐的方法</a></li><li><a href>在/etc/bashrc文件中设置环境变量</a></li></ol></li><li><p><a href>用户环境变量</a></p><ol><li><a href> .bash_profile(推荐首选)</a></li><li><a href> .bashrc</a></li><li><a href> .bash_logout</a></li><li><a href>.bash_history</a></li></ol></li></ol></li><li><p><a href>重要的环境变量</a></p><ol><li><a href>PATH环境 变量</a></li><li><a href>LANG环境变量</a></li><li><a href>CLASSPATH</a></li></ol></li></ol><p>linux环境变量也成为Shell环境变量，习惯大写。<br><br><br></p><h2 id="1环境变量的分类"><a class="markdownIt-Anchor" href="#1环境变量的分类"></a> 1.环境变量的分类</h2><ul><li>按生效的范围分类<ul><li>系统环境变量<ul><li>公共的，对全部的用户都生效</li></ul></li><li>用户环境变量<ul><li>用户私有的、自定义的个性化设置、只针对该用户有效</li></ul></li></ul></li><li>按生存周期分类<ul><li>永久环境变量<ul><li>在环境变量脚本文件中配置，用户每次登录时会自动执行这些脚本，相当于永久有效</li></ul></li><li>临时环境变量<ul><li>使用时在Shell中临时定义，退出Shell后失效。</li></ul></li></ul></li></ul><p><br><br></p><h2 id="2查看环境变量"><a class="markdownIt-Anchor" href="#2查看环境变量"></a> 2.查看环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">env //查看所有环境变量</span><br><span class="line"></span><br><span class="line">env | grep lan //用lan过滤环境变量</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">echo $PATH  //查看变量值</span><br></pre></td></tr></table></figure><p><br><br></p><h2 id="3常用命名"><a class="markdownIt-Anchor" href="#3常用命名"></a> 3.常用命名</h2><h4 id="1path"><a class="markdownIt-Anchor" href="#1path"></a> 1.PATH</h4><p>path为可执行环境的搜索目录，可执行程序包括Linux系统命令和用户的应用程序</p><h4 id="2lang"><a class="markdownIt-Anchor" href="#2lang"></a> 2.LANG</h4><h4 id="3hostname"><a class="markdownIt-Anchor" href="#3hostname"></a> 3.HOSTNAME</h4><p>服务器的主机名</p><h4 id="4shell"><a class="markdownIt-Anchor" href="#4shell"></a> 4.SHELL</h4><p>用户当前使用的Shell解析器</p><h4 id="5histsize"><a class="markdownIt-Anchor" href="#5histsize"></a> 5.HISTSIZE</h4><p>保存历史命令的条数</p><h4 id="6user"><a class="markdownIt-Anchor" href="#6user"></a> 6.USER</h4><p>当前登录用户的名字</p><h4 id="7home"><a class="markdownIt-Anchor" href="#7home"></a> 7.HOME</h4><p>当前登录用户的主目录</p><h4 id="8pwd"><a class="markdownIt-Anchor" href="#8pwd"></a> 8.PWD</h4><p>当前工作目录</p><h4 id="9classpath"><a class="markdownIt-Anchor" href="#9classpath"></a> 9.CLASSPATH</h4><p>java语言库文件搜索的目录，它不是Linux缺省的环境变量，但对java程序员来说非常重要。<br><br></p><h2 id="4设置环境变量"><a class="markdownIt-Anchor" href="#4设置环境变量"></a> 4.设置环境变量</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">变量名=&apos;值&apos;</span><br><span class="line">export变量名</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line">export 变量名=&apos;值&apos;</span><br><span class="line"></span><br><span class="line">如果环境变量的值中没有空格等特殊的字符，单引号可以不写</span><br></pre></td></tr></table></figure><p><strong>采用export配置的环境变量在退出Shell后环境变量将会失效。</strong></p><h4 id="系统环境变量"><a class="markdownIt-Anchor" href="#系统环境变量"></a> 系统环境变量</h4><p>系统环境变量对全部要用户都生效，设置系统环境有三种方法。需要root用户权限</p><br><br><h4 id="1在etcprofile文件中设置"><a class="markdownIt-Anchor" href="#1在etcprofile文件中设置"></a> 1.在/etc/profile文件中设置</h4><p>用户登录时执行/etc/profile文件中设置系统的环境变量。但是不推荐使用</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/profile</span><br><span class="line"></span><br><span class="line">export VAR=&apos;hello&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用 env  $VAR查看环境变量的值</span><br></pre></td></tr></table></figure><p><br><br></p><h4 id="2在etcprofile文件目录中增加环境变量脚本文件这是linux推荐的方法"><a class="markdownIt-Anchor" href="#2在etcprofile文件目录中增加环境变量脚本文件这是linux推荐的方法"></a> 2.在/etc/profile文件目录中增加环境变量脚本文件,这是linux推荐的方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">cd /etc/profile.d</span><br><span class="line"></span><br><span class="line">vi var.sh  //新建打开脚本文件var.sh</span><br><span class="line">export VAR=&apos;hello&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">退出重新登录后，环境变量生效</span><br><span class="line">env $VAR</span><br></pre></td></tr></table></figure><br><br><h4 id="3在etcbashrc文件中设置环境变量"><a class="markdownIt-Anchor" href="#3在etcbashrc文件中设置环境变量"></a> 3.在/etc/bashrc文件中设置环境变量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">该文件配置的环境变量将会影响全部用户使用的bash shell 。但是不建议使用</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/bashrc</span><br><span class="line"></span><br><span class="line">export VAR=&apos;hello&apos;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">退出重新登录后，环境变量使用</span><br><span class="line">env $VAR</span><br></pre></td></tr></table></figure><br><br><h3 id="2用户环境变量"><a class="markdownIt-Anchor" href="#2用户环境变量"></a> 2.用户环境变量</h3><p>在用户的主目录中，有几个特别的文件，用ls是看不见的，用<code>ls .bash_*</code>可以看见。设置用户环境变量有多种方法</p><ol><li><strong>.bash_profile(推荐首选)</strong></li></ol><p>当用户登录时执行，每个用户都可以使用该文件来配置专属自己的环境变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile//使环境变量生效</span><br></pre></td></tr></table></figure><ol start="2"><li><strong>.bashrc</strong></li></ol><p>当用户登录时以及每次打开新的Shell文件时，该文件都将会被读取，不推荐里面配置用户专用的环境变量，因为每开一个Shell，该文件都会被读取一次，效率肯定受影响。<br>3.  <strong>.bash_logout</strong></p><p>当每次退出系统（退出bash shell）时执行该文件。<br>4.  <strong>.bash_history</strong></p><p>保存当前用户使用过的历史命令</p><p>环境变量脚本文件的执行顺序</p><p><strong>/etc/profile --&gt; /etc/profile.d --&gt; /etc/bahrc --&gt; 用户的.bash_profile --&gt; 用户的.bashrc</strong></p><p>如果同名的话，后面的环境变量会覆盖前面的环境变量<br><br></p><br><h2 id="5重要的环境变量"><a class="markdownIt-Anchor" href="#5重要的环境变量"></a> 5.重要的环境变量</h2><h3 id="1path环境-变量"><a class="markdownIt-Anchor" href="#1path环境-变量"></a> 1.PATH环境 变量</h3><p><strong>1.PATH环境变量存放的是目录列表，目录之间用冒号 : 分隔，最后的原点 . 表示当前目录</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">export PATH=目录1:目录2:目录3:......目录n:.</span><br></pre></td></tr></table></figure><p><strong>2.PATH缺省包含了linux系统命令所在的目录（/usr/local/bin:/usr/local/sbin:/usr/sbin），如果不包含这些目录,linux的常用命令也无法执行（要输入绝对路径才能执行）。</strong></p><p><strong>3.在用户的.bash_profile文件中，会对PATH进行扩充</strong></p><br><br><h4 id="2lang环境变量"><a class="markdownIt-Anchor" href="#2lang环境变量"></a> 2.LANG环境变量</h4><p>LANG环境变量存放的是linux系统的语言、地区、字符集，它不需要系统管理员手工设置，/etc/profile会调用/etc/profile.d/lang.sh脚本完成对LANG的设置。</p><br><br><h4 id="3classpath"><a class="markdownIt-Anchor" href="#3classpath"></a> 3.CLASSPATH</h4><p>java语言库文件搜索的目录，他不是linux缺省的环境变量，但对java程序员来说很重要。</p><p>CLASSPATH环境变量存放的也是目录列表，目录之间用冒号:分隔,最后的圆点.表示当前目录。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;环境变量&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#环境变量&quot;&gt;&lt;/a&gt; 环境变量&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&gt;环境变量的分类&lt;/a&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;&lt;a href&gt;查看环境变量&lt;/a&gt;
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>第一个shell脚本</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/16/%E7%AC%AC%E4%B8%80%E4%B8%AAshell%E8%84%9A%E6%9C%AC/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/16/第一个shell脚本/</id>
    <published>2022-05-15T17:00:35.000Z</published>
    <updated>2022-05-15T17:05:47.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="第一个shell脚本"><a class="markdownIt-Anchor" href="#第一个shell脚本"></a> 第一个shell脚本</h2><p>打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 <a href="http://test.sh" target="_blank" rel="noopener">test.sh</a>，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行。</p><p>第一步创建<code>***.sh</code>脚本文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vim ***.sh</span><br></pre></td></tr></table></figure><p>输入一些代码，第一行一般是这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure><p><code>#!</code>是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</p><h3 id="运行-shell-脚本有两种方法"><a class="markdownIt-Anchor" href="#运行-shell-脚本有两种方法"></a> 运行 Shell 脚本有两种方法：</h3><p><strong>1、作为可执行程序</strong></p><p>将上面的代码保存为 <a href="http://test.sh" target="_blank" rel="noopener">test.sh</a>，并 cd 到相应目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class="line">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure><p>注意，一定要写成<code>./test.sh</code>，而不是 <strong><a href="http://test.sh" target="_blank" rel="noopener">test.sh</a></strong>，运行其它二进制的程序也一样，直接写 <a href="http://test.sh" target="_blank" rel="noopener">test.sh</a>，linux 系统会去 PATH 里寻找有没有叫 <a href="http://test.sh" target="_blank" rel="noopener">test.sh</a> 的，而只有 /bin,/sbin,  /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 <a href="http://test.sh" target="_blank" rel="noopener">test.sh</a> 是会找不到命令的，要用  ./test.sh 告诉系统说，就在当前目录找。</p><p><strong>2、作为解释器参数</strong></p><p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh test.sh</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;第一个shell脚本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#第一个shell脚本&quot;&gt;&lt;/a&gt; 第一个shell脚本&lt;/h2&gt;
&lt;p&gt;打开文本编辑器(可以使用 vi/vim 命令来创建文件)，新建一个文件 &lt;a href=&quot;htt
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>MYSQL_API编程</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/MYSQL-API%E7%BC%96%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/MYSQL-API编程/</id>
    <published>2022-05-15T15:55:00.000Z</published>
    <updated>2022-05-15T16:56:39.664Z</updated>
    
    <content type="html"><![CDATA[<p>访问MySQL服务器，这需要使用mysqlclient库，MySQL的大多数客户端API（<a href="http://xn--Java-321gi106a.NET" target="_blank" rel="noopener">除Java和.NET</a>）都是通过这个库来和MySQL服务器通讯的，而这个库正是使用C语言编写的。</p><h3 id="查看当前系统内所使用的mysql数据库版本信息"><a class="markdownIt-Anchor" href="#查看当前系统内所使用的mysql数据库版本信息"></a> 查看当前系统内所使用的mysql数据库版本信息</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -V</span><br></pre></td></tr></table></figure><h3 id="需要用到的库"><a class="markdownIt-Anchor" href="#需要用到的库"></a> 需要用到的库</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">使用命令查找该库的路径</span><br><span class="line">find / -name libmysqlclient*</span><br><span class="line"></span><br><span class="line">命令可查看库内包含的函数。</span><br><span class="line">nm /usr/lib64/mysql/libmysqlclient.a</span><br></pre></td></tr></table></figure><h3 id="头文件"><a class="markdownIt-Anchor" href="#头文件"></a> 头文件</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">用到头文件 &lt;mysql.h&gt; 可使用locate mysql.h查看其目录位置/usr/include/mysql/mysql.h。</span><br></pre></td></tr></table></figure><h3 id="编译引用了库的应用程序"><a class="markdownIt-Anchor" href="#编译引用了库的应用程序"></a> 编译引用了库的应用程序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gcc 源文件名.c -o 程序名 -I/usr/include/mysql/ -L/usr/lib64/mysql/ -lmysqlclient</span><br></pre></td></tr></table></figure><h3 id="makefile"><a class="markdownIt-Anchor" href="#makefile"></a> MAKEFILE</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">src = $(wildcard *.c)</span><br><span class="line">target = $(patsubst %.c, %, $(src))</span><br><span class="line">inc_path = /usr/include/mysql/</span><br><span class="line">lib_path = /usr/lib64/mysql/</span><br><span class="line">all: $(target)</span><br><span class="line">%:%.c</span><br><span class="line">gcc $&lt; -o $@ -I$(inc_path) -L$(lib_path) -lmysqlclient -lstdc++ -lpthread -ldl -lrt</span><br><span class="line">clean:</span><br><span class="line">-rm -rf $(target)</span><br><span class="line">.PHONY: all clean</span><br></pre></td></tr></table></figure><h2 id="mysql-api常用函数"><a class="markdownIt-Anchor" href="#mysql-api常用函数"></a> MySQL API常用函数</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">使用MySQL库API函数的一般步骤：</span><br><span class="line">a. 初始化. MYSQL *mysql_init(MYSQL *mysql)</span><br><span class="line"></span><br><span class="line">b. 错误处理unsigned int mysql_errno(MYSQL *mysql) </span><br><span class="line"></span><br><span class="line">char *mysql_error(MYSQL *mysql);</span><br><span class="line"></span><br><span class="line">c. 建立连接.</span><br><span class="line">MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd,const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag);</span><br><span class="line"></span><br><span class="line">d. 执行SQL语句int mysql_query(MYSQL *mysql, const char *stmt_str)</span><br><span class="line"></span><br><span class="line">e. 获取结果MYSQL_RES *mysql_store_result(MYSQL *mysql)</span><br><span class="line"></span><br><span class="line">MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</span><br><span class="line"></span><br><span class="line">f. 释放内存void mysql_free_result(MYSQL_RES *result)</span><br><span class="line"></span><br><span class="line">g. 关闭连接void mysql_close(MYSQL *mysql)</span><br></pre></td></tr></table></figure><h3 id="初始化"><a class="markdownIt-Anchor" href="#初始化"></a> 初始化</h3><p>编写程序测试 初始化函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *mysql_init(MYSQL *mysql);</span><br></pre></td></tr></table></figure><p>其中有一种新数据类型MYSQL。可在头文件<code>mysql.h → 263. typedef struct st_mysql {...} MYSQL;</code>找到其定义。是一个结构体。</p><p>处理错误码的函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unsigned int mysql_errno(MYSQL *mysql)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">#include &quot;mysql.h&quot;</span><br><span class="line"></span><br><span class="line">int main(void)</span><br><span class="line">&#123;</span><br><span class="line">int i, ret = 0, num = 0;</span><br><span class="line"></span><br><span class="line">MYSQL *mysql = mysql_init(NULL);</span><br><span class="line">if (mysql == NULL) &#123;</span><br><span class="line">ret = mysql_errno(mysql);</span><br><span class="line">printf(&quot;mysql_init err:%d\n&quot;, ret);</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;init ok...\n&quot;);</span><br><span class="line"></span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">编译出错，原因是64位Linux环境下，动态库配置不完整。需手动指定编译所用的动态库。根据错误提示分析需要加入如下函数库：</span><br><span class="line">1.__gxx_personality_v0   --&gt; -lstdc++使用g++相关的环境</span><br><span class="line">2. dlclose/dlopen/dlsym --&gt;-ldl完成用一个程序加载其他动态库的作用。</span><br><span class="line">3. pthread_*--&gt;  -lpthread线程库</span><br><span class="line">4. `my_getsystime&apos;/`clock_gettime&apos;--&gt;  -lrtlibrt.so是glibc中对real-time的支持库</span><br><span class="line"></span><br><span class="line">使用ldd命令可以查看该可执行文件运行所依赖的库文件。</span><br></pre></td></tr></table></figure><h3 id="连接数据库关闭连接"><a class="markdownIt-Anchor" href="#连接数据库关闭连接"></a> 连接数据库关闭连接</h3><p>mysql_connect();但该函数已经过时，应该使用手册中推荐的mysql_real_connect函数取而代之。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag) ;</span><br></pre></td></tr></table></figure><p>​根据手册中的描述，我们可以使用基础的链接方式与MySQL数据库建立连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql = mysql_real_connect(mysql, &quot;localhost&quot;, &quot;root&quot;, &quot;123456&quot;, &quot;mydb61&quot;, 0, NULL, 0);</span><br></pre></td></tr></table></figure><p>​连接数据库成功。对表中数据进行访问，访问结束需调用void mysql_close(MYSQL *mysql) 函数关闭连接。该函数在断开连接的同时，还可以解除分配由mysql指向的连接句柄。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_close(mysql);</span><br></pre></td></tr></table></figure><h3 id="读取数据"><a class="markdownIt-Anchor" href="#读取数据"></a> 读取数据</h3><h4 id="执行sql语句"><a class="markdownIt-Anchor" href="#执行sql语句"></a> 执行SQL语句</h4><p>mysql_query函数不单单能完成查询sql的功能，还能完成非select语句在c程序中的执行。是一个十分万能的c程序中执行SQL语句的函数。并且该函数本身直接支持静态SQL。查询以\0结尾的字符串。如果语句中包含二进制数据，则需要调用mysql_real_query来执行查询语句。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数原型：int mysql_query(MYSQL *mysql, const char *query);成功返回0，失败返回非0</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">char *psql = &quot;select * from emp&quot;;</span><br><span class="line">ret = mysql_query(mysql, psql);</span><br></pre></td></tr></table></figure><p>若执行的是UPDATE, DELETE或INSERT语句，则可通过<code>mysql_affected_rows()</code>获知受影响的记录数。</p><p>若执行的是SELECT语句，查询结束后，查询结果被保存在mysql句柄中。需要使用获取结果集的API函数将结果集获取出来。有两种方式可以获取结果集。</p><h5 id="注意-mysql_query执行的sql语句不应为语句添加终结分号或g"><a class="markdownIt-Anchor" href="#注意-mysql_query执行的sql语句不应为语句添加终结分号或g"></a> 注意: mysql_query执行的SQL语句不应为语句添加终结分号（‘;’）或“\g”。</h5><h4 id="获取结果集"><a class="markdownIt-Anchor" href="#获取结果集"></a> 获取结果集</h4><p>一种方式是通过mysql_store_result()将整个结果集全部取回来。另一种方式则是调用mysql_use_result()初始化获取操作，但暂时不取回任何记录。视结果集的条目数选择获取结果集的函数。两种方法均通过mysql_fetch_row()来访问每一条记录。</p><p>​<code>MYSQL_RES *mysql_store_result(MYSQL *mysql)</code> 成功返回<code>MYSQL_RES</code>结果集指针，失败返回NULL。</p><p>​<code>MYSQL_RES</code>是一个结构体类型，可以从mysql.h头文件中找到该结构体的定义：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql.h → 308. typedef struct st_mysql_res &#123;...&#125; MYSQL_RES;</span><br></pre></td></tr></table></figure><p>整体获取的结果集，保存在 MYSQL_RES 结构体指针中，通过检查mysql_store_result()是否返回NULL，可检测函数执行是否成功：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_RES *result = mysql_store_result(mysql);</span><br><span class="line">if (result == NULL) </span><br><span class="line">&#123;</span><br><span class="line">ret = mysql_errno(mysql);</span><br><span class="line">printf(&quot;mysql_store_result error: %s\n&quot;, mysql_error(mysql));</span><br><span class="line">return ret;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>该函数调用成功，则SQL查询的结果被保存在result中，但我们不清楚有多少条数据。所以应使用游标的方式将结果集中的数据逐条取出。</p><h4 id="解析结果集"><a class="markdownIt-Anchor" href="#解析结果集"></a> 解析结果集</h4><p>通过游标一行一行fetch结果集中的数据。根据游标使用的一般特性，应使用循环结构，到达结尾或者出错，返回NULL。</p><p>​函数原型：<code>MYSQL_ROW mysql_fetch_row(MYSQL_RES *result)</code>成功返回下一行的MYSQL_ROW结构。如果没有更多要检索的行或出现了错误，返回NULL。-----MYSQL_ROW定义在118行</p><p>​<code>select * from emp</code>  可以看到emp表一共有8列数据。可以循环将每行上每一列的数据显示到屏幕。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_ROW row = NULL;//typedef char **MYSQL_ROW;</span><br><span class="line">while ((row = mysql_fetch_row(result)))</span><br><span class="line">&#123;</span><br><span class="line">printf(&quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;, row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>MYSQL_ROW的本质是<code>typedef char ** MYSQL_ROW;</code> 数据信息存储的形式如下图所示：</p><p><img src="../../themes/pure/source/images/javawz/image-20220516003930249.png" alt="image-20220516003930249"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">从mysql.h头文件可查看MYSQL_ROW定义: 118. typedef char **MYSQL_ROW; /*return data as array of string*/</span><br></pre></td></tr></table></figure><p>从上图分析MYSQL_ROW为什么被定义为char**类型呢？推测mysq_fetch_row()的函数实现大致思想如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">char **mysql_fetch_row()&#123;</span><br><span class="line">char **tmp = (char **) malloc(sizeof(char *) * 8);</span><br><span class="line">for (i = 0; i &lt; 8; i++)</span><br><span class="line">&#123;</span><br><span class="line">tmp[i] = (char *)malloc(50);</span><br><span class="line">&#125;</span><br><span class="line">strcpy(tmp[0], &quot;7369&quot;);</span><br><span class="line">strcpy(tmp[1], &quot;SMITH&quot;);</span><br><span class="line">strcpy(tmp[2], &quot;CLERK&quot;);</span><br><span class="line">...</span><br><span class="line">return tmp;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="释放结果集"><a class="markdownIt-Anchor" href="#释放结果集"></a> 释放结果集</h4><p>​结果集处理完成，应调用对应的函数释放所占用的内存。</p><p><code>void mysql_free_result(MYSQL_RES *result);</code>成功释放参数传递的结果集。没有失败情况。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql_free_result(result);</span><br></pre></td></tr></table></figure><h4 id="获取列数"><a class="markdownIt-Anchor" href="#获取列数"></a> 获取列数</h4><p>查看帮助手册可以看到，有两个函数具备获取列数的功能：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">unsigned int mysql_field_count(MYSQL *mysql) 从mysql句柄中获取有多少列。</span><br><span class="line"></span><br><span class="line">unsigned int mysql_num_fields(MYSQL_RES *result) 从返回的结果集中获取有多少列。</span><br></pre></td></tr></table></figure><p>​选择任意一种方式均可以完成该功能。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">int num = mysql_field_count(connect); </span><br><span class="line">while (row = mysql_fetch_row(result)) </span><br><span class="line">&#123;</span><br><span class="line">for (i = 0; i &lt; num; i++) &#123;</span><br><span class="line">printf(&quot;%s\t&quot;, row[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line">//printf(&quot;%s\t%s\t%s\t%s\t%s\t%s\t%s\t%s\n&quot;, row[0],row[1],row[2],row[3],row[4],row[5],row[6],row[7]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="获取表头"><a class="markdownIt-Anchor" href="#获取表头"></a> 获取表头</h4><p>获取表头的API函数同样有两个：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES *result) 全部获取</span><br><span class="line"></span><br><span class="line">MYSQL_FIELD *mysql_fetch_field(MYSQL_RES *result) 获取单个</span><br></pre></td></tr></table></figure><p>​MYSQL_FIELD也是一个结构体类型，其内部保存了选择列表项的信息，其中的name成员变量就保存着列名。可从头文件<code>mysql.h中94-116</code>行找到其定义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">MYSQL_FIELD *fields = NULL;</span><br><span class="line">fields = mysql_fetch_fields(result);//得到表头的结构体数组</span><br><span class="line">for (i = 0; i &lt; num; i++) &#123;//已通过 mysql_field_count获取了总列数</span><br><span class="line">printf(&quot;%s\t&quot;, fields[i].name);//每一列的列名保存在name成员中 </span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br></pre></td></tr></table></figure><h3 id="示例程序"><a class="markdownIt-Anchor" href="#示例程序"></a> 示例程序</h3><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//mysql获取结果集</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"mysql.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//初始化</span></span><br><span class="line"><span class="comment">//MYSQL *mysql_init(MYSQL *mysql) </span></span><br><span class="line">MYSQL *mysql = mysql_init(<span class="literal">NULL</span>);</span><br><span class="line"><span class="keyword">if</span>(mysql==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql init error\n"</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql init ok\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//连接mysql数据库</span></span><br><span class="line"><span class="comment">//MYSQL *mysql_real_connect(MYSQL *mysql, const char *host, const char *user, const char *passwd, const char *db, unsigned int port, const char *unix_socket, unsigned long client_flag) </span></span><br><span class="line">MYSQL *conn = mysql_real_connect(mysql, <span class="string">"192.168.10.145"</span>, <span class="string">"root"</span>, <span class="string">"123456"</span>, <span class="string">"scott"</span>, <span class="number">0</span>, <span class="literal">NULL</span>, <span class="number">0</span>);</span><br><span class="line"><span class="keyword">if</span>(conn==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_real_connect error,[%s]\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"connect mysql OK, [%p], [%p]\n"</span>, mysql, conn);</span><br><span class="line"></span><br><span class="line"><span class="comment">//执行sql语句</span></span><br><span class="line"><span class="comment">//int mysql_query(MYSQL *mysql, const char *query) </span></span><br><span class="line"><span class="keyword">char</span> sSQL[<span class="number">255</span>] = <span class="string">"select * from mytest"</span>;</span><br><span class="line"><span class="keyword">int</span> ret = mysql_query(conn, sSQL);</span><br><span class="line"><span class="keyword">if</span>(ret!=<span class="number">0</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query error, [%s]\n"</span>, mysql_error(mysql));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_query ok\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取列数</span></span><br><span class="line"><span class="comment">//unsigned int mysql_field_count(MYSQL *mysql) </span></span><br><span class="line"><span class="comment">//unsigned int num = mysql_field_count(conn);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结果集</span></span><br><span class="line"><span class="comment">//MYSQL_RES *mysql_store_result(MYSQL *mysql) </span></span><br><span class="line">MYSQL_RES *results = mysql_store_result(conn);</span><br><span class="line"><span class="keyword">if</span>(results==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_store_result error,[%s]\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_store_result ok\n"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> i = <span class="number">0</span>;</span><br><span class="line"><span class="comment">//获取列数</span></span><br><span class="line"><span class="comment">//unsigned int mysql_num_fields(MYSQL_RES *result) </span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">int</span> num = mysql_num_fields(results);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取表头信息---列名</span></span><br><span class="line"><span class="comment">//MYSQL_FIELD *mysql_fetch_fields(MYSQL_RES *result)</span></span><br><span class="line">MYSQL_FIELD *fields = mysql_fetch_fields(results);</span><br><span class="line"><span class="keyword">if</span>(fields==<span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"mysql_fetch_fields error,[%s]\n"</span>, mysql_error(mysql));</span><br><span class="line"><span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印表头信息</span></span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+------+-----------+\n"</span>);</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>, fields[i].name);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+------+-----------+\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取结果集中每一行记录</span></span><br><span class="line">MYSQL_ROW row;</span><br><span class="line"><span class="keyword">while</span>((row=mysql_fetch_row(results)))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">for</span>(i=<span class="number">0</span>; i&lt;num; i++)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"%s\t"</span>, row[i]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"+------+-----------+\n"</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//释放结果集</span></span><br><span class="line"><span class="comment">//void mysql_free_result(MYSQL_RES *result) </span></span><br><span class="line">mysql_free_result(results);</span><br><span class="line"></span><br><span class="line"><span class="comment">//关闭数据库连接</span></span><br><span class="line">mysql_close(conn);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;访问MySQL服务器，这需要使用mysqlclient库，MySQL的大多数客户端API（&lt;a href=&quot;http://xn--Java-321gi106a.NET&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;除Java和.NET&lt;/a&gt;）都是通过这个
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>npm报错，安装不上依赖，npm代理报错</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/npm%E6%8A%A5%E9%94%99%EF%BC%8C%E5%AE%89%E8%A3%85%E4%B8%8D%E4%B8%8A%E4%BE%9D%E8%B5%96%EF%BC%8Cnpm%E4%BB%A3%E7%90%86%E6%8A%A5%E9%94%99/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/npm报错，安装不上依赖，npm代理报错/</id>
    <published>2022-05-15T02:02:17.000Z</published>
    <updated>2022-05-15T02:04:35.343Z</updated>
    
    <content type="html"><![CDATA[<p>npm报错：npm ERR! code ECONNREFUSED npm ERR! errno ECONNREFUSED，npm ERR! npm ERR! If you are behind a proxy, please make sure that the</p><p>在仓库上拉下来项目，安装依赖时报错：</p><p><img src="../../themes/pure/source/images/javawz/3973b16cc5bc42c3bbfd8415f3f24ef9.png" alt="在这里插入图片描述"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">问题出现原因：Github相当于程序员的百度，但是速度有时又太慢，就使用了某VPN代理访问。结果，VPN给我开了一个端口，npm的一些依赖包访问速度巨慢，就出现了上图报错</span><br></pre></td></tr></table></figure><h3 id="解决方法"><a class="markdownIt-Anchor" href="#解决方法"></a> 解决方法</h3><h4 id="1-查看代理"><a class="markdownIt-Anchor" href="#1-查看代理"></a> 1. 查看代理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config get proxy</span><br><span class="line">npm config get https-proxy</span><br></pre></td></tr></table></figure><p>如果发现有代理，就清空它</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm config delete proxy</span><br><span class="line">npm config delete https-proxy</span><br></pre></td></tr></table></figure><h3 id="2-全局配置淘宝镜像"><a class="markdownIt-Anchor" href="#2-全局配置淘宝镜像"></a> 2. 全局配置淘宝镜像</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><p>这里再安装依赖就OK了</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;npm报错：npm ERR! code ECONNREFUSED npm ERR! errno ECONNREFUSED，npm ERR! npm ERR! If you are behind a proxy, please make sure that the&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="hexo" scheme="https://xiaowuyoucy.github.io/categories/hexo/"/>
    
    
  </entry>
  
  <entry>
    <title>ORACLE查看数据库的库名、实例名、域名、服务器以及服务名</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/ORACLE%E6%9F%A5%E7%9C%8B%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E5%BA%93%E5%90%8D%E3%80%81%E5%AE%9E%E4%BE%8B%E5%90%8D%E3%80%81%E5%9F%9F%E5%90%8D%E3%80%81%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%BB%A5%E5%8F%8A%E6%9C%8D%E5%8A%A1%E5%90%8D/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/ORACLE查看数据库的库名、实例名、域名、服务器以及服务名/</id>
    <published>2022-05-15T02:00:15.000Z</published>
    <updated>2022-05-15T02:00:33.216Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">一、oracle中：</span><br><span class="line">1、查询数据库名：select name,dbid from v$database;或者show parameter db_name;</span><br><span class="line">2、查询实例名：select instance_name from v$instance;或者show parameter instance_name;</span><br><span class="line">3、查询数据库域名：select value from v$parameter where name=&apos;db_domain&apos;;或者show parameter domain;</span><br><span class="line">4、查询数据库服务器：select value from v$parameter where name=&apos;service_name&apos;;或者show parameter service;或者show parameter names;</span><br><span class="line">5、数据库服务名：此参数是数据库标识类参数，用service_name表示。</span><br><span class="line">数据库如果有域，则数据库服务名就是全局数据库名；</span><br><span class="line">如果没有，则数据库服务名就是数据库名。查询：show parameter service_name;</span><br><span class="line"></span><br><span class="line">二、一般在PL/SQL下，Oracle 用户查询其他用户的表一定要使用user.table格式才能查询，每次用户名.表名嫌麻烦的话。可以使用同义词，意思将user.table访问格式改成table格式即可</span><br><span class="line">创建同义词语句格式：</span><br><span class="line">create public synonym table_name for user.table_name;</span><br><span class="line">public很关键词，访问权限修饰，若想某表的授权用户也能用同义词查询，</span><br><span class="line">必须要用public访问修饰符。</span><br><span class="line">比如：</span><br><span class="line">原本&quot;表前缀.表名&quot;格式才能访问select * from PAASDATA.paas_city_def;</span><br><span class="line">create public synonym table_name for PAASDATA.paas_city_def;</span><br><span class="line">创建同义词后直接用表名即可select * from paas_city_def;</span><br><span class="line">————————————————</span><br><span class="line">版权声明：本文为CSDN博主「我冷漠」的原创文章，遵循CC 4.0 BY-SA版权协议，转载请附上原文出处链接及本声明。</span><br><span class="line">原文链接：https://blog.csdn.net/weixin_43748615/article/details/117766206</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>NAT的四种类型</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/NAT%E7%9A%84%E5%9B%9B%E7%A7%8D%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/NAT的四种类型/</id>
    <published>2022-05-15T01:54:16.000Z</published>
    <updated>2022-05-15T01:58:36.536Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一nat类型"><a class="markdownIt-Anchor" href="#一nat类型"></a> 一：NAT类型</h2><h3 id="基于udp的p2p应用需要考虑nat的类型因为不同的nat组合的穿透的方式并不一致有的能通-有的不能通-一般来讲-nat可以分为四种类型分别是"><a class="markdownIt-Anchor" href="#基于udp的p2p应用需要考虑nat的类型因为不同的nat组合的穿透的方式并不一致有的能通-有的不能通-一般来讲-nat可以分为四种类型分别是"></a> 基于UDP的P2P应用需要考虑NAT的类型，因为不同的NAT组合的穿透的方式并不一致，有的能通， 有的不能通。一般来讲， NAT可以分为四种类型，分别是:</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1,  全锥型(Full Cone)</span><br><span class="line"></span><br><span class="line">2,  受限锥型(Restricted Cone)， 或者说是IP受限锥型</span><br><span class="line"></span><br><span class="line">3,  端口受限锥型(Port Restricted Cone), 或者说是IP + PORT受限锥型</span><br><span class="line"></span><br><span class="line">4,  对称型(Symmetric)</span><br></pre></td></tr></table></figure><p>其中<strong>1,2,3属于同一种类型，都是锥型</strong>，区别只是路由器的不同的安全策略。还有些NAT不属于这四种中的任何一种，就不在本文的讨论范围了。</p><h2 id="二为什么有四种类型的nat"><a class="markdownIt-Anchor" href="#二为什么有四种类型的nat"></a> 二：为什么有四种类型的NAT</h2><p>NAT缓解了IPV4地址不够用的问题，同时也带了限制，那就是<strong>NAT外部的主机无法主动跟位于NAT内部的主机通信，NAT内部主机想要通信，必须主动和公网的一个IP通信，路由器负责建立一个映射关系，从而实现数据的转发， 这就是NAT的工作原理</strong>。</p><h2 id="一nat使用案例"><a class="markdownIt-Anchor" href="#一nat使用案例"></a> （一）NAT使用案例</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">公网server1 ip是1.1.1.1， 监听端口是1111</span><br><span class="line"></span><br><span class="line">公网server2 ip是2.2.2.2， 监听端口是2222</span><br><span class="line"></span><br><span class="line">NAT router ip是8.8.8.8</span><br><span class="line"></span><br><span class="line">NAT内部client是192.168.0.3</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1309518-20210520170839788-971942459.png" alt="img"></p><p>client发送数据的时候，不管是tcp还是udp必须本地绑定一个端口，一般来讲，这个过程都是自动的。</p><p>假定client(192.168.0.3, 100)给 server(1.1.1.1, 1111)发送报文，报文到达路由器，</p><p>路由器在自己的公网ip上开辟一个端口800，从而建立了一个隐射关系(8.8.8.8, 800)&lt;—&gt;(192.168.0.3, 100),</p><p>建立映射关系后，所以(192.168.0.3, 100)和(1.1.1.1, 1111)之间的报文都通过这个映射关系进行转发。</p><p><img src="/images/javawz/1309518-20210520171340167-1991626586.png" alt="img"></p><h2 id="二nat之间主要的区别分两种情况讨论"><a class="markdownIt-Anchor" href="#二nat之间主要的区别分两种情况讨论"></a> （二）NAT之间主要的区别分两种情况讨论</h2><h3 id="1client19216803-100和server1111-1111在路由器上建立好映射关系后如果client19216803-100又给2222-2222发送数据路由器该怎么处理呢"><a class="markdownIt-Anchor" href="#1client19216803-100和server1111-1111在路由器上建立好映射关系后如果client19216803-100又给2222-2222发送数据路由器该怎么处理呢"></a> 1:client(192.168.0.3, 100)和server(1.1.1.1, 1111)在路由器上建立好映射关系后，如果client(192.168.0.3, 100)又给(2.2.2.2, 2222)发送数据，路由器该怎么处理呢?</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1,  复用旧的映射关系(8.8.8.8, 800)&lt;---&gt;(192.168.0.3, 100)和(2.2.2.2, 2222)通信, 这就是锥型(Cone) NAT---（分为下面的3个小类）</span><br><span class="line"></span><br><span class="line">2,  创建新的映射关系(8.8.8.8, 801)&lt;---&gt;(192.168.0.3, 100)和(2.2.2.2, 2222)通信, 这就是对称型NAT</span><br></pre></td></tr></table></figure><p>注: (8.8.8.8, 801)只是举例，到底用什么端口取决于路由器的端口管理策略，总之是另外的一个端口，有的路由器有多个公网IP，不同的IP也会参与到这个映射关系中。</p><h3 id="2client19216803-100和server1111-1111在路由器上建立好映射关系后如果这个时候路由器8888在800端口上收到从另外一台server2222-2222发来的数据是不是应该转发给19216803-100呢"><a class="markdownIt-Anchor" href="#2client19216803-100和server1111-1111在路由器上建立好映射关系后如果这个时候路由器8888在800端口上收到从另外一台server2222-2222发来的数据是不是应该转发给19216803-100呢"></a> 2:client(192.168.0.3, 100)和server(1.1.1.1,  1111)在路由器上建立好映射关系后，如果这个时候路由器(8.8.8.8)在800端口上收到从另外一台server(2.2.2.2,  2222)发来的数据，是不是应该转发给(192.168.0.3, 100)呢？</h3><p>有四种情况:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1, 无条件转发给(192.168.0.3, 100)， 这就是全锥型(Full Cone)NAT。</span><br><span class="line"></span><br><span class="line">2, 如果(192.168.0.3, 100)之前给(2.2.2.2)发送过数据，则转发， 这就是受限锥型(Restricted Cone)。</span><br><span class="line"></span><br><span class="line">3, 如果(192.168.0.3, 100)之前给(2.2.2.2, 2222)发送过数据，则转发， 这就是端口受限锥型(Port Restricted Cone)。</span><br><span class="line"></span><br><span class="line">4, 丢弃报文，拒绝转发, 这就是对称型NAT。</span><br></pre></td></tr></table></figure><p>从上面也描述也可以看出，安全性系数, 对称型 &gt; 端口受限锥型 &gt; 受限锥型 &gt; 全锥型</p><h2 id="三不同nat的穿透性"><a class="markdownIt-Anchor" href="#三不同nat的穿透性"></a> （三）不同NAT的穿透性</h2><p><img src="/images/javawz/1309518-20210520172322286-481923861.png" alt="img"></p><p>对称nat无法穿透，这个说法不正确，<strong>对称nat与全椎full cone nat、对称nat 与 ip受限椎型cone</strong>，是可以穿透的，<strong>对称nat与 端口受限、对称nat与对称nat</strong>，不可穿透。<br>类型：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1、full cone 全椎</span><br><span class="line">2、Restricted Cone ip受限</span><br><span class="line">3、port Restricted Cone 端口受限</span><br><span class="line">4、Symmetric 对称。</span><br></pre></td></tr></table></figure><h3 id="穿透关系上述4种类型如果定义他们的值为序列号n为序列号相加"><a class="markdownIt-Anchor" href="#穿透关系上述4种类型如果定义他们的值为序列号n为序列号相加"></a> 穿透关系：上述4种类型，如果定义他们的值为序列号，N为序列号相加。</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">则N&lt;=6可穿透。2 和 4 序列相加 = 6 则可穿透。 </span><br><span class="line">3(端口受限)和4（对称）= 7 不可穿透。</span><br></pre></td></tr></table></figure><h1 id="三p2p网络中的nat穿透问题nat的原理和类型"><a class="markdownIt-Anchor" href="#三p2p网络中的nat穿透问题nat的原理和类型"></a> 三：p2p网络中的NAT穿透问题—NAT的原理和类型</h1><h2 id="一完全圆锥型nat-full-cane-nat"><a class="markdownIt-Anchor" href="#一完全圆锥型nat-full-cane-nat"></a> （一）完全圆锥型NAT (Full Cane NAT)</h2><h3 id="完全圆锥型的nat将从同一内部ip地址和端口来的所有请求都映射到相同的外部ip地址和端口-而且任何外部主机通过向映射的外部地址发送报文可以实现和内部主机进行通信"><a class="markdownIt-Anchor" href="#完全圆锥型的nat将从同一内部ip地址和端口来的所有请求都映射到相同的外部ip地址和端口-而且任何外部主机通过向映射的外部地址发送报文可以实现和内部主机进行通信"></a> <strong>完全圆锥型的NAT,将从同一内部IP地址和端口来的所有请求，都映射到相同的外部IP地址和端口。而且，任何外部主机通过向映射的外部地址发送报文，可以实现和内部主机进行通信。</strong></h3><p>这是一种<strong>比较宽松的策略</strong>，<strong>只要建立了内部网络的IP地址和端口与公网IP地址和端口的映射关系，则所有Internet上的主机都可以访问该NAT之后的主机！！！</strong></p><p><img src="/images/javawz/1309518-20210520174201499-1628049021.png" alt="img"></p><p>在图中，<strong>NAT会将内网地址{X:y} (x代表内网主机的IP地址，Y代表端口)映射成公网地址{A:b}(A代表映射的公网IP地址，b代表映射的端口)并绑定。任何数据分组都可以通过地址{A:b}送到此内网主机。</strong></p><h2 id="二受限圆锥型nat-restricted-cone-natip受限"><a class="markdownIt-Anchor" href="#二受限圆锥型nat-restricted-cone-natip受限"></a> （二）受限圆锥型NAT ( Restricted Cone NAT)–IP受限</h2><p>受限圆锥型NAT也是将从相同的内部IP地址和端口来的所有请求，映射到相同的公网IP地址和端口。</p><h3 id="但是与完全圆锥型nat不同当且仅当内网主机之前己经向公网主机假设ip地址为p发送过数据分组此公网主机才能够向内网主机发送数据分组"><a class="markdownIt-Anchor" href="#但是与完全圆锥型nat不同当且仅当内网主机之前己经向公网主机假设ip地址为p发送过数据分组此公网主机才能够向内网主机发送数据分组"></a> 但是与完全圆锥型NAT不同，当且仅当内网主机之前己经向公网主机(假设IP地址为P)发送过数据分组，此公网主机才能够向内网主机发送数据分组。</h3><p><img src="/images/javawz/1309518-20210520174148137-1979686418.png" alt="img"></p><p>在图中，<strong>NAT会将内网地址{x:y}映射成公网地址{A:b〕并绑定，只有源地址为P的分组才能和此内网主机通信。</strong></p><h2 id="三端口受限圆锥型nat-port-restricted-cone-natipport受限"><a class="markdownIt-Anchor" href="#三端口受限圆锥型nat-port-restricted-cone-natipport受限"></a> （三）端口受限圆锥型NAT ( Port Restricted Cone NAT)–IP+port受限</h2><h3 id="类似于受限圆锥型nat但更严格-端口受限圆锥型nat增加了端口号的限制当且仅当内网主机之前已经向公网主机发送了数据分组公网主机才能和此内网主机通信"><a class="markdownIt-Anchor" href="#类似于受限圆锥型nat但更严格-端口受限圆锥型nat增加了端口号的限制当且仅当内网主机之前已经向公网主机发送了数据分组公网主机才能和此内网主机通信"></a> 类似于受限圆锥型NAT，但更严格。<strong>端口受限圆锥型NAT增加了端口号的限制，当且仅当内网主机之前已经向公网主机发送了数据分组，公网主机才能和此内网主机通信。</strong></h3><p><img src="/images/javawz/1309518-20210520174437259-2033657389.png" alt="img"></p><p>在图中，NAT会将内网地址{X:y}映射成公网地址{A:b}并绑定，<strong>由于内网主机之前己经分别与地址为M,端口为n的公网主机以及地址为P,端口为q的公网主机通信</strong>，所以<strong>只有来自这两个公网地址和端口的分组才能到达内网主机</strong>。</p><h2 id="四对称型nat-csymmetric-nat-重点理解"><a class="markdownIt-Anchor" href="#四对称型nat-csymmetric-nat-重点理解"></a> （四）对称型NAT CSymmetric NAT)----重点理解</h2><h3 id="对称型nat把从同一内网地址和端口到相同的地址和端口的所有请求都映射到同一个公网地址和端口"><a class="markdownIt-Anchor" href="#对称型nat把从同一内网地址和端口到相同的地址和端口的所有请求都映射到同一个公网地址和端口"></a> 对称型NAT把从<strong>同一内网地址和端口****到相同的地址和端口的所有请求</strong>，<strong>都映射到同一个公网地址和端口</strong>。</h3><p>如果<strong>同一个内网主机，用相同的内网地址和端口向另一个地址发送数据分组，则会使用不同的映射</strong>，<strong>而且公网主机只有在接收到数据分组后，才能向与发送分组的内网主机进行通信</strong>。可见，对称性NAT是所有NAT类型中限制最为严格的。</p><p><img src="/images/javawz/1309518-20210520183858300-1646375177.png" alt="img"></p><p>在图中，对称型NAT会将内网地址{X:y}转换成公网地址{A:b}<strong>并绑定为{X:y}|{A:b}&lt;一&gt;{P:q}</strong>。这就意味着NAT只允许地址{A:b}接收来自{P:q}的分组，将它转给{X:y} 。<strong>当客户机请求一个不同的公网地址{M:n}时，NAT会新分配一个外部端口{<a href="https://www.baidu.com/s?wd=C%3A&amp;tn=24004469_oem_dg&amp;rsv_dl=gh_pl_sl_csd" target="_blank" rel="noopener">C:</a>d}</strong> 。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;一nat类型&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#一nat类型&quot;&gt;&lt;/a&gt; 一：NAT类型&lt;/h2&gt;
&lt;h3 id=&quot;基于udp的p2p应用需要考虑nat的类型因为不同的nat组合的穿透的方式并不一致有的能通-有的不能通-一般
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Linux设备检测外部网络NAT类型</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/Linux%E8%AE%BE%E5%A4%87%E6%A3%80%E6%B5%8B%E5%A4%96%E9%83%A8%E7%BD%91%E7%BB%9CNAT%E7%B1%BB%E5%9E%8B/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/Linux设备检测外部网络NAT类型/</id>
    <published>2022-05-15T01:53:07.000Z</published>
    <updated>2022-05-15T01:53:45.132Z</updated>
    
    <content type="html"><![CDATA[<p>在异地组网的过程中发现，对称型NAT(Symmetric NAT)对P2P穿透的支持很不好，因此在搭建P2P穿透个人使用的客户端或服务器之前有必要搞清楚自己所在网络环境的NAT类型。<br>Windows设备的NAT类型检测工具网上一搜一大把，而Linux的检测工具比较难找，这里提供一种方法和教程。</p><p><strong>工具：pystun</strong><br>pystun是一个STUN客户端工具，用于获取局域网的NAT类型和公网IP。<br>A Python STUN client for getting NAT type and external IP (RFC 3489)</p><p><strong>环境：centos8.2（理论上其他Linux发行版本也可以）</strong><br><strong>注意：必须要用python2.x的环境（推荐2.7），python3.x会报错</strong></p><p>安装：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://files.pythonhosted.org/packages/a9/72/0b6a4f8ad71f72ed3b3946a21084a8b3c17de10ddc5fc0dfec43c48fc768/pystun-0.1.0.tar.gz</span><br></pre></td></tr></table></figure><p>可能有更新的版本，pystun下载地址：<a href="https://pypi.python.org/pypi/pystun" target="_blank" rel="noopener">https://pypi.python.org/pypi/pystun</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf pystun-0.1.0.tar.gz</span><br><span class="line">cd pystun-0.1.0/</span><br><span class="line">dnf install python2 -y</span><br><span class="line">python2 setup.py install</span><br></pre></td></tr></table></figure><p>如果出现下面的情况：</p><blockquote><p>Traceback (most recent call last): File “<a href="http://setup.py" target="_blank" rel="noopener">setup.py</a>”, line 2, in <module><br>from setuptools import setup, find_packages<br>ImportError: No module named setuptools</module></p></blockquote><p>centos：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo dnf -y install python-setuptools</span><br></pre></td></tr></table></figure><p>ubuntu：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install python-setuptools</span><br></pre></td></tr></table></figure><p>就可以解决。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pystun</span><br></pre></td></tr></table></figure><p>如果用的是python3.x则会出现下面的错误：</p><blockquote><p>Traceback (most recent call last):<br>File “/usr/local/bin/pystun”, line 33, in<br>sys.exit(load_entry_point(‘pystun==0.1.0’, ‘console_scripts’, ‘pystun’)())<br>File “/usr/local/lib/python3.6/site-packages/pystun-0.1.0-py3.6.egg/stun/cli.py”, line 55, in main<br>stun_port=options.stun_port<br>File “/usr/local/lib/python3.6/site-packages/pystun-0.1.0-py3.6.egg/stun/<strong>init</strong>.py”, line 253, in get_ip_info<br>stun_host=stun_host, stun_port=stun_port)<br>File “/usr/local/lib/python3.6/site-packages/pystun-0.1.0-py3.6.egg/stun/<strong>init</strong>.py”, line 186, in get_nat_type<br>_initialize()<br>File “/usr/local/lib/python3.6/site-packages/pystun-0.1.0-py3.6.egg/stun/<strong>init</strong>.py”, line 93, in _initialize<br>dictValToAttr.update({items[i][1]: items[i][0]})<br>TypeError: ‘dict_items’ object does not support indexing</p></blockquote><p>运行正常：</p><blockquote><p>[root@iZbp1fn5lyz904h3d2r8pnZ ~]# pystun<br>NAT Type: Full Cone<br>External IP: <a href="http://121.196.xxx.xxx" target="_blank" rel="noopener">121.196.xxx.xxx</a><br>External Port: 5xxxx</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;在异地组网的过程中发现，对称型NAT(Symmetric NAT)对P2P穿透的支持很不好，因此在搭建P2P穿透个人使用的客户端或服务器之前有必要搞清楚自己所在网络环境的NAT类型。&lt;br&gt;
Windows设备的NAT类型检测工具网上一搜一大把，而Linux的检测工具比较难
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>解决ubuntu18.04安装mysql5.7无法远程连接的问题</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/%E8%A7%A3%E5%86%B3ubuntu18-04%E5%AE%89%E8%A3%85mysql5-7%E6%97%A0%E6%B3%95%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E7%9A%84%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/解决ubuntu18-04安装mysql5-7无法远程连接的问题/</id>
    <published>2022-05-15T01:48:31.000Z</published>
    <updated>2022-05-15T01:52:01.447Z</updated>
    
    <content type="html"><![CDATA[<p>遇到mysql本地连接成功,但远程连接不上的问题，无非从以下几个方面入手：</p><h2 id="1-user表问题"><a class="markdownIt-Anchor" href="#1-user表问题"></a> 1、user表问题</h2><p>mysql库中user表的root用户的host没有指定为%，而是默认的localhost，在mysql客户端执行如下操作即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"># 1、切换到mysql库</span><br><span class="line">use mysql;</span><br><span class="line">#2、查看root用户的host是不是 %,如果是localhost继续下面操作</span><br><span class="line">select user,authentication_string,host from user where user = &apos;root&apos;;</span><br><span class="line"># %为任意主机，就是任意主机可以通过用户名root + 密码 进行连接，你也可以指定只允许某IP的主机进行连接</span><br><span class="line">GRANT ALL PRIVILEGES ON *.* TO &apos;root&apos;@&apos;%&apos; IDENTIFIED BY &apos;密码&apos;;</span><br><span class="line"># 如果之前没有密码，最好再设置下密码，发现上面语句不会产生密码，否则后面连接可能会提示无权限需要更新客户端</span><br><span class="line">alter user &apos;root&apos;@&apos;%&apos; identified with mysql_native_password by &apos;密码&apos;;</span><br><span class="line"># mysql重新加载用户权限</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><h3 id="2-防火墙问题"><a class="markdownIt-Anchor" href="#2-防火墙问题"></a> 2、防火墙问题</h3><p>如果上面操作之后仍然无法远程连接mysql，就需要检查防火墙问题。我这里是ubuntu系统（其他系统自己找对应的指令）<br>首先查看了防火墙是否开启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看防火墙状态</span><br><span class="line">ufw status</span><br></pre></td></tr></table></figure><p>发现并没有开启，因此排除防火墙问题。</p><h3 id="3-3306端口开放的问题"><a class="markdownIt-Anchor" href="#3-3306端口开放的问题"></a> 3、3306端口开放的问题</h3><p>如果3306端口没有开发也会导致无法远程连接，通过指令发现3306开放了。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -tunlp</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/2021093001031440.png" alt="解决ubuntu18.04安装mysql5.7无法远程连接的问题"></p><p>但是仔细看图，有一点奇怪，就是它开放的是<code>127.0.0.1:3306</code>而不是<code>0.0.0.0:3306</code>，这才是本次问题的突破点，<code>127.0.0.1:3306</code>只对本机开放访问，其他ip都不行，那么该怎么解决呢？重点来了~<br>1）由于是apt在线安装的，mysql在目录<code>/etc/mysql/mysql.conf.d</code>下有个默认配置文件<code>mysqld.cnf</code>，打开编辑发现：</p><p><img src="/images/javawz/2021093001095056.png" alt="解决ubuntu18.04安装mysql5.7无法远程连接的问题"></p><p>2）原来罪魁祸首就在这里，<code>bind-address</code>绑定的ip是<code>127.0.0.1</code>，我们只需将<code>127.0.0.1</code>改为<code>0.0.0.0</code>表示任意ip主机都能访问即可：</p><p><img src="/images/javawz/2021093001120039.png" alt="解决ubuntu18.04安装mysql5.7无法远程连接的问题"></p><p>3）最后，重启mysql服务即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;遇到mysql本地连接成功,但远程连接不上的问题，无非从以下几个方面入手：&lt;/p&gt;
&lt;h2 id=&quot;1-user表问题&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#1-user表问题&quot;&gt;&lt;/a&gt; 1、user表问题&lt;/h2&gt;
&lt;p&gt;mysql库
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>解决wget不能下载https文件问题</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/%E8%A7%A3%E5%86%B3wget%E4%B8%8D%E8%83%BD%E4%B8%8B%E8%BD%BDhttps%E6%96%87%E4%BB%B6%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/解决wget不能下载https文件问题/</id>
    <published>2022-05-15T01:45:22.000Z</published>
    <updated>2022-05-15T01:47:07.546Z</updated>
    
    <content type="html"><![CDATA[<p>使用<a href="https://so.csdn.net/so/search?q=wget&amp;spm=1001.2101.3001.7020" target="_blank" rel="noopener">wget</a>下载https协议的文件时遇到了这个问题，提示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ERROR: cannot verify xx.xx.com&apos;s certificate, issued by `/C=BE/O=GlobalSign nv-sa/CN=GlobalSign Organization Validation CA - SHA256 - G2&apos;:</span><br><span class="line">  Unable to locally verify the issuer&apos;s authority.</span><br><span class="line">ERROR: certificate common name `*.alicdn.com&apos; doesn&apos;t match requested host name `xx.xx.com&apos;.</span><br><span class="line">To connect to xx.xx.com insecurely, use `--no-check-certificate&apos;.</span><br><span class="line">无法建立 SSL 连接。</span><br></pre></td></tr></table></figure><p>错误提示中建议使用“–no-check-certificate”参数，用法是这样的：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://xx.xx.com/xx.exe --no-check-certificate</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用&lt;a href=&quot;https://so.csdn.net/so/search?q=wget&amp;amp;spm=1001.2101.3001.7020&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;wget&lt;/a&gt;下载https协议的文件时遇到了这个问题，
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>ubuntu卸载Mysql</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/ubuntu%E5%8D%B8%E8%BD%BDMysql/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/ubuntu卸载Mysql/</id>
    <published>2022-05-15T01:43:33.000Z</published>
    <updated>2022-05-15T01:43:46.807Z</updated>
    
    <content type="html"><![CDATA[<h2 id="查看mysql依赖"><a class="markdownIt-Anchor" href="#查看mysql依赖"></a> 查看mysql依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br></pre></td></tr></table></figure><h2 id="卸载-mysql-common"><a class="markdownIt-Anchor" href="#卸载-mysql-common"></a> 卸载 mysql-common</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove mysql-common</span><br><span class="line">sudo apt-get autoremove --purge mysql-server-5.0</span><br></pre></td></tr></table></figure><h2 id="查看是否剩下mysql清除残留数据"><a class="markdownIt-Anchor" href="#查看是否剩下mysql清除残留数据"></a> 查看是否剩下mysql+清除残留数据</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">dpkg --list|grep mysql</span><br><span class="line">dpkg -l |grep ^rc|awk '&#123;print $2&#125;' |sudo xargs dpkg -P</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;查看mysql依赖&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#查看mysql依赖&quot;&gt;&lt;/a&gt; 查看mysql依赖&lt;/h2&gt;
&lt;figure class=&quot;highlight xml&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gu
      
    
    </summary>
    
      <category term="linux" scheme="https://xiaowuyoucy.github.io/categories/linux/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql中文乱码问题</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/mysql%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E9%97%AE%E9%A2%98/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/mysql中文乱码问题/</id>
    <published>2022-05-14T20:01:30.000Z</published>
    <updated>2022-05-15T01:41:24.082Z</updated>
    
    <content type="html"><![CDATA[<h3 id="mysql客户端的字符集"><a class="markdownIt-Anchor" href="#mysql客户端的字符集"></a> MYSQL客户端的字符集</h3><p>下面的测试均在test数据库中进行的:</p><p>实验步骤<br>使用两个linux客户端窗口, 一个用utf8登陆, 一个用gbk登陆</p><p>mysql数据库默认情况下是使用的utf8登陆的:</p><p>查看所有应用的字符集:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">show variables like &apos;character%&apos;;</span><br><span class="line"></span><br><span class="line">执行结果:</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | utf8                       |</span><br><span class="line">| character_set_connection | utf8                       |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | utf8                       |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br></pre></td></tr></table></figure><p>通过画图解释mysql的字符集问题:</p><p><img src="/images/javawz/image-20220515040327430.png" alt="image-20220515040327430"></p><p>客户端  ------  mysql服务端   ------ 数据库文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">character_set_client</span><br><span class="line">character_set_connection </span><br><span class="line">character_set_results  </span><br><span class="line">客户端使用的字符集, 都为utf8</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">此时执行:</span><br><span class="line">在utf8字符集环境下插入数据:</span><br><span class="line">insert into mytest values(5, &apos;小胡&apos;);</span><br><span class="line">select * from mytest;  ----正常显示</span><br></pre></td></tr></table></figure><p>接下来开启另一个linux客户端, 使用gbk字符集进行登陆:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">mysql -uroot -p123456 --default_character_set=gbk </span><br><span class="line"></span><br><span class="line">切换到test用户下:</span><br><span class="line">查看所有应用的字符集:  </span><br><span class="line">show variables like &apos;character%&apos;;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | gbk                        |</span><br><span class="line">| character_set_connection | gbk                        |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | gbk                        |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+ </span><br><span class="line"></span><br><span class="line">此时客户端的字符集为: </span><br><span class="line">character_set_client  </span><br><span class="line">character_set_connection </span><br><span class="line">character_set_results  都为gbk.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">select * from mytest:  --不能正常显示</span><br><span class="line"></span><br><span class="line">     在gbk环境下插入, 然后再到utf8环境下去查看同样也不能正常显示中文.</span><br></pre></td></tr></table></figure><p>总结:<br>1.   在utf8环境插入的中文不能用gbk查看;<br>2.   在gbk环境下插入的中文不能用utf8查看;<br>3.   在utf8环境下插入的中文要在utf8环境下查看;</p><ol start="4"><li>在gbk环境下插入的中文要在gbk环境下查看.</li></ol><h3 id="2-操作系统的语言集"><a class="markdownIt-Anchor" href="#2-操作系统的语言集"></a> 2 操作系统的语言集</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/sysconfig/i18n</span><br><span class="line">显示: LANG=&quot;zh_CN.UTF-8&quot;</span><br><span class="line">操作系统的菜单按照zh_CN显示,  文件存储按照utf8</span><br><span class="line"></span><br><span class="line">linux操作系统语言环境 和 用户的配置的语言环境LANG 相互影响</span><br><span class="line">echo $LANG   -----&gt;zh_CN.UTF-8</span><br><span class="line">  </span><br><span class="line">修改用户下的.bash_profile 中的LANG，屏蔽操作系统的LANG设置或者export LANG=C临时设置也可以</span><br><span class="line">然后在登陆到mysql数据库上:</span><br><span class="line">登陆数据库:   </span><br><span class="line">mysql -uroot -p123456 </span><br><span class="line">use test</span><br><span class="line">show variables like &apos;character%&apos;</span><br><span class="line"></span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| Variable_name            | Value                      |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line">| character_set_client     | latin1                     |</span><br><span class="line">| character_set_connection | latin1                     |</span><br><span class="line">| character_set_database   | utf8                       |</span><br><span class="line">| character_set_filesystem | binary                     |</span><br><span class="line">| character_set_results    | latin1                     |</span><br><span class="line">| character_set_server     | latin1                     |</span><br><span class="line">| character_set_system     | utf8                       |</span><br><span class="line">| character_sets_dir       | /usr/share/mysql/charsets/ |</span><br><span class="line">+--------------------------+----------------------------+</span><br><span class="line"></span><br><span class="line">再次查看mytest表, 不能正常显示中文</span><br><span class="line">select * from mytest;</span><br></pre></td></tr></table></figure><h3 id="3-linux客户端的字符集"><a class="markdownIt-Anchor" href="#3-linux客户端的字符集"></a> 3 linux客户端的字符集</h3><p>若将linux客户端设置问GB18030, 则也会对中文的显示产生影响:</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;mysql客户端的字符集&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#mysql客户端的字符集&quot;&gt;&lt;/a&gt; MYSQL客户端的字符集&lt;/h3&gt;
&lt;p&gt;下面的测试均在test数据库中进行的:&lt;/p&gt;
&lt;p&gt;实验步骤&lt;br&gt;
使用两个li
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql表的约束</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/mysql%E8%A1%A8%E7%9A%84%E7%BA%A6%E6%9D%9F/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/mysql表的约束/</id>
    <published>2022-05-14T19:33:15.000Z</published>
    <updated>2022-05-14T19:38:04.545Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">*定义主键约束　primary key:不允许为空，不允许重复</span><br><span class="line">*定义主键自动增长　auto_increment</span><br><span class="line">*定义唯一约束　unique</span><br><span class="line">*定义非空约束　not null</span><br><span class="line">*定义外键约束　constraint ordersid_FK foreign key(ordersid) references orders(id)</span><br><span class="line">*删除主键：alter table tablename drop primary key ;</span><br></pre></td></tr></table></figure><p>准备两个表:(下面的建表语句在执行的时候若不能正常执行, 可以尝试把tab去掉)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">create table class (</span><br><span class="line">id INT(11) primary key auto_increment,</span><br><span class="line">name varchar(20) unique</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line">create table student (</span><br><span class="line">id INT(11) primary key auto_increment, </span><br><span class="line">name varchar(20) unique,</span><br><span class="line">passwd varchar(15) not null,</span><br><span class="line">classid INT(11),</span><br><span class="line">constraint stu_classid_FK foreign key(classid) references class(id)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p>向class表中插入两条数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">insert into class(name) values(&apos;音乐&apos;);</span><br><span class="line">insert into class(name) values(&apos;体育&apos;);</span><br><span class="line">insert into class(id, name) values(5, &apos;美术&apos;);</span><br><span class="line">insert into class(name) values(&apos;文化&apos;);</span><br><span class="line"></span><br><span class="line">注意: 要插入的是部分列, 一定要在class表名后面写上列名, 表示要插入哪些列</span><br><span class="line">      由于class表的id是主键, 可以不用显示的插入主键的值, mysql会自动插入,而且会自动增长,确保不会重复.</span><br></pre></td></tr></table></figure><p>向student表中插入数据:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"> 正常插入一条记录:</span><br><span class="line">insert into student(name, passwd, classid) values(&apos;xiaohong&apos;, &apos;xxxxxx&apos;, 1);</span><br><span class="line"></span><br><span class="line">1 测试主键的非空性</span><br><span class="line">insert into student(id, name, passwd, classid) values(null, &apos;xiaowen&apos;, &apos;xxxxxx&apos;, 1);</span><br><span class="line">注意: 若给主键插入一个null, mysql会自动插入一个有效的值, 所以mysql的主键肯定不会为空</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">2 测试主键的唯一性约束</span><br><span class="line">insert into student(id, name, passwd, classid) values(1, &apos;xiaoliu&apos;, &apos;xxxxxx&apos;, 1);</span><br><span class="line">-----&gt;ERROR 1062 (23000): Duplicate entry &apos;1&apos; for key &apos;PRIMARY&apos;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">3 测试name列的唯一性</span><br><span class="line">insert into student(name, passwd, classid) values(&apos;xiaohong&apos;, &apos;xxxxxx&apos;, 2);</span><br><span class="line">-----&gt; ERROR 1062 (23000): Duplicate entry &apos;xiaohong&apos; for key &apos;name&apos;</span><br><span class="line"></span><br><span class="line">insert into student(name, passwd, classid) values(null, &apos;xxxxxx&apos;, 2);</span><br><span class="line">注意: name为unique约束, 只是不能重复, 但是可以为空</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">4 测试passwd的非空约束</span><br><span class="line">insert into student(name, passwd, classid) values(&apos;xiaohua&apos;, null, 2);</span><br><span class="line">-----&gt; ERROR 1048 (23000): Column &apos;passwd&apos; cannot be null</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">5 测试classid的外键约束</span><br><span class="line">insert into student(name, passwd, classid) values(&apos;meizi&apos;, &apos;mmmm&apos;, 10);</span><br><span class="line">-----&gt;OREIGN KEY (`classid`) REFERENCES `class` (`id`))</span><br><span class="line">在class表中没有id为10的列的值.</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
  <entry>
    <title>mysql自连接</title>
    <link href="https://xiaowuyoucy.github.io/2022/05/15/mysql%E8%87%AA%E8%BF%9E%E6%8E%A5/"/>
    <id>https://xiaowuyoucy.github.io/2022/05/15/mysql自连接/</id>
    <published>2022-05-14T19:23:37.000Z</published>
    <updated>2022-05-14T19:25:08.859Z</updated>
    
    <content type="html"><![CDATA[<p>自连接:</p><p>查询员工、老板信息，显示: xxx的老板是yyy</p><p>分析: 可以将emp表当成两个表来用, 一个是员工表 e, 一个是老板表 b</p><p>1 mysql不支持用||连接两个字符串</p><p>2 使用concat函数</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select concat(e.ename, &apos;的老板是&apos;, b.ename) from emp e, emp b where e.mgr=b.empno;</span><br><span class="line">select concat(e.ename, &apos;的老板是&apos;, b.ename) from emp e inner join emp b on e.mgr=b.empno;</span><br></pre></td></tr></table></figure><p>3 若要显示KING的信息, 需要使用外连接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a mysql不支持nvl函数</span><br><span class="line"></span><br><span class="line">b 使用ifnull函数</span><br><span class="line">左外连接:</span><br><span class="line">select concat(e.ename, &apos;的老板是&apos;, b.ename) from emp e left outer join emp b on e.mgr=b.empno;</span><br><span class="line">select concat(e.ename, &apos;的老板是&apos;, ifnull(b.ename, &apos;HIMSELF&apos;)) from emp e left outer join emp b on e.mgr=b.empno;</span><br><span class="line">右外连接:</span><br><span class="line">select concat(e.ename, &apos;的老板是&apos;, ifnull(b.ename, &apos;HIMSELF&apos;)) from emp b right outer join emp e on e.mgr=b.empno;</span><br></pre></td></tr></table></figure><p>​</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;自连接:&lt;/p&gt;
&lt;p&gt;查询员工、老板信息，显示: xxx的老板是yyy&lt;/p&gt;
&lt;p&gt;分析: 可以将emp表当成两个表来用, 一个是员工表 e, 一个是老板表 b&lt;/p&gt;
&lt;p&gt;1 mysql不支持用||连接两个字符串&lt;/p&gt;
&lt;p&gt;2 使用concat函数&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="数据库" scheme="https://xiaowuyoucy.github.io/categories/%E6%95%B0%E6%8D%AE%E5%BA%93/"/>
    
    
  </entry>
  
</feed>
