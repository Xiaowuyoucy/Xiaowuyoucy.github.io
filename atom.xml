<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2021-04-26T13:27:28.461Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>类中默认函数的隐藏条件</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0022-%E7%B1%BB%E4%B8%AD%E9%BB%98%E8%AE%A4%E5%87%BD%E6%95%B0%E7%9A%84%E9%9A%90%E8%97%8F%E6%9D%A1%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0022-类中默认函数的隐藏条件/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T13:27:28.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类中默认函数的隐藏条件"><a class="markdownIt-Anchor" href="#类中默认函数的隐藏条件"></a> 类中默认函数的隐藏条件</h1><h3 id="编译器不提供默认无参构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认无参构造函数的条件"></a> 编译器不提供默认无参构造函数的条件:</h3><p>1.显示的提供一个有参或无参构造函数</p><p>2.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供默认拷贝构造函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供默认拷贝构造函数的条件"></a> 编译器不提供默认拷贝构造函数的条件</h3><p>1.显示的提供一个拷贝构造函数</p><h3 id="编译器不提供析构函数的条件"><a class="markdownIt-Anchor" href="#编译器不提供析构函数的条件"></a> 编译器不提供析构函数的条件</h3><p>1.显示的提供了一个析构函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">默认提供的函数</span></span><br><span class="line"><span class="comment">B() &#123;</span></span><br><span class="line"><span class="comment">//默认的无惨构造函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">B(const B&amp; b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">m_b = b.m_b; //默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">p = b.p;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">~B()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">//默认的析构函数</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果显示的写了一个普通构造函数， 会隐藏默认的无惨构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个拷贝构造函数 ，会隐藏默认的无参构造函数和默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">//如果显示的写了一个析构函数， 会隐藏默认的析构函数</span></span><br><span class="line">B(<span class="keyword">const</span> B&amp; b)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_b;</span><br><span class="line"><span class="keyword">char</span> *p;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的构造函数</span></span><br><span class="line"><span class="comment">如果普通构造函数，提供了一个显示的构造， 那么这个无参的默认构造就会被隐藏。 不会把拷贝构造函数隐藏掉</span></span><br><span class="line"><span class="comment">A()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">A(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">m_a = a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">默认的拷贝构造函数</span></span><br><span class="line"><span class="comment">A(const A &amp; a)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment">   m_a = a;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="comment">//显示的提供一个拷贝构造的函数的时候，默认的拷贝构造函数就会被隐藏</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp;a) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"显示提供的拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">m_a = a.m_a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> 默认的析构函数</span></span><br><span class="line"><span class="comment"> ~A()</span></span><br><span class="line"><span class="comment"> &#123;</span></span><br><span class="line"><span class="comment"> &#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//只有提供一个显示的析构函数，才会将默认的析构覆盖点</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"A的析构函数 调用 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">A <span class="title">aObj</span><span class="params">(<span class="number">10</span>)</span></span>; <span class="comment">//当你不提供任何构造函数的时候， 系统会有一个默认的构造函数</span></span><br><span class="line">A aObj2 = aObj;  <span class="comment">//调用了aObj2的拷贝构造函数</span></span><br><span class="line"><span class="comment">//A aObj2(aObj);</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类中默认函数的隐藏条件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类中默认函数的隐藏条件&quot;&gt;&lt;/a&gt; 类中默认函数的隐藏条件&lt;/h1&gt;
&lt;h3 id=&quot;编译器不提供默认无参构造函数的条件&quot;&gt;&lt;a class=&quot;markdownIt-
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>深拷贝和浅拷贝</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0023-%E6%B7%B1%E6%8B%B7%E8%B4%9D%E5%92%8C%E6%B5%85%E6%8B%B7%E8%B4%9D/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0023-深拷贝和浅拷贝/</id>
    <published>2021-04-26T13:22:10.000Z</published>
    <updated>2021-04-26T16:12:56.587Z</updated>
    
    <content type="html"><![CDATA[<h1 id="深拷贝和浅拷贝"><a class="markdownIt-Anchor" href="#深拷贝和浅拷贝"></a> 深拷贝和浅拷贝</h1><p>字符串如果进行浅拷贝会出现以下问题:</p><p>假设有两个char类型指针a,b指向同一个内存空间</p><p>当a被释放时,b还未修改,再次使用b时就会出现段错误(Linux)或内存中断(windows)</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Teacher</span> &#123;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">Teacher() &#123;</span><br><span class="line">m_id = <span class="number">0</span>;</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//有参构造函数,开辟一个空间给m_name</span></span><br><span class="line">Teacher(<span class="keyword">int</span> id,<span class="keyword">const</span> <span class="keyword">char</span> * name)</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(name);</span><br><span class="line">m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(m_name, name);</span><br><span class="line">m_id = id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//拷贝构造函数,开辟一个空间</span></span><br><span class="line">Teacher(<span class="keyword">const</span> Teacher &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"Teacher(const Teacher &amp; another).."</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">int</span> len = <span class="built_in">strlen</span>(another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_name = (<span class="keyword">char</span> *)<span class="built_in">malloc</span>(len + <span class="number">1</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(<span class="keyword">this</span>-&gt;m_name, another.m_name);</span><br><span class="line"><span class="keyword">this</span>-&gt;m_id = another.m_id;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印id 和name和name的地址</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_id &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">int</span> *)m_name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//释放从堆区开辟的内存</span></span><br><span class="line">~Teacher()</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (m_name != <span class="literal">NULL</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; m_name &lt;&lt; <span class="string">"  "</span>;</span><br><span class="line"><span class="built_in">free</span>(m_name);</span><br><span class="line">m_name = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"free"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"================================================"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_id;</span><br><span class="line"><span class="keyword">char</span> * m_name;</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">Teacher <span class="title">tc1</span><span class="params">(<span class="number">123</span>, <span class="string">"xiaoh"</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">Teacher <span class="title">tc2</span><span class="params">(tc1)</span></span>;</span><br><span class="line"></span><br><span class="line">tc1.print();</span><br><span class="line">tc2.print();</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;深拷贝和浅拷贝&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#深拷贝和浅拷贝&quot;&gt;&lt;/a&gt; 深拷贝和浅拷贝&lt;/h1&gt;
&lt;p&gt;字符串如果进行浅拷贝会出现以下问题:&lt;/p&gt;
&lt;p&gt;假设有两个char类型指针a,b指向同一个内存空间&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>拷贝构造函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0021-%E6%8B%B7%E8%B4%9D%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0021-拷贝构造函数/</id>
    <published>2021-04-26T12:41:44.000Z</published>
    <updated>2021-04-26T13:06:54.805Z</updated>
    
    <content type="html"><![CDATA[<h1 id="拷贝构造函数"><a class="markdownIt-Anchor" href="#拷贝构造函数"></a> 拷贝构造函数</h1><p>编译器会默认提供一个浅拷贝的构造函数</p><p>一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(<span class="keyword">const</span> 类名 &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">拷⻉贝构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(<span class="keyword">const</span> A &amp; another)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line"><span class="comment">//拷贝构造函数</span></span><br><span class="line">test(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"><span class="comment">//赋值操作符函数</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::<span class="keyword">operator</span>=(<span class="keyword">const</span> test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">mA = another.mA;</span><br><span class="line">mB = another.mB;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"我是赋值操作符函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t3</span><span class="params">(t2)</span></span>;<span class="comment">//调用拷贝构造函数</span></span><br><span class="line">test t4 = t3;<span class="comment">//这里调用的是拷贝构造函数,因为是初始化</span></span><br><span class="line">t4 = t2;  <span class="comment">//这里是调用赋值操作符函数,因为不是初始化</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;拷贝构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#拷贝构造函数&quot;&gt;&lt;/a&gt; 拷贝构造函数&lt;/h1&gt;
&lt;p&gt;编译器会默认提供一个浅拷贝的构造函数&lt;/p&gt;
&lt;p&gt;一旦手动提供了一个拷贝构造函数,编译器将不再提供默认的拷贝构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>默认的无参构造和析构函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0020-%E9%BB%98%E8%AE%A4%E7%9A%84%E6%97%A0%E5%8F%82%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0020-默认的无参构造和析构函数/</id>
    <published>2021-04-26T12:32:36.000Z</published>
    <updated>2021-04-26T12:37:41.411Z</updated>
    
    <content type="html"><![CDATA[<h1 id="默认的无参构造和析构函数"><a class="markdownIt-Anchor" href="#默认的无参构造和析构函数"></a> 默认的无参构造和析构函数</h1><p>不写构造函数时,编译器会默认提供一个无参构造函数</p><p>如果显示的提供了一个构造函数,编译器将不再提供无参构造函数</p><p>如果显示提供了一个析构函数,编译器将不再提供构造函数</p><p>如果手动添加了一个有参构造函数,就需要根据情况添加一个无参构造函数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="comment">//默认构造函数。 就是一个无参数的构造函数，</span></span><br><span class="line"><span class="comment">//如果不显示提供构造函数，系统就是调用默认的构造函数</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">Test() &#123;&#125; 默认的构造函数，已经手动提供，默认就被隐藏</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//如果我们提供了一个显示的构造函数，那么默认的构造函数就被隐藏掉了。</span></span><br><span class="line"><span class="comment">//构造函数一旦手动提供， 默认将不复存在。</span></span><br><span class="line">Test(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">m_x = x;</span><br><span class="line">m_y = y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了有参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//无参数的构造函数</span></span><br><span class="line">Test()&#123;</span><br><span class="line">m_x = <span class="number">0</span>;</span><br><span class="line">m_y = <span class="number">0</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了无参数的构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//拷贝构造函数 ，想通过另一个Test对象 another 将本对象进行拷贝</span></span><br><span class="line">Test(<span class="keyword">const</span> Test &amp; another)</span><br><span class="line">&#123;</span><br><span class="line">m_x = another.m_x;</span><br><span class="line">m_y = another.m_y;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"调用了拷贝构造函数"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//等号操作符</span></span><br><span class="line"><span class="keyword">void</span> <span class="keyword">operator</span> = (<span class="keyword">const</span> Test &amp;t)</span><br><span class="line">&#123;</span><br><span class="line">m_x = t.m_x;</span><br><span class="line">m_y = t.m_y;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printT</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"x : "</span> &lt;&lt; m_x &lt;&lt; <span class="string">", y : "</span> &lt;&lt; m_y &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个析构函数</span></span><br><span class="line">~Test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~Test（）析构函数被执行了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"("</span> &lt;&lt; m_x &lt;&lt; <span class="string">", "</span> &lt;&lt; m_y &lt;&lt; <span class="string">")"</span> &lt;&lt; <span class="string">"被析构了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> m_x;</span><br><span class="line"><span class="keyword">int</span> m_y;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Test t1; <span class="comment">//调用无参的构造函数</span></span><br><span class="line"><span class="function">Test <span class="title">t2</span><span class="params">(<span class="number">10</span>, <span class="number">20</span>)</span></span>;</span><br><span class="line"><span class="comment">//Test t3(10, 20, 30);</span></span><br><span class="line">t2.printT();</span><br><span class="line"><span class="function">Test <span class="title">t3</span><span class="params">(t2)</span></span>; <span class="comment">//调用t3的拷贝构造函数  //调用拷贝构造函数的方式</span></span><br><span class="line">t3.printT();</span><br><span class="line"><span class="comment">//Test t4 = t2; // 依然是调用t4的拷贝构造函数，</span></span><br><span class="line"></span><br><span class="line"><span class="function">Test <span class="title">t4</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>; <span class="comment">//调用t4 的两个参数的构造函数</span></span><br><span class="line"></span><br><span class="line">Test t5; <span class="comment">//先调用无惨构造。</span></span><br><span class="line">t5 = t2; <span class="comment">//不会调用拷贝构造函数 //调用=号重载操作符  赋值操作符</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//析构函数的调用顺序， 跟对象的构造顺序相反， 谁先构造，谁最后一个被析构。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;默认的无参构造和析构函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#默认的无参构造和析构函数&quot;&gt;&lt;/a&gt; 默认的无参构造和析构函数&lt;/h1&gt;
&lt;p&gt;不写构造函数时,编译器会默认提供一个无参构造函数&lt;/p&gt;
&lt;p&gt;如果显示的提供了一个
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>构造和析构</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0019-%E6%9E%84%E9%80%A0%E5%92%8C%E6%9E%90%E6%9E%84/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0019-构造和析构/</id>
    <published>2021-04-26T12:09:33.000Z</published>
    <updated>2021-04-26T12:26:06.742Z</updated>
    
    <content type="html"><![CDATA[<h1 id="构造和析构"><a class="markdownIt-Anchor" href="#构造和析构"></a> 构造和析构</h1><h3 id="构造函数"><a class="markdownIt-Anchor" href="#构造函数"></a> 构造函数</h3><h4 id="定义"><a class="markdownIt-Anchor" href="#定义"></a> 定义</h4><p>C++中的类可以定义与类名相同的特殊成员函数，这种与类名相同的成员函数叫做构造函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">类名(形式参数)</span><br><span class="line">&#123;</span><br><span class="line">构造体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">A(形参)</span><br><span class="line">&#123;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="调用"><a class="markdownIt-Anchor" href="#调用"></a> 调用</h4><p><code>自动调用</code>：一般情况下C++编译器会自动调用构造函数.<br><code>手动调用</code>：在一些情况下则需要手工调用构造函数.</p><h4 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则:</h4><p>1 在对象创建时自动调用,完成初始化相关工作。<br>2 无返回值,与类名同,默认无参,可以重载,可默认参数。<br>3 一经实现,默认不复存在。</p><h3 id="析构函数"><a class="markdownIt-Anchor" href="#析构函数"></a> 析构函数</h3><h4 id="定义-2"><a class="markdownIt-Anchor" href="#定义-2"></a> 定义</h4><p>C++中的类可以定义一个特殊的成员函数清理对象，这个特殊的成员函数叫做析构函数.</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> 类名</span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~类名()</span><br><span class="line">&#123;</span><br><span class="line">析构体</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//--------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">~A()</span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="规则-2"><a class="markdownIt-Anchor" href="#规则-2"></a> 规则:</h4><p>1 对象销毁时,自动调用。完成销毁的善后工作。<br>2 无返值 ,与类名同。无参。不可以重载与默认参数</p><p><code>析构函数的作用,并不是删除对象,而在对象销毁前完成的一些清理工作。</code></p><h4 id="testh"><a class="markdownIt-Anchor" href="#testh"></a> test.h</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">test</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">test();</span><br><span class="line">test(<span class="keyword">int</span> a,<span class="keyword">int</span> b);</span><br><span class="line">test(<span class="keyword">int</span> a);</span><br><span class="line">~test();</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> mA;</span><br><span class="line"><span class="keyword">int</span> mB;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h4 id="testcpp"><a class="markdownIt-Anchor" href="#testcpp"></a> test.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line">test::test()</span><br><span class="line">&#123;</span><br><span class="line">mA = <span class="number">0</span>;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test::test(<span class="keyword">int</span> a)</span><br><span class="line">&#123;</span><br><span class="line">mA = a;</span><br><span class="line">mB = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test::~test()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"~test"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> test::print()</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mA &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; mB &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"test.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="function">test <span class="title">t1</span><span class="params">(<span class="number">100</span>, <span class="number">200</span>)</span></span>;</span><br><span class="line"><span class="function">test <span class="title">t2</span><span class="params">(<span class="number">111</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">t1.print();</span><br><span class="line">t2.print();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;构造和析构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造和析构&quot;&gt;&lt;/a&gt; 构造和析构&lt;/h1&gt;
&lt;h3 id=&quot;构造函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#构造函数&quot;&gt;&lt;/a&gt; 构造函数&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类分成多文件</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/26/cpp0018-%E7%B1%BB%E5%88%86%E6%88%90%E5%A4%9A%E6%96%87%E4%BB%B6/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/26/cpp0018-类分成多文件/</id>
    <published>2021-04-26T10:10:39.000Z</published>
    <updated>2021-04-26T10:32:21.713Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类分成多文件"><a class="markdownIt-Anchor" href="#类分成多文件"></a> 类分成多文件</h1><h3 id="circleh"><a class="markdownIt-Anchor" href="#circleh"></a> circle.h</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">pragma</span> once</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Circle</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">setR</span><span class="params">(<span class="keyword">double</span> r)</span></span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getR</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getArea</span><span class="params">()</span></span>;</span><br><span class="line"><span class="function"><span class="keyword">double</span> <span class="title">getGirth</span><span class="params">()</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">double</span> m_R;</span><br><span class="line"><span class="keyword">double</span> m_area;</span><br><span class="line"><span class="keyword">double</span> m_girth;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="circlecpp"><a class="markdownIt-Anchor" href="#circlecpp"></a> circle.cpp</h3><p>在类的外部创建类方法需要使用作用域名;</p><p><code>函数类型 类名::类方法(函数形参)</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">"Circle.h"</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getArea() &#123;</span><br><span class="line">m_area = <span class="number">3.14</span> * m_R * m_R;</span><br><span class="line"><span class="keyword">return</span> m_area;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getGirth() &#123;</span><br><span class="line">m_girth = <span class="number">2</span> * <span class="number">3.14</span> * m_R;</span><br><span class="line"><span class="keyword">return</span> m_girth;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">double</span> Circle::getR() &#123;</span><br><span class="line"><span class="keyword">return</span> m_R;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span> Circle::setR(<span class="keyword">double</span> r)</span><br><span class="line">&#123;</span><br><span class="line">m_R = r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="maincpp"><a class="markdownIt-Anchor" href="#maincpp"></a> main.cpp</h3><p>使用Circle类需要引用类头文件<code>#include&quot;Circle.h&quot;</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">"Circle.h"</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Circle c;</span><br><span class="line">c.setR(<span class="number">10.0</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getArea() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getGirth() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; c.getR() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类分成多文件&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类分成多文件&quot;&gt;&lt;/a&gt; 类分成多文件&lt;/h1&gt;
&lt;h3 id=&quot;circleh&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#circleh&quot;&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类的封装</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/25/cpp0017-%E7%B1%BB%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/25/cpp0017-类的封装/</id>
    <published>2021-04-24T20:24:57.000Z</published>
    <updated>2021-04-24T20:37:46.221Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的封装"><a class="markdownIt-Anchor" href="#类的封装"></a> 类的封装</h1><p>面向对象有三大特点， 封装，继承，多态<br>C++将struct 做了功能的增强，struct实际上就是一个class<br>只不过<code>struct</code>的类的内部，默认的访问控制权限是<code>public</code><br>class 的类的内部，默认的访问控制权限是<code>private</code></p><h2 id="输入年月日并判断是否是闰年"><a class="markdownIt-Anchor" href="#输入年月日并判断是否是闰年"></a> 输入年月日,并判断是否是闰年</h2><h3 id="封装前"><a class="markdownIt-Anchor" href="#封装前"></a> 封装前</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Date</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">//初始化这个结构体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(struct Date &amp; date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"year, month, day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.year;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.month;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; date.day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//打印此结构体</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">(struct Date &amp;date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"日期是"</span> &lt;&lt; date.year &lt;&lt; <span class="string">"年"</span> &lt;&lt; date.month &lt;&lt; <span class="string">"月"</span> &lt;&lt; date.day &lt;&lt; <span class="string">"日"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//判断是否为闰年</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">(struct Date &amp;date)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (((date.year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (date.year % <span class="number">100</span> != <span class="number">0</span>)) || (date.year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test1</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="class"><span class="keyword">struct</span>  <span class="title">Date</span> <span class="title">date</span>;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//传统的C语言开发，面向过程的， 是一个一个函数来操作， C语种最小单元是一个函数</span></span><br><span class="line">init(date);</span><br><span class="line"></span><br><span class="line">printDate(date);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (isLeapYear(date) == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"不是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">test1();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="封装后"><a class="markdownIt-Anchor" href="#封装后"></a> 封装后</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyDate</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="comment">//类的&#123;&#125;中的所有区域称为 类的 内部， 除了&#123;&#125;区域以外都是 类的外部</span></span><br><span class="line"><span class="keyword">public</span>:<span class="comment">//访问控制权限  //在public标识符下面定义的成员变量和成员函数 均可以在类的外部和类的内部 访问</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getYear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> year;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"year, month, day"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; year;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; month;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; day;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//成员函数</span></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">isLeapYear</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">if</span> (((year % <span class="number">4</span> == <span class="number">0</span>) &amp;&amp; (year % <span class="number">100</span> != <span class="number">0</span>)) || (year % <span class="number">400</span> == <span class="number">0</span>)) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printDate</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"日期是"</span> &lt;&lt; year &lt;&lt; <span class="string">"年"</span> &lt;&lt; month &lt;&lt; <span class="string">"月"</span> &lt;&lt; day &lt;&lt; <span class="string">"日"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span>:<span class="comment">//如果是单个类， 跟private是一样的。 在类的内部能够访问，在类的外部不能够访问</span></span><br><span class="line"><span class="keyword">private</span>:<span class="comment">//在private 访问控制符 下定义的成员变量和成员函数 只能在类的内部访问</span></span><br><span class="line"><span class="keyword">int</span> month;</span><br><span class="line"><span class="keyword">int</span> day;</span><br><span class="line"><span class="keyword">int</span> year;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">MyDate date; <span class="comment">//通过MyDate 类 实例化一个对象</span></span><br><span class="line"></span><br><span class="line"> <span class="comment">//c++中 是面向对象进行开发，所有方法都封装在类中， 通过一个一个的对象进行编程。</span></span><br><span class="line">date.init();</span><br><span class="line"><span class="keyword">if</span> (date.isLeapYear() == <span class="literal">true</span>) &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"不是闰年"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//cout &lt;&lt;"年"&lt;&lt; date.year &lt;&lt; endl;</span></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"年"</span> &lt;&lt; date.getYear() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">date.year = 2005;//在类的外部修改了成员变量</span></span><br><span class="line"><span class="comment">date.month;</span></span><br><span class="line"><span class="comment">date.day;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//test1();</span></span><br><span class="line">test2();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的封装&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的封装&quot;&gt;&lt;/a&gt; 类的封装&lt;/h1&gt;
&lt;p&gt;面向对象有三大特点， 封装，继承，多态&lt;br&gt;
C++将struct 做了功能的增强，struct实际上就是一个class&lt;br&gt;

      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>类的基本概念</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/25/cpp0016-%E7%B1%BB%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/25/cpp0016-类的基本概念/</id>
    <published>2021-04-24T20:01:19.000Z</published>
    <updated>2021-04-24T20:27:25.793Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类的基本概念"><a class="markdownIt-Anchor" href="#类的基本概念"></a> 类的基本概念</h1><h3 id="类的定义"><a class="markdownIt-Anchor" href="#类的定义"></a> 类的定义</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">className</span>&#123;</span></span><br><span class="line">类成员变量或方法</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>类方法可以直接调用类成员变量或方法</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Animal</span> &#123;</span></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line"><span class="keyword">char</span> color[<span class="number">64</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"跑起来了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">write</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="string">"写字了"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; color &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span>:</span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Animal dog, cat;</span><br><span class="line"><span class="built_in">strcpy</span>(dog.color, <span class="string">"yellow"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(dog.name, <span class="string">"xiaoming"</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">strcpy</span>(cat.name, <span class="string">"xiaohua"</span>);</span><br><span class="line"><span class="built_in">strcpy</span>(cat.color, <span class="string">"black"</span>);</span><br><span class="line"></span><br><span class="line">dog.print();</span><br><span class="line">cat.print();</span><br><span class="line"></span><br><span class="line">dog.run();</span><br><span class="line">dog.write();</span><br><span class="line"></span><br><span class="line">cat.run();</span><br><span class="line">cat.write();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>public</code> 公有的,类的外部可以直接调用</p><p><code>private</code>私有的,类的外部不可以直接调用,可以通过方法get或set</p><p><code>protected</code>保护的,在类的外部调用不到,子类可以调用</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类的基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的基本概念&quot;&gt;&lt;/a&gt; 类的基本概念&lt;/h1&gt;
&lt;h3 id=&quot;类的定义&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类的定义&quot;&gt;&lt;/a&gt; 类的
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数重载和函数指针</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/23/cpp0015-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD%E5%92%8C%E5%87%BD%E6%95%B0%E6%8C%87%E9%92%88/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/23/cpp0015-函数重载和函数指针/</id>
    <published>2021-04-22T16:12:36.000Z</published>
    <updated>2021-04-22T17:49:33.840Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数重载和函数指针"><a class="markdownIt-Anchor" href="#函数重载和函数指针"></a> 函数重载和函数指针</h1><p>函数重载与函数指针<br>当使⽤用重载函数名对函数指针进⾏行赋值时<br>根据重载规则挑选与函数指针参数列表⼀一致的候选者<br>严格匹配候选者的函数类型与函数指针的函数类型</p><p>函数指针，调用的时候是不能够发生函数重载的</p><h3 id="函数指针基本语法"><a class="markdownIt-Anchor" href="#函数指针基本语法"></a> 函数指针基本语法</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b,<span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//第一种函数指针定义</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span> <span class="params">(My_func)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//第二种函数指针定义</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">int</span><span class="params">(*My_func2)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>;</span><br><span class="line"><span class="comment">//第三种函数指针定义</span></span><br><span class="line"><span class="keyword">int</span>(*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = func;</span><br></pre></td></tr></table></figure><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span> c, <span class="keyword">int</span> d)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; b &lt;&lt; c &lt;&lt;d &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 定义一个函数类型</span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(myfunctype)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义了一个函数类型， 返回值void 参数列表是 int，int   ,, void()(int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 定义一个函数指针类型 </span></span><br><span class="line"><span class="function"><span class="keyword">typedef</span> <span class="title">void</span><span class="params">(*myfunctype_pointer)</span><span class="params">(<span class="keyword">int</span>, <span class="keyword">int</span>)</span></span>; <span class="comment">//定义了一个函数指针类型， 返回值void 参数列表是 int，int   ,, void(*)(int,int)</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//1  定义一个函数指针</span></span><br><span class="line">myfunctype * fp1 = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp1 = func;</span><br><span class="line"></span><br><span class="line">fp1(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 2 定义一个函数指针</span></span><br><span class="line">myfunctype_pointer fp2 = <span class="literal">NULL</span>;</span><br><span class="line">fp2 = func;</span><br><span class="line">fp2(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//3 直接定义一个函数指针</span></span><br><span class="line"><span class="keyword">void</span>(*fp3)(<span class="keyword">int</span>, <span class="keyword">int</span>) = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">fp3 = func;</span><br><span class="line"></span><br><span class="line">fp3(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">" -----------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//此时的fp3 是 void(*)(int,int)</span></span><br><span class="line"><span class="comment">//fp3(10, 30, 30); //fp3 恒定指向一个 函数入口，void func(int, int) 的函数入口</span></span><br><span class="line"><span class="comment">//fp3(10, 30, 40, 50); //想要通过函数指针，发生函数重载 是不可能。</span></span><br><span class="line">fp3(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(*fp4)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = func; <span class="comment">//在堆函数指针赋值的时候，函数指针会根据自己的类型 找到一个重载函数</span></span><br><span class="line"></span><br><span class="line">fp4(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"><span class="comment">//fp4(10, 10, 10, 10);</span></span><br><span class="line"><span class="comment">//函数指针，调用的时候是不能够发生函数重载的。</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">void</span>(*fp5)(<span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>, <span class="keyword">int</span>) = func;<span class="comment">// void func(int ,int ,int ,int )</span></span><br><span class="line">fp5(<span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数重载和函数指针&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数重载和函数指针&quot;&gt;&lt;/a&gt; 函数重载和函数指针&lt;/h1&gt;
&lt;p&gt;函数重载与函数指针&lt;br&gt;
当使⽤用重载函数名对函数指针进⾏行赋值时&lt;br&gt;
根据重载规则挑选与函数指
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数重载</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/23/cpp0014-%E5%87%BD%E6%95%B0%E9%87%8D%E8%BD%BD/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/23/cpp0014-函数重载/</id>
    <published>2021-04-22T16:12:36.000Z</published>
    <updated>2021-04-22T16:38:09.512Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数重载"><a class="markdownIt-Anchor" href="#函数重载"></a> 函数重载</h1><p>函数重载(Function Overload)：用同一个函数名定义不同的函数，当函<br>数名和不同的参数搭配时函数的含义不同。</p><h3 id="重载规则"><a class="markdownIt-Anchor" href="#重载规则"></a> 重载规则</h3><p>1,函数名相同。<br>2,参数个数不同,参数的类型不同,参数顺序不同,均可构成重载。<br>3,返回值类型不影响重载。</p><h3 id="调用准则"><a class="markdownIt-Anchor" href="#调用准则"></a> 调用准则</h3><p>1,严格匹配,找到则调用。<br>2,通过隐式转换寻求一个匹配,找到则调用。</p><h3 id="编译器调用重载函数的准则"><a class="markdownIt-Anchor" href="#编译器调用重载函数的准则"></a> 编译器调用重载函数的准则:</h3><p>1.将所有同名函数作为候选者<br>2.尝试寻找可行的候选函数<br>3.精确匹配实参<br>4.通过默认参数能够匹配实参<br>5.通过默认类型转换匹配实参<br>6.匹配失败<br>7.最终寻找到的可行候选函数不唯一，则出现二义性，编译失败。<br>8.无法匹配所有候选者，函数未定义，编译失败。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//决定一个函数的  1 返回值， 2 参数列表</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a)</span><span class="comment">//void (*fp)(int)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func1 "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//函数重载 是对一种函数的 添加的 意义， 对一个函数名  添加多中不同的实现  （+）</span></span><br><span class="line"><span class="comment">//函数重载， 就是对参数列表的 变换不是 函数返回值的变化</span></span><br><span class="line"><span class="comment">//返回值必须一样，参数列表不同， 并且函数名 相同的函数 都是重载函数</span></span><br><span class="line"><span class="comment">//void func(int a, int b = 10)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func2"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">","</span> &lt;&lt;b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果函数 完全相同 也不是一个函数重载</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">void func(int a, int b)</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">char</span> *str)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"func3"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="string">", "</span> &lt;&lt; b &lt;&lt; <span class="string">", "</span> &lt;&lt; str &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//返回值类型不同，不能构成重载</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">char func()</span></span><br><span class="line"><span class="comment">&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">double</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print double "</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">float</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;<span class="string">"print float"</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt;a &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">if</span> 0</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">int</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print int"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">print</span><span class="params">(<span class="keyword">char</span> a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"print char"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">endif</span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//定义一个 指向void func(int a)的函数指针</span></span><br><span class="line"><span class="comment">//void(*fp)(int) = func;//fp 就是执行 void()(int) 这种函数类型的指针</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//fp(10);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">func(<span class="number">10</span>); <span class="comment">//编译器 会根据用户传递的参数类型和个数 进行重载函数的匹配</span></span><br><span class="line"><span class="comment">//如果说函数重载 加上了默认参数， 回导致调用函数的时候出现二义性，</span></span><br><span class="line"><span class="comment">//记住：  函数重载 最好不要有默认参数，</span></span><br><span class="line">func(<span class="number">10</span>, <span class="number">20</span>);</span><br><span class="line">func(<span class="number">10</span>, <span class="number">20</span>, <span class="string">"abc"</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//print(10); //void print(int a)</span></span><br><span class="line"><span class="comment">//print(1.1);//void print(double a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//print(1.1f); // 经过隐式转换 会调用void print(double a)</span></span><br><span class="line"><span class="comment">//print('a'); //经过隐式转化， 'a' -&gt;int   void print(int a)</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//print("asbdasd");</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//1 严格进行参数列表匹配</span></span><br><span class="line"><span class="comment">//2 如果隐式转换可以找到匹配 那么依然可以调用</span></span><br><span class="line"><span class="comment">//3 如果匹配不到， 直接报错。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="重载底层实现name-mangling"><a class="markdownIt-Anchor" href="#重载底层实现name-mangling"></a> 重载底层实现（name mangling）</h3><p>C++利用 name mangling(倾轧)技术,来改名函数名,区分参数不同的同<br>名函数。<br>实现原理:用 <code>v c i f l d</code>表示 <code>void char int float long double</code> 及其引<br>用。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a)</span></span>; <span class="comment">// func_c(char a)</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">func</span><span class="params">(<span class="keyword">char</span> a,<span class="keyword">int</span> b,<span class="keyword">double</span> c)</span></span>; <span class="comment">//func_cid(char a,int b,double c);</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数重载&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数重载&quot;&gt;&lt;/a&gt; 函数重载&lt;/h1&gt;
&lt;p&gt;函数重载(Function Overload)：用同一个函数名定义不同的函数，当函&lt;br&gt;
数名和不同的参数搭配时函数的含义不同。&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>函数的默认参数和占位参数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0013-%E5%87%BD%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%8F%82%E6%95%B0%E5%92%8C%E5%8D%A0%E4%BD%8D%E5%8F%82%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0013-函数的默认参数和占位参数/</id>
    <published>2021-04-22T15:48:32.000Z</published>
    <updated>2021-04-22T16:12:03.183Z</updated>
    
    <content type="html"><![CDATA[<h1 id="函数的默认参数和占位参数"><a class="markdownIt-Anchor" href="#函数的默认参数和占位参数"></a> 函数的默认参数和占位参数</h1><h3 id="默认参数规则"><a class="markdownIt-Anchor" href="#默认参数规则"></a> 默认参数规则</h3><p>只有参数列表后面部分的参数才可以提供默认参数值<br>一旦在一个函数调用中开始使用默认参数值，那么这个参数后的所有参<br>数都必须使用默认参数值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">qiuLiFangTiTiJi</span><span class="params">(<span class="keyword">int</span> l = <span class="number">10</span>, <span class="keyword">int</span> w = <span class="number">20</span>, <span class="keyword">int</span> h = <span class="number">10</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> l * w * h;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> l = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> w = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> h = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi() &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l, w) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; qiuLiFangTiTiJi(l, w, h) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="占位参数"><a class="markdownIt-Anchor" href="#占位参数"></a> 占位参数</h3><p>函数占位参数<br>占位参数只有参数类型声明，⽽而没有参数名声明<br>一般情况下，在函数体内部⽆无法使⽤用占位参数</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">int</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">max2</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b, <span class="keyword">float</span> = <span class="number">0</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max(<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max2(<span class="number">410</span>,<span class="number">330</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;函数的默认参数和占位参数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#函数的默认参数和占位参数&quot;&gt;&lt;/a&gt; 函数的默认参数和占位参数&lt;/h1&gt;
&lt;h3 id=&quot;默认参数规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; 
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>内联函数</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0012-%E5%86%85%E8%81%94%E5%87%BD%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0012-内联函数/</id>
    <published>2021-04-22T15:30:23.000Z</published>
    <updated>2021-04-22T15:47:32.185Z</updated>
    
    <content type="html"><![CDATA[<h1 id="内联函数"><a class="markdownIt-Anchor" href="#内联函数"></a> 内联函数</h1><p>c 语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了<br>函数调用 的开销。但是由于宏函数的处理发生在预处理阶段,缺失了语法检测<br>和有可能带来的语意差错</p><h3 id="特点"><a class="markdownIt-Anchor" href="#特点"></a> 特点：</h3><p>1）内联函数声明时inline关键字必须和函数定义结合在一起，否则编译器会直<br>接忽略内联请求。<br>2）C<ins>编译器直接将函数体插入在函数调用的地方 。<br>3）内联函数没有普通函数调用时的额外开销(压栈，跳转，返回)。<br>4）内联函数是一种特殊的函数，具有普通函数的特征（参数检查，返回类型<br>等）。<br>5） 内联函数由 编译器处理，直接将编译后的函数体插入调用的地方，<br>宏代码片段 由预处理器处理， 进行简单的文本替换，没有任何编译过程。<br>6）C</ins>中内联编译的限制：</p><p>  不能存在任何形式的循环语句<br>  不能存在过多的条件判断语句<br>  函数体不能过于庞大<br>  不能对函数进行取址操作<br>  函数内联声明必须在调用语句之前<br>7）编译器对于内联函数的限制并不是绝对的，内联函数相对于普通函数的优<br>势只是省去了函数调用时压栈，跳转和返回的开销。因此，当函数体的执行开<br>销远大于压栈，跳转和返回所用的开销时，那么内联将无意义。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//内联函数</span></span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="keyword">int</span> <span class="title">Max</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span> b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">return</span> a &gt; b ? a : b;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> max = Max(a, b);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; max &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;内联函数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#内联函数&quot;&gt;&lt;/a&gt; 内联函数&lt;/h1&gt;
&lt;p&gt;c 语言中有宏函数的概念。宏函数的特点是内嵌到调用代码中去,避免了&lt;br&gt;
函数调用 的开销。但是由于宏函数的处理发生在预处理阶段,
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>const引用</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0011-const%E5%BC%95%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0011-const引用/</id>
    <published>2021-04-22T15:26:26.000Z</published>
    <updated>2021-04-26T15:48:11.367Z</updated>
    
    <content type="html"><![CDATA[<h1 id="const引用"><a class="markdownIt-Anchor" href="#const引用"></a> const引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//const引用一般用在形参上，来限制  被引用的变量不能被修改，</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">printX</span><span class="params">(<span class="keyword">const</span> <span class="keyword">int</span> &amp; re )</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">// a必须初始化</span></span><br><span class="line"><span class="comment">//int &amp; b = a;</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;b = a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//如果是一个const 常量， 必须用const 引用来接收它</span></span><br><span class="line"><span class="keyword">int</span> x = <span class="number">3.14</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;re1 = x;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re1 "</span> &lt;&lt; re1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">x = <span class="number">20</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re1 "</span> &lt;&lt; re1 &lt;&lt; <span class="string">", x: "</span> &lt;&lt; x &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> &amp;re2 = <span class="number">10</span>;<span class="comment">// 用const 引用 引用一个字面量</span></span><br><span class="line"><span class="comment">// 当用一个const 引用  去引用一个字面量的时候， 字面量他是没有地址，</span></span><br><span class="line"><span class="comment">//引用是无法 对字面量取地址的， 临时创建一个 int temp， 10 ---&gt;temp</span></span><br><span class="line"><span class="comment">//const int &amp;re2 = temp;</span></span><br><span class="line"><span class="comment">//用re2 就是代表 temp，re2是const的引用，你无法去改变temp的值</span></span><br><span class="line"><span class="comment">//int &amp;re2 = 10;         //非常量引用 必须是左值。 左值就是可以放在=左边的表达式，左值是可以赋值，是有内存空间的</span></span><br><span class="line"><span class="comment">//如果想对一个字面量做引用的话，只能用 const 的引用</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re2 = "</span> &lt;&lt; re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(re2)"</span> &lt;&lt; <span class="keyword">sizeof</span>(re2) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;const引用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#const引用&quot;&gt;&lt;/a&gt; const引用&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>指针引用</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0010-%E6%8C%87%E9%92%88%E5%BC%95%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0010-指针引用/</id>
    <published>2021-04-22T15:15:14.000Z</published>
    <updated>2021-04-22T15:19:03.507Z</updated>
    
    <content type="html"><![CDATA[<h1 id="指针引用"><a class="markdownIt-Anchor" href="#指针引用"></a> 指针引用</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstdlib&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_malloc</span><span class="params">(<span class="keyword">int</span> num,<span class="keyword">int</span> **pp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">*pp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//指针引用做函数参数,优化二级指针</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_malloc2</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> * &amp;pp)</span><span class="comment">//pp 代表 *pp</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">pp = (<span class="keyword">int</span> *)<span class="built_in">malloc</span>(num);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *p = <span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">my_malloc(<span class="number">100</span>, &amp;p);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"------------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">my_malloc2(<span class="number">4</span>, p);</span><br><span class="line"></span><br><span class="line">*p = <span class="number">4</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; *p &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">free</span>(p);</span><br><span class="line">p = <span class="literal">NULL</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;指针引用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#指针引用&quot;&gt;&lt;/a&gt; 指针引用&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;spa
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>引用的本质</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0009-%E5%BC%95%E7%94%A8%E7%9A%84%E6%9C%AC%E8%B4%A8/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0009-引用的本质/</id>
    <published>2021-04-22T14:28:42.000Z</published>
    <updated>2021-04-22T14:32:32.798Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用的本质"><a class="markdownIt-Anchor" href="#引用的本质"></a> 引用的本质</h1><p>在研究引用的时候 ，可以将引用理解为 一个 常指针<br>在理解引用的时候， 可以将引用理解为 一个变量的别名</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  _CRT_SECURE_NO_WARNINGS </span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeA</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> *a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">TypeB</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">double</span> &amp;a;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Teacher</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">int</span> id;</span><br><span class="line"><span class="keyword">char</span> name[<span class="number">64</span>];</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyTeacher</span><span class="params">(Teacher &amp;t)</span> <span class="comment">//</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">t.id = <span class="number">100</span>; <span class="comment">// 如果说t是一个常指针， *t 就是指针指向内存空间  (*t).id = 100</span></span><br><span class="line"><span class="comment">//当你要试图修改或者获取已经初始化的引用的时候， 编译器会有一个隐藏的*的操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyA</span><span class="params">(<span class="keyword">int</span> *<span class="keyword">const</span> a)</span>   <span class="comment">//常指针 也是一个常量， 也是必须要初始化，  也不能被修改</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = <span class="number">100</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyB</span><span class="params">(<span class="keyword">int</span> &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">1000</span>; <span class="comment">//a 实际上是一个常量指针， 但是如果你给一个a赋值，编译器会有一个隐形的操作， *</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//在研究引用的时候 ，可以将引用理解为 一个 常指针</span></span><br><span class="line"><span class="comment">//在理解引用的时候， 可以将引用理解为 一个变量的别名</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> value = <span class="number">20</span>;</span><br><span class="line">Teacher t1 = &#123; <span class="number">1</span>, <span class="string">"zhangsan"</span> &#125;;</span><br><span class="line"></span><br><span class="line">motifyA(&amp;value);</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"value = "</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">motifyB(value);  <span class="comment">// int value --&gt; int &amp;a  , int&amp; a = value 给引用指定指向哪个变量的时候， 编译器提供又有了一个隐形的操作</span></span><br><span class="line"> <span class="comment">// a = &amp;value;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"value = "</span> &lt;&lt; value &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">motifyTeacher(t1);  <span class="comment">//如果说 motifyTeacher 的形参是一个常指针，Teacher *const t = &amp;t1;</span></span><br><span class="line"><span class="comment">//编译器发现 Teacher &amp;t 形参是一个引用， Teacher &amp;t = &amp;t1;</span></span><br><span class="line"><span class="comment">//当给引用初始化的时候， 会有一个&amp;  的隐形操作</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyAA</span><span class="params">(<span class="keyword">int</span> *a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">*a = <span class="number">100</span>;   <span class="comment">//间接的赋值</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">motifyBB</span><span class="params">(<span class="keyword">int</span> &amp;a)</span> <span class="comment">//int &amp;a = a;    a = &amp;a;</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">a = <span class="number">200</span>; <span class="comment">//*a = 200</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test2</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>; <span class="comment">//条件一</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">motifyAA(&amp;a); <span class="comment">//int*a = &amp;a; //建立了关联</span></span><br><span class="line"></span><br><span class="line">motifyBB(a);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">10</span>;</span><br><span class="line"><span class="keyword">int</span> b = <span class="number">20</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> c_a = <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c_a = 20;//常量在初始化之后，不能够再修改了</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp;re = a; <span class="comment">//引用必须初始化.  引用在初始化之后，也不能够被改变</span></span><br><span class="line">re = b; <span class="comment">// a = b 而不是 让re引用指向b</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re = "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">re = <span class="number">100</span>; <span class="comment">//是该的a 还是b？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"re = "</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//1 引用 可能是一个 常量？</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(TypeA): "</span> &lt;&lt; <span class="keyword">sizeof</span>(TypeA) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"sizeof(TypeB):"</span> &lt;&lt; <span class="keyword">sizeof</span>(TypeB) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//通过对引用求大小， 发现不管引用是什么类型 都是4个字节，都跟指针的大小一样。</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//2 引用可能是一个 指针？</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">test();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用的本质&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引用的本质&quot;&gt;&lt;/a&gt; 引用的本质&lt;/h1&gt;
&lt;p&gt;在研究引用的时候 ，可以将引用理解为 一个 常指针&lt;br&gt;
在理解引用的时候， 可以将引用理解为 一个变量的别名&lt;/p&gt;
&lt;f
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>引用的基本概念</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/22/cpp0008-%E5%BC%95%E7%94%A8%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/22/cpp0008-引用的基本概念/</id>
    <published>2021-04-22T13:35:32.000Z</published>
    <updated>2021-04-22T19:44:07.552Z</updated>
    
    <content type="html"><![CDATA[<h1 id="引用的基本概念"><a class="markdownIt-Anchor" href="#引用的基本概念"></a> 引用的基本概念</h1><p>给变量起别名</p><h3 id="规则"><a class="markdownIt-Anchor" href="#规则"></a> 规则</h3><p>1 引用没有定义,是一种关系型声明。声明它和原有某一变量(实体)的关<br>系。故 而类型与原类型保持一致,且不分配内存。与被引用的变量有相同的地<br>址。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> &amp; re = a;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;a = "</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"&amp;re = "</span> &lt;&lt; &amp;re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="/images/javawz/1619099566174.png" alt="1619099566174"></p><p>2 声明的时候必须初始化,一经声明,不可变更。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int &amp;re; //Error</span></span><br><span class="line"><span class="keyword">int</span> &amp;re = a;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3 可对引用,再次引用。多次引用的结果,是某一变量具有多个别名。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"><span class="comment">//int &amp;re; //Error</span></span><br><span class="line"><span class="keyword">int</span> &amp;re = a;</span><br><span class="line"><span class="keyword">int</span> &amp;re2 = re;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;re &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; &amp;re2 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>4 &amp;符号前有数据类型时,是引用。其它皆为取地址。</p><p>引用做函数参数或函数返回值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">student</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line"><span class="keyword">char</span> name[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line"><span class="keyword">int</span> sex;</span><br><span class="line">&#125;Student;</span><br><span class="line"><span class="comment">//交换两个变量的值</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">my_swap</span><span class="params">(<span class="keyword">int</span> &amp;a, <span class="keyword">int</span> &amp;b)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> tem = a;</span><br><span class="line">a = b;</span><br><span class="line">b = tem;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//打印结构体变量</span></span><br><span class="line"><span class="function">Student &amp; <span class="title">my_print</span><span class="params">(Student &amp;a)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.name &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.score &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a.sex &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">Student XiaoMing = &#123; <span class="string">"XiaoMing"</span>,<span class="number">100.0f</span>,<span class="number">1</span> &#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a = <span class="number">100</span>, b = <span class="number">90</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">my_swap(a, b);</span><br><span class="line">my_print(XiaoMing);</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"--------------------------------"</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;引用的基本概念&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#引用的基本概念&quot;&gt;&lt;/a&gt; 引用的基本概念&lt;/h1&gt;
&lt;p&gt;给变量起别名&lt;/p&gt;
&lt;h3 id=&quot;规则&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>枚举的增强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0007-%E6%9E%9A%E4%B8%BE%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0007-枚举的增强/</id>
    <published>2021-04-15T15:10:03.000Z</published>
    <updated>2021-04-15T15:11:30.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="枚举的增强"><a class="markdownIt-Anchor" href="#枚举的增强"></a> 枚举的增强</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">enum</span> Son &#123;</span><br><span class="line">xiaom,</span><br><span class="line">xiaoh,</span><br><span class="line">xiaol,</span><br><span class="line">xiaolan,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="comment">//可以省略enum关键字不写</span></span><br><span class="line">Son house = xiaom;</span><br><span class="line"><span class="comment">//c++中,枚举变量只能用枚举常量来赋值</span></span><br><span class="line"><span class="comment">//house = 1;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; house &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;枚举的增强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#枚举的增强&quot;&gt;&lt;/a&gt; 枚举的增强&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>const的增强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0006-const%E7%9A%84%E5%A2%9E%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0006-const的增强/</id>
    <published>2021-04-15T14:19:28.000Z</published>
    <updated>2021-04-26T15:48:41.832Z</updated>
    
    <content type="html"><![CDATA[<h1 id="const的增强"><a class="markdownIt-Anchor" href="#const的增强"></a> const的增强</h1><p><code>const int * a</code>表示指针指向的内存空间不可以修改</p><p><code>int * const a</code>表示不能修改a的指向</p><p><code>const int * const a</code> 表示a的内存和a所指向的内存都不可以修改</p><p><img src="../../themes/pure/source/images/javawz/1618497147515.png" alt="1618497147515"></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//在c语言中a是一个假常量,c++中a是一个真的常量,只不过在编译阶段完成,而不是预处理阶段</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> a = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个临时变量的地址赋值给p1,所以修改*p1时,a不会改变</span></span><br><span class="line"><span class="keyword">int</span> * p1 = (<span class="keyword">int</span> *)&amp;a;</span><br><span class="line"></span><br><span class="line"><span class="comment">//c++中const修饰过的整型变量可以声明数组,c语言不可以</span></span><br><span class="line"><span class="keyword">int</span> <span class="built_in">array</span>[a] = &#123; <span class="number">0</span> &#125;;</span><br><span class="line"></span><br><span class="line">*p1 = <span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"*p1 = "</span> &lt;&lt; *p1 &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="../../themes/pure/source/images/javawz/1618498667603.png" alt="1618498667603"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;const的增强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#const的增强&quot;&gt;&lt;/a&gt; const的增强&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;const int * a&lt;/code&gt;表示指针指向的内存空间不可以修改&lt;/p&gt;
&lt;p&gt;&lt;cod
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>三目运算符的加强</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0005-%E4%B8%89%E7%9B%AE%E8%BF%90%E7%AE%97%E7%AC%A6%E7%9A%84%E5%8A%A0%E5%BC%BA/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0005-三目运算符的加强/</id>
    <published>2021-04-14T17:53:25.000Z</published>
    <updated>2021-04-15T14:18:49.107Z</updated>
    
    <content type="html"><![CDATA[<h1 id="三目运算符的加强"><a class="markdownIt-Anchor" href="#三目运算符的加强"></a> 三目运算符的加强</h1><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a, b;</span><br><span class="line">a = <span class="number">10</span>;</span><br><span class="line">b = <span class="number">20</span>;</span><br><span class="line"><span class="comment">//三目运算符可以用作左值,返回的是a或b的引用</span></span><br><span class="line"><span class="comment">//c语言则不行,除非这样写(a &gt; b ? &amp;a : &amp;b) = 100;</span></span><br><span class="line">(a &gt; b ? a : b) = <span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"a = "</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="string">"b = "</span> &lt;&lt; b &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cin</span>.get();</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;三目运算符的加强&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#三目运算符的加强&quot;&gt;&lt;/a&gt; 三目运算符的加强&lt;/h1&gt;
&lt;figure class=&quot;highlight c++&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutte
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
  <entry>
    <title>C++语言对C的增强和bool</title>
    <link href="https://xiaowuyoucy.github.io/2021/04/15/cpp0004-C-%E8%AF%AD%E8%A8%80%E5%AF%B9C%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%92%8Cbool/"/>
    <id>https://xiaowuyoucy.github.io/2021/04/15/cpp0004-C-语言对C的增强和bool/</id>
    <published>2021-04-14T17:53:25.000Z</published>
    <updated>2021-04-14T18:31:06.706Z</updated>
    
    <content type="html"><![CDATA[<h1 id="c语言对c的增强和bool"><a class="markdownIt-Anchor" href="#c语言对c的增强和bool"></a> C++语言对C的增强和bool</h1><ul><li><p>变量定义</p><ul><li>c语言:早期版本中规定要定义在函数首部</li><li>c++:在函数内随便一个位置都可以</li></ul></li><li><p>c<ins>对定义全局变量的检测能力增强了,c语言在同一个地方可以定义多次重名的全局变量,c</ins>不可以.</p></li></ul><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> g_a;</span><br><span class="line"><span class="keyword">int</span> g_a = <span class="number">2</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">c语言会处理成:</span></span><br><span class="line"><span class="comment">int g_a;</span></span><br><span class="line"><span class="comment">g_a = 2;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><code>struct</code>的类型增强<ul><li>C++定义<code>struct</code>变量时可以不用加<code>struct</code>关键字</li></ul></li></ul><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">student</span> &#123;</span></span><br><span class="line"><span class="keyword">float</span> score;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"><span class="comment">//可以不用加struct关键字</span></span><br><span class="line">student xiaoming;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++不可以没有函数类型,c语言可以没有函数类型,默认是int</p><p>C++填写函数参数必须是对应个数,C语言可以不对应</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">//c语言可以没有函数类型,默认为int</span></span><br><span class="line">fun()&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">fun1(<span class="keyword">int</span> a) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//传入过多的参数,c语言也不会出错</span></span><br><span class="line">fun1(<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">61</span>,<span class="number">2</span>);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>C++引入了<code>bool</code>类型来表示<code>true</code>和<code>false</code></p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">char</span>* argv[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="keyword">bool</span> flag = <span class="literal">true</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (<span class="keyword">bool</span>)flag &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; <span class="keyword">sizeof</span>(flag) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag = <span class="number">100</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; (flag = <span class="number">0</span>) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;c语言对c的增强和bool&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#c语言对c的增强和bool&quot;&gt;&lt;/a&gt; C++语言对C的增强和bool&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;变量定义&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;c语言:早期版本中
      
    
    </summary>
    
      <category term="c++" scheme="https://xiaowuyoucy.github.io/categories/c/"/>
    
    
  </entry>
  
</feed>
