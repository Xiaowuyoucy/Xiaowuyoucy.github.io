<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2020-04-18T08:24:12.235Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>计算机硬件系统</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/18/002%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%A1%AC%E4%BB%B6%E7%B3%BB%E7%BB%9F/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/18/002计算机硬件系统/</id>
    <published>2020-04-18T07:54:42.000Z</published>
    <updated>2020-04-18T08:24:12.235Z</updated>
    
    <content type="html"><![CDATA[<h1 id="计算机硬件系统"><a class="markdownIt-Anchor" href="#计算机硬件系统"></a> 计算机硬件系统</h1><p>以前冯诺依曼计算机结构以运算器为中心</p><p>现在以存储器为中心</p><p>计算机硬件系统主要包括:</p><ol><li>中央处理器</li><li>内存储器</li><li>输入输出设备</li></ol><p>它们通过总线相连接到一起</p><h5 id="中央处理器"><a class="markdownIt-Anchor" href="#中央处理器"></a> 中央处理器:</h5><ol><li>运算器:对数据进行算术运算符,逻辑运算</li><li>控制器:对指令分析,控制,协调输入输出,对内存访问</li></ol><h5 id="存储器"><a class="markdownIt-Anchor" href="#存储器"></a> 存储器:</h5><ol><li>存储程序和数据</li><li>内存储器</li><li>外存储器</li></ol><h5 id="输入设备"><a class="markdownIt-Anchor" href="#输入设备"></a> 输入设备:</h5><p>将程序和数据输入到计算机中</p><h5 id="输出设备"><a class="markdownIt-Anchor" href="#输出设备"></a> 输出设备:</h5><p>将用户信息(程序或数据)输出到外部输出设备供用户查看.</p><h2 id="中央处理器-2"><a class="markdownIt-Anchor" href="#中央处理器-2"></a> 中央处理器</h2><p>也叫CPU,计算机的核心部件。</p><p>负责执行软件指令将数据加工成信息。</p><p>CPU分为两部分：</p><ol><li>控制器</li><li>运算器（算术逻辑单元）</li></ol><p>它们都包含有寄存器和高速存储区域，用<code>总线连接</code>起来。</p><h5 id="控制器"><a class="markdownIt-Anchor" href="#控制器"></a> 控制器：</h5><p>计算机的控制中心和指挥中心</p><p>对于每个指令，控制单元都要执行4个基本操作</p><ol><li>取指令</li><li>分析指令</li><li>执行指令</li><li>存储结果</li></ol><h5 id="运算器"><a class="markdownIt-Anchor" href="#运算器"></a> 运算器:</h5><p>可以执行算数运算,逻辑运算</p><p>算数运算: +,-,*,/</p><p>逻辑运算: ＞,≥,＜,≤,=,≠</p><h5 id="寄存器"><a class="markdownIt-Anchor" href="#寄存器"></a> 寄存器:</h5><p>提高计算机性能</p><p>高速存储区域</p><p>临时存储数据和指令或内存地址</p><p>寄存器的大小和数量可以决定计算机的性能和速度</p><p>寄存器的类型</p><ol><li>指令寄存器</li><li>地址寄存器</li><li>存储寄存器</li><li>累加寄存器等</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;计算机硬件系统&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机硬件系统&quot;&gt;&lt;/a&gt; 计算机硬件系统&lt;/h1&gt;
&lt;p&gt;以前冯诺依曼计算机结构以运算器为中心&lt;/p&gt;
&lt;p&gt;现在以存储器为中心&lt;/p&gt;
&lt;p&gt;计算机硬件系统主要包括:&lt;/
      
    
    </summary>
    
      <category term="计算机公共基础" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>计算机的发展历程</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/18/001%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%9A%84%E5%8F%91%E5%B1%95%E5%8E%86%E7%A8%8B/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/18/001计算机的发展历程/</id>
    <published>2020-04-18T06:53:12.000Z</published>
    <updated>2020-04-18T07:53:21.591Z</updated>
    
    <content type="html"><![CDATA[<h1 id="概述"><a class="markdownIt-Anchor" href="#概述"></a> 概述</h1><h2 id="计算机的发展历程"><a class="markdownIt-Anchor" href="#计算机的发展历程"></a> 计算机的发展历程</h2><h3 id="eniac"><a class="markdownIt-Anchor" href="#eniac"></a> ENIAC:</h3><p>1946年</p><p>美国宾夕法尼亚大学</p><p>18000个电子管,1500个继电器</p><p>30吨</p><p>170㎡</p><p>耗电140kW</p><p>每秒加法计算5000次</p><p>发展分为4个阶段:</p><ol><li>电子管计算时代</li><li>晶体管计算机时代</li><li>集成电路计算机时代</li><li>大规模集成电路计算机时代</li></ol><h2 id="计算机体系结构"><a class="markdownIt-Anchor" href="#计算机体系结构"></a> 计算机体系结构</h2><p>存储程序控制的计算机结构.</p><p>EDSAC是第一台存储程序的计算机</p><p>存储程序思想是冯诺依曼提出的,概括了:</p><ol><li>计算机(硬件)由<code>运算器</code>,<code>存储器</code>,<code>控制器</code>,<code>输入输出设备</code>五大基本部件组成.</li><li>计算机内部采用<code>二进制</code>来表示<code>指令</code>和<code>数据</code></li><li>将编好的程序和源数据放在存储器中,再启动计算机工作.</li></ol><p>非冯诺依曼结构计算机:</p><ol><li>数据流计算机</li><li>归约计算机</li><li>智能计算机</li></ol><h2 id="计算机系统基本组成"><a class="markdownIt-Anchor" href="#计算机系统基本组成"></a> 计算机系统基本组成</h2><p>分为<code>硬件系统</code>和<code>软件系统</code>.</p><p>计算机软件: 在硬件设备上运行的各种<code>程序</code>、<code>数据</code>。</p><p>程序：指挥计算机完成各种任务的<code>指令集合</code>。</p><p>为了方便阅读和修改程序，会提供关于程序的说明和资料，称为<code>文档</code></p><p><code>裸机</code>（硬件系统），只能识别机器代码</p><p>硬件系统和软件系统是相互依赖，不可分割的。</p><p>软件系统：运行，管理，维护计算机编制的程序，数据和文档的总称。</p><h5 id="计算机软件分为"><a class="markdownIt-Anchor" href="#计算机软件分为"></a> 计算机软件分为：</h5><p><code>系统软件</code>（控制，协调计算机，外部设备，应用软件开发和运行）：主要负责调度，监控，维护计算机系统</p><ol><li><code>操作系统</code></li><li>语言处理系统</li><li>数据库管理系统</li><li>系统辅助处理程序</li></ol><p><code>应用软件</code></p><ol><li>信息管理软件</li><li>辅助设计软件</li><li>文字处理软件</li><li>图形软件</li><li>各种程序包</li></ol><p><img src="/images/javawz/1587196283812.png" alt="1587196283812"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#概述&quot;&gt;&lt;/a&gt; 概述&lt;/h1&gt;
&lt;h2 id=&quot;计算机的发展历程&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#计算机的发展历程&quot;&gt;&lt;/a&gt; 计算机的发展
      
    
    </summary>
    
      <category term="计算机公共基础" scheme="https://xiaowuyoucy.github.io/categories/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%85%AC%E5%85%B1%E5%9F%BA%E7%A1%80/"/>
    
    
  </entry>
  
  <entry>
    <title>模拟斗地主洗牌发牌(有序版本)</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00195%E6%A8%A1%E6%8B%9F%E6%96%97%E5%9C%B0%E4%B8%BB%E6%B4%97%E7%89%8C%E5%8F%91%E7%89%8C/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00195模拟斗地主洗牌发牌/</id>
    <published>2020-04-05T16:52:57.000Z</published>
    <updated>2020-04-05T16:57:29.087Z</updated>
    
    <content type="html"><![CDATA[<h1 id="模拟斗地主洗牌发牌有序版本"><a class="markdownIt-Anchor" href="#模拟斗地主洗牌发牌有序版本"></a> 模拟斗地主洗牌发牌(有序版本)</h1><p><img src="/images/javawz/1586105843538.png" alt="1586105843538"></p><p>按照斗地主的规则，完成洗牌发牌的动作。</p><p><img src="/images/javawz/%E6%96%97%E5%9C%B0%E4%B8%BB.png" alt></p><h3 id="具体规则"><a class="markdownIt-Anchor" href="#具体规则"></a> 具体规则：</h3><ol><li>组装54张扑克牌将</li><li>54张牌顺序打乱</li><li>三个玩家参与游戏，三人交替摸牌，每人17张牌，最后三张留作底牌。</li><li>查看三人各自手中的牌（按照牌的大小排序）、底牌</li></ol><blockquote><p>规则：手中扑克牌从大到小的摆放顺序：大王,小王,2,A,K,Q,J,10,9,8,7,6,5,4,3</p></blockquote><h3 id="案例需求分析"><a class="markdownIt-Anchor" href="#案例需求分析"></a> 案例需求分析</h3><ol><li>准备牌：</li></ol><p>完成数字与纸牌的映射关系：</p><p>使用双列Map(HashMap)集合，完成一个数字与字符串纸牌的对应关系(相当于一个字典)。</p><ol start="2"><li>洗牌：</li></ol><p>通过数字完成洗牌发牌</p><ol start="3"><li>发牌：</li></ol><p>将每个人以及底牌设计为ArrayList&lt;String&gt;,将最后3张牌直接存放于底牌，剩余牌通过对3取模依次发牌。</p><p>存放的过程中要求数字大小与斗地主规则的大小对应。</p><p>将代表不同纸牌的数字分配给不同的玩家与底牌。</p><ol start="4"><li>看牌：</li></ol><p>通过Map集合找到对应字符展示。</p><p>通过查询纸牌与数字的对应关系，由数字转成纸牌字符串再进行展示。</p><p><img src="/images/javawz/%E6%96%97%E5%9C%B0%E4%B8%BB%E5%88%86%E6%9E%90.png" alt></p><h2 id><a class="markdownIt-Anchor" href="#"></a> </h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo06.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    斗地主综合案例:有序版本</span></span><br><span class="line"><span class="comment">    1.准备牌</span></span><br><span class="line"><span class="comment">    2.洗牌</span></span><br><span class="line"><span class="comment">    3.发牌</span></span><br><span class="line"><span class="comment">    4.排序</span></span><br><span class="line"><span class="comment">    5.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.准备牌</span></span><br><span class="line">        <span class="comment">//创建一个Map集合,存储牌的索引和组装好的牌</span></span><br><span class="line">        HashMap&lt;Integer,String&gt; poker = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//创建一个List集合,存储牌的索引</span></span><br><span class="line">        ArrayList&lt;Integer&gt; pokerIndex = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//定义两个集合,存储花色和牌的序号</span></span><br><span class="line">        List&lt;String&gt; colors = List.of(<span class="string">"♠"</span>, <span class="string">"♥"</span>, <span class="string">"♣"</span>, <span class="string">"♦"</span>);</span><br><span class="line">        List&lt;String&gt; numbers = List.of(<span class="string">"2"</span>, <span class="string">"A"</span>, <span class="string">"K"</span>, <span class="string">"Q"</span>, <span class="string">"J"</span>, <span class="string">"10"</span>, <span class="string">"9"</span>, <span class="string">"8"</span>, <span class="string">"7"</span>, <span class="string">"6"</span>, <span class="string">"5"</span>, <span class="string">"4"</span>, <span class="string">"3"</span>);</span><br><span class="line">        <span class="comment">//把大王和小王存储到集合中</span></span><br><span class="line">        <span class="comment">//定义一个牌的索引</span></span><br><span class="line">        <span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line">        poker.put(index,<span class="string">"大王"</span>);</span><br><span class="line">        pokerIndex.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        poker.put(index,<span class="string">"小王"</span>);</span><br><span class="line">        pokerIndex.add(index);</span><br><span class="line">        index++;</span><br><span class="line">        <span class="comment">//循环嵌套遍历两个集合,组装52张牌,存储到集合中</span></span><br><span class="line">        <span class="keyword">for</span> (String number : numbers) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                poker.put(index,color+number);</span><br><span class="line">                pokerIndex.add(index);</span><br><span class="line">                index++;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(poker);</span></span><br><span class="line">        <span class="comment">//System.out.println(pokerIndex);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2.洗牌</span></span><br><span class="line"><span class="comment">            使用Collections中的方法shuffle(List)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.shuffle(pokerIndex);</span><br><span class="line">        <span class="comment">//System.out.println(pokerIndex);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            3.发牌</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义4个集合,存储玩家牌的索引,和底牌的索引</span></span><br><span class="line">        ArrayList&lt;Integer&gt; player01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; player03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;Integer&gt; diPai = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//遍历存储牌索引的List集合,获取每一个牌的索引</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt;pokerIndex.size() ; i++) &#123;</span><br><span class="line">            Integer in = pokerIndex.get(i);</span><br><span class="line">            <span class="comment">//先判断底牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                <span class="comment">//给底牌发牌</span></span><br><span class="line">                diPai.add(in);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家1发牌</span></span><br><span class="line">                player01.add(in);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家2发牌</span></span><br><span class="line">                player02.add(in);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家3发牌</span></span><br><span class="line">                player03.add(in);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            4.排序</span></span><br><span class="line"><span class="comment">            使用Collections中的方法sort(List)</span></span><br><span class="line"><span class="comment">            默认是升序排序</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.sort(player01);</span><br><span class="line">        Collections.sort(player02);</span><br><span class="line">        Collections.sort(player03);</span><br><span class="line">        Collections.sort(diPai);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            5.看牌</span></span><br><span class="line"><span class="comment">            调用看牌的方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        lookPoker(<span class="string">"刘德华"</span>,poker,player01);</span><br><span class="line">        lookPoker(<span class="string">"周润发"</span>,poker,player02);</span><br><span class="line">        lookPoker(<span class="string">"周星驰"</span>,poker,player03);</span><br><span class="line">        lookPoker(<span class="string">"底牌"</span>,poker,diPai);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个看牌的方法,提高代码的复用性</span></span><br><span class="line"><span class="comment">        参数:</span></span><br><span class="line"><span class="comment">            String name:玩家名称</span></span><br><span class="line"><span class="comment">            HashMap&lt;Integer,String&gt; poker:存储牌的poker集合</span></span><br><span class="line"><span class="comment">            ArrayList&lt;Integer&gt; list:存储玩家和底牌的List集合</span></span><br><span class="line"><span class="comment">        查表法:</span></span><br><span class="line"><span class="comment">             遍历玩家或者底牌集合,获取牌的索引</span></span><br><span class="line"><span class="comment">             使用牌的索引,去Map集合中,找到对应的牌</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">lookPoker</span><span class="params">(String name,HashMap&lt;Integer,String&gt; poker,ArrayList&lt;Integer&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//输出玩家名称,不换行</span></span><br><span class="line">        System.out.print(name+<span class="string">":"</span>);</span><br><span class="line">        <span class="comment">//遍历玩家或者底牌集合,获取牌的索引</span></span><br><span class="line">        <span class="keyword">for</span> (Integer key : list) &#123;</span><br><span class="line">            <span class="comment">//使用牌的索引,去Map集合中,找到对应的牌</span></span><br><span class="line">            String value = poker.get(key);</span><br><span class="line">            System.out.print(value+<span class="string">" "</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println();<span class="comment">//打印完每一个玩家的牌,换行</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;模拟斗地主洗牌发牌有序版本&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#模拟斗地主洗牌发牌有序版本&quot;&gt;&lt;/a&gt; 模拟斗地主洗牌发牌(有序版本)&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/158610584353
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Debug追踪</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00194Debug%E8%BF%BD%E8%B8%AA/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00194Debug追踪/</id>
    <published>2020-04-05T16:46:44.000Z</published>
    <updated>2020-04-05T16:51:17.906Z</updated>
    
    <content type="html"><![CDATA[<h1 id="debug追踪"><a class="markdownIt-Anchor" href="#debug追踪"></a> Debug追踪</h1><p><strong>使用IDEA的断点调试功能，查看程序的运行过程</strong></p><h3 id="debug调试程序"><a class="markdownIt-Anchor" href="#debug调试程序"></a> Debug调试程序:</h3><p>可以让代码逐行执行,查看代码执行的过程,调试程序中出现的bug<br>使用方式:<br>在行号的右边,鼠标左键单击,添加断点(每个方法的第一行,哪里有bug添加到哪里)<br>右键,选择Debug执行程序<br>程序就会停留在添加的第一个断点处<br>执行程序:<br>f8:逐行执行程序<br>f7:进入到方法中<br>shift+f8:跳出方法<br>f9:跳到下一个断点,如果没有下一个断点,那么就结束程序<br>ctrl+f2:退出debug模式,停止程序<br>Console:切换到控制台</p><ol><li><p>在有效代码行，点击行号右边的空白区域，设置断点，程序执行到断点将停止，我们可以手动来运行程序</p><p><img src="/images/javawz/debug1.png" alt></p></li><li><p>点击Debug运行模式</p><p>​     <img src="/images/javawz/debug2.png" alt></p></li><li><p>程序停止在断点上不再执行，而IDEA最下方打开了Debug调试窗口</p><p><img src="/images/javawz/debug3.png" alt><img src="/images/javawz/debug4.png" alt></p></li><li><p>Debug调试窗口介绍</p><p><img src="/images/javawz/debug5.png" alt></p></li><li><p>快捷键F8，代码向下执行一行,第九行执行完毕，执行到第10行（第10行还未执行）</p><p><img src="/images/javawz/debug6.png" alt></p></li><li><p>切换到控制台面板，控制台显示 请录入一个字符串： 并且等待键盘录入</p><p><img src="/images/javawz/debug7.png" alt></p></li><li><p>快捷键F8，程序继续向后执行，执行键盘录入操作，在控制台录入数据 ababcea</p><p><img src="/images/javawz/debug8.png" alt></p><p>回车之后效果：</p><p><img src="/images/javawz/debug9.png" alt></p><p>调试界面效果：</p><p><img src="/images/javawz/debug0.png" alt></p></li><li><p>此时到达findChar方法，快捷键F7，进入方法findChar</p><p><img src="/images/javawz/debug11.png" alt></p></li><li><p>快捷键F8 接续执行，创建了map对象，变量区域显示</p><p><img src="/images/javawz/debug12.png" alt></p></li><li><p>快捷键F8 接续执行，进入到循环中，循环变量i为 0,F8再继续执行，就获取到变量c赋值为字符‘a’ 字节值97</p><p><img src="/images/javawz/debug13.png" alt></p></li><li><p>快捷键F8 接续执行，进入到判断语句中，因为该字符 不在Map集合键集中，再按F8执行，进入该判断中</p><p><img src="/images/javawz/debug14.png" alt></p></li><li><p>快捷键F8 接续执行，循环结束，进入下次循环，此时map中已经添加一对儿元素</p><p><img src="/images/javawz/debug15.png" alt></p></li><li><p>快捷键F8 接续执行，进入下次循环，再继续上面的操作，我们就可以看到代码每次是如何执行的了</p><p><img src="/images/javawz/debug16.png" alt></p></li><li><p>如果不想继续debug,那么可以使用快捷键F9,程序正常执行到结束，程序结果在控制台显示</p><p><img src="/images/javawz/debug17.png" alt></p></li></ol><h1 id><a class="markdownIt-Anchor" href="#"></a> </h1>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;debug追踪&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#debug追踪&quot;&gt;&lt;/a&gt; Debug追踪&lt;/h1&gt;
&lt;p&gt;&lt;strong&gt;使用IDEA的断点调试功能，查看程序的运行过程&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;debu
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>JDK9对集合添加的优化</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00193JDK9%E5%AF%B9%E9%9B%86%E5%90%88%E6%B7%BB%E5%8A%A0%E7%9A%84%E4%BC%98%E5%8C%96/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00193JDK9对集合添加的优化/</id>
    <published>2020-04-05T16:42:04.000Z</published>
    <updated>2020-04-05T16:45:27.481Z</updated>
    
    <content type="html"><![CDATA[<h1 id="jdk9对集合添加的优化"><a class="markdownIt-Anchor" href="#jdk9对集合添加的优化"></a> JDK9对集合添加的优化</h1><h3 id="jdk9的新特性"><a class="markdownIt-Anchor" href="#jdk9的新特性"></a> JDK9的新特性:</h3><p>List接口,Set接口,Map接口:里边增加了一个静态的方法of,可以给集合一次性添加多个元素<br>static &lt;E&gt; List&lt;E&gt; of(E… elements)</p><h3 id="使用前提"><a class="markdownIt-Anchor" href="#使用前提"></a> 使用前提:</h3><p>当集合中存储的元素的个数已经确定了,不在改变时使用</p><h3 id="注意"><a class="markdownIt-Anchor" href="#注意"></a> 注意:</h3><p>1.of方法只适用于List接口,Set接口,Map接口,不适用于接接口的实现类<br>2.of方法的返回值是一个不能改变的集合,集合不能再使用add,put方法添加元素,会抛出异常<br>3.Set接口和Map接口在调用of方法的时候,不能有重复的元素,否则会抛出异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.JDK9;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01JDK9</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        List&lt;String&gt; list = List.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"a"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, a, c, d]</span></span><br><span class="line">        <span class="comment">//list.add("w");//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Set&lt;String&gt; set = Set.of("a", "b", "a", "c", "d");//IllegalArgumentException:非法参数异常,有重复的元素</span></span><br><span class="line">        Set&lt;String&gt; set = Set.of(<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">        <span class="comment">//set.add("w");//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//Map&lt;String, Integer&gt; map = Map.of("张三", 18, "李四", 19, "王五", 20,"张三",19);</span></span><br><span class="line">        <span class="comment">//IllegalArgumentException:非法参数异常,有重复的元素</span></span><br><span class="line">        Map&lt;String, Integer&gt; map = Map.of(<span class="string">"张三"</span>, <span class="number">18</span>, <span class="string">"李四"</span>, <span class="number">19</span>, <span class="string">"王五"</span>, <span class="number">20</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;王五=20, 李四=19, 张三=18&#125;</span></span><br><span class="line">        <span class="comment">//map.put("赵四",30);//UnsupportedOperationException:不支持操作异常</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>需要注意以下两点：</p><blockquote><p>1:of()方法只是Map，List，Set这三个接口的静态方法，其父类接口和子类实现并没有这类方法，比如    HashSet，ArrayList等待；</p><p>2:返回的集合是不可变的；</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;jdk9对集合添加的优化&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#jdk9对集合添加的优化&quot;&gt;&lt;/a&gt; JDK9对集合添加的优化&lt;/h1&gt;
&lt;h3 id=&quot;jdk9的新特性&quot;&gt;&lt;a class=&quot;markdownIt-Anchor
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Hashtable集合</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00192Hashtable%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00192Hashtable集合/</id>
    <published>2020-04-05T16:37:33.000Z</published>
    <updated>2020-04-05T16:40:30.624Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hashtable集合"><a class="markdownIt-Anchor" href="#hashtable集合"></a> Hashtable集合</h1><p><code>java.util.Hashtable&lt;K,V&gt;</code>集合 <code>implements Map&lt;K,V&gt;</code>接口</p><p><code>Hashtable</code>:底层也是一个哈希表,是一个线程安全的集合,是单线程集合,速度慢</p><p><code>HashMap</code>:底层是一个哈希表,是一个线程不安全的集合,是多线程的集合,速度快</p><p><code>HashMap</code>集合(之前学的所有的集合):可以存储null值,null键<br><code>Hashtable</code>集合,不能存储<code>null</code>值,<code>null</code>键</p><p><code>Hashtable</code>和<code>Vector</code>集合一样,在<code>jdk1.2</code>版本之后被更先进的集合(HashMap,ArrayList)取代了<br><code>Hashtable</code>的子类<code>Properties</code>依然活跃在历史舞台</p><p><code>Properties</code>集合是一个唯一和<code>IO</code>流相结合的集合</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Hashtable;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Hashtable</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="keyword">null</span>);</span><br><span class="line">        map.put(<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;null=null, b=null&#125;</span></span><br><span class="line"></span><br><span class="line">        Hashtable&lt;String,String&gt; table = <span class="keyword">new</span> Hashtable&lt;&gt;();</span><br><span class="line">        <span class="comment">//table.put(null,"a");//NullPointerException</span></span><br><span class="line">        <span class="comment">//table.put("b",null);//NullPointerException</span></span><br><span class="line">        table.put(<span class="keyword">null</span>,<span class="keyword">null</span>);<span class="comment">//NullPointerException</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hashtable集合&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hashtable集合&quot;&gt;&lt;/a&gt; Hashtable集合&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;java.util.Hashtable&amp;lt;K,V&amp;gt;&lt;/code&gt;集合
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map集合练习</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00191Map%E9%9B%86%E5%90%88%E7%BB%83%E4%B9%A0/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00191Map集合练习/</id>
    <published>2020-04-05T16:32:25.000Z</published>
    <updated>2020-04-05T16:35:37.011Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map集合练习"><a class="markdownIt-Anchor" href="#map集合练习"></a> Map集合练习</h1><h3 id="练习"><a class="markdownIt-Anchor" href="#练习"></a> 练习:</h3><p>计算一个字符串中每个字符出现次数</p><h3 id="分析"><a class="markdownIt-Anchor" href="#分析"></a> 分析:</h3><p>1.使用Scanner获取用户输入的字符串<br>2.创建Map集合,key是字符串中的字符,value是字符的个数<br>3.遍历字符串,获取每一个字符<br>4.使用获取到的字符,去Map集合判断key是否存在</p><h5 id="key存在"><a class="markdownIt-Anchor" href="#key存在"></a>   key存在:</h5><p>    通过字符(key),获取value(字符个数)<br>    value++<br>    put(key,value)把新的value存储到Map集合中</p><h5 id="key不存在"><a class="markdownIt-Anchor" href="#key不存在"></a>   key不存在:</h5><p>    put(key,1)<br>    5.遍历Map集合,输出结果</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Scanner;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03MapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.使用Scanner获取用户输入的字符串</span></span><br><span class="line">        Scanner sc = <span class="keyword">new</span> Scanner(System.in);</span><br><span class="line">        System.out.println(<span class="string">"请输入一个字符串:"</span>);</span><br><span class="line">        String str = sc.next();</span><br><span class="line">        <span class="comment">//2.创建Map集合,key是字符串中的字符,value是字符的个数</span></span><br><span class="line">        HashMap&lt;Character,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//3.遍历字符串,获取每一个字符</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">char</span> c :str.toCharArray())&#123;</span><br><span class="line">            <span class="comment">//4.使用获取到的字符,去Map集合判断key是否存在</span></span><br><span class="line">            <span class="keyword">if</span>(map.containsKey(c))&#123;</span><br><span class="line">                <span class="comment">//key存在</span></span><br><span class="line">                Integer value = map.get(c);</span><br><span class="line">                value++;</span><br><span class="line">                map.put(c,value);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="comment">//key不存在</span></span><br><span class="line">                map.put(c,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//5.遍历Map集合,输出结果</span></span><br><span class="line">        <span class="keyword">for</span>(Character key :map.keySet())&#123;</span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map集合练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map集合练习&quot;&gt;&lt;/a&gt; Map集合练习&lt;/h1&gt;
&lt;h3 id=&quot;练习&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#练习&quot;&gt;&lt;/a&gt; 练习:
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>LinkedHashMap</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00190LinkedHashMap/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00190LinkedHashMap/</id>
    <published>2020-04-05T16:29:14.000Z</published>
    <updated>2020-04-05T16:31:14.118Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linkedhashmap"><a class="markdownIt-Anchor" href="#linkedhashmap"></a> LinkedHashMap</h1><p>java.util.LinkedHashMap&lt;K,V&gt; entends HashMap&lt;K,V&gt;<br>Map 接口的哈希表和链接列表实现，具有可预知的迭代顺序。<br>底层原理:<br>哈希表+链表(记录元素的顺序)</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashMap;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01LinkedHashMap</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashMap&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        map.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        map.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        map.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">// key不允许重复,无序 &#123;a=d, b=b, c=c&#125;</span></span><br><span class="line"></span><br><span class="line">        LinkedHashMap&lt;String,String&gt; linked = <span class="keyword">new</span> LinkedHashMap&lt;&gt;();</span><br><span class="line">        linked.put(<span class="string">"a"</span>,<span class="string">"a"</span>);</span><br><span class="line">        linked.put(<span class="string">"c"</span>,<span class="string">"c"</span>);</span><br><span class="line">        linked.put(<span class="string">"b"</span>,<span class="string">"b"</span>);</span><br><span class="line">        linked.put(<span class="string">"a"</span>,<span class="string">"d"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">// key不允许重复,有序 &#123;a=d, c=c, b=b&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linkedhashmap&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linkedhashmap&quot;&gt;&lt;/a&gt; LinkedHashMap&lt;/h1&gt;
&lt;p&gt;java.util.LinkedHashMap&amp;lt;K,V&amp;gt; ente
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>HashMap存储自定义类型键值</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/06/java00189HashMap%E5%AD%98%E5%82%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E9%94%AE%E5%80%BC/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/06/java00189HashMap存储自定义类型键值/</id>
    <published>2020-04-05T16:06:03.000Z</published>
    <updated>2020-04-05T16:28:40.833Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hashmap存储自定义类型键值"><a class="markdownIt-Anchor" href="#hashmap存储自定义类型键值"></a> HashMap存储自定义类型键值</h1><p>HashMap存储自定义类型键值<br>Map集合保证key是唯一的:<br>作为key的元素,必须重写hashCode方法和equals方法,以保证key唯一</p><ul><li>当给HashMap中存放自定义对象时，如果自定义对象作为key存在，这时要保证对象唯一，必须复写对象的hashCode和equals方法(如果忘记，请回顾HashSet存放自定义对象)。</li><li>如果要保证map中存放的key和取出的顺序一致，可以使用<code>java.util.LinkedHashMap</code>集合来存放。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HashMapTest</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1,创建Hashmap集合对象。</span></span><br><span class="line">        Map&lt;Student,String&gt;map = <span class="keyword">new</span> HashMap&lt;Student,String&gt;();</span><br><span class="line">        <span class="comment">//2,添加元素。</span></span><br><span class="line">        map.put(newStudent(<span class="string">"lisi"</span>,<span class="number">28</span>), <span class="string">"上海"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"wangwu"</span>,<span class="number">22</span>), <span class="string">"北京"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"zhaoliu"</span>,<span class="number">24</span>), <span class="string">"成都"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"zhouqi"</span>,<span class="number">25</span>), <span class="string">"广州"</span>);</span><br><span class="line">        map.put(newStudent(<span class="string">"wangwu"</span>,<span class="number">22</span>), <span class="string">"南京"</span>);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//3,取出元素。键找值方式</span></span><br><span class="line">        Set&lt;Student&gt;keySet = map.keySet();</span><br><span class="line">        <span class="keyword">for</span>(Student key: keySet)&#123;</span><br><span class="line">            Stringvalue = map.get(key);</span><br><span class="line">            System.out.println(key.toString()+<span class="string">"....."</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashMapSavePerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show02();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">        key:Person类型</span></span><br><span class="line"><span class="comment">            Person类就必须重写hashCode方法和equals方法,以保证key唯一</span></span><br><span class="line"><span class="comment">        value:String类型</span></span><br><span class="line"><span class="comment">            可以重复</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;Person,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">"女王"</span>,<span class="number">18</span>),<span class="string">"英国"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">"秦始皇"</span>,<span class="number">18</span>),<span class="string">"秦国"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">"普京"</span>,<span class="number">30</span>),<span class="string">"俄罗斯"</span>);</span><br><span class="line">        map.put(<span class="keyword">new</span> Person(<span class="string">"女王"</span>,<span class="number">18</span>),<span class="string">"毛里求斯"</span>);</span><br><span class="line">        <span class="comment">//使用entrySet和增强for遍历Map集合</span></span><br><span class="line">        Set&lt;Map.Entry&lt;Person, String&gt;&gt; set = map.entrySet();</span><br><span class="line">        <span class="keyword">for</span> (Map.Entry&lt;Person, String&gt; entry : set) &#123;</span><br><span class="line">            Person key = entry.getKey();</span><br><span class="line">            String value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">"--&gt;"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        HashMap存储自定义类型键值</span></span><br><span class="line"><span class="comment">        key:String类型</span></span><br><span class="line"><span class="comment">            String类重写hashCode方法和equals方法,可以保证key唯一</span></span><br><span class="line"><span class="comment">        value:Person类型</span></span><br><span class="line"><span class="comment">            value可以重复(同名同年龄的人视为同一个)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashMap集合</span></span><br><span class="line">        HashMap&lt;String,Person&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加元素</span></span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        map.put(<span class="string">"上海"</span>,<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">19</span>));</span><br><span class="line">        map.put(<span class="string">"广州"</span>,<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">20</span>));</span><br><span class="line">        map.put(<span class="string">"北京"</span>,<span class="keyword">new</span> Person(<span class="string">"赵六"</span>,<span class="number">18</span>));</span><br><span class="line">        <span class="comment">//使用keySet加增强for遍历Map集合</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line">        <span class="keyword">for</span> (String key : set) &#123;</span><br><span class="line">            Person value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"--&gt;"</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hashmap存储自定义类型键值&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hashmap存储自定义类型键值&quot;&gt;&lt;/a&gt; HashMap存储自定义类型键值&lt;/h1&gt;
&lt;p&gt;HashMap存储自定义类型键值&lt;br&gt;
Map集合保证ke
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>类里定义的接口和使用</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/05/java00188%E7%B1%BB%E9%87%8C%E5%AE%9A%E4%B9%89%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%92%8C%E4%BD%BF%E7%94%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/05/java00188类里定义的接口和使用/</id>
    <published>2020-04-04T18:06:00.000Z</published>
    <updated>2020-04-04T18:25:09.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="类里定义的接口和使用"><a class="markdownIt-Anchor" href="#类里定义的接口和使用"></a> 类里定义的接口和使用</h1><h3 id="格式"><a class="markdownIt-Anchor" href="#格式"></a> 格式:</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> 类名</span>&#123;</span><br><span class="line"><span class="comment">//在类里面定义接口</span></span><br><span class="line">    修饰符 <span class="class"><span class="keyword">interface</span> 接口名</span>&#123;</span><br><span class="line"><span class="comment">//抽象方法;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span></span>&#123;</span><br><span class="line"><span class="comment">//在类里面定义接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="实现接口"><a class="markdownIt-Anchor" href="#实现接口"></a> 实现接口:</h3><h5 id="在类方法中用new实现通过多态接收"><a class="markdownIt-Anchor" href="#在类方法中用new实现通过多态接收"></a> 在类方法中用new实现,通过多态接收</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span></span>&#123;</span><br><span class="line"><span class="comment">//在类里面定义接口</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果接口修饰符石private,那么此接口只能在本类中使用.</span></span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">        A a = <span class="keyword">new</span> A()&#123;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"111111"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">        a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在new的时候实现"><a class="markdownIt-Anchor" href="#在new的时候实现"></a> 在new的时候实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DemoClass</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        TestA.A a = <span class="keyword">new</span> TestA.A()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span>  <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>&#123;</span><br><span class="line">                System.out.println(<span class="string">"我是TestA类中的A接口"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">       a.show();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在其他类中实现"><a class="markdownIt-Anchor" href="#在其他类中实现"></a> 在其他类中实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo11;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestB</span> <span class="keyword">implements</span> <span class="title">TestA</span>.<span class="title">A</span></span>&#123;</span><br><span class="line">  <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="在本类中的内部类实现"><a class="markdownIt-Anchor" href="#在本类中的内部类实现"></a> 在本类中的内部类实现</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestA</span></span>&#123;</span><br><span class="line"><span class="comment">//在类里面定义接口</span></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">interface</span> <span class="title">A</span></span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span></span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestC</span> <span class="keyword">implements</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">show</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;类里定义的接口和使用&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#类里定义的接口和使用&quot;&gt;&lt;/a&gt; 类里定义的接口和使用&lt;/h1&gt;
&lt;h3 id=&quot;格式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#格式&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map集合遍历键值对方式</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/05/java00187Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E9%94%AE%E5%80%BC%E5%AF%B9%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/05/java00187Map集合遍历键值对方式/</id>
    <published>2020-04-04T17:27:12.000Z</published>
    <updated>2020-04-04T17:30:07.198Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map集合遍历键值对方式"><a class="markdownIt-Anchor" href="#map集合遍历键值对方式"></a> Map集合遍历键值对方式</h1><p>键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中的键与值。</p><p>操作步骤与图解：</p><ol><li><p>获取Map集合中，所有的键值对(Entry)对象，以Set集合形式返回。方法提示:<code>entrySet()</code>。</p></li><li><p>遍历包含键值对(Entry)对象的Set集合，得到每一个键值对(Entry)对象。</p></li><li><p>通过键值对(Entry)对象，获取Entry对象中的键与值。  方法提示:<code>getkey() getValue()</code></p></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Map集合遍历的第二种方式:使用Entry对象遍历</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Map集合中的方法:</span></span><br><span class="line"><span class="comment">        Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet() 返回此映射中包含的映射关系的 Set 视图。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来,存储到一个Set集合中</span></span><br><span class="line"><span class="comment">        2.遍历Set集合,获取每一个Entry对象</span></span><br><span class="line"><span class="comment">        3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03EntrySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法entrySet(),把Map集合中多个Entry对象取出来,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;Map.Entry&lt;String, Integer&gt;&gt; set = map.entrySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历Set集合,获取每一个Entry对象</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;Map.Entry&lt;String, Integer&gt;&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            Map.Entry&lt;String, Integer&gt; entry = it.next();</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------------"</span>);</span><br><span class="line">        <span class="keyword">for</span>(Map.Entry&lt;String,Integer&gt; entry:set)&#123;</span><br><span class="line">            <span class="comment">//3.使用Entry对象中的方法getKey()和getValue()获取键与值</span></span><br><span class="line">            String key = entry.getKey();</span><br><span class="line">            Integer value = entry.getValue();</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map集合遍历键值对方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map集合遍历键值对方式&quot;&gt;&lt;/a&gt; Map集合遍历键值对方式&lt;/h1&gt;
&lt;p&gt;键值对方式：即通过集合中每个键值对(Entry)对象，获取键值对(Entry)对象中
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Entry键值对对象</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/05/java00186Entry%E9%94%AE%E5%80%BC%E5%AF%B9%E5%AF%B9%E8%B1%A1/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/05/java00186Entry键值对对象/</id>
    <published>2020-04-04T17:24:08.000Z</published>
    <updated>2020-04-04T17:25:55.727Z</updated>
    
    <content type="html"><![CDATA[<h1 id="entry键值对对象"><a class="markdownIt-Anchor" href="#entry键值对对象"></a> Entry键值对对象</h1><p>我们已经知道，<code>Map</code>中存放的是两种对象，一种称为<strong>key</strong>(键)，一种称为<strong>value</strong>(值)，它们在在<code>Map</code>中是一一对应关系，这一对对象又称做<code>Map</code>中的一个<code>Entry(项)</code>。<code>Entry</code>将键值对的对应关系封装成了对象。即键值对对象，这样我们在遍历<code>Map</code>集合时，就可以从每一个键值对（<code>Entry</code>）对象中获取对应的键与对应的值。</p><p>既然Entry表示了一对键和值，那么也同样提供了获取对应键和对应值得方法：</p><ul><li><code>public K getKey()</code>：获取Entry对象中的键。</li><li><code>public V getValue()</code>：获取Entry对象中的值。</li></ul><p>在Map集合中也提供了获取所有Entry对象的方法：</p><ul><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><p><img src="/images/javawz/8%5BXM_JPZ$SE%60MQVT7FD@ZK5.png" alt="img"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;entry键值对对象&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#entry键值对对象&quot;&gt;&lt;/a&gt; Entry键值对对象&lt;/h1&gt;
&lt;p&gt;我们已经知道，&lt;code&gt;Map&lt;/code&gt;中存放的是两种对象，一种称为&lt;strong&gt;key
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map集合遍历键找值方式</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/04/java00185Map%E9%9B%86%E5%90%88%E9%81%8D%E5%8E%86%E9%94%AE%E6%89%BE%E5%80%BC%E6%96%B9%E5%BC%8F/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/04/java00185Map集合遍历键找值方式/</id>
    <published>2020-04-04T15:47:55.000Z</published>
    <updated>2020-04-04T15:52:24.366Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map集合遍历键找值方式"><a class="markdownIt-Anchor" href="#map集合遍历键找值方式"></a> Map集合遍历键找值方式</h1><p>键找值方式：即通过元素中的键，获取键所对应的值</p><p>分析步骤：</p><ol><li>获取Map中所有的键，由于键是唯一的，所以返回一个Set集合存储所有的键。方法提示:<code>keyset()</code></li><li>遍历键的Set集合，得到每一个键。</li><li>根据键，获取键所对应的值。方法提示:<code>get(K key)</code></li></ol><p><img src="/images/javawz/1586015397232.png" alt="1586015397232"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"><span class="keyword">import</span> java.util.Set;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Map集合的第一种遍历方式:通过键找值的方式</span></span><br><span class="line"><span class="comment">    Map集合中的方法:</span></span><br><span class="line"><span class="comment">         Set&lt;K&gt; keySet() 返回此映射中包含的键的 Set 视图。</span></span><br><span class="line"><span class="comment">    实现步骤:</span></span><br><span class="line"><span class="comment">        1.使用Map集合中的方法keySet(),把Map集合所有的key取出来,存储到一个Set集合中</span></span><br><span class="line"><span class="comment">        2.遍历set集合,获取Map集合中的每一个key</span></span><br><span class="line"><span class="comment">        3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02KeySet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.使用Map集合中的方法keySet(),把Map集合所有的key取出来,存储到一个Set集合中</span></span><br><span class="line">        Set&lt;String&gt; set = map.keySet();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//2.遍历set集合,获取Map集合中的每一个key</span></span><br><span class="line">        <span class="comment">//使用迭代器遍历Set集合</span></span><br><span class="line">        Iterator&lt;String&gt; it = set.iterator();</span><br><span class="line">        <span class="keyword">while</span> (it.hasNext())&#123;</span><br><span class="line">            String key = it.next();</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : set)&#123;</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-------------------"</span>);</span><br><span class="line">        <span class="comment">//使用增强for遍历Set集合</span></span><br><span class="line">        <span class="keyword">for</span>(String key : map.keySet())&#123;</span><br><span class="line">            <span class="comment">//3.通过Map集合中的方法get(key),通过key找到value</span></span><br><span class="line">            Integer value = map.get(key);</span><br><span class="line">            System.out.println(key+<span class="string">"="</span>+value);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map集合遍历键找值方式&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map集合遍历键找值方式&quot;&gt;&lt;/a&gt; Map集合遍历键找值方式&lt;/h1&gt;
&lt;p&gt;键找值方式：即通过元素中的键，获取键所对应的值&lt;/p&gt;
&lt;p&gt;分析步骤：&lt;/p&gt;
&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map接口中的常用方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/04/java00184Map%E6%8E%A5%E5%8F%A3%E4%B8%AD%E7%9A%84%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/04/java00184Map接口中的常用方法/</id>
    <published>2020-04-04T15:23:04.000Z</published>
    <updated>2020-04-04T15:36:11.822Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map接口中的常用方法"><a class="markdownIt-Anchor" href="#map接口中的常用方法"></a> Map接口中的常用方法</h1><p>Map接口中定义了很多方法，常用的如下：</p><ul><li><code>public V put(K key, V value)</code>:  把指定的键与指定的值添加到Map集合中。</li><li><code>public V remove(Object key)</code>: 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</li><li><code>public V get(Object key)</code> 根据指定的键，在Map集合中获取对应的值。</li><li><code>boolean containsKey(Object key)</code> 判断集合中是否包含指定的键。</li><li><code>public Set&lt;K&gt; keySet()</code>: 获取Map集合中所有的键，存储到Set集合中。</li><li><code>public Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</code>: 获取到Map集合中所有的键值对对象的集合(Set集合)。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Map</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show04();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        boolean containsKey(Object key) 判断集合中是否包含指定的键。</span></span><br><span class="line"><span class="comment">        包含返回true,不包含返回false</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show04</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b1 = map.containsKey(<span class="string">"赵丽颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b1:"</span>+b1);<span class="comment">//b1:true</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">boolean</span> b2 = map.containsKey(<span class="string">"赵颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"b2:"</span>+b2);<span class="comment">//b2:false</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V get(Object key) 根据指定的键，在Map集合中获取对应的值。</span></span><br><span class="line"><span class="comment">            返回值:</span></span><br><span class="line"><span class="comment">                key存在,返回对应的value值</span></span><br><span class="line"><span class="comment">                key不存在,返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line"></span><br><span class="line">        Integer v1 = map.get(<span class="string">"杨颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1:"</span>+v1);<span class="comment">//v1:165</span></span><br><span class="line"></span><br><span class="line">        Integer v2 = map.get(<span class="string">"迪丽热巴"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v2:"</span>+v2);<span class="comment">//v2:null</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V remove(Object key): 把指定的键 所对应的键值对元素 在Map集合中删除，返回被删除元素的值。</span></span><br><span class="line"><span class="comment">            返回值:V</span></span><br><span class="line"><span class="comment">                key存在,v返回被删除的值</span></span><br><span class="line"><span class="comment">                key不存在,v返回null</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象</span></span><br><span class="line">        Map&lt;String,Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">"赵丽颖"</span>,<span class="number">168</span>);</span><br><span class="line">        map.put(<span class="string">"杨颖"</span>,<span class="number">165</span>);</span><br><span class="line">        map.put(<span class="string">"林志玲"</span>,<span class="number">178</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;林志玲=178, 赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line"></span><br><span class="line">        Integer v1 = map.remove(<span class="string">"林志玲"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1:"</span>+v1);<span class="comment">//v1:178</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//int v2 = map.remove("林志颖");//自动拆箱  NullPointerException</span></span><br><span class="line">        Integer v2 = map.remove(<span class="string">"林志颖"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v2:"</span>+v2);<span class="comment">//v2:null</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;赵丽颖=168, 杨颖=165&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        public V put(K key, V value):  把指定的键与指定的值添加到Map集合中。</span></span><br><span class="line"><span class="comment">            返回值:v</span></span><br><span class="line"><span class="comment">                存储键值对的时候,key不重复,返回值V是null</span></span><br><span class="line"><span class="comment">                存储键值对的时候,key重复,会使用新的value替换map中重复的value,返回被替换的value值</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建Map集合对象,多态</span></span><br><span class="line">        Map&lt;String,String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        String v1 = map.put(<span class="string">"李晨"</span>, <span class="string">"范冰冰1"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v1:"</span>+v1);<span class="comment">//v1:null</span></span><br><span class="line"></span><br><span class="line">        String v2 = map.put(<span class="string">"李晨"</span>, <span class="string">"范冰冰2"</span>);</span><br><span class="line">        System.out.println(<span class="string">"v2:"</span>+v2);<span class="comment">//v2:范冰冰1</span></span><br><span class="line"></span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;李晨=范冰冰2&#125;</span></span><br><span class="line"></span><br><span class="line">        map.put(<span class="string">"冷锋"</span>,<span class="string">"龙小云"</span>);</span><br><span class="line">        map.put(<span class="string">"杨过"</span>,<span class="string">"小龙女"</span>);</span><br><span class="line">        map.put(<span class="string">"尹志平"</span>,<span class="string">"小龙女"</span>);</span><br><span class="line">        System.out.println(map);<span class="comment">//&#123;杨过=小龙女, 尹志平=小龙女, 李晨=范冰冰2, 冷锋=龙小云&#125;</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map接口中的常用方法&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map接口中的常用方法&quot;&gt;&lt;/a&gt; Map接口中的常用方法&lt;/h1&gt;
&lt;p&gt;Map接口中定义了很多方法，常用的如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;publi
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map常用子类</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/04/java00183Map%E5%B8%B8%E7%94%A8%E5%AD%90%E7%B1%BB/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/04/java00183Map常用子类/</id>
    <published>2020-04-04T15:17:33.000Z</published>
    <updated>2020-04-04T15:26:20.035Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map常用子类"><a class="markdownIt-Anchor" href="#map常用子类"></a> Map常用子类</h1><p>通过查看Map接口描述，看到Map有多个子类，这里我们主要讲解常用的HashMap集合、LinkedHashMap集合。</p><ul><li><strong>HashMap&lt;K,V&gt;</strong>：存储数据采用的哈希表结构，元素的存取顺序不能保证一致。由于要保证键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li><li><strong>LinkedHashMap&lt;K,V&gt;</strong>：HashMap下有个子类LinkedHashMap，存储数据采用的哈希表结构+链表结构。通过链表结构可以保证元素的存取顺序一致；通过哈希表结构可以保证的键的唯一、不重复，需要重写键的hashCode()方法、equals()方法。</li></ul><blockquote><p>tips：Map接口中的集合都有两个泛型变量&lt;K,V&gt;,在使用时，要为两个泛型变量赋予数据类型。两个泛型变量&lt;K,V&gt;的数据类型可以相同，也可以不同。</p></blockquote><p><code>java.util.HashMap&lt;k,v&gt;</code>集合 <code>implements Map&lt;k,v&gt;</code>接口</p><p>​    <code>HashMap</code>集合的特点:</p><p>​        1.<code>HashMap</code>集合底层是哈希表:查询的速度特别的快</p><p>​            <code>JDK1.8</code>之前:数组+单向链表</p><p>​            <code>JDK1.8</code>之后:<code>数组+单向链表|红黑树(链表的长度超过8)</code>:提高查询的速度</p><p>​        2.<code>hashMap</code>集合是一个无序的集合,存储元素和取出元素的顺序有可能不一致</p><p><code>java.util.LinkedHashMap&lt;k,v&gt;</code>集合<code>extends HashMap&lt;k,v&gt;</code>集合</p><p><code>LinkedHashMap</code>的特点:</p><p>​        1.LinkedHashMap集合底层是<code>哈希表+链表(保证迭代的顺序)</code></p><p>​        2.LinkedHashMap集合是一个<code>有序</code>的集合,存储元素和取出元素的<code>顺序是一致</code>的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map常用子类&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map常用子类&quot;&gt;&lt;/a&gt; Map常用子类&lt;/h1&gt;
&lt;p&gt;通过查看Map接口描述，看到Map有多个子类，这里我们主要讲解常用的HashMap集合、LinkedHashMap
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Map集合概述</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/04/java00182Map%E9%9B%86%E5%90%88%E6%A6%82%E8%BF%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/04/java00182Map集合概述/</id>
    <published>2020-04-04T15:10:45.000Z</published>
    <updated>2020-04-04T15:15:55.378Z</updated>
    
    <content type="html"><![CDATA[<h1 id="map集合概述"><a class="markdownIt-Anchor" href="#map集合概述"></a> Map集合概述</h1><p>现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应的关系，就叫做映射。Java提供了专门的集合类用来存放这种对象关系的对象，即<code>java.util.Map</code>接口。</p><p>我们通过查看<code>Map</code>接口描述，发现<code>Map</code>接口下的集合与<code>Collection</code>接口下的集合，它们存储数据的形式不同，如下图。</p><p><img src="/images/javawz/Collection%E4%B8%8EMap.bmp" alt></p><ul><li><code>Collection</code>中的集合，元素是孤立存在的（理解为单身），向集合中存储元素采用一个个元素的方式存储。</li><li><code>Map</code>中的集合，元素是成对存在的(理解为夫妻)。每个元素由键与值两部分组成，通过键可以找对所对应的值。</li><li><code>Collection</code>中的集合称为单列集合，<code>Map</code>中的集合称为双列集合。</li><li>需要注意的是，<code>Map</code>中的集合不能包含重复的键，值可以重复；每个键只能对应一个值。</li></ul><p><code>java.util.Map&lt;k,v&gt;</code>集合<br><code>Map</code>集合的特点:<br>1.<code>Map</code>集合是一个双列集合,一个元素包含两个值(一个key,一个value)<br>2.<code>Map</code>集合中的元素,<code>key</code>和<code>value</code>的数据类型可以相同,也可以不同<br>3.<code>Map</code>集合中的元素,<code>key</code>是不允许重复的,<code>value</code>是可以重a复的<br>4.<code>Map</code>集合中的元素,<code>key</code>和<code>value</code>是一一对应</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;map集合概述&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#map集合概述&quot;&gt;&lt;/a&gt; Map集合概述&lt;/h1&gt;
&lt;p&gt;现实生活中，我们常会看到这样的一种集合：IP地址与主机名，身份证号与个人，系统用户名与系统用户对象等，这种一一对应
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>Java_Collection集合总结</title>
    <link href="https://xiaowuyoucy.github.io/2020/04/03/java00181%E6%80%BB%E7%BB%93001/"/>
    <id>https://xiaowuyoucy.github.io/2020/04/03/java00181总结001/</id>
    <published>2020-04-02T19:21:09.000Z</published>
    <updated>2020-04-03T15:58:27.788Z</updated>
    
    <content type="html"><![CDATA[<h3 id="list集合排序"><a class="markdownIt-Anchor" href="#list集合排序"></a> list集合排序</h3><p><code>Collections.sort(List&lt;T&gt; list)</code></p><p>要重写Comparable接口中的compareTo方法</p><p><code>Collections.sort(List&lt;T&gt; list，Comparator&lt;? super T&gt;)</code></p><p>要从写Comparator类中的compare方法</p><p>使用匿名内部类重写</p><p>往集合添加元素</p><p><code>Collections.addAll(Collection&lt;T&gt; c, T... elements)</code></p><p>打乱集合顺序</p><p><code>Collections.shuffle(List&lt;?&gt; list)</code></p><h2 id="集合"><a class="markdownIt-Anchor" href="#集合"></a> <strong>集合</strong>：</h2><p>1.集合是java中提供的一种容器，可以用来存储多个数据。</p><p>2.长度是可变的.</p><p>3.存储的元素是对象</p><h3 id="集合框架介绍"><a class="markdownIt-Anchor" href="#集合框架介绍"></a> 集合框架介绍</h3><h5 id="存储结构可以分为两大类"><a class="markdownIt-Anchor" href="#存储结构可以分为两大类"></a> 存储结构可以分为两大类</h5><p>1.单列集合<code>java.util.Collection</code></p><p>2.双列集合<code>java.util.Map</code></p><p><strong>Collection</strong>是单列集合类的根接口</p><p><strong>Collection</strong>有两个子接口:</p><ol><li><code>java.util.List</code></li><li><code>java.util.Set</code></li></ol><p><code>List</code>的特点是元素有序、元素可重复 .</p><p><code>Set</code>的特点是元素无序，而且不可重复。</p><h5 id="list接口的主要实现类有"><a class="markdownIt-Anchor" href="#list接口的主要实现类有"></a> <code>List</code>接口的主要实现类有</h5><p>1.<code>java.util.ArrayList</code></p><p>2.<code>java.util.LinkedList</code></p><h5 id="set接口的主要实现类有"><a class="markdownIt-Anchor" href="#set接口的主要实现类有"></a> <code>Set</code>接口的主要实现类有</h5><p>1.<code>java.util.HashSet</code></p><p>2.<code>java.util.TreeSet</code></p><h3 id="单列集合共性的方法"><a class="markdownIt-Anchor" href="#单列集合共性的方法"></a> 单列集合共性的方法</h3><p>public boolean add(E e)：把给定的对象添加到当前集合中 。<br>public void clear() :清空集合中所有的元素。<br>public boolean remove(E e): 把给定的对象在当前集合中删除。<br>public boolean contains(E e): 判断当前集合中是否包含给定的对象。<br>public boolean isEmpty(): 判断当前集合是否为空。<br>public int size(): 返回集合中元素的个数。<br>public Object[] toArray(): 把集合中的元素，存储到数组中。</p><h3 id="iterator接口"><a class="markdownIt-Anchor" href="#iterator接口"></a> Iterator接口</h3><p>迭代器(对集合进行遍历)</p><h3 id="迭代器的使用步骤重点"><a class="markdownIt-Anchor" href="#迭代器的使用步骤重点"></a> 迭代器的使用步骤(重点):</h3><p>1.使用集合中的方法iterator()获取迭代器的实现类对象,使用Iterator接口接收(多态)</p><p><code>Iterator&lt;类名&gt; it = 集合对象.iterator();</code></p><p>2.使用Iterator接口中的方法hasNext判断还有没有下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.使用Iterator接口中的方法next取出集合中的下一个元素</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">类名 o = it.next();</span><br></pre></td></tr></table></figure><h3 id="增强for循环"><a class="markdownIt-Anchor" href="#增强for循环"></a> 增强for循环</h3><p>底层使用的也是迭代器</p><p>JDK1.5之后出现的新特性</p><p>所有的单列集合都可以使用增强for</p><p>public interface Iterable&lt;T&gt;实现这个接口允许对象成为 “foreach” 语句的目标</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(集合/数组的数据类型 变量名: 集合名/数组名)&#123;</span><br><span class="line">sout(变量名);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型的概念"><a class="markdownIt-Anchor" href="#泛型的概念"></a> 泛型的概念</h3><p>泛型是一种未知类型,当不确定使用什么类型的时候,可以使用泛型</p><h3 id="定义和使用含有泛型的类"><a class="markdownIt-Anchor" href="#定义和使用含有泛型的类"></a> 定义和使用含有泛型的类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">class</span> 类名&lt;代表泛型的变量&gt;</span></span><br><span class="line"><span class="class"></span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义和使用含有泛型的方法"><a class="markdownIt-Anchor" href="#定义和使用含有泛型的方法"></a> 定义和使用含有泛型的方法</h3><p>泛型定义在方法的修饰符和返回值类型之间</p><p>含有泛型的方法,在调用方法的时候确定泛型的数据类型<br>传递什么类型的参数,泛型就是什么类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 &lt;泛型&gt; 返回值类型 方法名(参数列表(使用泛型))&#123;</span><br><span class="line">方法体;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="定义和使用含有泛型的接口"><a class="markdownIt-Anchor" href="#定义和使用含有泛型的接口"></a> 定义和使用含有泛型的接口</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;代表泛型的变量&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="使用有两种方法"><a class="markdownIt-Anchor" href="#使用有两种方法"></a> 使用有两种方法</h5><p>1.在实现类中指定泛型接口类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">implements</span> 接口名&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>2.接口使用什么泛型,类就使用什么泛型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;<span class="title">T</span>&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">A</span>&lt;<span class="title">T</span>&gt; <span class="keyword">implements</span> 接口名&lt;<span class="title">T</span>&gt;</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="泛型通配符"><a class="markdownIt-Anchor" href="#泛型通配符"></a> 泛型通配符</h3><p>使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示 .</p><p>使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><p><code>?</code>:代表任意的数据类型</p><p>不能创建对象使用<br>只能作为方法的参数使用</p><h5 id="泛型的上限"><a class="markdownIt-Anchor" href="#泛型的上限"></a> <strong>泛型的上限</strong>：</h5><p><strong>格式</strong>：<code>类型名称 对象名称</code></p><p><strong>意义：</strong> <code>只能接收该类型及其子类</code></p><h5 id="泛型的下限"><a class="markdownIt-Anchor" href="#泛型的下限"></a> <strong>泛型的下限</strong>：</h5><p><strong>格式</strong>： <code>类型名称 对象名称</code></p><p><strong>意义</strong>： <code>只能接收该类型及其父类型</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><h2 id="数据结构"><a class="markdownIt-Anchor" href="#数据结构"></a> 数据结构</h2><h3 id="链表"><a class="markdownIt-Anchor" href="#链表"></a> 链表</h3><p>查询慢,增删快.</p><h3 id="数组"><a class="markdownIt-Anchor" href="#数组"></a> 数组</h3><p>查询快,增删慢.</p><h3 id="队列"><a class="markdownIt-Anchor" href="#队列"></a> 队列</h3><p>先进先出</p><h3 id="栈"><a class="markdownIt-Anchor" href="#栈"></a> 栈</h3><p>先进后出</p><h3 id="红黑树"><a class="markdownIt-Anchor" href="#红黑树"></a> 红黑树</h3><ol><li>节点可以是红色的或者黑色的</li><li>根节点是黑色的</li><li>叶子节点(空节点)是黑色的</li><li>每个红色节点的字节点都是黑色的</li><li>任何一个节点到每一个叶子节点的所有路径上黑色节点相同</li></ol><h3 id="list集合常用方法"><a class="markdownIt-Anchor" href="#list集合常用方法"></a> List集合常用方法</h3><p><code>public void add(int index, E element)</code>: 将指定的元素，添加到该集合中的指定位置上。</p><p><code>public E get(int index)</code>:返回集合中指定位置的元素。</p><p><code>public E remove(int index)</code>: 移除列表中指定位置的元素, 返回的是被移除的元素。</p><p><code>public E set(int index, E element)</code>:用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</p><h3 id="索引越界异常"><a class="markdownIt-Anchor" href="#索引越界异常"></a> 索引越界异常</h3><p>IndexOutOfBoundsException:索引越界异常,集合会报<br>ArrayIndexOutOfBoundsException:数组索引越界异常<br>StringIndexOutOfBoundsException:字符串索引越界异常</p><h3 id="arraylist集合"><a class="markdownIt-Anchor" href="#arraylist集合"></a> ArrayList集合</h3><p>使用的是数组结构,查询快,增删慢</p><h3 id="linkedlist集合"><a class="markdownIt-Anchor" href="#linkedlist集合"></a> LinkedList集合</h3><p>数据存储的结构是链表结构 ( 双向链表 )</p><p>方便元素添加、删除的集合</p><p><code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</p><p><code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</p><p><code>public E getFirst()</code>:返回此列表的第一个元素。</p><p><code>public E getLast()</code>:返回此列表的最后一个元素。</p><p><code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</p><p><code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</p><p><code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</p><p><code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</p><p><code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</p><p><code>public E remove(int index)</code> 移除此列表中指定位置处的元素。将任何后续元素向左移（从索引中减 1）。返回从列表中删除的元素。</p><h3 id="hashset集合"><a class="markdownIt-Anchor" href="#hashset集合"></a> HashSet集合</h3><p>是<code>Set</code>接口的一个实现类</p><p>存储的元素是不可重复的</p><p>元素都是无序的</p><p>底层的实现其实是一个<code>java.util.HashMap</code>支持</p><p>根据对象的哈希值来确定元素在集合中的存储位置</p><p>保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法</p><h3 id="哈希值"><a class="markdownIt-Anchor" href="#哈希值"></a> 哈希值</h3><p><strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现的</p><p>JDK1.8 以后, 哈希表存储采用数组+链表+红黑树实现 ,当链表长度超过阈值（8）时，将链表转换为红黑树</p><p>自定义的类需要重写 hashCode和equals方法  保证对象其唯一</p><h3 id="set集合存储元素不重复的原理"><a class="markdownIt-Anchor" href="#set集合存储元素不重复的原理"></a> Set集合存储元素不重复的原理</h3><p>set集合在调用add时会调用hashCode()和equals()判断元素是否重复</p><p>hashCode()会生成一个哈希值并存储在数组里</p><p>如果哈希值相同,称为哈希冲突,会在哈希值对应的链表或红黑树中查看元素是否相同,如果相同则抛弃</p><h3 id="hashset存储自定义类型元素"><a class="markdownIt-Anchor" href="#hashset存储自定义类型元素"></a> HashSet存储自定义类型元素</h3><p>HashSet存储自定义类型元素</p><p>set集合报错元素唯一:<br>存储的元素(String,Integer,…Student,Person…),必须重写hashCode方法和equals方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    </span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="comment">//下面是比较元素</span></span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="linkedhashset集合"><a class="markdownIt-Anchor" href="#linkedhashset集合"></a> LinkedHashSet集合</h3><p>java.util.LinkedHashSet集合 extends HashSet集合<br>LinkedHashSet集合特点:<br>底层是一个哈希表(数组+链表/红黑树)+链表:多了一条链表(记录元素的存储顺序),保证元素有序</p><p><code>LinkedHashSet&lt;String&gt; linked = new LinkedHashSet&lt;&gt;();</code></p><h3 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数</h3><p>​       可变参数底层就是一个数组</p><p>1.一个方法的参数列表,只能有一个可变参数<br>2.如果方法的参数有多个,那么可变参数必须写在参数列表的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型...变量名)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collections集合工具类的方法addall和shuffle"><a class="markdownIt-Anchor" href="#collections集合工具类的方法addall和shuffle"></a> Collections集合工具类的方法addAll和shuffle</h3><p><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：<br><code>public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements)</code>:往集合中添加一些元素。<br><code>public static void shuffle(List&lt;?&gt; list)</code>打乱顺序:打乱集合顺序。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Collections.addAll(list,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br><span class="line">Collections.shuffle(list);</span><br></pre></td></tr></table></figure><h3 id="collections集合工具类的方法sortlist"><a class="markdownIt-Anchor" href="#collections集合工具类的方法sortlist"></a> Collections集合工具类的方法sort(List)</h3><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p><p><code>public static&lt;T&gt; void sort(List&lt;T&gt; list)</code>:将集合中元素按照默认规则排序</p><p><code>sort(List&lt;T&gt; list)</code>使用前提<br>被排序的集合里边存储的元素,必须实现<code>Comparable</code>,重写接口中的方法<code>compareTo</code>定义排序的规则</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list01);<span class="comment">//默认是升序</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">     <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line">        <span class="comment">//重写排序的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return 0;//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">//自定义比较的规则,比较两个人的年龄(this,参数Person)</span></span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge();//年龄升序排序</span></span><br><span class="line">        <span class="comment">//年龄降序排序公式: -(o.getAge() - this.getAge())</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - <span class="keyword">this</span>.getAge();<span class="comment">//年龄升序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="collections集合工具类的方法sortlistcomparator"><a class="markdownIt-Anchor" href="#collections集合工具类的方法sortlistcomparator"></a> Collections集合工具类的方法sort(List,Comparator)</h3><p><code>java.utils.Collections</code>是集合工具类，用来对集合进行操作。部分方法如下：<br><code>public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; )</code>:将集合中元素按照指定规则排序。</p><p>Comparator:相当于找一个第三方的裁判,比较两个</p><p>Comparator的排序规则:<br>o1-o2:升序</p><p>o2 - o1 降序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Collections.sort(list01, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">    <span class="comment">//重写比较的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return o1-o2;//升序</span></span><br><span class="line">        <span class="keyword">return</span> o2-o1;<span class="comment">//降序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//扩展:了解</span></span><br><span class="line">Collections.sort(list02, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//按照年龄升序排序</span></span><br><span class="line">        <span class="keyword">int</span> result =  o1.getAge()-o2.getAge();</span><br><span class="line">        <span class="comment">//如果两个人年龄相同,再使用姓名的第一个字比较</span></span><br><span class="line">        <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">            result =  o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>  result;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;list集合排序&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#list集合排序&quot;&gt;&lt;/a&gt; list集合排序&lt;/h3&gt;
&lt;p&gt;&lt;code&gt;Collections.sort(List&amp;lt;T&amp;gt; list)&lt;/code&gt;&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
      <category term="Java总结" scheme="https://xiaowuyoucy.github.io/tags/Java%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>java_Collections集合工具类的方法_sort(List,Comparator)</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00180-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-sort-List-Comparator/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00180-Collections集合工具类的方法-sort-List-Comparator/</id>
    <published>2020-03-21T18:04:59.000Z</published>
    <updated>2020-03-21T18:10:50.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_sortlistcomparator"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_sortlistcomparator"></a> Collections集合工具类的方法_sort(List,Comparator)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; ):将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Comparator和Comparable的区别</span></span><br><span class="line"><span class="comment">        Comparable:自己(this)和别人(参数)比较,自己需要实现Comparable接口,重写比较的规则compareTo方法</span></span><br><span class="line"><span class="comment">        Comparator:相当于找一个第三方的裁判,比较两个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparator的排序规则:</span></span><br><span class="line"><span class="comment">        o1-o2:升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list01, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">//重写比较的规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//return o1-o2;//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;<span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list01);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"a迪丽热巴"</span>,<span class="number">18</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"古力娜扎"</span>,<span class="number">20</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"杨幂"</span>,<span class="number">17</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"b杨幂"</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Collections.sort(list02, new Comparator&lt;Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Student o1, Student o2) &#123;</span></span><br><span class="line"><span class="comment">                //按照年龄升序排序</span></span><br><span class="line"><span class="comment">                return o1.getAge()-o2.getAge();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩展:了解</span></span><br><span class="line">        Collections.sort(list02, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄升序排序</span></span><br><span class="line">                <span class="keyword">int</span> result =  o1.getAge()-o2.getAge();</span><br><span class="line">                <span class="comment">//如果两个人年龄相同,再使用姓名的第一个字比较</span></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">                    result =  o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>  result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_sortlistcomparator&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_sortlistcomparator&quot;&gt;&lt;/a&gt; Collections
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_Collections集合工具类的方法_sort(List)</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00179-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-sort%EF%BC%88List%EF%BC%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00179-Collections集合工具类的方法-sort（List）/</id>
    <published>2020-03-21T17:53:06.000Z</published>
    <updated>2020-03-21T18:03:47.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_sortlist"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_sortlist"></a> Collections集合工具类的方法_sort(List)</h1><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">         sort(List&lt;T&gt; list)使用前提</span></span><br><span class="line"><span class="comment">         被排序的集合里边存储的元素,必须实现Comparable,重写接口中的方法compareTo定义排序的规则</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparable接口的排序规则:</span></span><br><span class="line"><span class="comment">        自己(this)-参数:升序</span></span><br><span class="line"><span class="comment">        两个对象比较的结果有三种：大于，等于，小于。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要按照升序排序，</span></span><br><span class="line"><span class="comment">则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）</span></span><br><span class="line"><span class="comment">如果要按照降序排序</span></span><br><span class="line"><span class="comment">则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line">        Collections.sort(list01);<span class="comment">//默认是升序</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">"a"</span>);</span><br><span class="line">        list02.add(<span class="string">"c"</span>);</span><br><span class="line">        list02.add(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, c, b]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list02);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; list03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">20</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">15</span>));</span><br><span class="line">        System.out.println(list03);<span class="comment">//[Person&#123;name='张三', age=18&#125;, Person&#123;name='李四', age=20&#125;, Person&#123;name='王五', age=15&#125;]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list03);</span><br><span class="line">        System.out.println(list03);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写排序的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return 0;//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">//自定义比较的规则,比较两个人的年龄(this,参数Person)</span></span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge();//年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - <span class="keyword">this</span>.getAge();<span class="comment">//年龄升序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_sortlist&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_sortlist&quot;&gt;&lt;/a&gt; Collections集合工具类的方法_sort(List)&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_Collections集合工具类的方法_addAll和shuffle</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00178-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-addAll%E5%92%8Cshuffle/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00178-Collections集合工具类的方法-addAll和shuffle/</id>
    <published>2020-03-21T17:49:27.000Z</published>
    <updated>2020-03-21T17:50:17.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_addall和shuffle"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_addall和shuffle"></a> Collections集合工具类的方法_addAll和shuffle</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        - public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line"><span class="comment">        - public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加多个元素</span></span><br><span class="line">        <span class="comment">/*list.add("a");</span></span><br><span class="line"><span class="comment">        list.add("b");</span></span><br><span class="line"><span class="comment">        list.add("c");</span></span><br><span class="line"><span class="comment">        list.add("d");</span></span><br><span class="line"><span class="comment">        list.add("e");*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line">        Collections.addAll(list,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[b, d, c, a, e], [b, d, c, a, e]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_addall和shuffle&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_addall和shuffle&quot;&gt;&lt;/a&gt; Collections集合工具类的方法
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
