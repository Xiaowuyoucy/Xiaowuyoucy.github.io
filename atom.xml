<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>YanChen</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://xiaowuyoucy.github.io/"/>
  <updated>2020-03-21T18:10:50.461Z</updated>
  <id>https://xiaowuyoucy.github.io/</id>
  
  <author>
    <name>John Doe</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>java_Collections集合工具类的方法_sort(List,Comparator)</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00180-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-sort-List-Comparator/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00180-Collections集合工具类的方法-sort-List-Comparator/</id>
    <published>2020-03-21T18:04:59.000Z</published>
    <updated>2020-03-21T18:10:50.461Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_sortlistcomparator"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_sortlistcomparator"></a> Collections集合工具类的方法_sort(List,Comparator)</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"><span class="keyword">import</span> java.util.Comparator;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list，Comparator&lt;? super T&gt; ):将集合中元素按照指定规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">     Comparator和Comparable的区别</span></span><br><span class="line"><span class="comment">        Comparable:自己(this)和别人(参数)比较,自己需要实现Comparable接口,重写比较的规则compareTo方法</span></span><br><span class="line"><span class="comment">        Comparator:相当于找一个第三方的裁判,比较两个</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparator的排序规则:</span></span><br><span class="line"><span class="comment">        o1-o2:升序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list01, <span class="keyword">new</span> Comparator&lt;Integer&gt;() &#123;</span><br><span class="line">            <span class="comment">//重写比较的规则</span></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Integer o1, Integer o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//return o1-o2;//升序</span></span><br><span class="line">                <span class="keyword">return</span> o2-o1;<span class="comment">//降序</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list01);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Student&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"a迪丽热巴"</span>,<span class="number">18</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"古力娜扎"</span>,<span class="number">20</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"杨幂"</span>,<span class="number">17</span>));</span><br><span class="line">        list02.add(<span class="keyword">new</span> Student(<span class="string">"b杨幂"</span>,<span class="number">18</span>));</span><br><span class="line">        System.out.println(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*Collections.sort(list02, new Comparator&lt;Student&gt;() &#123;</span></span><br><span class="line"><span class="comment">            @Override</span></span><br><span class="line"><span class="comment">            public int compare(Student o1, Student o2) &#123;</span></span><br><span class="line"><span class="comment">                //按照年龄升序排序</span></span><br><span class="line"><span class="comment">                return o1.getAge()-o2.getAge();</span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">        &#125;);*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//扩展:了解</span></span><br><span class="line">        Collections.sort(list02, <span class="keyword">new</span> Comparator&lt;Student&gt;() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compare</span><span class="params">(Student o1, Student o2)</span> </span>&#123;</span><br><span class="line">                <span class="comment">//按照年龄升序排序</span></span><br><span class="line">                <span class="keyword">int</span> result =  o1.getAge()-o2.getAge();</span><br><span class="line">                <span class="comment">//如果两个人年龄相同,再使用姓名的第一个字比较</span></span><br><span class="line">                <span class="keyword">if</span>(result==<span class="number">0</span>)&#123;</span><br><span class="line">                    result =  o1.getName().charAt(<span class="number">0</span>)-o2.getName().charAt(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span>  result;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        System.out.println(list02);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Student</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Student&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_sortlistcomparator&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_sortlistcomparator&quot;&gt;&lt;/a&gt; Collections
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_Collections集合工具类的方法_sort(List)</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00179-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-sort%EF%BC%88List%EF%BC%89/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00179-Collections集合工具类的方法-sort（List）/</id>
    <published>2020-03-21T17:53:06.000Z</published>
    <updated>2020-03-21T18:03:47.641Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_sortlist"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_sortlist"></a> Collections集合工具类的方法_sort(List)</h1><p>两个对象比较的结果有三种：大于，等于，小于。</p><p>如果要按照升序排序，<br>则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）<br>如果要按照降序排序<br>则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    注意:</span></span><br><span class="line"><span class="comment">         sort(List&lt;T&gt; list)使用前提</span></span><br><span class="line"><span class="comment">         被排序的集合里边存储的元素,必须实现Comparable,重写接口中的方法compareTo定义排序的规则</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    Comparable接口的排序规则:</span></span><br><span class="line"><span class="comment">        自己(this)-参数:升序</span></span><br><span class="line"><span class="comment">        两个对象比较的结果有三种：大于，等于，小于。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">如果要按照升序排序，</span></span><br><span class="line"><span class="comment">则o1 小于o2，返回（负数），相等返回0，01大于02返回（正数）</span></span><br><span class="line"><span class="comment">如果要按照降序排序</span></span><br><span class="line"><span class="comment">则o1 小于o2，返回（正数），相等返回0，01大于02返回（负数）</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02Sort</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">3</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 3, 2]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; void sort(List&lt;T&gt; list):将集合中元素按照默认规则排序。</span></span><br><span class="line">        Collections.sort(list01);<span class="comment">//默认是升序</span></span><br><span class="line"></span><br><span class="line">        System.out.println(list01);<span class="comment">//[1, 2, 3]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">"a"</span>);</span><br><span class="line">        list02.add(<span class="string">"c"</span>);</span><br><span class="line">        list02.add(<span class="string">"b"</span>);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, c, b]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list02);</span><br><span class="line">        System.out.println(list02);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        ArrayList&lt;Person&gt; list03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"张三"</span>,<span class="number">18</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"李四"</span>,<span class="number">20</span>));</span><br><span class="line">        list03.add(<span class="keyword">new</span> Person(<span class="string">"王五"</span>,<span class="number">15</span>));</span><br><span class="line">        System.out.println(list03);<span class="comment">//[Person&#123;name='张三', age=18&#125;, Person&#123;name='李四', age=20&#125;, Person&#123;name='王五', age=15&#125;]</span></span><br><span class="line"></span><br><span class="line">        Collections.sort(list03);</span><br><span class="line">        System.out.println(list03);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">implements</span> <span class="title">Comparable</span>&lt;<span class="title">Person</span>&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//重写排序的规则</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">compareTo</span><span class="params">(Person o)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//return 0;//认为元素都是相同的</span></span><br><span class="line">        <span class="comment">//自定义比较的规则,比较两个人的年龄(this,参数Person)</span></span><br><span class="line">        <span class="comment">//return this.getAge() - o.getAge();//年龄升序排序</span></span><br><span class="line">        <span class="keyword">return</span> o.getAge() - <span class="keyword">this</span>.getAge();<span class="comment">//年龄升序排序</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_sortlist&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_sortlist&quot;&gt;&lt;/a&gt; Collections集合工具类的方法_sort(List)&lt;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_Collections集合工具类的方法_addAll和shuffle</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00178-Collections%E9%9B%86%E5%90%88%E5%B7%A5%E5%85%B7%E7%B1%BB%E7%9A%84%E6%96%B9%E6%B3%95-addAll%E5%92%8Cshuffle/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00178-Collections集合工具类的方法-addAll和shuffle/</id>
    <published>2020-03-21T17:49:27.000Z</published>
    <updated>2020-03-21T17:50:17.605Z</updated>
    
    <content type="html"><![CDATA[<h1 id="collections集合工具类的方法_addall和shuffle"><a class="markdownIt-Anchor" href="#collections集合工具类的方法_addall和shuffle"></a> Collections集合工具类的方法_addAll和shuffle</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo05.Collections;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    - java.utils.Collections是集合工具类，用来对集合进行操作。部分方法如下：</span></span><br><span class="line"><span class="comment">        - public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line"><span class="comment">        - public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01Collections</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//往集合中添加多个元素</span></span><br><span class="line">        <span class="comment">/*list.add("a");</span></span><br><span class="line"><span class="comment">        list.add("b");</span></span><br><span class="line"><span class="comment">        list.add("c");</span></span><br><span class="line"><span class="comment">        list.add("d");</span></span><br><span class="line"><span class="comment">        list.add("e");*/</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static &lt;T&gt; boolean addAll(Collection&lt;T&gt; c, T... elements):往集合中添加一些元素。</span></span><br><span class="line">        Collections.addAll(list,<span class="string">"a"</span>,<span class="string">"b"</span>,<span class="string">"c"</span>,<span class="string">"d"</span>,<span class="string">"e"</span>);</span><br><span class="line"></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, e]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public static void shuffle(List&lt;?&gt; list) 打乱顺序:打乱集合顺序。</span></span><br><span class="line">        Collections.shuffle(list);</span><br><span class="line">        System.out.println(list);<span class="comment">//[b, d, c, a, e], [b, d, c, a, e]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;collections集合工具类的方法_addall和shuffle&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#collections集合工具类的方法_addall和shuffle&quot;&gt;&lt;/a&gt; Collections集合工具类的方法
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_可变参数</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00177-%E5%8F%AF%E5%8F%98%E5%8F%82%E6%95%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00177-可变参数/</id>
    <published>2020-03-21T17:41:38.000Z</published>
    <updated>2020-03-21T17:46:02.048Z</updated>
    
    <content type="html"><![CDATA[<h3 id="可变参数"><a class="markdownIt-Anchor" href="#可变参数"></a> 可变参数:</h3><p>是JDK1.5之后出现的新特性</p><h3 id="使用前提"><a class="markdownIt-Anchor" href="#使用前提"></a> 使用前提:</h3><p>​        当方法的参数列表数据类型已经确定,但是参数的个数不确定,就可以使用可变参数.</p><h3 id="使用格式"><a class="markdownIt-Anchor" href="#使用格式"></a> 使用格式:</h3><p>定义方法时使用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">修饰符 返回值类型 方法名(数据类型...变量名)&#123;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="可变参数的原理"><a class="markdownIt-Anchor" href="#可变参数的原理"></a> 可变参数的原理:</h3><p>​        可变参数底层就是一个数组,根据传递参数个数不同,会创建不同长度的数组,来存储这些参数<br>​        传递的参数个数,可以是0个(不传递),1,2…多个</p><h3 id="可变参数的注意事项"><a class="markdownIt-Anchor" href="#可变参数的注意事项"></a> 可变参数的注意事项</h3><p>1.一个方法的参数列表,只能有一个可变参数<br>2.如果方法的参数有多个,那么可变参数必须写在参数列表的末尾</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.VarArgs;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01VarArgs</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//int i = add();</span></span><br><span class="line">        <span class="comment">//int i = add(10);</span></span><br><span class="line">        <span class="keyword">int</span> i = add(<span class="number">10</span>,<span class="number">20</span>);</span><br><span class="line">        <span class="comment">//int i = add(10,20,30,40,50,60,70,80,90,100);</span></span><br><span class="line">        System.out.println(i);</span><br><span class="line"></span><br><span class="line">        method(<span class="string">"abc"</span>,<span class="number">5.5</span>,<span class="number">10</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        可变参数的注意事项</span></span><br><span class="line"><span class="comment">            1.一个方法的参数列表,只能有一个可变参数</span></span><br><span class="line"><span class="comment">            2.如果方法的参数有多个,那么可变参数必须写在参数列表的末尾</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="comment">/*public static void method(int...a,String...b)&#123;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">/*public static void method(String b,double c,int d,int...a)&#123;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//可变参数的特殊(终极)写法</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(Object...obj)</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义计算(0-n)整数和的方法</span></span><br><span class="line"><span class="comment">        已知:计算整数的和,数据类型已经确定int</span></span><br><span class="line"><span class="comment">        但是参数的个数不确定,不知道要计算几个整数的和,就可以使用可变参数</span></span><br><span class="line"><span class="comment">        add(); 就会创建一个长度为0的数组, new int[0]</span></span><br><span class="line"><span class="comment">        add(10); 就会创建一个长度为1的数组,存储传递来过的参数 new int[]&#123;10&#125;;</span></span><br><span class="line"><span class="comment">        add(10,20); 就会创建一个长度为2的数组,存储传递来过的参数 new int[]&#123;10,20&#125;;</span></span><br><span class="line"><span class="comment">        add(10,20,30,40,50,60,70,80,90,100); 就会创建一个长度为10的数组,存储传递来过的参数 new int[]&#123;10,20,30,40,50,60,70,80,90,100&#125;;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">add</span><span class="params">(<span class="keyword">int</span>...arr)</span></span>&#123;</span><br><span class="line">        <span class="comment">//System.out.println(arr);//[I@2ac1fdc4 底层是一个数组</span></span><br><span class="line">        <span class="comment">//System.out.println(arr.length);//0,1,2,10</span></span><br><span class="line">        <span class="comment">//定义一个初始化的变量,记录累加求和</span></span><br><span class="line">        <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">        <span class="comment">//遍历数组,获取数组中的每一个元素</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">            <span class="comment">//累加求和</span></span><br><span class="line">            sum += i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//把求和结果返回</span></span><br><span class="line">        <span class="keyword">return</span> sum;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,计算三个int类型整数的和</span></span><br><span class="line">    <span class="comment">/*public static int add(int a,int b,int c)&#123;</span></span><br><span class="line"><span class="comment">        return a+b+c;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//定义一个方法,计算两个int类型整数的和</span></span><br><span class="line">    <span class="comment">/*public static int add(int a,int b)&#123;</span></span><br><span class="line"><span class="comment">        return a+b;</span></span><br><span class="line"><span class="comment">    &#125;*/</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;可变参数&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#可变参数&quot;&gt;&lt;/a&gt; 可变参数:&lt;/h3&gt;
&lt;p&gt;是JDK1.5之后出现的新特性&lt;/p&gt;
&lt;h3 id=&quot;使用前提&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; hr
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_LinkedHashSet集合</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00176-LinkedHashSet%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00176-LinkedHashSet集合/</id>
    <published>2020-03-21T17:39:08.000Z</published>
    <updated>2020-03-21T17:40:21.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="linkedhashset集合"><a class="markdownIt-Anchor" href="#linkedhashset集合"></a> LinkedHashSet集合</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"><span class="keyword">import</span> java.util.LinkedHashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.LinkedHashSet集合 extends HashSet集合</span></span><br><span class="line"><span class="comment">    LinkedHashSet集合特点:</span></span><br><span class="line"><span class="comment">        底层是一个哈希表(数组+链表/红黑树)+链表:多了一条链表(记录元素的存储顺序),保证元素有序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04LinkedHashSet</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        set.add(<span class="string">"www"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[abc, www, itcast] 无序,不允许重复</span></span><br><span class="line"></span><br><span class="line">        LinkedHashSet&lt;String&gt; linked = <span class="keyword">new</span> LinkedHashSet&lt;&gt;();</span><br><span class="line">        linked.add(<span class="string">"www"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"abc"</span>);</span><br><span class="line">        linked.add(<span class="string">"itcast"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, abc, itcast] 有序,不允许重复</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;linkedhashset集合&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#linkedhashset集合&quot;&gt;&lt;/a&gt; LinkedHashSet集合&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;tabl
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_HashSet存储自定义类型元素</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00175-HashSet%E5%AD%98%E5%82%A8%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B%E5%85%83%E7%B4%A0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00175-HashSet存储自定义类型元素/</id>
    <published>2020-03-21T17:33:26.000Z</published>
    <updated>2020-03-21T17:38:05.130Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hashset存储自定义类型元素"><a class="markdownIt-Anchor" href="#hashset存储自定义类型元素"></a> HashSet存储自定义类型元素</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    HashSet存储自定义类型元素</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    set集合报错元素唯一:</span></span><br><span class="line"><span class="comment">        存储的元素(String,Integer,...Student,Person...),必须重写hashCode方法和equals方法</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    要求:</span></span><br><span class="line"><span class="comment">        同名同年龄的人,视为同一个人,只能存储一次</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo03HashSetSavePerson</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合存储Person</span></span><br><span class="line">        HashSet&lt;Person&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">18</span>);</span><br><span class="line">        Person p3 = <span class="keyword">new</span> Person(<span class="string">"小美女"</span>,<span class="number">19</span>);</span><br><span class="line">        System.out.println(p1.hashCode());<span class="comment">//1967205423</span></span><br><span class="line">        System.out.println(p2.hashCode());<span class="comment">//42121758</span></span><br><span class="line"></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false</span></span><br><span class="line">        System.out.println(p1.equals(p2));<span class="comment">//false</span></span><br><span class="line">        set.add(p1);</span><br><span class="line">        set.add(p2);</span><br><span class="line">        set.add(p3);</span><br><span class="line">        System.out.println(set);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Objects;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">Person</span><span class="params">(String name, <span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">equals</span><span class="params">(Object o)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="keyword">this</span> == o) <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">if</span> (o == <span class="keyword">null</span> || getClass() != o.getClass()) <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        Person person = (Person) o;</span><br><span class="line">        <span class="keyword">return</span> age == person.age &amp;&amp;</span><br><span class="line">                Objects.equals(name, person.name);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Objects.hash(name, age);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"Person&#123;"</span> +</span><br><span class="line">                <span class="string">"name='"</span> + name + <span class="string">'\''</span> +</span><br><span class="line">                <span class="string">", age="</span> + age +</span><br><span class="line">                <span class="string">'&#125;'</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(<span class="keyword">int</span> age)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hashset存储自定义类型元素&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hashset存储自定义类型元素&quot;&gt;&lt;/a&gt; HashSet存储自定义类型元素&lt;/h1&gt;
&lt;figure class=&quot;highlight java&quot;&gt;&lt;t
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_Set集合存储元素不重复的原理</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00174-Set%E9%9B%86%E5%90%88%E5%AD%98%E5%82%A8%E5%85%83%E7%B4%A0%E4%B8%8D%E9%87%8D%E5%A4%8D%E7%9A%84%E5%8E%9F%E7%90%86/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00174-Set集合存储元素不重复的原理/</id>
    <published>2020-03-21T17:28:15.000Z</published>
    <updated>2020-03-21T17:29:47.228Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo02.Set;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashSet;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    Set集合不允许存储重复元素的原理</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02HashSetSaveString</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建HashSet集合对象</span></span><br><span class="line">        HashSet&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        set.add(s1);</span><br><span class="line">        set.add(s2);</span><br><span class="line">        set.add(<span class="string">"重地"</span>);</span><br><span class="line">        set.add(<span class="string">"通话"</span>);</span><br><span class="line">        set.add(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(set);<span class="comment">//[重地, 通话, abc]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br><br></p><p><img src="/images/javawz/1584811719822.png" alt="1584811719822"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_哈希值</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00173-%E5%93%88%E5%B8%8C%E5%80%BC/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00173-哈希值/</id>
    <published>2020-03-21T17:14:47.000Z</published>
    <updated>2020-03-21T17:24:18.915Z</updated>
    
    <content type="html"><![CDATA[<p>什么是哈希表呢？</p><p><img src="/images/javawz/1584811451031.png" alt="1584811451031"></p><p>在<strong>JDK1.8</strong>之前，哈希表底层采用数组+链表实现，即使用链表处理冲突，同一hash值的链表都存储在一个链表里。但是当位于一个桶中的元素较多，即hash值相等的元素较多时，通过key值依次查找的效率较低。而JDK1.8中，哈希表存储采用数组+链表+红黑树实现，当链表长度超过阈值（8）时，将链表转换为红黑树，这样大大减少了查找时间。</p><p>简单的来说，哈希表是由数组+链表+红黑树（JDK1.8增加了红黑树部分）实现的，如下图所示。<img src="/images/javawz/%E5%93%88%E5%B8%8C%E8%A1%A8.png" alt></p><p>看到这张图就有人要问了，这个是怎么存储的呢？</p><p>为了方便大家的理解我们结合一个存储流程图来说明一下：</p><p><img src="/images/javawz/%E5%93%88%E5%B8%8C%E6%B5%81%E7%A8%8B%E5%9B%BE.png" alt></p><p>总而言之，<strong>JDK1.8</strong>引入红黑树大程度优化了HashMap的性能，那么对于我们来讲保证HashSet集合元素的唯一，其实就是根据对象的hashCode和equals方法来决定的。如果我们往集合中存放自定义的对象，那么保证其唯一，就必须复写hashCode和equals方法建立属于当前对象的比较方式。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.hashCode;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    哈希值:是一个十进制的整数,由系统随机给出(就是对象的地址值,是一个逻辑地址,是模拟出来得到地址,不是数据实际存储的物理地址)</span></span><br><span class="line"><span class="comment">    在Object类有一个方法,可以获取对象的哈希值</span></span><br><span class="line"><span class="comment">    int hashCode() 返回该对象的哈希码值。</span></span><br><span class="line"><span class="comment">    hashCode方法的源码:</span></span><br><span class="line"><span class="comment">        public native int hashCode();</span></span><br><span class="line"><span class="comment">        native:代表该方法调用的是本地操作系统的方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01HashCode</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//Person类继承了Object类,所以可以使用Object类的hashCode方法</span></span><br><span class="line">        Person p1 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h1 = p1.hashCode();</span><br><span class="line">        System.out.println(h1);<span class="comment">//1967205423  | 1</span></span><br><span class="line"></span><br><span class="line">        Person p2 = <span class="keyword">new</span> Person();</span><br><span class="line">        <span class="keyword">int</span> h2 = p2.hashCode();</span><br><span class="line">        System.out.println(h2);<span class="comment">//42121758   |  1</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            toString方法的源码:</span></span><br><span class="line"><span class="comment">                return getClass().getName() + "@" + Integer.toHexString(hashCode());</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        System.out.println(p1);<span class="comment">//com.itheima.demo03.hashCode.Person@75412c2f</span></span><br><span class="line">        System.out.println(p2);<span class="comment">//com.itheima.demo03.hashCode.Person@282ba1e</span></span><br><span class="line">        System.out.println(p1==p2);<span class="comment">//false</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            String类的哈希值</span></span><br><span class="line"><span class="comment">                String类重写Obejct类的hashCode方法</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        String s1 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        String s2 = <span class="keyword">new</span> String(<span class="string">"abc"</span>);</span><br><span class="line">        System.out.println(s1.hashCode());<span class="comment">//96354</span></span><br><span class="line">        System.out.println(s2.hashCode());<span class="comment">//96354</span></span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">"重地"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">        System.out.println(<span class="string">"通话"</span>.hashCode());<span class="comment">//1179395</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.hashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Person</span> <span class="keyword">extends</span>  <span class="title">Object</span></span>&#123;</span><br><span class="line">    <span class="comment">//重写hashCode方法</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">hashCode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span>  <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;什么是哈希表呢？&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584811451031.png&quot; alt=&quot;1584811451031&quot;&gt;&lt;/p&gt;
&lt;p&gt;在&lt;strong&gt;JDK1.8&lt;/strong&gt;之前，哈希表底层采用数组+链表实现，即使用链表处理
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_HashSet集合介绍</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00172-HashSet%E9%9B%86%E5%90%88%E4%BB%8B%E7%BB%8D/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00172-HashSet集合介绍/</id>
    <published>2020-03-21T17:12:33.000Z</published>
    <updated>2020-03-21T17:13:04.475Z</updated>
    
    <content type="html"><![CDATA[<h1 id="hashset集合介绍"><a class="markdownIt-Anchor" href="#hashset集合介绍"></a> HashSet集合介绍</h1><p><code>java.util.HashSet</code>是<code>Set</code>接口的一个实现类，它所存储的元素是不可重复的，并且元素都是无序的(即存取顺序不一致)。<code>java.util.HashSet</code>底层的实现其实是一个<code>java.util.HashMap</code>支持，由于我们暂时还未学习，先做了解。</p><p><code>HashSet</code>是根据对象的哈希值来确定元素在集合中的存储位置，因此具有良好的存取和查找性能。保证元素唯一性的方式依赖于：<code>hashCode</code>与<code>equals</code>方法。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;hashset集合介绍&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#hashset集合介绍&quot;&gt;&lt;/a&gt; HashSet集合介绍&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;java.util.HashSet&lt;/code&gt;是&lt;code&gt;Set&lt;/cod
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_LinkedList集合</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00171-LinkedList%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00171-LinkedList集合/</id>
    <published>2020-03-21T16:28:37.000Z</published>
    <updated>2020-03-21T17:22:11.658Z</updated>
    
    <content type="html"><![CDATA[<p><code>java.util.LinkedList</code>集合数据存储的结构是链表结构。方便元素添加、删除的集合。</p><p><code>LinkedList</code>是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下</p><p><img src="/images/javawz/%E5%8F%8C%E5%90%91%E9%93%BE%E8%A1%A8.png" alt></p><p>实际开发中对一个集合元素的添加与删除经常涉及到首尾操作，而LinkedList提供了大量首尾操作的方法。这些方法我们作为了解即可：</p><p>  <code>public void addFirst(E e)</code>:将指定元素插入此列表的开头。</p><p>  <code>public void addLast(E e)</code>:将指定元素添加到此列表的结尾。</p><p>  <code>public E getFirst()</code>:返回此列表的第一个元素。</p><p>  <code>public E getLast()</code>:返回此列表的最后一个元素。</p><p>  <code>public E removeFirst()</code>:移除并返回此列表的第一个元素。</p><p>  <code>public E removeLast()</code>:移除并返回此列表的最后一个元素。</p><p>  <code>public E pop()</code>:从此列表所表示的堆栈处弹出一个元素。</p><p>  <code>public void push(E e)</code>:将元素推入此列表所表示的堆栈。</p><p>  <code>public boolean isEmpty()</code>：如果列表不包含元素，则返回true。</p><p>  <code>public E remove(int index)</code> 移除此列表中指定位置处的元素。将任何后续元素向左移（从索引中减 1）。返回从列表中删除的元素。</p><hr>LinkedList是List的子类，List中的方法LinkedList都是可以使用。在开发时，LinkedList集合也可以作为堆栈，队列的结构使用。（了解即可）<figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.LinkedList;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    java.util.LinkedList集合 implements List接口</span></span><br><span class="line"><span class="comment">    LinkedList集合的特点:</span></span><br><span class="line"><span class="comment">        1.底层是一个链表结构:查询慢,增删快</span></span><br><span class="line"><span class="comment">        2.里边包含了大量操作首尾元素的方法</span></span><br><span class="line"><span class="comment">        注意:使用LinkedList集合特有的方法,不能使用多态</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line"><span class="comment">        - public void addLast(E e):将指定元素添加到此列表的结尾。</span></span><br><span class="line"><span class="comment">        - public void push(E e):将元素推入此列表所表示的堆栈。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public E getFirst():返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E getLast():返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public E removeFirst():移除并返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E removeLast():移除并返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">        - public E pop():从此列表所表示的堆栈处弹出一个元素。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">        - public boolean isEmpty()：如果列表不包含元素，则返回true。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo02LinkedList</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        show03();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public E removeFirst():移除并返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E removeLast():移除并返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">        - public E pop():从此列表所表示的堆栈处弹出一个元素。此方法相当于 removeFirst</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show03</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">"a"</span>);</span><br><span class="line">        linked.add(<span class="string">"b"</span>);</span><br><span class="line">        linked.add(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//String first = linked.removeFirst();</span></span><br><span class="line">        String first = linked.pop();</span><br><span class="line">        System.out.println(<span class="string">"被移除的第一个元素:"</span>+first);</span><br><span class="line">        String last = linked.removeLast();</span><br><span class="line">        System.out.println(<span class="string">"被移除的最后一个元素:"</span>+last);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[b]</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public E getFirst():返回此列表的第一个元素。</span></span><br><span class="line"><span class="comment">        - public E getLast():返回此列表的最后一个元素。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show02</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">"a"</span>);</span><br><span class="line">        linked.add(<span class="string">"b"</span>);</span><br><span class="line">        linked.add(<span class="string">"c"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//linked.clear();//清空集合中的元素 在获取集合中的元素会抛出NoSuchElementException</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public boolean isEmpty()：如果列表不包含元素，则返回true。</span></span><br><span class="line">        <span class="keyword">if</span>(!linked.isEmpty())&#123;</span><br><span class="line">            String first = linked.getFirst();</span><br><span class="line">            System.out.println(first);<span class="comment">//a</span></span><br><span class="line">            String last = linked.getLast();</span><br><span class="line">            System.out.println(last);<span class="comment">//c</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        - public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line"><span class="comment">        - public void addLast(E e):将指定元素添加到此列表的结尾。</span></span><br><span class="line"><span class="comment">        - public void push(E e):将元素推入此列表所表示的堆栈。此方法等效于 addFirst(E)。</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">show01</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建LinkedList集合对象</span></span><br><span class="line">        LinkedList&lt;String&gt; linked = <span class="keyword">new</span> LinkedList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        linked.add(<span class="string">"a"</span>);</span><br><span class="line">        linked.add(<span class="string">"b"</span>);</span><br><span class="line">        linked.add(<span class="string">"c"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void addFirst(E e):将指定元素插入此列表的开头。</span></span><br><span class="line">        <span class="comment">//linked.addFirst("www");</span></span><br><span class="line">        linked.push(<span class="string">"www"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void addLast(E e):将指定元素添加到此列表的结尾。此方法等效于 add()</span></span><br><span class="line">        linked.addLast(<span class="string">"com"</span>);</span><br><span class="line">        System.out.println(linked);<span class="comment">//[www, a, b, c, com]</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;code&gt;java.util.LinkedList&lt;/code&gt;集合数据存储的结构是链表结构。方便元素添加、删除的集合。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;LinkedList&lt;/code&gt;是一个双向链表，那么双向链表是什么样子的呢，我们用个图了解下&lt;/p&gt;
&lt;p&gt;&lt;img sr
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_ArrayList集合</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00170-ArrayList%E9%9B%86%E5%90%88/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00170-ArrayList集合/</id>
    <published>2020-03-21T16:21:14.000Z</published>
    <updated>2020-03-21T16:23:07.401Z</updated>
    
    <content type="html"><![CDATA[<h1 id="arraylist集合"><a class="markdownIt-Anchor" href="#arraylist集合"></a> ArrayList集合</h1><p><code>java.util.ArrayList</code>集合数据<code>存储的结构是数组结构</code>。元素增删慢，查找快，由于日常开发中使用最多的功能为查询数据、遍历数据，所以<code>ArrayList</code>是最常用的集合。</p><p>许多程序员开发时非常随意地使用<code>ArrayList</code>完成任何需求，并不严谨，这种用法是不提倡的。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;arraylist集合&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#arraylist集合&quot;&gt;&lt;/a&gt; ArrayList集合&lt;/h1&gt;
&lt;p&gt;&lt;code&gt;java.util.ArrayList&lt;/code&gt;集合数据&lt;code&gt;存储的
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java_List集合介绍和常用方法</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00169-List%E9%9B%86%E5%90%88%E4%BB%8B%E7%BB%8D%E5%92%8C%E5%B8%B8%E7%94%A8%E6%96%B9%E6%B3%95/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00169-List集合介绍和常用方法/</id>
    <published>2020-03-21T16:09:51.000Z</published>
    <updated>2020-03-21T16:11:24.330Z</updated>
    
    <content type="html"><![CDATA[<p>java.util.List接口 extends Collection接口<br>List接口的特点:<br>1.有序的集合,存储元素和取出元素的顺序是一致的(存储123 取出123)<br>2.有索引,包含了一些带索引的方法<br>3.允许存储重复的元素</p><p>List接口中带索引的方法(特有)</p><p>public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上。</p><p>public E get(int index):返回集合中指定位置的元素。</p><p>public E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。</p><p>public E set(int index, E element):用指定元素替换集合中指定位置的元素,返回值的更新前的元素。<br>注意:<br>操作索引的时候,一定要防止索引越界异常<br>IndexOutOfBoundsException:索引越界异常,集合会报<br>ArrayIndexOutOfBoundsException:数组索引越界异常<br>StringIndexOutOfBoundsException:字符串索引越界异常</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo01.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo01List</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建一个List集合对象,多态</span></span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//使用add方法往集合中添加元素</span></span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        list.add(<span class="string">"b"</span>);</span><br><span class="line">        list.add(<span class="string">"c"</span>);</span><br><span class="line">        list.add(<span class="string">"d"</span>);</span><br><span class="line">        list.add(<span class="string">"a"</span>);</span><br><span class="line">        <span class="comment">//打印集合</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, c, d, a]  不是地址重写了toString</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public void add(int index, E element): 将指定的元素，添加到该集合中的指定位置上。</span></span><br><span class="line">        <span class="comment">//在c和d之间添加一个itheima</span></span><br><span class="line">        list.add(<span class="number">3</span>,<span class="string">"itheima"</span>);<span class="comment">//[a, b, c, itheima, d, a]</span></span><br><span class="line">        System.out.println(list);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E remove(int index): 移除列表中指定位置的元素, 返回的是被移除的元素。</span></span><br><span class="line">        <span class="comment">//移除元素</span></span><br><span class="line">        String removeE = list.remove(<span class="number">2</span>);</span><br><span class="line">        System.out.println(<span class="string">"被移除的元素:"</span>+removeE);<span class="comment">//被移除的元素:c</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, a]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//public E set(int index, E element):用指定元素替换集合中指定位置的元素,返回值的更新前的元素。</span></span><br><span class="line">        <span class="comment">//把最后一个a,替换为A</span></span><br><span class="line">        String setE = list.set(<span class="number">4</span>, <span class="string">"A"</span>);</span><br><span class="line">        System.out.println(<span class="string">"被替换的元素:"</span>+setE);<span class="comment">//被替换的元素:a</span></span><br><span class="line">        System.out.println(list);<span class="comment">//[a, b, itheima, d, A]</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//List集合遍历有3种方式</span></span><br><span class="line">        <span class="comment">//使用普通的for循环</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;list.size(); i++)&#123;</span><br><span class="line">            <span class="comment">//public E get(int index):返回集合中指定位置的元素。</span></span><br><span class="line">            String s = list.get(i);</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//使用迭代器</span></span><br><span class="line">        Iterator&lt;String&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            String s = it.next();</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println(<span class="string">"-----------------"</span>);</span><br><span class="line">        <span class="comment">//使用增强for</span></span><br><span class="line">        <span class="keyword">for</span> (String s : list) &#123;</span><br><span class="line">            System.out.println(s);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        String r = list.get(<span class="number">5</span>);<span class="comment">//IndexOutOfBoundsException: Index 5 out-of-bounds for length 5</span></span><br><span class="line">        System.out.println(r);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;java.util.List接口 extends Collection接口&lt;br&gt;
List接口的特点:&lt;br&gt;
1.有序的集合,存储元素和取出元素的顺序是一致的(存储123 取出123)&lt;br&gt;
2.有索引,包含了一些带索引的方法&lt;br&gt;
3.允许存储重复的元素&lt;/p&gt;

      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java数据结构_红黑树</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/22/java00168%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E7%BA%A2%E9%BB%91%E6%A0%91/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/22/java00168数据结构-红黑树/</id>
    <published>2020-03-21T16:06:51.000Z</published>
    <updated>2020-03-21T16:07:20.394Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构_红黑树"><a class="markdownIt-Anchor" href="#数据结构_红黑树"></a> 数据结构_红黑树</h1><p><img src="/images/javawz/1584806821309.png" alt="1584806821309"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构_红黑树&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据结构_红黑树&quot;&gt;&lt;/a&gt; 数据结构_红黑树&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584806821309.png&quot; alt=&quot;15848
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java数据结构_链表</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/21/java00167%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%93%BE%E8%A1%A8/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/21/java00167数据结构-链表/</id>
    <published>2020-03-21T15:31:33.000Z</published>
    <updated>2020-03-21T16:05:41.456Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数据结构_链表"><a class="markdownIt-Anchor" href="#数据结构_链表"></a> 数据结构_链表</h1><p><img src="/images/javawz/1584804703003.png" alt="1584804703003"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数据结构_链表&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数据结构_链表&quot;&gt;&lt;/a&gt; 数据结构_链表&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584804703003.png&quot; alt=&quot;15848047
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java数据结构_数组</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/21/java00166%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%95%B0%E7%BB%84/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/21/java00166数据结构-数组/</id>
    <published>2020-03-21T15:26:58.000Z</published>
    <updated>2020-03-21T15:28:17.701Z</updated>
    
    <content type="html"><![CDATA[<h1 id="数组-数据结构"><a class="markdownIt-Anchor" href="#数组-数据结构"></a> 数组 数据结构</h1><p><img src="/images/javawz/1584804430021.png" alt="1584804430021"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;数组-数据结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#数组-数据结构&quot;&gt;&lt;/a&gt; 数组 数据结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584804430021.png&quot; alt=&quot;15848044
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java数据结构_队列</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/21/java00165%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E9%98%9F%E5%88%97/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/21/java00165数据结构-队列/</id>
    <published>2020-03-21T15:23:40.000Z</published>
    <updated>2020-03-22T05:10:23.704Z</updated>
    
    <content type="html"><![CDATA[<h1 id="队列数据结构"><a class="markdownIt-Anchor" href="#队列数据结构"></a> 队列数据结构</h1><p><img src="/images/javawz/1584804229560.png" alt="1584804229560"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;队列数据结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#队列数据结构&quot;&gt;&lt;/a&gt; 队列数据结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584804229560.png&quot; alt=&quot;15848042295
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java数据结构_栈</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/21/java00164%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84-%E6%A0%88/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/21/java00164数据结构-栈/</id>
    <published>2020-03-21T15:18:15.000Z</published>
    <updated>2020-03-21T15:20:43.559Z</updated>
    
    <content type="html"><![CDATA[<h1 id="栈数据结构"><a class="markdownIt-Anchor" href="#栈数据结构"></a> 栈数据结构</h1><p><img src="/images/javawz/1584804015013.png" alt="1584804015013"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;栈数据结构&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#栈数据结构&quot;&gt;&lt;/a&gt; 栈数据结构&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/1584804015013.png&quot; alt=&quot;1584804015013&quot;
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>斗地主案例的需求分析和代码实现</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00163%E6%96%97%E5%9C%B0%E4%B8%BB%E6%A1%88%E4%BE%8B%E7%9A%84%E9%9C%80%E6%B1%82%E5%88%86%E6%9E%90%E5%92%8C%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00163斗地主案例的需求分析和代码实现/</id>
    <published>2020-03-16T03:49:07.000Z</published>
    <updated>2020-03-16T03:51:45.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="斗地主案例的需求分析和代码实现"><a class="markdownIt-Anchor" href="#斗地主案例的需求分析和代码实现"></a> 斗地主案例的需求分析和代码实现</h1><p><img src="/images/javawz/1584330604545.png" alt="1584330604545"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo04.Test;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collections;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    斗地主综合案例:</span></span><br><span class="line"><span class="comment">        1.准备牌</span></span><br><span class="line"><span class="comment">        2.洗牌</span></span><br><span class="line"><span class="comment">        3.发牌</span></span><br><span class="line"><span class="comment">        4.看牌</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DouDiZhu</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//1.准备牌</span></span><br><span class="line">        <span class="comment">//定义一个存储54张牌的ArrayList集合,泛型使用String</span></span><br><span class="line">        ArrayList&lt;String&gt; poker = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        <span class="comment">//定义两个数组,一个数组存储牌的花色,一个数组存储牌的序号</span></span><br><span class="line">        String[] colors = &#123;<span class="string">"♠"</span>,<span class="string">"♥"</span>,<span class="string">"♣"</span>,<span class="string">"♦"</span>&#125;;</span><br><span class="line">        String[] numbers = &#123;<span class="string">"2"</span>,<span class="string">"A"</span>,<span class="string">"K"</span>,<span class="string">"Q"</span>,<span class="string">"J"</span>,<span class="string">"10"</span>,<span class="string">"9"</span>,<span class="string">"8"</span>,<span class="string">"7"</span>,<span class="string">"6"</span>,<span class="string">"5"</span>,<span class="string">"4"</span>,<span class="string">"3"</span>&#125;;</span><br><span class="line">        <span class="comment">//先把大王和小王存储到poker集合中</span></span><br><span class="line">        poker.add(<span class="string">"大王"</span>);</span><br><span class="line">        poker.add(<span class="string">"小王"</span>);</span><br><span class="line">        <span class="comment">//循环嵌套遍历两个数组,组装52张牌</span></span><br><span class="line">        <span class="keyword">for</span>(String number : numbers)&#123;</span><br><span class="line">            <span class="keyword">for</span> (String color : colors) &#123;</span><br><span class="line">                <span class="comment">//System.out.println(color+number);</span></span><br><span class="line">                <span class="comment">//把组装好的牌存储到poker集合中</span></span><br><span class="line">                poker.add(color+number);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//System.out.println(poker);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            2.洗牌</span></span><br><span class="line"><span class="comment">            使用集合的工具类Collections中的方法</span></span><br><span class="line"><span class="comment">            static void shuffle(List&lt;?&gt; list) 使用默认随机源对指定列表进行置换。</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        Collections.shuffle(poker);</span><br><span class="line">        <span class="comment">//System.out.println(poker);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            3.发牌</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="comment">//定义4个集合,存储玩家的牌和底牌</span></span><br><span class="line">        ArrayList&lt;String&gt; player01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; player03 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        ArrayList&lt;String&gt; diPai = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            遍历poker集合,获取每一张牌</span></span><br><span class="line"><span class="comment">            使用poker集合的索引%3给3个玩家轮流发牌</span></span><br><span class="line"><span class="comment">            剩余3张牌给底牌</span></span><br><span class="line"><span class="comment">            注意:</span></span><br><span class="line"><span class="comment">                先判断底牌(i&gt;=51),否则牌就发没了</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; poker.size() ; i++) &#123;</span><br><span class="line">            <span class="comment">//获取每一张牌</span></span><br><span class="line">            String p = poker.get(i);</span><br><span class="line">            <span class="comment">//轮流发牌</span></span><br><span class="line">            <span class="keyword">if</span>(i&gt;=<span class="number">51</span>)&#123;</span><br><span class="line">                <span class="comment">//给底牌发牌</span></span><br><span class="line">                diPai.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">0</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家1发牌</span></span><br><span class="line">                player01.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">1</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家2发牌</span></span><br><span class="line">                player02.add(p);</span><br><span class="line">            &#125;<span class="keyword">else</span> <span class="keyword">if</span>(i%<span class="number">3</span>==<span class="number">2</span>)&#123;</span><br><span class="line">                <span class="comment">//给玩家3发牌</span></span><br><span class="line">                player03.add(p);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.看牌</span></span><br><span class="line">        System.out.println(<span class="string">"刘德华:"</span>+player01);</span><br><span class="line">        System.out.println(<span class="string">"周润发:"</span>+player02);</span><br><span class="line">        System.out.println(<span class="string">"周星驰:"</span>+player03);</span><br><span class="line">        System.out.println(<span class="string">"底牌:"</span>+diPai);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;斗地主案例的需求分析和代码实现&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#斗地主案例的需求分析和代码实现&quot;&gt;&lt;/a&gt; 斗地主案例的需求分析和代码实现&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/images/javawz/15843306
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java泛型通配符</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00162%E6%B3%9B%E5%9E%8B%E9%80%9A%E9%85%8D%E7%AC%A6/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00162泛型通配符/</id>
    <published>2020-03-16T03:38:57.000Z</published>
    <updated>2020-03-28T05:33:16.739Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java泛型通配符"><a class="markdownIt-Anchor" href="#java泛型通配符"></a> java泛型通配符</h1><p>当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&lt;?&gt;表示。但是一旦使用泛型的通配符后，只能使用Object类中的共性方法，集合中元素自身方法无法使用。</p><h4 id="通配符基本使用"><a class="markdownIt-Anchor" href="#通配符基本使用"></a> 通配符基本使用</h4><p>泛型的通配符:<strong>不知道使用什么类型来接收的时候,此时可以使用?,?表示未知通配符。</strong></p><p>此时只能接受数据,不能往该集合中存储数据。</p><h3 id="泛型的通配符"><a class="markdownIt-Anchor" href="#泛型的通配符"></a> 泛型的通配符:</h3><p><code>?</code>:代表任意的数据类型</p><h3 id="使用方式"><a class="markdownIt-Anchor" href="#使用方式"></a> 使用方式:</h3><p>不能创建对象使用<br>只能作为方法的参数使用</p><h3 id="泛型的上限"><a class="markdownIt-Anchor" href="#泛型的上限"></a> <strong>泛型的上限</strong>：</h3><p><strong>格式</strong>：<code>类型名称 &lt;? extends 类 &gt; 对象名称</code></p><p><strong>意义：</strong> <code>只能接收该类型及其子类</code></p><h3 id="泛型的下限"><a class="markdownIt-Anchor" href="#泛型的下限"></a> <strong>泛型的下限</strong>：</h3><p><strong>格式</strong>： <code>类型名称 &lt;? super 类 &gt; 对象名称</code></p><p><strong>意义</strong>： <code>只能接收该类型及其父类型</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo05Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        ArrayList&lt;Integer&gt; list01 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list01.add(<span class="number">1</span>);</span><br><span class="line">        list01.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">        ArrayList&lt;String&gt; list02 = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">        list02.add(<span class="string">"a"</span>);</span><br><span class="line">        list02.add(<span class="string">"b"</span>);</span><br><span class="line"></span><br><span class="line">        printArray(list01);</span><br><span class="line">        printArray(list02);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//ArrayList&lt;?&gt; list03 = new ArrayList&lt;?&gt;();</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">        定义一个方法,能遍历所有类型的ArrayList集合</span></span><br><span class="line"><span class="comment">        这时候我们不知道ArrayList集合使用什么数据类型,可以泛型的通配符?来接收数据类型</span></span><br><span class="line"><span class="comment">        注意:</span></span><br><span class="line"><span class="comment">            泛型没有继承概念的</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            //报错</span></span><br><span class="line"><span class="comment">            public static void printArray(ArrayList&lt;Object&gt; list)&#123;</span></span><br><span class="line"><span class="comment">            </span></span><br><span class="line"><span class="comment">            &#125;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">//如果尖括号中写Integer,printArray(list02);会报错</span></span><br><span class="line">    <span class="comment">//如果尖括号中写String,printArray(list01);会报错</span></span><br><span class="line">    <span class="comment">//所有我们使用泛型通配符</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">printArray</span><span class="params">(ArrayList&lt;?&gt; list)</span></span>&#123;</span><br><span class="line">        <span class="comment">//使用迭代器遍历集合</span></span><br><span class="line">        Iterator&lt;?&gt; it = list.iterator();</span><br><span class="line">        <span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">            <span class="comment">//it.next()方法,取出的元素是Object,可以接收任意的数据类型</span></span><br><span class="line">            Object o = it.next();</span><br><span class="line">            System.out.println(o);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Collection;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    泛型的上限限定: ? extends E  代表使用的泛型只能是E类型的子类/本身</span></span><br><span class="line"><span class="comment">    泛型的下限限定: ? super E    代表使用的泛型只能是E类型的父类/本身</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo06Generic</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        Collection&lt;Integer&gt; list1 = <span class="keyword">new</span> ArrayList&lt;Integer&gt;();</span><br><span class="line">        Collection&lt;String&gt; list2 = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        Collection&lt;Number&gt; list3 = <span class="keyword">new</span> ArrayList&lt;Number&gt;();</span><br><span class="line">        Collection&lt;Object&gt; list4 = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line"></span><br><span class="line">        getElement1(list1);</span><br><span class="line">        <span class="comment">//getElement1(list2);//报错</span></span><br><span class="line">        getElement1(list3);</span><br><span class="line">        <span class="comment">//getElement1(list4);//报错</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//getElement2(list1);//报错</span></span><br><span class="line">        <span class="comment">//getElement2(list2);//报错</span></span><br><span class="line">        getElement2(list3);</span><br><span class="line">        getElement2(list4);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">            类与类之间的继承关系</span></span><br><span class="line"><span class="comment">            Integer extends Number extends Object</span></span><br><span class="line"><span class="comment">            String extends Object</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 泛型的上限：此时的泛型?，必须是Number类型或者Number类型的子类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement1</span><span class="params">(Collection&lt;? extends Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">    <span class="comment">// 泛型的下限：此时的泛型?，必须是Number类型或者Number类型的父类</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">getElement2</span><span class="params">(Collection&lt;? <span class="keyword">super</span> Number&gt; coll)</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java泛型通配符&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java泛型通配符&quot;&gt;&lt;/a&gt; java泛型通配符&lt;/h1&gt;
&lt;p&gt;当使用泛型类或者接口时，传递的数据中，泛型类型不确定，可以通过通配符&amp;lt;?&amp;gt;表示。但是一旦使
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
  <entry>
    <title>java定义和使用含有泛型的接口</title>
    <link href="https://xiaowuyoucy.github.io/2020/03/16/java00161%E5%AE%9A%E4%B9%89%E5%92%8C%E4%BD%BF%E7%94%A8%E5%90%AB%E6%9C%89%E6%B3%9B%E5%9E%8B%E7%9A%84%E6%8E%A5%E5%8F%A3/"/>
    <id>https://xiaowuyoucy.github.io/2020/03/16/java00161定义和使用含有泛型的接口/</id>
    <published>2020-03-16T03:30:48.000Z</published>
    <updated>2020-03-16T03:36:58.757Z</updated>
    
    <content type="html"><![CDATA[<h1 id="java定义和使用含有泛型的接口"><a class="markdownIt-Anchor" href="#java定义和使用含有泛型的接口"></a> java定义和使用含有泛型的接口</h1><h3 id="定义格式"><a class="markdownIt-Anchor" href="#定义格式"></a> 定义格式：</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">修饰符 <span class="class"><span class="keyword">interface</span> 接口名&lt;代表泛型的变量&gt; </span>&#123; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    测试含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Demo04GenericInterface</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl1对象</span></span><br><span class="line">        GenericInterfaceImpl1 gi1 = <span class="keyword">new</span> GenericInterfaceImpl1();</span><br><span class="line">        gi1.method(<span class="string">"字符串"</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//创建GenericInterfaceImpl2对象</span></span><br><span class="line">        GenericInterfaceImpl2&lt;Integer&gt; gi2 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi2.method(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">        GenericInterfaceImpl2&lt;Double&gt; gi3 = <span class="keyword">new</span> GenericInterfaceImpl2&lt;&gt;();</span><br><span class="line">        gi3.method(<span class="number">8.8</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口,第一种使用方式:定义接口的实现类,实现接口,指定接口的泛型</span></span><br><span class="line"><span class="comment">    public interface Iterator&lt;E&gt; &#123;</span></span><br><span class="line"><span class="comment">        E next();</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    Scanner类实现了Iterator接口,并指定接口的泛型为String,所以重写的next方法泛型默认就是String</span></span><br><span class="line"><span class="comment">    public final class Scanner implements Iterator&lt;String&gt;&#123;</span></span><br><span class="line"><span class="comment">        public String next() &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl1</span> <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">String</span>&gt;</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">        System.out.println(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    定义含有泛型的接口</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.demo03.Generic;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">    含有泛型的接口第二种使用方式:接口使用什么泛型,实现类就使用什么泛型,类跟着接口走</span></span><br><span class="line"><span class="comment">    就相当于定义了一个含有泛型的类,创建对象的时候确定泛型的类型</span></span><br><span class="line"><span class="comment">    public interface List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        boolean add(E e);</span></span><br><span class="line"><span class="comment">        E get(int index);</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment">    public class ArrayList&lt;E&gt; implements List&lt;E&gt;&#123;</span></span><br><span class="line"><span class="comment">        public boolean add(E e) &#123;&#125;</span></span><br><span class="line"><span class="comment">        public E get(int index) &#123;&#125;</span></span><br><span class="line"><span class="comment">    &#125;</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GenericInterfaceImpl2</span>&lt;<span class="title">I</span>&gt; <span class="keyword">implements</span> <span class="title">GenericInterface</span>&lt;<span class="title">I</span>&gt; </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">method</span><span class="params">(I i)</span> </span>&#123;</span><br><span class="line">        System.out.println(i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;java定义和使用含有泛型的接口&quot;&gt;&lt;a class=&quot;markdownIt-Anchor&quot; href=&quot;#java定义和使用含有泛型的接口&quot;&gt;&lt;/a&gt; java定义和使用含有泛型的接口&lt;/h1&gt;
&lt;h3 id=&quot;定义格式&quot;&gt;&lt;a class=&quot;markdownI
      
    
    </summary>
    
      <category term="Java" scheme="https://xiaowuyoucy.github.io/categories/Java/"/>
    
    
  </entry>
  
</feed>
